
.. backlink:

:mod:`single_cell_parser` ❭ :mod:`~single_cell_parser.cell_modify_functions` ❭ :mod:`~single_cell_parser.cell_modify_functions.synaptic_input` ❭ :mod:`~single_cell_parser.cell_modify_functions.synaptic_input.synaptic_input`


.. title:

synaptic_input
==============


.. py:function:: single_cell_parser.cell_modify_functions.synaptic_input.synaptic_input(cell, network_param=None, synapse_activation_file=None, tStop=None)

   Add synaptic activations to the cell from a network.

   :Parameters: * **cell** (:py:class:`~single\_cell\_parser.cell.Cell`) -- The cell object.
                * **network\_param** (str | dict | :py:class:`~single\_cell\_parser.parameters.ParameterSet`) -- The :ref:`network\_parameters\_format`.
                * **synapse\_activation\_file** (*str, optional*) -- The :ref:`syn\_activation\_format` file with existing synapse activations.
                  If None, synapse activations are generated from scratch using :py:meth:`~single\_cell\_parser.network.NetworkMapper.create\_saved\_network2`.
                * **tStop** (*float*) -- The simulation stop time.

   :returns: The cell with the synaptic input set up as the ``evokedNW`` attribute.
   :rtype: :py:class:`~single\_cell\_parser.cell.Cell`


.. 
   Warning: we replace underscores with an escape backslash about 4 lines above to avoid having Sphinx interpret arguments as links.
   However, this may cause issues with code blocks or other literal text, and malform markdown tables
   Use with caution?
..