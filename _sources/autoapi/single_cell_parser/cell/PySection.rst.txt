

.. breadcrumb trail -----------------------------------------------------------------------

:mod:`single_cell_parser` ❭ :mod:`~single_cell_parser.cell` ❭ :mod:`~single_cell_parser.cell.PySection`

.. main page title: MUST be BEFORE toctree trigger -------------------------------

PySection
=========

.. setup: which children to show -------------------------------------------------


.. Trigger the toctree structure in the sidebar for this page

.. toctree::
   :hidden:

   set_3d_geometry <PySection.set_3d_geometry>
   set_segments <PySection.set_segments>
   _get_seg_conductance <PySection._get_seg_conductance>
   get_range_conductances <PySection.get_range_conductances>
   _compute_seg_diameters <PySection._compute_seg_diameters>
   _compute_total_area <PySection._compute_total_area>
   _compute_bounds <PySection._compute_bounds>
   _compute_relative_pts <PySection._compute_relative_pts>
   _compute_seg_pts <PySection._compute_seg_pts>
   _init_vm_recording <PySection._init_vm_recording>
   _re_init_vm_recording <PySection._re_init_vm_recording>
   _re_init_range_var_recording <PySection._re_init_range_var_recording>
   _init_range_var_recording <PySection._init_range_var_recording>


.. parse out arguments and attributes from class, __init__ & __new__ docstring --------------------
.. fetch attributes and docstring from class docstring
.. fetch arguments from __init__ or __new__ docstring

.. class signature --------------------------------------------------------------

.. py:class:: single_cell_parser.cell.PySection(name=None, cell=None, label=None)
   
   Wrapper around :py:class:`nrn.Section` providing additional functionality for geometry and mechanisms.

   NEURON sections are objects of the form ``__nrnsec_0x------------``, where the dashed code represents the memory pointer.
   Each section consists of ``nseg`` segments of equal length. Each segment is represented by ``__nrnsec_0x------------(x)``,
   which looks similar to the section representation, but has an additional ``(x)``: a relative coordinate representing the
   center point of the segment.

   Iterating the section will provide the individual segments. Each segment consists of one or more points.
   Accessing a segment's biophysical properties can be done as ``seg.<param>.<param_name>``.

   Example::

       >>> sec = cell.soma
       >>> for seg in sec:
       ...    print(seg.NaTa_t.gNaTa_tbar)

   :Parameters: * **name** (*str, optional*) -- name of the section
                * **cell** (*Cell, optional*) -- reference to the cell object
                * **label** (*str, optional*) -- label of the section

   :Attributes:

   .. attribute:: label

      label of the section (e.g. "Soma", "Dendrite", "Myelin").

      :type: str

   .. attribute:: label_detailed

      Detailed label of the section (e.g. "oblique", "basal", "trunk").
      These are manually assigned or automatically generated by :py:meth:`~biophysics_fitting.utils.augment_cell_with_detailed_labels`.
      Used in :py:meth:`~single_cell_parser.cell_modify_functions.scale_apical.scale_by_detailed_compartment`.

      :type: str, optional

   .. attribute:: parent

      reference to parent section.

      :type: PySection

   .. attribute:: parentx

      connection point at parent section.

      :type: float

   .. attribute:: bounds

      bounding box around 3D coordinates.

      :type: tuple

   .. attribute:: nrOfPts

      number of traced 3D coordinates.

      :type: int

   .. attribute:: pts

      list of traced 3D coordinates.

      :type: list

   .. attribute:: relPts

      list of relative position of 3D points along section.

      :type: list

   .. attribute:: diamList

      list of diameters at traced 3D coordinates.

      :type: list

   .. attribute:: area

      total area of all NEURON segments in this section.

      :type: float

   .. attribute:: segPts

      list of segment centers (x coordinate). Useful for looping akin to the hoc function ``for(x)``. Excluding 0 and 1.

      :type: list

   .. attribute:: segx

      list of x values corresponding to center of each segment.

      :type: list

   .. attribute:: segDiams

      list of diameters of each segment. Used for visualization purposes only.

      :type: list

   .. attribute:: recVList

      list of neuron Vectors recording voltage in each compartment.

      :type: list

   .. attribute:: recordVars

      dict of range variables recorded.

      :type: dict

   :Methods:

   
   .. list-table:: 
      :header-rows: 0
      :widths: auto
      :class: summarytable
      
      * - :py:obj:`set_3d_geometry <single_cell_parser.cell.PySection.set_3d_geometry>`\ (pts, diams)
        - Invokes NEURON 3D geometry setup.
      * - :py:obj:`set_segments <single_cell_parser.cell.PySection.set_segments>`\ (nrOfSegments)
        - Set spatial discretization.
      * - :py:obj:`_get_seg_conductance <single_cell_parser.cell.PySection._get_seg_conductance>`\ (seg, var, param\_name)
        - Get the conductance of a segment.
      * - :py:obj:`get_range_conductances <single_cell_parser.cell.PySection.get_range_conductances>`\ (range\_vars, density)
        - Get the transmembrane conductance of each range variable separately.
      * - :py:obj:`_compute_seg_diameters <single_cell_parser.cell.PySection._compute_seg_diameters>`\ ()
        - Computes the diameter of each segment in this section.
      * - :py:obj:`_compute_total_area <single_cell_parser.cell.PySection._compute_total_area>`\ ()
        - Computes total area of all NEURON segments in this section
      * - :py:obj:`_compute_bounds <single_cell_parser.cell.PySection._compute_bounds>`\ ()
        - Computes the bounding box around the 3D coordinates.
      * - :py:obj:`_compute_relative_pts <single_cell_parser.cell.PySection._compute_relative_pts>`\ ()
        - Computes the relative position of 3D points along the section.
      * - :py:obj:`_compute_seg_pts <single_cell_parser.cell.PySection._compute_seg_pts>`\ ()
        - Computes the 3D center points of each segment in this section.
      * - :py:obj:`_init_vm_recording <single_cell_parser.cell.PySection._init_vm_recording>`\ ()
        - Record the membrane voltage at every point in this section.
      * - :py:obj:`_re_init_vm_recording <single_cell_parser.cell.PySection._re_init_vm_recording>`\ ()
        - Reinitialize votage recordings
      * - :py:obj:`_re_init_range_var_recording <single_cell_parser.cell.PySection._re_init_range_var_recording>`\ ()
        - Re-initialize the range mechanism recordings.
      * - :py:obj:`_init_range_var_recording <single_cell_parser.cell.PySection._init_range_var_recording>`\ (var, mech)
        - Initialize recording of a range mechanism.

