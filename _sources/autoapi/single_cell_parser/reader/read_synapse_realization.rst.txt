
.. backlink:

:mod:`single_cell_parser` ❭ :mod:`~single_cell_parser.reader` ❭ :mod:`~single_cell_parser.reader.read_synapse_realization`


.. title:

read_synapse_realization
========================


.. py:function:: single_cell_parser.reader.read_synapse_realization(fname)

   Read a :ref:`syn\_file\_format` file and returns a dictionary of synapse locations.

   See also:

   - :ref:`syn\_file\_format` for more information on the `.syn` file format.
   - :py:meth:`~single\_cell\_parser.reader.read\_pruned\_synapse\_realization`.
   - :py:meth:`~single\_cell\_parser.writer.write\_cell\_synapse\_locations` for the corresponding writer.

   :Parameters: **fname** (*str*) -- The name of the file to be read.

   :raises IOError: If the input file does not have a `.syn` or `.SYN` suffix.

   :returns: A dictionary with synapse types as keys and lists of synapse locations as values.
             Each synapse location is a tuple of (section ID, section point ID).
   :rtype: dict

   .. rubric:: Example
      :class: example

   >>> synapse\_file
   # Synapse distribution file
   # corresponding to cell: 86\_C2\_center
   # Type - section - section.x
   VPM\_E1  112     0.138046479525
   VPM\_E1  130     0.305058053119
   VPM\_E1  130     0.190509288017
   VPM\_E1  9       0.368760777084
   VPM\_E1  110     0.0
   VPM\_E1  11      0.120662910562
   ...
   >>> read\_synapse\_realization(synapse\_file)
   {
       'VPM\_E1': [
           (112, 0.138046479525),
           (130, 0.305058053119),
           (130, 0.190509288017),
           (9, 0.368760777084),
           (110, 0.0),
           (11, 0.120662910562),
           ...
       ]
   }


.. 
   Warning: we replace underscores with an escape backslash about 4 lines above to avoid having Sphinx interpret arguments as links.
   However, this may cause issues with code blocks or other literal text, and malform markdown tables
   Use with caution?
..