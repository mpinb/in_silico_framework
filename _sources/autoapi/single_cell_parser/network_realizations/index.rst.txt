
:mod:`single_cell_parser` ‚ù≠ :mod:`~single_cell_parser.network_realizations`

network_realizations
====================

.. a hidden toctree for sidebar navigation
.. Include all visible children, except for attributes (makes things verbose)
.. These names need to match either a python object in the Python space, or (as done here) a direct link to an .rst file (without the suffix), either relative or absolute.
.. toctree::
   :hidden:

   create_synapse_realization </autoapi/single_cell_parser/network_realizations/create_synapse_realization>
   create_functional_network </autoapi/single_cell_parser/network_realizations/create_functional_network>

.. py:module:: single_cell_parser.network_realizations

.. autoapi-nested-parse::
   Create anatomical and functional network realizations.

   For more fine-grained control over the creation of anatomical network realizations, please refer to :py:mod:`singlecell_input_mapper.singlecell_input_mapper`.



.. rst-class:: absolute-paragraph

Functions
---------


.. list-table:: 
   :header-rows: 0
   :widths: auto
   :class: summarytable
   
   * - :py:obj:`create_synapse_realization <single_cell_parser.network_realizations.create_synapse_realization>`\ (pname, write\_synapses)
     - Create a synapse realization from a :ref:`network_parameters_format` file.
   * - :py:obj:`create_functional_network <single_cell_parser.network_realizations.create_functional_network>`\ (cellParamName, nwParamName)
     - Create fixed functional connectivity based on ``convergence``.


