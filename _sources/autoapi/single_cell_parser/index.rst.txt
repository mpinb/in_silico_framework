


single_cell_parser
==================

.. a hidden toctree for sidebar navigation
.. Include all visible children, except for attributes (makes things verbose)
.. These names need to match either a python object in the Python space, or (as done here) a direct link to an .rst file (without the suffix), either relative or absolute.
.. toctree::
   :hidden:

   analyze </autoapi/single_cell_parser/analyze/index>  
   cell_modify_functions </autoapi/single_cell_parser/cell_modify_functions/index>  
   network_modify_functions </autoapi/single_cell_parser/network_modify_functions/index>  
   network_param_modify_functions </autoapi/single_cell_parser/network_param_modify_functions/index>  
   cell </autoapi/single_cell_parser/cell/index>  
   cell_parser </autoapi/single_cell_parser/cell_parser/index>  
   network </autoapi/single_cell_parser/network/index>  
   network_realizations </autoapi/single_cell_parser/network_realizations/index>  
   parameters </autoapi/single_cell_parser/parameters/index>  
   reader </autoapi/single_cell_parser/reader/index>  
   scalar_field </autoapi/single_cell_parser/scalar_field/index>  
   serialize_cell </autoapi/single_cell_parser/serialize_cell/index>  
   sim_control </autoapi/single_cell_parser/sim_control/index>  
   synapse </autoapi/single_cell_parser/synapse/index>  
   synapse_mapper </autoapi/single_cell_parser/synapse_mapper/index>  
   writer </autoapi/single_cell_parser/writer/index>  
   Event </autoapi/single_cell_parser/Event>
   create_cell </autoapi/single_cell_parser/create_cell>
   init_neuron_run </autoapi/single_cell_parser/init_neuron_run>
   sec_distance_to_soma </autoapi/single_cell_parser/sec_distance_to_soma>
   spines_update_synapse_distribution_file </autoapi/single_cell_parser/spines_update_synapse_distribution_file>
   spines_update_network_paramfile </autoapi/single_cell_parser/spines_update_network_paramfile>

.. py:module:: single_cell_parser

.. autoapi-nested-parse::
   Cell API for single cell simulations.

   This package provides functionality to parse :py:class:`~single_cell_parser.cell.Cell` objects
   from NEURON :ref:`hoc_file_format` files, map synapses onto these cells, and run biophysically
   detailed NEURON simulations with the resulting neuron-network models.

   .. seealso::

      This package should not be confused with :py:mod:`singlecell_input_mapper`.
      
      This package is specialized to handle biophysical properties of neurons and simulation runs, and
      provides API access to the NEURON simulator :cite:`hines2001neuron`.
      It handles (among other things) synaptic activations onto a biophysically detailed neuron model.
      
      :py:mod:`singlecell_input_mapper` provides extensive functionality to generate network realizations,
      constrained by empirical data.
      The results of such pipelines can be read in with this package.


.. rst-class:: absolute-paragraph

Classes
-------


.. list-table:: 
   :header-rows: 0
   :widths: auto
   :class: summarytable
   
   * - :py:obj:`Event <single_cell_parser.Event>`
     - Class to handle events in NEURON simulations.


.. rst-class:: absolute-paragraph

Functions
---------


.. list-table:: 
   :header-rows: 0
   :widths: auto
   :class: summarytable
   
   * - :py:obj:`create_cell <single_cell_parser.create_cell>`\ (parameters, scaleFunc, allPoints, setUpBiophysics, silent)
     - Creating NEURON cell models from cell parameters.
   * - :py:obj:`init_neuron_run <single_cell_parser.init_neuron_run>`\ (simparam, vardt, \*events)
     - Default NEURON run with inital parameters according to parameter file.
   * - :py:obj:`sec_distance_to_soma <single_cell_parser.sec_distance_to_soma>`\ (currentSec)
     - Compute the path length from :``sec(x=0)`` to soma
   * - :py:obj:`spines_update_synapse_distribution_file <single_cell_parser.spines_update_synapse_distribution_file>`\ (cell, synapse\_distribution\_file, new\_synapse\_distribution\_file)
     - Update the :ref:`syn_file_format` file to correctly point to spine heads as excitatory synapse locations.
   * - :py:obj:`spines_update_network_paramfile <single_cell_parser.spines_update_network_paramfile>`\ (new\_synapse\_distribution\_file, network\_paramfile, new\_network\_paramfile)
     - Update a :ref:`network_parameters_format` file to point to a new :ref:`syn_file_format` file.


.. rst-class:: absolute-paragraph

Modules
-------


.. list-table:: 
   :header-rows: 0
   :widths: auto
   :class: summarytable
   
   * - :py:obj:`analyze <single_cell_parser.analyze>`
     - Analyze the results of single cell simulations and its network embeddings:
   * - :py:obj:`cell_modify_functions <single_cell_parser.cell_modify_functions>`
     - Modify the cell after it is initalized.
   * - :py:obj:`network_modify_functions <single_cell_parser.network_modify_functions>`
     - Modify the cell and/or network after both have been initalized.
   * - :py:obj:`network_param_modify_functions <single_cell_parser.network_param_modify_functions>`
     - Modify the :ref:`network_parameters_format`.
   * - :py:obj:`cell <single_cell_parser.cell>`
     - Cell objects for neuron models and cell activity.
   * - :py:obj:`cell_parser <single_cell_parser.cell_parser>`
     - Read and parse a :py:class:`~single_cell_parser.cell.Cell` object from a NEURON :ref:`hoc_file_format` file.
   * - :py:obj:`network <single_cell_parser.network>`
     - Connect and activate presynaptic neuron populations.
   * - :py:obj:`network_realizations <single_cell_parser.network_realizations>`
     - Create anatomical and functional network realizations.
   * - :py:obj:`parameters <single_cell_parser.parameters>`
     - Handle :ref:`params_file_format` files in ISF.
   * - :py:obj:`reader <single_cell_parser.reader>`
     - Read and parse :ref:`hoc_file_format`, :ref:`syn_file_format`, :ref:`con_file_format`, and :ref:`am_file_format` files.
   * - :py:obj:`scalar_field <single_cell_parser.scalar_field>`
     - Implementation of 3D scalar fields based on numpy arrays.
   * - :py:obj:`serialize_cell <single_cell_parser.serialize_cell>`
     - Convert a :py:class:`~single_cell_parser.cell.Cell` object to a serializable object and vice versa.
   * - :py:obj:`sim_control <single_cell_parser.sim_control>`
     - Run a NEURON current injection simulation.
   * - :py:obj:`synapse <single_cell_parser.synapse>`
     - Synapse class for synaptic activations and NEURON API.
   * - :py:obj:`synapse_mapper <single_cell_parser.synapse_mapper>`
     - Basic synapse mapper to assign synapses to a neuron morphology, based on an existing synapse distribution.
   * - :py:obj:`writer <single_cell_parser.writer>`
     - Write out anatomical, morphology or simulation data.

