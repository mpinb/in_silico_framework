
.. backlink:

:mod:`single_cell_parser` ❭ :mod:`~single_cell_parser.analyze` ❭ :mod:`~single_cell_parser.analyze.synanalysis` ❭ :mod:`~single_cell_parser.analyze.synanalysis.compute_synapse_distances_times`


.. title:

compute_synapse_distances_times
===============================


.. py:function:: single_cell_parser.analyze.synanalysis.compute_synapse_distances_times(fname, cell, t=None, synTypes=None)

   Save a :py:class:`single\_cell\_parser.cell.Cell` object's synapse distances and activation times to a ``.csv`` file.

   The following information is saved:

   - synapse type: to which presynaptic cell type this synapse belongs to.
   - synapse ID: unique identifier for the synapse.
   - soma distance: distance from the synapse to the soma.
   - section ID: ID of the section of the postsynaptic cell that contains this synapse.
   - section pt ID: ID of the point in the section that contains this synapse.
   - dendrite label: label of the dendrite that contains this synapse.
   - activation times: times at which the synapse was active (ms).

   :Parameters: * **fname** (*str*) -- The output file name as a ful path, including the file extension. Preferably unique (see e.g. :py:meth:`~simrun.generate\_synapse\_activations.\_evoked\_activity` for the generation of unique syapse activation filenames)
                * **cell** (:py:class:`single\_cell\_parser.cell.Cell`) -- Cell object
                * **synTypes** (*list*) -- list of synapse types. Default: the keys of the `cell.synapses` dictionary

   :returns: None. Writes out the synapse .csv file to :paramref:`fname`.

   .. seealso:: The :ref:`syn\_activation\_format` file format.


.. 
   Warning: we replace underscores with an escape backslash about 4 lines above to avoid having Sphinx interpret arguments as links.
   However, this may cause issues with code blocks or other literal text, and malform markdown tables
   Use with caution?
..