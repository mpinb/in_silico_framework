
.. backlink:

:mod:`data_base` ❭ :mod:`~data_base.isf_data_base` ❭ :mod:`~data_base.isf_data_base.IO` ❭ :mod:`~data_base.isf_data_base.IO.LoaderDumper` ❭ :mod:`~data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store` ❭ :mod:`~data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.memmap_from_disk`


.. title:

memmap_from_disk
================


.. py:function:: data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.memmap_from_disk(path, shape=None, dtype=None, name=None, start_row=None, end_row=None)

   Memory map a numpy array on disk.

   Create a numpy memory map from a file on disk. This allows for the array to be accessed without loading the entire array into memory.

   :Parameters: * **path** (*str*) -- Path to the file on disk.
                * **shape** (*tuple, optional*) -- Shape of the array.
                * **dtype** (*str, optional*) -- Data type of the array.
                * **name** (*str, optional*) -- Name of the shared memory block. Default: None.
                * **start\_row** (*int, optional*) -- The starting row of the array. Default: None.
                * **end\_row** (*int, optional*) -- The ending row of the array. Default: None.

   :returns: A numpy memory map object.
   :rtype: np.memmap

   .. seealso:: https://numpy.org/doc/stable/reference/generated/numpy.memmap.html


.. 
   Warning: we replace underscores with an escape backslash about 4 lines above to avoid having Sphinx interpret arguments as links.
   However, this may cause issues with code blocks or other literal text, and malform markdown tables
   Use with caution?
..