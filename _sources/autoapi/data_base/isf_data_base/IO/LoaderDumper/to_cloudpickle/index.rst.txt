
:mod:`data_base` ❭ :mod:`~data_base.isf_data_base` ❭ :mod:`~data_base.isf_data_base.IO` ❭ :mod:`~data_base.isf_data_base.IO.LoaderDumper` ❭ :mod:`~data_base.isf_data_base.IO.LoaderDumper.to_cloudpickle`

to_cloudpickle
==============

.. a hidden toctree for sidebar navigation
.. Include all visible children, except for attributes (makes things verbose)
.. These names need to match either a python object in the Python space, or (as done here) a direct link to an .rst file (without the suffix), either relative or absolute.
.. toctree::
   :hidden:

   Loader </autoapi/data_base/isf_data_base/IO/LoaderDumper/to_cloudpickle/Loader>
   check </autoapi/data_base/isf_data_base/IO/LoaderDumper/to_cloudpickle/check>
   dump </autoapi/data_base/isf_data_base/IO/LoaderDumper/to_cloudpickle/dump>

.. py:module:: data_base.isf_data_base.IO.LoaderDumper.to_cloudpickle

.. autoapi-nested-parse::
   Read and write an object to the cloudpickle format.

   This is the default dumper for :py:class:`~data_base.isf_data_base.isf_data_base.ISFDataBase` objects,
   since they can save basically any Python object.


.. rst-class:: absolute-paragraph

Classes
-------


.. list-table:: 
   :header-rows: 0
   :widths: auto
   :class: summarytable
   
   * - :py:obj:`Loader <data_base.isf_data_base.IO.LoaderDumper.to_cloudpickle.Loader>`
     - Loader for cloudpickle objects


.. rst-class:: absolute-paragraph

Functions
---------


.. list-table:: 
   :header-rows: 0
   :widths: auto
   :class: summarytable
   
   * - :py:obj:`check <data_base.isf_data_base.IO.LoaderDumper.to_cloudpickle.check>`\ (obj)
     - Check whether the object can be saved with this dumper
   * - :py:obj:`dump <data_base.isf_data_base.IO.LoaderDumper.to_cloudpickle.dump>`\ (obj, savedir)
     - Save the object in the specified directory


