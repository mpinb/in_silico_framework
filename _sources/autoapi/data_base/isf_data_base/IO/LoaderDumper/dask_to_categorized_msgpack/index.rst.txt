
:mod:`data_base` ❭ :mod:`~data_base.isf_data_base` ❭ :mod:`~data_base.isf_data_base.IO` ❭ :mod:`~data_base.isf_data_base.IO.LoaderDumper` ❭ :mod:`~data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack`

dask_to_categorized_msgpack
===========================

.. a hidden toctree for sidebar navigation
.. Include all visible children, except for attributes (makes things verbose)
.. These names need to match either a python object in the Python space, or (as done here) a direct link to an .rst file (without the suffix), either relative or absolute.
.. toctree::
   :hidden:

   Loader </autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_categorized_msgpack/Loader>
   str_to_category </autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_categorized_msgpack/str_to_category>
   category_to_str </autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_categorized_msgpack/category_to_str>
   get_writer_function </autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_categorized_msgpack/get_writer_function>
   bundle_delayeds </autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_categorized_msgpack/bundle_delayeds>
   my_dask_writer </autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_categorized_msgpack/my_dask_writer>
   check </autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_categorized_msgpack/check>
   get_numpy_dtype_as_str </autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_categorized_msgpack/get_numpy_dtype_as_str>
   read_object_meta </autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_categorized_msgpack/read_object_meta>
   dump </autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_categorized_msgpack/dump>

.. py:module:: data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack

.. autoapi-nested-parse::
   Save and load dask dataframes to msgpack with categorical columns.

   This dumper is designed for dataframes with the following properties:

   - The index is str
   - The columns have a lot of repetitive values, so they can be grouped.

   If the number of partitions is very large (>10000), it will repartition the
   dataframe to 5000 partitions.
   Loading such a dataframe is normaly possible within 1 second.

   Before saving, all str-columns will be converted to ``pd.Categorical``s
   In each respective partition, if the part of unique values in the respective column is <= 20%. The original datatype
   will be restored if the dataframe is loaded.
   This therefore only serves as optimization to increase loading speed and reduce network traffic for suitable dataframes.
   Suitable dataframes are for example the :ref:`syn_activation_format` dataframe.

   This uses a fork of the original `pandas_to_msgpack` package, `available on PyPI <https://pypi.org/project/isf-pandas-msgpack/>`_


.. rst-class:: absolute-paragraph

Classes
-------


.. list-table:: 
   :header-rows: 0
   :widths: auto
   :class: summarytable
   
   * - :py:obj:`Loader <data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.Loader>`
     - Base class for child Loader classes


.. rst-class:: absolute-paragraph

Functions
---------


.. list-table:: 
   :header-rows: 0
   :widths: auto
   :class: summarytable
   
   * - :py:obj:`str_to_category <data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.str_to_category>`\ (pdf)
     - careful: changes pdf!
   * - :py:obj:`category_to_str <data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.category_to_str>`\ (pdf)
     - careful: changes pdf!
   * - :py:obj:`get_writer_function <data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.get_writer_function>`\ (categorize)
     - returns function, that stores pandas dataframe
   * - :py:obj:`bundle_delayeds <data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.bundle_delayeds>`\ (\*args)
     - bundeling delayeds provided a huge speedup.
   * - :py:obj:`my_dask_writer <data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.my_dask_writer>`\ (ddf, path, optimize\_graph, categorize, client)
     - Very simple method to store a dask dataframe to a bunch of files.
   * - :py:obj:`check <data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.check>`\ (obj)
     - checks wherther obj can be saved with this dumper
   * - :py:obj:`get_numpy_dtype_as_str <data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.get_numpy_dtype_as_str>`\ (obj)
     - Get a string representation of the numpy dtype of an object.
   * - :py:obj:`read_object_meta <data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.read_object_meta>`\ (savedir)
     - \-
   * - :py:obj:`dump <data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.dump>`\ (obj, savedir, repartition, scheduler, categorize, client)
     - Save an object to a file in a DataBase in the pandas-msgpack format.


