
.. backlink:

:mod:`data_base` ❭ :mod:`~data_base.analyze` ❭ :mod:`~data_base.analyze.temporal_binning` ❭ :mod:`~data_base.analyze.temporal_binning.temporal_binning_dask`


.. title:

temporal_binning_dask
=====================


.. py:function:: data_base.analyze.temporal_binning.temporal_binning_dask(ddf, bin_size=1, min_time=None, max_time=None, normalize=True, client=None)

   Bin timevalues in a dask DataFrame.

   Given a dataframe containing time values in columns whose name can be converted to an integer, this function bins the values.
   It assumes that all columns whose names are integer-convertible contain time values.
   This is true for :ref:`spike\_times\_format` and :ref:`syn\_activation\_format` dataframes.

   :Parameters: * **ddf** (:py:class:`dask.dataframe.DataFrame`) -- DataFrame with containing time values in columns whose name are integer-convertible.
                * **bin\_size** (*float, optional*) -- Size of the bins. If not specified, :paramref:`bin\_borders` have to be specified.
                * **min\_time** (*float, optional*) -- Minimum time to consider. If not specified, the minimum value in the DataFrame is used.
                * **max\_time** (*float, optional*) -- Maximum time to consider. If not specified, the maximum value in the DataFrame is used.
                * **normalize** (*bool, optional*) -- If True, normalize the output to the total number of elements in the DataFrame.
                * **client** (:py:class:`dask.distributed.Client`, optional) -- Dask client to use for parallel computation.

   :returns: Tuple containing the bin borders and the binned data.
   :rtype: tuple


.. 
   Warning: we replace underscores with an escape backslash about 4 lines above to avoid having Sphinx interpret arguments as links.
   However, this may cause issues with code blocks or other literal text, and malform markdown tables
   Use with caution?
..