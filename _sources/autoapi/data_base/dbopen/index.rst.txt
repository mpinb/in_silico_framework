
:mod:`data_base` ‚ù≠ :mod:`~data_base.dbopen`

dbopen
======

.. a hidden toctree for sidebar navigation
.. Include all visible children, except for attributes (makes things verbose)
.. These names need to match either a python object in the Python space, or (as done here) a direct link to an .rst file (without the suffix), either relative or absolute.
.. toctree::
   :hidden:

   dbopen </autoapi/data_base/dbopen/dbopen>
   cache </autoapi/data_base/dbopen/cache>
   resolve_reldb_path </autoapi/data_base/dbopen/resolve_reldb_path>
   create_reldb_path </autoapi/data_base/dbopen/create_reldb_path>
   resolve_modular_db_path </autoapi/data_base/dbopen/resolve_modular_db_path>
   create_modular_db_path </autoapi/data_base/dbopen/create_modular_db_path>
   resolve_db_path </autoapi/data_base/dbopen/resolve_db_path>
   resolve_neup_reldb_paths </autoapi/data_base/dbopen/resolve_neup_reldb_paths>
   resolve_netp_reldb_paths </autoapi/data_base/dbopen/resolve_netp_reldb_paths>

.. py:module:: data_base.dbopen

.. autoapi-nested-parse::
   Open files directly in a database.

   This module provides funtcionality to open files in a database directly.
   This is generally not recommended, as the content of databases is usually written in a specific format,
   which is automatically inferred by the database.

   However, for development and testing purposes, it may be of use to explicitly open these files.


.. rst-class:: absolute-paragraph

Classes
-------


.. list-table:: 
   :header-rows: 0
   :widths: auto
   :class: summarytable
   
   * - :py:obj:`dbopen <data_base.dbopen.dbopen>`
     - Context manager to open files in databases


.. rst-class:: absolute-paragraph

Functions
---------


.. list-table:: 
   :header-rows: 0
   :widths: auto
   :class: summarytable
   
   * - :py:obj:`cache <data_base.dbopen.cache>`\ (function)
     - Cache the result of a function.
   * - :py:obj:`resolve_reldb_path <data_base.dbopen.resolve_reldb_path>`\ (path, db\_basedir)
     - Resolve a relative database path
   * - :py:obj:`create_reldb_path <data_base.dbopen.create_reldb_path>`\ (path)
     - Create a relative database path
   * - :py:obj:`resolve_modular_db_path <data_base.dbopen.resolve_modular_db_path>`\ (path)
     - Resolve the path of a database.
   * - :py:obj:`create_modular_db_path <data_base.dbopen.create_modular_db_path>`\ (path)
     - Create a database path from a given path.
   * - :py:obj:`resolve_db_path <data_base.dbopen.resolve_db_path>`\ (path, db\_basedir)
     - Resolve modular or relative database paths
   * - :py:obj:`resolve_neup_reldb_paths <data_base.dbopen.resolve_neup_reldb_paths>`\ (neup, db\_basedir)
     - Convert all relative database paths in a :ref:`cell_parameters_format` file to absolute paths.
   * - :py:obj:`resolve_netp_reldb_paths <data_base.dbopen.resolve_netp_reldb_paths>`\ (netp, db\_basedir)
     - Convert all relative database paths in a :ref:`network_parameters_format` file to absolute paths.


