
:mod:`data_base` ‚ù≠ :mod:`~data_base.data_base_register`

data_base_register
==================

.. a hidden toctree for sidebar navigation
.. Include all visible children, except for attributes (makes things verbose)
.. These names need to match either a python object in the Python space, or (as done here) a direct link to an .rst file (without the suffix), either relative or absolute.
.. toctree::
   :hidden:

   DataBaseRegister </autoapi/data_base/data_base_register/DataBaseRegister>
   _get_db_register </autoapi/data_base/data_base_register/_get_db_register>
   register_db </autoapi/data_base/data_base_register/register_db>
   deregister_db </autoapi/data_base/data_base_register/deregister_db>
   assimilate_remote_register </autoapi/data_base/data_base_register/assimilate_remote_register>

.. py:module:: data_base.data_base_register

.. autoapi-nested-parse::
   Registry of databases.

   The data base registry keeps a ledger linking data base IDs to data base paths.
   This is particularly useful to share databases, and moving databases to other file systems.

   The registry should ideally be located in an obvious place. The default registry is ``.data_base_register.db`` in the :py:mod:`data_base` module itself.
   Newly created data_bases are automatically added to the registry. Accessing someone elses database is possible if:

   1. Its location is on the same filesystem and you have the absolute path. In this case, you can simply open the path and the db will register itself to your registry.
   2. You know the unique ID of the database. In this case, you can use :py:meth:`data_base.get_db_by_unique_id`.
   3. Someone else has registered the database in a registry that you have access to. In this case, you can use :py:meth:`assimilate_remote_register`.

   .. seealso:: :py:meth:`~data_base.isf_data_base.isf_data_base.ISFDataBase.register_this_database`


.. rst-class:: absolute-paragraph

Classes
-------


.. list-table:: 
   :header-rows: 0
   :widths: auto
   :class: summarytable
   
   * - :py:obj:`DataBaseRegister <data_base.data_base_register.DataBaseRegister>`
     - Two column registry mapping data bases to their locations.


.. rst-class:: absolute-paragraph

Functions
---------


.. list-table:: 
   :header-rows: 0
   :widths: auto
   :class: summarytable
   
   * - :py:obj:`register_db <data_base.data_base_register.register_db>`\ (unique\_id, db\_basedir)
     - Register a database.
   * - :py:obj:`deregister_db <data_base.data_base_register.deregister_db>`\ (unique\_id)
     - Deregister a database.
   * - :py:obj:`assimilate_remote_register <data_base.data_base_register.assimilate_remote_register>`\ (remote\_path, local\_path)
     - Assimilate a remote register.


