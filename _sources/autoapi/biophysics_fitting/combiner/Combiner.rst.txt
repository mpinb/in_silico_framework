

.. breadcrumb trail -----------------------------------------------------------------------

:mod:`biophysics_fitting` ❭ :mod:`~biophysics_fitting.combiner` ❭ :mod:`~biophysics_fitting.combiner.Combiner`

.. main page title: MUST be BEFORE toctree trigger -------------------------------

Combiner
========

.. setup: which children to show -------------------------------------------------


.. Trigger the toctree structure in the sidebar for this page

.. toctree::
   :hidden:

   combine <Combiner.combine>


.. parse out arguments and attributes from class, __init__ & __new__ docstring --------------------
.. fetch attributes and docstring from class docstring
.. fetch arguments from __init__ or __new__ docstring

.. class signature --------------------------------------------------------------

.. py:class:: biophysics_fitting.combiner.Combiner
   
   This class can be used to combine features (usually) computed by an :py:class:`~biophysics_fitting.evaluator.Evaluator` object.

   For a :py:class:`~biophysics_fitting.simulator.Simulator` object `s`, an :py:class:`~biophysics_fitting.evaluator.Evaluator` object `e`, and a :py:class:`~biophysics_fitting.combiner.Combiner` object `c`, the typical usecase is:

       >>> voltage_traces_dict = s.run(params)
       >>> features = e.evaluate(voltage_traces_dict)
       >>> combined_features = c.combine(features)

   Internally, the Combiner iterates over all names of specified combinations.
   Each combination is specified not only by a name of the combination,
   but also a list of names of the features that go into that combination.
   Each list of features is then combined by calling combinefun with that list.

   .. rubric:: Example
      :class: example

   >>> features = {'feature1': 1, 'feature2': 2, 'feature3': 3, 'feature4': 4}
   >>> c = Combiner()
   >>> c.setup.append('combination1', ['feature1', 'feature2'])
   >>> c.setup.append('combination2', ['feature2', 'feature3', 'feature4'])
   >>> c.setup.combinefun = max
   >>> combined_features = c.combine(features)
   >>> combined_features
   {'combination1': 2, 'combination2': 4}

   :Attributes:

   .. attribute:: setup

      A Combiner_Setup object that keeps track of the feature combinations.

      :type: :py:class:`~biophysics_fitting.combiner.Combiner_Setup`

   :Methods:

   
   .. list-table:: 
      :header-rows: 0
      :widths: auto
      :class: summarytable
      
      * - :py:obj:`combine <biophysics_fitting.combiner.Combiner.combine>`\ (features)
        - Combines features that are computed by an Evaluator class.

