

.. breadcrumb trail -----------------------------------------------------------------------

:mod:`biophysics_fitting` ❭ :mod:`~biophysics_fitting.exploration_from_seedpoint` ❭ :mod:`~biophysics_fitting.exploration_from_seedpoint.RW` ❭ :mod:`~biophysics_fitting.exploration_from_seedpoint.RW.RW`

.. main page title: MUST be BEFORE toctree trigger -------------------------------

RW
==

.. setup: which children to show -------------------------------------------------


.. Trigger the toctree structure in the sidebar for this page

.. toctree::
   :hidden:

   _normalize_aim_params <RW._normalize_aim_params>
   _normalize_params <RW._normalize_params>
   _unnormalize_params <RW._unnormalize_params>
   _concatenate_and_clean <RW._concatenate_and_clean>
   _clean_the_pickles <RW._clean_the_pickles>
   _load_pickle_or_parquet <RW._load_pickle_or_parquet>
   assess_aim_params_reached <RW.assess_aim_params_reached>
   run_RW <RW.run_RW>


.. parse out arguments and attributes from class, __init__ & __new__ docstring --------------------
.. fetch attributes and docstring from class docstring
.. fetch arguments from __init__ or __new__ docstring

.. class signature --------------------------------------------------------------

.. py:class:: biophysics_fitting.exploration_from_seedpoint.RW.RW(df_seeds=None, param_ranges=None, params_to_explore=None, evaluation_function=None, MAIN_DIRECTORY=None, min_step_size=0, max_step_size=0.02, checkpoint_every=100, checkpoint_by_time=None, concat_every_n_save=60, n_iterations=60000, mode=None, aim_params=None, stop_n_inside_with_aim_params=-1)
   
   Class to perform RW exploration from a seedpoint.

   :Parameters: * **df_seeds** (*pd.DataFrame*) -- individual seed points as rows and the parameters as columns
                * **param_ranges** (*pd.DataFrame*) -- parameters as rows and has a ``min_`` and ``max_`` column denoting range of values this parameter may take
                * **params_to_explore** (*list*) -- list of parameters that should be explored. If None, all parameters are explored.
                * **evaluation_function** (*Callable*) -- takes one argument (a new parameter vector) and returns:

                  - inside: boolean that indicates if the parameter vector is within experimental constraits (i.e. results in acceptable physiology) or not.
                  - evaluation: dictionary that will be saved alongside the parameters. For example, this should contain ephys features.
                * **checkpoint_every** (*int*) -- save the results every n iterations
                * **check_point_by_time** (*float*) -- time interval in minutes for checkpointing for using time-based checkpointing. If both
                  checkpoint_every and checkpoint_by_time are set, checkpointing will be done by time.
                * **concat_every_n_save** (*int*) -- number of checkpoints after which the intermediate ``.pickle` files are concatenated to a single ``.parquet`` dataframe.
                * **mode** (*str*) -- Random walk mode. Options: (None, 'expand'). default: None
                  'expand': only propose new points that move further away from seedpoint
                * **aim_params** (*dict*) -- this param will make the exploration algorithm propose only new points such that a set of
                  parameters aims certain values during exploration.
                  Default: {}
                * **stop_n_inside_with_aim_params** (*int*) -- number of successful models / set of parameters inside space with aim_params
                  to find before stopping exploration
                * **MAIN_DIRECTORY** (*str*) -- output directory in which results are stored.

   :Attributes:

   .. attribute:: df_seeds

      individual seed points as rows and the parameters as columns

      :type: pd.DataFrame

   .. attribute:: param_ranges

      parameters as rows and has a ``min_`` and ``max_`` column denoting range of values this parameter may take

      :type: pd.DataFrame

   .. attribute:: params_to_explore

      list of parameters that should be explored. If None, all parameters are explored.

      :type: list

   .. attribute:: evaluation_function

      Function use to evaluate a vector of biphysical parameters.
      Must take one argument (a parameter vector) and return a tuple of  ``(inside, evaluation)``:
      
      - inside: boolean that indicates if the parameter vector is within experimental constraits
          (i.e. results in acceptable physiology) or not.
      - evaluation: dictionary that will be saved alongside the parameters. For example, this should contain
          ephys features.
      
      This function is usually :py:meth:`~biophysics_fitting.exploration_from_seedpoint.utils.evaluation_function_incremental_helper`.

      :type: Callable

   .. attribute:: MAIN_DIRECTORY

      output directory in which results are stored.

      :type: str

   .. attribute:: min_step_size

      minimum step size for the random walk

      :type: float

   .. attribute:: max_step_size

      maximum step size for the random walk

      :type: float

   .. attribute:: checkpoint_every

      save the results every n iterations

      :type: int

   .. attribute:: checkpoint_by_time

      time interval in minutes for checkpointing for using time-based checkpointing. If both
      checkpoint_every and checkpoint_by_time are set, checkpointing will be done by time.

      :type: float

   .. attribute:: concat_every_n_save

      number of checkpoints after which the pickle files are concatenated and cleaned

      :type: int

   .. attribute:: n_iterations

      number of iterations to run the random walk

      :type: int

   .. attribute:: mode

      Random walk mode. Options: (None, 'expand'). default: None
      'expand': only propose new points that move further away from seedpoint

      :type: str

   .. attribute:: aim_params

      this param will make the exploration algorithm propose only new points such that a set of
      parameters aims certain values during exploration.
      Default: {}

      :type: dict

   .. attribute:: stop_n_inside_with_aim_params

      number of successful models / set of parameters inside space with aim_params
      to find before stopping exploration

      :type: int

   .. attribute:: normalized_aim_params

      normalized aim parameters

      :type: pd.Series

   :Methods:

   
   .. list-table:: 
      :header-rows: 0
      :widths: auto
      :class: summarytable
      
      * - :py:obj:`_normalize_aim_params <biophysics_fitting.exploration_from_seedpoint.RW.RW._normalize_aim_params>`\ (aim\_params)
        - Normalize aim parameters to be between 0 and 1.
      * - :py:obj:`_normalize_params <biophysics_fitting.exploration_from_seedpoint.RW.RW._normalize_params>`\ (p)
        - Normalize parameters to be between 0 and 1.
      * - :py:obj:`_unnormalize_params <biophysics_fitting.exploration_from_seedpoint.RW.RW._unnormalize_params>`\ (p)
        - Unnormalize parameters to be between min and max.
      * - :py:obj:`_concatenate_and_clean <biophysics_fitting.exploration_from_seedpoint.RW.RW._concatenate_and_clean>`\ (seed\_folder, particle\_id, iteration)
        - Concatenate the intermediate ``.pickle`` results and save as one parquet file.
      * - :py:obj:`_clean_the_pickles <biophysics_fitting.exploration_from_seedpoint.RW.RW._clean_the_pickles>`\ (outdir, files, iteration)
        - Remove the pickle files that correspond to the intermediate results of a iteration.
      * - :py:obj:`_load_pickle_or_parquet <biophysics_fitting.exploration_from_seedpoint.RW.RW._load_pickle_or_parquet>`\ (outdir, iteration, mode)
        - Load the results of a iteration from a pickle or parquet file.
      * - :py:obj:`assess_aim_params_reached <biophysics_fitting.exploration_from_seedpoint.RW.RW.assess_aim_params_reached>`\ (normalized\_params, tolerance)
        - Check whether the aim parameters have been reached.
      * - :py:obj:`run_RW <biophysics_fitting.exploration_from_seedpoint.RW.RW.run_RW>`\ (selected\_seedpoint, particle\_id, seed)
        - Run random walk exploration from a seed point.

