
.. backlink:

:mod:`simrun` ❭ :mod:`~simrun.run_new_simulations` ❭ :mod:`~simrun.run_new_simulations.run_new_simulations`


.. title:

run_new_simulations
===================


.. py:function:: simrun.run_new_simulations.run_new_simulations(cellParamName, evokedUpParamName, dirPrefix=&#39;&#39;, nSweeps=1000, nprocs=40, tStop=345, silent=True, scale_apical=None, cell_generator=None, child_process=False, tar=False)

   Create and simulate network-embedded neuron models.

   This is the core method used throughout :py:mod:`simrun` to read and build neuron models from :ref:`cell\_parameters\_format` files,
   generate synaptic input patterns based on the :ref:`network\_parameters\_format`, and simulate the resulting network-embedded neuron model.

   The workflow of this method is as follows:

   1. Initialize the simulation

       1.1 Set a random seed. Used in the output directory name, and for generating network realizations
       with :py:class:`~single\_cell\_parser.network.NetworkMapper`.
       1.2 Build the cell with biophysical properties.
       1.3 Set up the simulation with recording sites from the neuron parameters

   2. Run :paramref:`nSweeps` simulations using :py:meth:`~single\_cell\_parser.init\_neuron\_run`,
   each time creating a new network embedding and sampling new activity using :py:meth:`~single\_cell\_parser.network.NetworkMapper.create\_saved\_network2`.
   3. Parse and write out simulation data, including voltage traces from the soma
   and additional recording sites defined in the neuron parameters.
   4. Finalize the simulation by removing the "\_running" suffix from the dirname ``dirPrefix/results/YYYYMMDD-HHMM\_UID\_running``.

   :Parameters: * **cellParamName** (*str*) -- Path to a :ref:`cell\_parameters\_format` file.
                * **evokedUpParamName** (*str*) -- Path to a :ref:`network\_parameters\_format` file.
                * **dirPrefix** (*str*) -- Prefix of the output directory. The final directory name will be ``dirPrefix/results/YYYYMMDD-HHMM\_UID.``
                * **seed** (*int*) -- Random seed for the simulation.
                * **nSweps** (*int*) -- Number of simulations to run with these parameters.
                  Trial-to-trial variability is introduced by the random seed in terms of
                  different network activity and connectivity realizations (see :py:meth:`~single\_cell\_parser.network.NetworkMapper.created\_saved\_network2`).
                * **tStop** (*float*) -- Duration of each simulation in ms.
                * **tStim** (*float*) -- Time in ms at which the in vivo evoked synaptic input should start.
                * **scale\_apical** (*callable, DEPRECATED*) -- Function to scale the apical dendrite. Assumes the cell has an apical dendrite - see below.
                * **cell\_generator** (*callable*) -- Function to generate the cell. If provided, :paramref:`cellParamName` is ignored.
                * **tar** (*bool*) -- If True, the output directory is compressed to a tarball after the simulation is finished.

   .. attention::

      While the random state is set for the network embedding, capturing animal-to-animal and cell-to-cell
      anatomical variability, the random state is not used for the synaptic input patterns.
      Stochasticity in activity is introduced each time the activity generation method is called
      (see e.g. :py:meth:`~single\_cell\_parser.cell.PointCell.compute\_spike\_train\_times`).
      This means that the same seed will produce the same network embedding, but different synaptic input patterns.
      For this reason, the exact synaptic activations for each simulation run are saved as output data.

   .. deprecated:: 0.1
       The `scale\_apical` argument is deprecated and will be removed in a future version.
       Use the ``cell\_modify\_functions`` key in the :ref:`cell\_parameters\_format` file instead.

   :returns: Path to the output directory containing the simulation results.
   :rtype: str


.. 
   Warning: we replace underscores with an escape backslash about 4 lines above to avoid having Sphinx interpret arguments as links.
   However, this may cause issues with code blocks or other literal text, and malform markdown tables
   Use with caution?
..