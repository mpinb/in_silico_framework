
:mod:`simrun` ‚ù≠ :mod:`~simrun.PSP_with_cell_modification`

PSP_with_cell_modification
==========================

.. a hidden toctree for sidebar navigation
.. Include all visible children, except for attributes (makes things verbose)
.. These names need to match either a python object in the Python space, or (as done here) a direct link to an .rst file (without the suffix), either relative or absolute.
.. toctree::
   :hidden:

   PSP_with_current_injection </autoapi/simrun/PSP_with_cell_modification/PSP_with_current_injection>
   combine_PSP_objects </autoapi/simrun/PSP_with_cell_modification/combine_PSP_objects>

.. py:module:: simrun.PSP_with_cell_modification

.. autoapi-nested-parse::
   Calculate PSPs depending on cell modifications.

   Such modifications include:

   - A current injection into the soma, to ensure a certain resting potential
   - A coincident current injection triggering a burst, to investigate the effect of bursts on somatic integration of consecutive input
   - Synaptic input, to investigate the effect of one more synapse activation on top of such input to the somatic subthreshold potential


.. rst-class:: absolute-paragraph

Classes
-------


.. list-table:: 
   :header-rows: 0
   :widths: auto
   :class: summarytable
   
   * - :py:obj:`PSP_with_current_injection <simrun.PSP_with_cell_modification.PSP_with_current_injection>`
     - Simulate EPSPs and IPSPs while the soma is voltage-clamped to a fixed membrane potential.


.. rst-class:: absolute-paragraph

Functions
---------


.. list-table:: 
   :header-rows: 0
   :widths: auto
   :class: summarytable
   
   * - :py:obj:`combine_PSP_objects <simrun.PSP_with_cell_modification.combine_PSP_objects>`\ (PSPexc, PSPinh)
     - Combine two PSPs objects into one.


