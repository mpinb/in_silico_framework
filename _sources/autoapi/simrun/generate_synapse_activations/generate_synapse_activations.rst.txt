
.. backlink:

:mod:`simrun` ❭ :mod:`~simrun.generate_synapse_activations` ❭ :mod:`~simrun.generate_synapse_activations.generate_synapse_activations`


.. title:

generate_synapse_activations
============================


.. py:function:: simrun.generate_synapse_activations.generate_synapse_activations(cellParamName, evokedUpParamName, dirPrefix=&#39;&#39;, nSweeps=1000, nprocs=40, tStop=345, silent=True)

   Generates :paramref:`nSweeps` * :paramref:`nprocs` synapse activation files and writes them to
   the folder ``dirPrefix/results/simName``.

   For each process, a new seed is generated using the seed generator.

   :Parameters: * **cellParamName** (*str*) -- Path to a :ref:`cell\_parameters\_format` file,
                  containing information about the neuron morphology (link to a :ref:`hoc\_file\_format` file) and biophysical properties.
                * **evokedUpParamName** (*str*) -- Path to a :ref:`network\_parameters\_format` file,
                  containing information on synapse and network parameters per cell type.
                * **nSweeps** -- number of synapse activations per process
                * **nprocs** -- number of independent processes
                * **tStop** -- time in ms at which the synaptic input should stop.

   :Parameters: **cellParamName** (*str*) -- Path to cell parameter file.

   :returns: Can be computed with arbitrary scheduler.
             Computing delayed object returns List of lists. Each child list contains the paths
             of the synapse activation files generated by one worker
   :rtype: dask.delayed

   .. seealso:: :py:mod:`simrun.seed\_manager` for seed generation.


.. 
   Warning: we replace underscores with an escape backslash about 4 lines above to avoid having Sphinx interpret arguments as links.
   However, this may cause issues with code blocks or other literal text, and malform markdown tables
   Use with caution?
..