
.. backlink:

:mod:`singlecell_input_mapper` ❭ :mod:`~singlecell_input_mapper.singlecell_input_mapper` ❭ :mod:`~singlecell_input_mapper.singlecell_input_mapper.generate_nr_of_cells_spreadsheet` ❭ :mod:`~singlecell_input_mapper.singlecell_input_mapper.generate_nr_of_cells_spreadsheet.con_file_to_NumberOfConnectedCells_sheet`


.. title:

con_file_to_NumberOfConnectedCells_sheet
========================================


.. py:function:: singlecell_input_mapper.singlecell_input_mapper.generate_nr_of_cells_spreadsheet.con_file_to_NumberOfConnectedCells_sheet(con_file, write_output=True)

   Convert a :ref:`con\_file\_format` file to a dataframe with the number of connected presynaptic cells for each celltype and column.

   The dataframe has the following columns:

   - Presynaptic column: The column of the presynaptic cell.
   - Presynaptic cell type: The celltype of the presynaptic cell.
   - Connected presynaptic cells: The number of connected presynaptic cells.

   :Parameters: * **con\_file** (*str*) -- path to :ref:`con\_file\_format` file generated by :py:class:`~singlecell\_input\_mapper.single\_cell\_input\_mapper.network\_embedding.NetworkMapper`
                * **write\_output** (*bool*) -- If True, the output is saved as a .csv file in the same folder as the con\_file.
                  If False, the output is returned as a pandas DataFrame.

   .. warning:: This method is specific to the barrel cortex, as it assumes the presence of columns.

   :returns: The dataframe, or the path to the .csv file if :paramref:`write\_output` is True.
   :rtype: pandas.DataFrame | str


.. 
   Warning: we replace underscores with an escape backslash about 4 lines above to avoid having Sphinx interpret arguments as links.
   However, this may cause issues with code blocks or other literal text, and malform markdown tables
   Use with caution?
..