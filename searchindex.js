Search.setIndex({"titles": ["_is_running_on_dask_worker", "get_client", "Interface", "print_module_versions", "check_unset_range_mechanisms", "get_L5tt_template", "get_L5tt_template_v2", "hay_param_to_scp_neuron_param", "hay_params_to_scp_neuron_params", "L5tt_parameter_setup", "set_ephys", "set_hot_zone", "set_many_param", "set_morphology", "set_param", "Combiner", "Combiner.combine", "Combiner_Setup", "Combiner_Setup.append", "combiner", "connected_to_dend_beyond", "AHP_depth_abs", "AHP_depth_abs_check_2AP", "AP_height", "AP_height_check_1AP", "AP_width", "BAC_ISI", "BAC_ISI_check_2_or_3_APs", "BAC_ISI_check_repolarization", "BAC_caSpike_height", "BAC_caSpike_height_check_1_Ca_AP", "BAC_caSpike_height_check_Ca_spikes_after_Na_spike", "BAC_caSpike_height_check_gt2_Na_spikes", "BAC_caSpike_width", "BPAPatt", "BPAPatt_check_1_AP", "BPAPatt_check_relative_height", "STEP_adaptation_index", "STEP_check_2_ISIs", "STEP_coef_var", "STEP_fast_ahp_depth", "STEP_initial_ISI", "STEP_mean_frequency", "STEP_slow_ahp_depth", "STEP_slow_ahp_time", "STEP_time_to_first_spike", "find_crossing", "find_crossing_old", "ephys", "spike_count", "trace_check", "trace_check_err", "trace_check_max_prestim_dendrite_depo", "voltage_base", "voltage_base2", "Evaluator", "Evaluator.evaluate", "Evaluator_Setup", "evaluator", "RW", "RW._clean_the_pickles", "RW._concatenate_and_clean", "RW._load_pickle_or_parquet", "RW._normalize_aim_params", "RW._normalize_params", "RW._unnormalize_params", "RW.assess_aim_params_reached", "RW.run_RW", "RW", "Load", "Load.get_df", "Load.get_futures", "augment_ddf_with_PCA_space", "get_depolarization_index", "get_hyperpolarization_index", "get_index", "get_inside_fraction", "get_param_range_evolution_from_ddf", "RW_analysis", "normalize", "pandas_binby", "read_all", "read_parameters", "read_pickle", "robust_read_pickle", "evaluation_function_incremental_helper", "exploration_from_seedpoint", "convert_all_check_columns_bool_to_float", "evaluation_function_incremental_helper", "get_vector_norm", "utils", "get_branching_depth", "get_branching_depth_series", "get_first_order_bifurcation_sections", "get_inner_sec_dist_list", "get_main_bifurcation_section", "get_Combiner", "get_Evaluator", "get_Simulator", "get_fixed_params_example", "default_setup", "interpolate_vt", "map_truefalse_to_str", "record_BAC", "record_Step", "record_bAP", "BAC", "BAC.BAC_APheight", "BAC.BAC_ISI", "BAC.BAC_ahpdepth", "BAC.BAC_caSpike_height", "BAC.BAC_caSpike_width", "BAC.BAC_spikecount", "BAC.check", "BAC.get", "StepOne", "StepThree", "StepTwo", "_Step", "_Step.AHP_depth_abs", "_Step.AI", "_Step.APh", "_Step.APw", "_Step.DI", "_Step.ISIcv", "_Step.TTFS", "_Step.check", "_Step.fAHPd", "_Step.get", "_Step.mf", "_Step.sAHPd", "_Step.sAHPt", "bAP", "bAP._bAP_att", "bAP.bAP_APheight", "bAP.bAP_APwidth", "bAP.bAP_att2", "bAP.bAP_att3", "bAP.bAP_spikecount", "bAP.check", "bAP.get", "get_evaluate_BAC", "get_evaluate_StepOne", "get_evaluate_StepThree", "get_evaluate_StepTwo", "get_evaluate_bAP", "hay_evaluate_BAC", "hay_evaluate_StepOne", "hay_evaluate_StepThree", "hay_evaluate_StepTwo", "hay_evaluate_bAP", "evaluation", "nan_if_error", "normalize", "hay", "get_feasible_model_objectives", "get_feasible_model_params", "get_hay_objective_names", "get_hay_param_names", "get_hay_params_pdf", "get_hay_problem_description", "specification", "biophysics_fitting", "get_model_pdf_from_db", "get_pdf_selected", "model_selection", "_evaluate_invalid_fitness", "_get_offspring", "_record_stats", "_update_history_and_hof", "eaAlphaMuPlusLambdaCheckpoint", "get_max_generation", "get_mymap", "get_objective_function", "get_population_with_different_n_objectives", "optimizer", "robust_int", "run", "save_result", "setup_db_run", "start_run", "parameters", "param_selector", "param_to_kwargs", "set_fixed_params", "_append", "setup_stim", "setup_BAC", "setup_StepOne", "setup_StepThree", "setup_StepTwo", "setup_apical_epsp_injection", "setup_bAP", "setup_soma_step", "Simulator", "Simulator.get_simulated_cell", "Simulator.run", "Simulator_Setup", "Simulator_Setup._check_first_element_of_name_is_the_same", "Simulator_Setup._check_not_none", "Simulator_Setup.check", "Simulator_Setup.get", "Simulator_Setup.get_cell_params", "Simulator_Setup.get_cell_params_with_default_sim_prams", "Simulator_Setup.get_params", "Simulator_Setup.get_stim_response_measure_fun", "Simulator_Setup.get_stim_run_fun_by_stim", "Simulator_Setup.get_stim_setup_fun_by_stim", "Simulator_Setup.get_stims", "simulator", "run_fun", "Undemonize", "VariableThatDoesNotGetPickled", "_get_apical_sec_and_i_at_distance", "augment_cell_with_detailed_labels", "connected_to_structure_beyond", "execute_in_child_process", "execute_in_child_process_kept_alive", "get_inner_sec_dist_dict", "get_inner_section_at_distance", "get_main_bifurcation_section", "utils", "pool_helper", "run_cloudpickled_remotely", "tVec", "vmApical", "vmApical_position", "vmMax", "vmSoma", "IO", "analyze", "spatiotemporal_binning", "universal", "universal_pd", "_helper", "spike_detection", "spike_detection", "spike_in_interval", "split_synapse_activation", "temporal_binning", "temporal_binning_dask", "temporal_binning_pd", "universal", "calculate_vdensity_array", "calculate_vdensity_array_dask", "calculate_vdensity_array_pd", "calculate_vdensity_array_pixelObject", "get_bins", "voltage_binning", "DataBase", "_is_legacy_model_data_base", "_make_mdb_forwards_compatible", "get_db_by_unique_id", "data_base", "is_data_base", "is_isf_data_base", "is_sub_data_base", "is_sub_isf_data_base", "is_sub_model_data_base", "DataBaseRegister", "DataBaseRegister.add_db", "DataBaseRegister.keys", "DataBaseRegister.search_dbs", "_get_db_register", "assimilate_remote_register", "deregister_db", "data_base_register", "register_db", "db_initializers", "add_dendritic_spike_times", "add_dendritic_voltage_traces", "_build_core", "_build_dendritic_voltage_traces", "_build_param_files", "_build_synapse_activation", "_get_rec_site_managers", "builders", "data_parsing", "load_dendritic_voltage_traces", "load_dendritic_voltage_traces_helper", "read_voltage_traces_by_filenames", "read_voltage_traces_from_csv", "read_voltage_traces_from_file", "read_voltage_traces_from_files_pandas", "read_voltage_traces_from_npz", "get_file", "get_max_commas", "file_handling", "make_filelist", "_convert_con_fns_to_reldb", "_convert_netp_fns_to_reldb", "_convert_neup_fns_to_reldb", "_convert_syn_fns_to_reldb", "filepath_resolution", "load_simrun_general", "init", "load_initialized_cell_and_evokedNW_from_db", "create_metadata", "create_metadata_parallelization_helper", "get_voltage_traces_divisions_by_metadata", "metadata_utils", "optimize", "_copy_and_transform_con", "_copy_and_transform_network_param", "_copy_and_transform_neuron_param", "_copy_and_transform_syn", "_delayed_copy_transform_paramfiles_to_db", "_generate_target_filenames", "_get_unique_hoc_fns_from_neups", "_get_unique_landmark_fns_from_neups", "_get_unique_syncons_from_netps", "construct_param_filename_hashmap_df", "param_file_parser", "load_param_files_from_db", "_check_needs_reoptimization", "_reoptimize_key", "reoptimize", "reoptimize_db", "_get_dumper", "_hash_file_content", "utils", "augment_synapse_activation_df_with_branch_bin", "compute_AP_array", "compute_ISI_array", "compute_ISI_from_st", "compute_ISI_from_st_list", "get_bin", "get_bin_adjacency_map_in_section", "get_bin_soma_distances_in_section", "get_binsize", "get_max_depolarization_per_ms", "get_max_per_ms_on_pandas_dataframe", "get_neighboring_spatial_bins", "get_neuron_param_file", "get_section_distances_df", "get_spatial_bin_names", "get_synapse_activation_array_weighted", "get_time_groups", "prepare_ANN_batches", "load_syn_weights", "run_delayeds_incrementally", "save_SA_batch", "spike_times_to_onehot", "temporal_binning_augmented_sa", "applyfun", "synapse_activation_binning", "init", "merge_results_together", "postfun", "prefun", "save_groupby", "synapse_activation_postprocess_dask", "synapse_activation_postprocess_pandas", "tree_reduction", "cache", "create_modular_db_path", "create_reldb_path", "dbopen", "dbopen", "resolve_db_path", "resolve_modular_db_path", "resolve_netp_reldb_paths", "resolve_neup_reldb_paths", "resolve_reldb_path", "InterProcessLockNoWritePermission", "InterProcessLockNoWritePermission.acquire", "InterProcessLockNoWritePermission.release", "_get_locking_config", "_get_locking_server_client_from_config", "get_lock", "get_locking_client", "get_locking_server", "get_locking_server_client", "get_read_lock", "get_write_lock", "distributed_lock", "update_config", "DataBaseException", "ISFDataBaseException", "exceptions", "data_base", "Loader", "Loader.get", "check", "dump", "cell", "Loader", "Loader.get", "bundle_delayeds", "category_to_str", "check", "dump", "get_numpy_dtype_as_str", "get_writer_function", "dask_to_categorized_msgpack", "my_dask_writer", "read_object_meta", "str_to_category", "dump", "dask_to_msgpack", "Loader", "Loader.get", "check", "check_df_suitable_for_pq", "dump", "dask_to_parquet", "load_helper", "save_helper", "generic_to_specific_databases_module_name", "get_dumper_string_by_dumper_module", "get_dumper_string_by_savedir", "LoaderDumper", "Loader", "Loader.get", "ManagedFolder", "ManagedFolder.get_file", "ManagedFolder.join", "ManagedFolder.listdir", "check", "dump", "just_create_folder", "Loader", "Loader.get", "check", "dump", "just_create_isf_db", "load", "Loader", "Loader.get", "check", "dump", "numpy_to_msgpack", "Loader", "Loader.get", "check", "dump", "numpy_to_npy", "Loader", "Loader.get", "check", "dump", "numpy_to_npz", "Loader", "Loader.get", "check", "dump", "numpy_to_zarr", "Loader", "Loader.get", "check", "dump", "pandas_to_msgpack", "Loader", "Loader.get", "check", "dump", "pandas_to_parquet", "Loader", "Loader.get", "check", "dump", "pandas_to_pickle", "Loader", "parent_classes", "Loader", "Loader.get", "check", "dump", "reduced_lda_model", "Loader", "Loader.get", "SharedNumpyStore", "SharedNumpyStore._get_fname", "SharedNumpyStore._get_fname_from_metadata", "SharedNumpyStore._get_metadata_from_fname", "SharedNumpyStore._get_metadata_from_name", "SharedNumpyStore.append_save", "SharedNumpyStore.close", "SharedNumpyStore.flush", "SharedNumpyStore.get_expected_file_length", "SharedNumpyStore.load", "SharedNumpyStore.save", "SharedNumpyStore.update", "Uninterruptible", "_check_filesize_matches_shape", "_get_offset_and_size_in_bytes", "check", "dump", "shared_numpy_store", "memmap_from_disk", "shared_array_from_disk", "shared_array_from_numpy", "shared_array_from_shared_mem_name", "Loader", "Loader.get", "check", "dump", "to_cloudpickle", "Loader", "Loader.get", "check", "dump", "to_msgpack", "Loader", "Loader.get", "check", "dump", "to_pickle", "get_meta_filename", "get_numpy_dtype_as_str", "utils", "read_object_meta", "save_object_meta", "set_object_meta", "dask_wrappers", "read_csvs", "IO", "isf_data_base", "ISFDataBase", "ISFDataBase._check_key_format", "ISFDataBase._check_writing_privilege", "ISFDataBase._convert_key_to_path", "ISFDataBase._detect_dumper_string_of_existing_key", "ISFDataBase._find_dumper", "ISFDataBase._get_str", "ISFDataBase._infer_missing_metadata", "ISFDataBase._initialize", "ISFDataBase._is_initialized", "ISFDataBase._register_this_database", "ISFDataBase._set_unique_id", "ISFDataBase._subkeys", "ISFDataBase._write_metadata", "ISFDataBase.check_if_key_exists", "ISFDataBase.create_managed_folder", "ISFDataBase.create_shared_numpy_store", "ISFDataBase.create_sub_db", "ISFDataBase.get", "ISFDataBase.get_id", "ISFDataBase.get_mkdtemp", "ISFDataBase.keys", "ISFDataBase.ls", "ISFDataBase.maybe_calculate", "ISFDataBase.read_db_state", "ISFDataBase.register_dumper", "ISFDataBase.remove", "ISFDataBase.rename", "ISFDataBase.save_db_state", "ISFDataBase.set", "LoaderWrapper", "MetadataAccessor", "MetadataAccessor.keys", "_check_working_dir_clean_for_build", "get_dumper_from_folder", "get_isfdb_by_unique_id", "isf_data_base", "make_all_str", "settings", "DelayedKeyboardInterrupt", "DelayedKeyboardInterrupt.handler", "bcolors", "cache", "calc_recursive_filetree", "chunkIt", "colorize_key", "colorize_str", "convertible_to_int", "delete_in_background", "df_colnames_to_str", "fancy_dict_compare", "first_line_to_key", "flatten", "get_file_or_folder_that_endswith", "get_file_or_folder_that_startswith", "utils", "is_db", "mkdtemp", "myrepartition", "pandas_to_array", "pooled_std", "rename_for_deletion", "select", "silence_stdout", "skit", "split_file_to_buffers", "synchronous_ddf_concat", "unique", "wait_until_key_removed", "PSP_with_current_injection", "PSP_with_current_injection._get_current_dependent_vt", "PSP_with_current_injection._objective_fun", "PSP_with_current_injection.get", "PSP_with_current_injection.get_neuron_param_with_current_injection", "PSP_with_current_injection.get_psp_simulator", "PSP_with_current_injection.get_psp_simulator_exc_and_inh_combined", "PSP_with_current_injection.optimize_holding_current", "PSP_with_current_injection.plot_current_injection_voltage_trace", "combine_PSP_objects", "PSP_with_cell_modification", "_evoked_activity", "generate_synapse_activations", "generate_synapse_activations", "get_cell_with_network", "get_cell_with_network", "simrun", "DataExtractor_spatiotemporalSynapseActivation", "DataExtractor_spatiotemporalSynapseActivation._get_spatial_bin_level", "DataExtractor_spatiotemporalSynapseActivation._get_spatiotemporal_input", "DataExtractor_spatiotemporalSynapseActivation.get", "DataExtractor_spatiotemporalSynapseActivation.get_groups", "DataExtractor_spatiotemporalSynapseActivation.get_sorted_keys_by_group", "DataExtractor_spatiotemporalSynapseActivation.get_spatial_binsize", "DataExtractor_spatiotemporalSynapseActivation.setup", "_DataExtractor", "_DataExtractor.setup", "data_extractor", "modular_reduced_model_inference", "DataSplitEvaluation", "DataSplitEvaluation.add_isi_dependent_random_split", "DataSplitEvaluation.add_random_split", "DataSplitEvaluation.add_result", "DataSplitEvaluation.compute_scores", "DataSplitEvaluation.get_splits", "DataView", "DataView.setup", "Rm", "Rm._gather_results", "Rm.add_data_extractor", "Rm.add_strategy", "Rm.extract", "Rm.get_n_trials", "Rm.get_results", "Rm.run", "get_n_workers_per_ip", "reduced_model", "Solver_COBYLA", "Solver_COBYLA._optimize", "Solver_COBYLA._setup_optimizer", "_Solver", "_Solver._setup_optimizer", "_Solver.optimize_all_splits", "_Solver.optimize_one_split", "_Solver.setup", "solver", "RaisedCosineBasis", "RaisedCosineBasis.compute", "RaisedCosineBasis.get", "RaisedCosineBasis.get_raised_cosine", "RaisedCosineBasis.get_superposition", "RaisedCosineBasis.visualize", "RaisedCosineBasis.visualize_w", "Strategy_spatiotemporalRaisedCosine", "Strategy_spatiotemporalRaisedCosine._convert_x_static", "Strategy_spatiotemporalRaisedCosine._get_score_static", "Strategy_spatiotemporalRaisedCosine._get_x0", "Strategy_spatiotemporalRaisedCosine._setup", "Strategy_spatiotemporalRaisedCosine.compute_basis", "Strategy_spatiotemporalRaisedCosine.get_color_by_group", "Strategy_spatiotemporalRaisedCosine.normalize", "Strategy_spatiotemporalRaisedCosine.visualize", "_Strategy", "_Strategy._get_score", "_Strategy._get_x0", "_Strategy._objective_function_static", "_Strategy._setup", "_Strategy.add_solver", "_Strategy.get_score_static", "_Strategy.get_y_static", "_Strategy.set_split", "_Strategy.setup", "clear_memory", "convert_to_numpy", "dereference", "strategy", "make_weakref", "parameters_to_cell", "parameters_to_cell", "Opaque", "rerun_db", "rerun_db", "RobustDaskDelayedExecution", "RobustDaskDelayedExecution.add_delayed_to_db", "RobustDaskDelayedExecution.get_status", "RobustDaskDelayedExecution.reset_status", "RobustDaskDelayedExecution.run_db", "_assert_value", "_wrapper", "robust_dask_delayed_execution", "run_existing_synapse_activations", "run_existing_synapse_activations", "run_new_simulations", "run_new_simulations", "get_seed", "seed_manager", "sim_trial_to_cell_object", "simtrial_to_cell_object", "trial_to_cell_object", "PSPs", "PSPs._get_cell_and_nw_map", "PSPs._setup_computation", "PSPs.get_merged_synapse_coordinates", "PSPs.get_optimal_g", "PSPs.get_summary_statistics", "PSPs.get_synapse_coordinates", "PSPs.get_synapse_coordinates_with_psp_amplitude", "PSPs.get_voltage_and_timing", "PSPs.get_voltage_traces", "PSPs.plot_vt", "PSPs.run", "PSPs.visualize_psps", "analyze_voltage_trace", "calculate_optimal_g", "ePSP_summary_statistics", "generate_ex_network_param_from_network_embedding", "generate_inh_network_param_from_network_embedding", "get_optimal_g", "get_summary_statistics", "get_tMax_vMax", "get_tMax_vMax_baseline", "get_voltage_and_timing", "synaptic_strength_fitting", "linear_fit", "linear_fit_pdf", "merge_celltypes", "run_ex_synapse", "run_ex_synapses", "set_ex_synapse_weight", "set_inh_synapse_weight", "chunkIt", "get_cellnumbers_from_confile", "get_default_arguments", "get_fraction_of_landmarkAscii", "get_fraction_of_landmarkAscii_dir", "utils", "load_param_file_if_path_is_provided", "select_cells_that_spike_in_interval", "set_default_arguments_if_not_set", "silence_stdout", "split_network_param_in_one_elem_dicts", "tar_folder", "Event", "analyze", "PSTH_from_spike_times", "RecordingSite", "RecordingSiteManager", "RecordingSiteManager._read_landmark_file", "RecordingSiteManager.set_up_recording_site", "RecordingSiteManager.update_recordings", "SpikeInit", "SpikeInit.analyze_single_spike", "SpikeInit.vm_steady_state", "compute_mean_psp_amplitude", "compute_uPSP_amplitude", "compute_vm_histogram", "compute_vm_std_windows", "membrane_potential_analysis", "simple_spike_detection", "vm_mean", "vm_std", "compute_distance_to_soma", "compute_syn_distance", "compute_syn_distances", "compute_syn_distances_2Dprojected", "compute_synapse_distances_times", "get_dist", "synanalysis", "synapse_activation_times", "Cell", "Cell.add_synapse", "Cell.distance_between_pts", "Cell.distance_to_soma", "Cell.get_range_var_conductances", "Cell.get_section_adjacancy_map", "Cell.get_synapse_activation_dataframe", "Cell.init_time_recording", "Cell.max_distance", "Cell.re_init_cell", "Cell.record_range_var", "Cell.remove_synapses", "PointCell", "PointCell._add_synapse_pointer", "PointCell._next_interval", "PointCell.append", "PointCell.compute_spike_train_times", "PointCell.is_active", "PointCell.play", "PointCell.turn_off", "PySection", "PySection._compute_bounds", "PySection._compute_relative_pts", "PySection._compute_seg_diameters", "PySection._compute_seg_pts", "PySection._compute_total_area", "PySection._get_seg_conductance", "PySection._init_range_var_recording", "PySection._init_vm_recording", "PySection._re_init_range_var_recording", "PySection._re_init_vm_recording", "PySection.get_range_conductances", "PySection.set_3d_geometry", "PySection.set_segments", "cell", "BAC_injection", "BAC_injection", "apical_current_injection", "apical_current_injection", "apical_epsp_injection", "apical_epsp_injection", "blender_recorder", "blender_recorder", "get", "cell_modify_functions", "scale_apical", "scale_apical", "scale_apical_dendrite", "scale_by_detailed_compartment", "soma_current_injection", "soma_current_injection", "synaptic_input", "synaptic_input", "CellParser", "CellParser._add_spines", "CellParser._add_spines_ar", "CellParser._create_ais", "CellParser._create_ais_Hay2013", "CellParser._insert_ion_properties", "CellParser.apply_cell_modify_functions", "CellParser.determine_nseg", "CellParser.get_cell", "CellParser.insert_hh_membrane", "CellParser.insert_membrane_properties", "CellParser.insert_passive_membrane", "CellParser.insert_range_mechanisms", "CellParser.set_up_biophysics", "CellParser.spatialgraph_to_cell", "CellParser.update_range_mechanisms", "cell_parser", "create_cell", "single_cell_parser", "init_neuron_run", "NetworkMapper", "NetworkMapper._activate_presyn_cells", "NetworkMapper._apply_network_modify_functions", "NetworkMapper._assign_anatomical_synapses", "NetworkMapper._assign_synapse_weights", "NetworkMapper._connect_functional_synapses", "NetworkMapper._connect_spike_trains", "NetworkMapper._create_functional_connectivity_map", "NetworkMapper._create_pointcell_activities", "NetworkMapper._create_presyn_cells", "NetworkMapper._create_spiketrain_activities", "NetworkMapper._map_complete_anatomical_realization", "NetworkMapper._map_functional_realization", "NetworkMapper.create_functional_realization", "NetworkMapper.create_network", "NetworkMapper.create_saved_network", "NetworkMapper.create_saved_network2", "NetworkMapper.re_init_network", "NetworkMapper.reconnect_network", "NetworkMapper.reconnect_saved_synapses", "activate_functional_synapse", "network", "sample_times_from_rates", "get", "network_modify_functions", "silence_synapses_by_somadist", "silence_synapses_by_somadist", "silence_synapses_by_somadist_and_spike_source", "silence_synapses_by_somadist_and_spike_source", "_celltype_matches", "_has_evoked", "change_evoked_INH_scaling", "change_glutamate_syn_weights", "change_ongoing_interval", "inactivate_evoked_activity_by_celltype_and_column", "inactivate_evoked_and_ongoing_activity_by_celltype_and_column", "network_param_modify_functions", "multi_stimulus_trial", "set_stim_onset", "create_functional_network", "create_synapse_realization", "network_realizations", "ParameterSet", "ParameterSet._resolve_path", "ParameterSet._unwrap", "ParameterSet._wrap", "ParameterSet.save", "ParameterSet.to_dict", "ParameterSet.update", "_read_params_to_dict", "build_parameters", "parameters", "load_NMODL_parameters", "resolve_parameter_paths", "_Edge", "_Edge.is_valid", "reader", "read_complete_synapse_activation_file", "read_functional_realization_map", "read_hoc_file", "read_landmark_file", "read_pruned_synapse_realization", "read_scalar_field", "read_spike_times_file", "read_synapse_activation_file", "read_synapse_realization", "read_synapse_weight_file", "ScalarField", "ScalarField.get_mesh_coordinates", "ScalarField.get_scalar", "ScalarField.get_voxel_bounds", "ScalarField.get_voxel_center", "ScalarField.is_in_bounds", "ScalarField.resize_mesh", "scalar_field", "sec_distance_to_soma", "cell_to_serializable_object", "convert_dict_of_hoc_arrays_to_dict_of_np_arrays", "convert_hoc_array_to_np_array", "serialize_cell", "load_cell_from_file", "restore_cell_from_serializable_object", "save_cell_to_file", "SimControl", "SimControl.go", "SimControl.set_IClamp", "SimControl.set_recording", "SimControl.show", "sim_control", "spines_update_network_paramfile", "spines_update_synapse_distribution_file", "ExSyn", "ExSyn.activate_hoc_syn", "Synapse", "Synapse.activate_hoc_syn", "Synapse.disconnect_hoc_synapse", "Synapse.is_active", "synapse", "SynapseMapper", "SynapseMapper._compute_path_length", "SynapseMapper._create_voxel_edge_map", "SynapseMapper._intersect_bboxes", "SynapseMapper._pt_in_box", "SynapseMapper.create_synapses", "SynapseMapper.map_pruned_synapse_realization", "SynapseMapper.map_synapse_model_distribution", "SynapseMapper.map_synapse_realization", "synapse_mapper", "generate_landmark_template", "writer", "value_to_color", "write_PSTH", "write_all_traces", "write_cell_simulation", "write_cell_synapse_locations", "write_functional_map", "write_functional_realization_map", "write_landmark_file", "write_landmarks_colorcoded_to_folder", "write_presynaptic_spike_times", "write_pruned_synapse_locations", "write_sim_results", "write_spike_times_file", "write_synapse_activation_file", "write_synapse_weight_file", "create_average_celltype_PSTH_from_clusters", "create_evoked_PSTH", "evoked_PSTH_from_spike_times", "load_cluster_trials", "load_spike_times", "scan_directory", "create_network_parameter", "evoked_network_param_from_template", "load_cell_number_file", "whisker_evoked_PSTH", "singlecell_input_mapper", "map_singlecell_inputs", "map_singlecell_inputs", "create_network_parameter", "ongoing_network_param_from_template", "load_cell_number_file", "Cell", "Cell.add_synapse", "Cell.distance_to_soma", "Cell.get_bounding_box", "Cell.remove_synapses", "CellParser", "CellParser.get_cell", "CellParser.spatialgraph_to_cell", "PointCell", "PointCell._add_synapse_pointer", "PySection2", "PySection2._compute_bounds", "PySection2._compute_length", "PySection2._compute_relative_pts", "PySection2.set_3d_geometry", "Synapse", "cell", "con_file_to_NumberOfConnectedCells_sheet", "generate_nr_of_cells_spreadsheet", "singlecell_input_mapper", "NetworkMapper", "NetworkMapper._compute_parameter_distribution", "NetworkMapper._compute_sample_distance", "NetworkMapper._compute_summary_tables", "NetworkMapper._create_anatomical_connectivity_map", "NetworkMapper._create_anatomical_realization", "NetworkMapper._create_presyn_cells", "NetworkMapper._generate_output_files", "NetworkMapper._get_representative_sample", "NetworkMapper._precompute_anatomical_area_celltype_synapse_densities", "NetworkMapper._test_population_convergence", "NetworkMapper._write_landmark_files", "NetworkMapper._write_population_output_files", "NetworkMapper.create_network_embedding", "NetworkMapper.create_network_embedding_for_simulations", "NetworkMapper.create_network_embedding_from_synapse_densities", "network_embedding", "_Edge", "_Edge.is_valid", "reader", "read_celltype_numbers_spreadsheet", "read_connections_spreadsheet", "read_hoc_file", "read_scalar_field", "ScalarField", "ScalarField.get_mesh_coordinates", "ScalarField.get_scalar", "ScalarField.get_voxel_bounds", "ScalarField.get_voxel_center", "ScalarField.is_in_bounds", "ScalarField.resize_mesh", "scalar_field", "SynapseDensity", "SynapseDensity._clip_u", "SynapseDensity._compute_cell_density_grid", "SynapseDensity._compute_length_surface_area_density", "SynapseDensity._get_truncated_cone_area", "SynapseDensity._interpolate_radius", "SynapseDensity._intersect_bboxes", "SynapseDensity._is_zero", "SynapseDensity.compute_cell_PST", "SynapseDensity.compute_synapse_density", "SynapseMapper", "SynapseMapper._compute_path_length", "SynapseMapper._create_voxel_edge_map", "SynapseMapper._intersect_bboxes", "SynapseMapper._pt_in_box", "SynapseMapper.create_synapses", "synapse_mapper", "writer", "write_anatomical_realization_map", "write_cell_synapse_locations", "write_landmark_file", "write_population_and_sample_connectivity_summary", "write_population_connectivity_summary", "write_sample_connectivity_summary", "write_scalar_field", "ReaderLabView", "ReaderLabView.get_serialize_dict", "ReaderLabView.get_stim_times", "ReaderLabView.get_voltage_traces", "ReaderSmr", "ReaderSmr.get_serialize_dict", "ReaderSmr.get_stim_times", "ReaderSmr.get_voltage_traces", "STAPlugin_ISIn", "STAPlugin_ISIn.event_analysis_ISIn", "STAPlugin_ISIn.setup", "STAPlugin_TEMPLATE", "STAPlugin_TEMPLATE.get_result", "STAPlugin_TEMPLATE.setup", "STAPlugin_annotate_bursts_in_st", "STAPlugin_annotate_bursts_in_st.setup", "STAPlugin_bursts", "STAPlugin_bursts.event_analysis_bursts", "STAPlugin_bursts.setup", "STAPlugin_extract_column_in_filtered_dataframe", "STAPlugin_extract_column_in_filtered_dataframe.setup", "STAPlugin_ongoing", "STAPlugin_ongoing.setup", "STAPlugin_quantification_in_period", "STAPlugin_quantification_in_period.setup", "STAPlugin_response_latency_in_period", "STAPlugin_response_latency_in_period.setup", "STAPlugin_response_probability_in_period", "STAPlugin_response_probability_in_period.setup", "STAPlugin_spike_times_dataframe", "STAPlugin_spike_times_dataframe.setup", "SpikeDetectionCreastTrough", "SpikeDetectionCreastTrough._extract_spike_times", "SpikeDetectionCreastTrough._set_creast_trough", "SpikeDetectionCreastTrough.get_creast_and_trough_ampltidues_by_bins", "SpikeDetectionCreastTrough.get_default_events", "SpikeDetectionCreastTrough.get_serialize_dict", "SpikeDetectionCreastTrough.load", "SpikeDetectionCreastTrough.plot_creast_trough_histogram", "SpikeDetectionCreastTrough.run_analysis", "SpikeDetectionCreastTrough.save", "SpikeDetectionCreastTrough.show_events", "SpikeTimesAnalysis", "SpikeTimesAnalysis.apply_extractor", "SpikeTimesAnalysis.get", "SpikeTimesAnalysis.get_by_trial", "_sta_input_checker", "filter_short_ISIs", "filter_spike_times", "get_peaks_above", "get_period_label_by_time", "get_spike_times_from_row", "get_st_from_spike_times_and_stim_times", "get_upcross", "highpass_filter", "core", "load_reader", "read_labview_junk1_dat_files", "read_smr_file", "stimulus_interval_filter", "strip_st", "spike_analysis", "dask_to_pandas", "_decorators", "pr", "subsequent_calls_per_line", "PixelObject", "fig2np", "_figure_array_converter", "show_pixel_object", "CMVDataParser", "CMVDataParser._align_trunk_with_z_axis", "CMVDataParser._calc_ion_dynamics_timeseries", "CMVDataParser._calc_morphology", "CMVDataParser._calc_scalar_data_from_keyword", "CMVDataParser._calc_synapses_timeseries", "CMVDataParser._calc_voltage_timeseries", "CMVDataParser._data_per_section_to_data_per_point", "CMVDataParser._get_color_per_section", "CMVDataParser._get_ion_dynamics_at_timepoint", "CMVDataParser._get_synapses_at_timepoint", "CMVDataParser._get_timeseries_minmax", "CMVDataParser._get_voltages_at_timepoint", "CMVDataParser._has_simulation_data", "CMVDataParser._init_simulation_data", "CMVDataParser._keyword_is_scalar_data", "CMVDataParser._update_times_to_show", "CMVDataParser.scale_diameter", "CMVDataParser.set_cmap", "CellMorphologyInteractiveVisualizer", "CellMorphologyInteractiveVisualizer._get_interactive_cell", "CellMorphologyInteractiveVisualizer._get_interactive_dash_app", "CellMorphologyInteractiveVisualizer.interactive_app", "CellMorphologyInteractiveVisualizer.interactive_plot", "CellMorphologyVisualizer", "CellMorphologyVisualizer._write_png_timeseries", "CellMorphologyVisualizer.animation", "CellMorphologyVisualizer.plot", "CellMorphologyVisualizer.to_vtk", "CellMorphologyVisualizer.write_gif", "CellMorphologyVisualizer.write_video", "CellMorphologyVisualizer.write_vtk_frames", "get_3d_plot_morphology", "cell_morphology_visualizer", "_in_parallel_context", "_load_base64", "cell_to_animation", "cell_to_ipython_animation", "display_animation", "find_closest_index", "get_lines", "cell_to_ipython_animation", "init_fig", "parallelMovieMaker", "plot_lines_fun", "CurrentAnalysis", "CurrentAnalysis._compute_current_arrays", "CurrentAnalysis._get_current_by_rv", "CurrentAnalysis.plot_areas", "CurrentAnalysis.plot_lines", "current_visualizer", "Dendrogram", "Dendrogram._plot_dendrogram", "Dendrogram.get_parent_by_name", "Dendrogram.plot", "DendrogramStatistics", "DendrogramStatistics.plot", "_DendrogramDendriteStatistics", "_DendrogramDendriteStatistics._compute_dendrite_hist", "_DendrogramDendriteStatistics._get_amount_of_dendrite_in_bin", "_DendrogramDendriteStatistics._plot_dendrite_hist", "_DendrogramDendriteStatistics.plot", "_DendrogramSection", "_DendrogramSection._add_synapse", "_DendrogramSynapseStatistics", "_DendrogramSynapseStatistics._add_synapses", "_DendrogramSynapseStatistics._compute_synapse_hist", "_DendrogramSynapseStatistics._compute_synapse_statistics", "_DendrogramSynapseStatistics._plot_synapse_density_hist", "_DendrogramSynapseStatistics._plot_synapse_hist", "_DendrogramSynapseStatistics._plot_synapses_dendrogram_overlay", "_DendrogramSynapseStatistics.get_number_of_synapses_in_bin", "_DendrogramSynapseStatistics.plot", "_get_db_by_sec", "_get_max_somadistance", "dendrogram", "histogram", "histogram2", "histogram", "visualize", "manylines", "manylines", "manylines_helper", "plot_hoc", "rasterplot", "rasterplot", "rasterplot2", "rasterplot2_pdf_grouped", "svg2emf", "Arrow3D", "Arrow3D.do_3d_projection", "Arrow3D.draw", "_arrow3D", "_load_base64", "display_animation_from_images", "draw_arrow", "find_files_and_order_them", "utils", "value_to_color", "write_gif_from_images", "write_video_from_images", "voltage_trace_visualizer", "plot_vt", "visualize_vt", "convert_amira_lattice_to_vtk", "convert_amira_surf_to_vtk", "vtk", "save_cells_landmark_files_vtk", "write_vtk_pointcloud_file", "write_vtk_skeleton_file", "Bibliography", "The In Silico Framework (ISF)", "API reference", "&lt;no title&gt;", "File &amp; data formats", "Installation", "&lt;no title&gt;", "&lt;no title&gt;", "Tutorials", "Simulating biophysically detailed multi-compartmental models using ISF", "Evaluating biophysically detailed multi-compartmental models", "Generating biophysically detailed multi-compartmental models", "Embedding a neuron model in a network model", "Network activity", "Multi-scale modeling", "Generalized Linear Models (GLM)", "Welcome to the In Silico Framework (ISF)", "Barrel Cortex", "Morphology reconstruction", "Cell and NEURON API"], "terms": {"interfac": [0, 1, 3, 201, 380, 411, 426, 616, 624, 671, 766, 800, 922, 927, 989, 990, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256], "ip": [1, 2, 632, 1146], "none": [1, 5, 10, 11, 12, 13, 14, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 59, 61, 67, 76, 82, 85, 88, 103, 105, 118, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 170, 172, 176, 177, 178, 180, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 199, 212, 214, 223, 225, 226, 236, 240, 241, 244, 245, 247, 262, 264, 270, 271, 272, 273, 274, 278, 279, 280, 295, 299, 301, 315, 317, 321, 323, 324, 336, 339, 341, 344, 346, 348, 350, 352, 359, 363, 364, 366, 376, 386, 391, 395, 398, 401, 404, 406, 407, 418, 419, 423, 424, 450, 452, 480, 486, 487, 489, 490, 491, 492, 512, 513, 518, 520, 523, 530, 536, 540, 547, 561, 581, 584, 586, 598, 609, 618, 622, 624, 627, 630, 631, 635, 639, 640, 643, 646, 648, 649, 657, 658, 664, 665, 666, 675, 678, 688, 690, 694, 695, 696, 697, 698, 700, 702, 703, 704, 706, 707, 708, 710, 716, 717, 718, 722, 723, 724, 725, 726, 731, 735, 738, 741, 752, 753, 755, 758, 760, 761, 762, 771, 776, 777, 778, 781, 782, 786, 793, 798, 801, 803, 805, 812, 813, 816, 818, 826, 831, 833, 836, 838, 839, 845, 847, 850, 851, 852, 853, 854, 855, 858, 859, 865, 867, 871, 872, 876, 877, 881, 887, 891, 898, 906, 921, 922, 923, 932, 937, 944, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 969, 976, 984, 988, 990, 991, 1007, 1012, 1013, 1014, 1024, 1035, 1040, 1041, 1042, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1061, 1071, 1073, 1074, 1076, 1080, 1082, 1084, 1090, 1095, 1098, 1100, 1105, 1123, 1126, 1127, 1132, 1137, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1163, 1165, 1172, 1175, 1176, 1180, 1181, 1183, 1184, 1185, 1188, 1189, 1191, 1193, 1194, 1198, 1199, 1203, 1204, 1208, 1209, 1212, 1213, 1214, 1215, 1217, 1221, 1222, 1226, 1227, 1229, 1230, 1231, 1232, 1234, 1235, 1236, 1246, 1248, 1249, 1252, 1253, 1255, 1256], "client_port": [1, 2], "38786": [1, 1251, 1253, 1255], "timeout": [1, 2, 679, 1249, 1255], "120": [1, 1251, 1252], "get": [1, 2, 5, 6, 9, 69, 70, 71, 96, 97, 98, 99, 100, 106, 107, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 151, 155, 156, 157, 158, 159, 160, 161, 163, 165, 172, 173, 175, 194, 195, 197, 202, 203, 204, 205, 206, 207, 208, 212, 213, 218, 219, 220, 221, 225, 252, 253, 259, 261, 263, 275, 285, 286, 287, 295, 308, 309, 310, 328, 332, 333, 334, 335, 337, 338, 345, 346, 351, 352, 367, 370, 371, 372, 375, 381, 386, 391, 392, 394, 400, 409, 410, 411, 412, 414, 415, 416, 421, 427, 432, 437, 442, 447, 452, 457, 464, 469, 471, 472, 473, 474, 475, 479, 485, 493, 498, 503, 508, 509, 510, 511, 518, 522, 537, 539, 541, 544, 548, 553, 554, 571, 572, 573, 585, 587, 591, 603, 604, 605, 608, 610, 612, 616, 621, 624, 628, 629, 630, 632, 633, 643, 647, 650, 652, 653, 659, 661, 673, 679, 681, 691, 692, 696, 697, 699, 702, 703, 710, 711, 723, 728, 729, 732, 766, 770, 772, 786, 792, 797, 810, 813, 863, 875, 877, 906, 909, 964, 965, 967, 970, 972, 979, 1000, 1010, 1024, 1027, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1068, 1069, 1088, 1091, 1093, 1099, 1102, 1112, 1117, 1127, 1138, 1163, 1167, 1168, 1172, 1174, 1178, 1180, 1184, 1186, 1191, 1198, 1200, 1201, 1223, 1238, 1242, 1246, 1247, 1248, 1249, 1250, 1252, 1253, 1255], "distribut": [1, 2, 6, 39, 71, 160, 172, 175, 180, 240, 242, 270, 292, 295, 301, 302, 305, 317, 346, 351, 352, 375, 391, 404, 632, 639, 640, 707, 797, 831, 834, 837, 839, 843, 900, 904, 906, 937, 942, 944, 946, 964, 965, 973, 1000, 1002, 1012, 1013, 1024, 1032, 1034, 1042, 1047, 1156, 1157, 1158, 1162, 1163, 1164, 1165, 1170, 1208, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256], "client": [1, 2, 69, 172, 175, 180, 239, 240, 242, 270, 273, 294, 295, 301, 311, 315, 316, 317, 338, 339, 340, 346, 351, 352, 369, 370, 372, 373, 374, 375, 391, 394, 395, 398, 399, 404, 405, 624, 625, 630, 631, 637, 639, 640, 696, 707, 1151, 1152, 1153, 1156, 1157, 1158, 1159, 1208, 1247, 1248, 1249, 1251, 1252, 1253, 1255, 1256], "object": [1, 2, 5, 9, 13, 15, 17, 18, 19, 20, 55, 57, 58, 76, 78, 85, 88, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 104, 105, 115, 116, 117, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 155, 157, 160, 161, 162, 164, 172, 173, 174, 175, 176, 178, 180, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 200, 201, 202, 203, 209, 210, 212, 213, 214, 215, 218, 219, 220, 224, 225, 226, 227, 228, 249, 253, 270, 295, 296, 301, 306, 311, 313, 327, 332, 333, 338, 339, 340, 341, 345, 346, 350, 353, 364, 372, 373, 374, 375, 380, 381, 382, 383, 384, 385, 391, 392, 394, 402, 404, 405, 411, 412, 413, 418, 419, 420, 421, 423, 424, 425, 426, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 452, 454, 456, 459, 461, 464, 466, 468, 469, 471, 477, 480, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 518, 519, 523, 536, 541, 544, 548, 553, 554, 565, 567, 569, 573, 587, 590, 592, 593, 594, 596, 597, 599, 603, 611, 613, 614, 619, 624, 626, 627, 633, 634, 635, 637, 639, 640, 641, 642, 644, 650, 654, 659, 662, 667, 668, 669, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 688, 693, 694, 695, 723, 732, 733, 735, 743, 748, 749, 759, 760, 761, 762, 764, 766, 767, 777, 778, 786, 795, 796, 800, 801, 803, 805, 816, 818, 819, 825, 827, 833, 835, 837, 838, 841, 843, 846, 848, 859, 889, 890, 895, 898, 901, 915, 918, 919, 920, 921, 929, 930, 931, 933, 940, 952, 962, 963, 976, 980, 982, 985, 986, 987, 988, 989, 995, 996, 1000, 1017, 1019, 1022, 1023, 1035, 1038, 1040, 1047, 1051, 1057, 1058, 1061, 1062, 1067, 1072, 1075, 1077, 1079, 1083, 1085, 1087, 1088, 1093, 1094, 1097, 1099, 1100, 1112, 1113, 1115, 1124, 1125, 1127, 1128, 1130, 1136, 1139, 1140, 1146, 1147, 1148, 1151, 1159, 1160, 1163, 1164, 1165, 1167, 1168, 1169, 1170, 1171, 1172, 1175, 1176, 1178, 1179, 1181, 1182, 1183, 1184, 1187, 1188, 1191, 1192, 1195, 1196, 1197, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1208, 1209, 1210, 1212, 1213, 1214, 1216, 1217, 1222, 1228, 1237, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1255], "dask": [1, 2, 69, 72, 77, 78, 175, 231, 232, 234, 235, 236, 239, 240, 242, 244, 245, 268, 270, 271, 272, 273, 274, 277, 278, 279, 280, 283, 294, 295, 299, 306, 311, 317, 318, 330, 338, 339, 340, 341, 345, 346, 351, 352, 353, 380, 388, 391, 394, 395, 399, 400, 401, 402, 404, 405, 406, 407, 411, 456, 510, 511, 512, 513, 514, 515, 516, 518, 567, 573, 576, 584, 599, 603, 624, 625, 630, 631, 632, 639, 640, 676, 677, 678, 679, 680, 686, 688, 696, 707, 895, 915, 1119, 1120, 1152, 1153, 1156, 1157, 1158, 1203, 1212, 1242, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1255], "ha": [1, 2, 12, 28, 48, 59, 66, 88, 100, 101, 113, 139, 172, 175, 180, 191, 194, 220, 225, 226, 229, 241, 253, 266, 268, 295, 323, 324, 327, 333, 351, 360, 364, 365, 375, 391, 392, 395, 404, 468, 471, 509, 518, 541, 542, 546, 586, 587, 690, 696, 707, 735, 771, 786, 809, 810, 813, 828, 829, 830, 831, 834, 869, 887, 906, 942, 943, 944, 945, 975, 990, 997, 1024, 1055, 1127, 1129, 1133, 1140, 1151, 1203, 1214, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256], "been": [1, 2, 59, 66, 175, 202, 229, 253, 268, 295, 333, 360, 391, 468, 518, 541, 542, 546, 677, 735, 810, 819, 829, 831, 834, 837, 844, 850, 854, 855, 860, 863, 900, 1055, 1127, 1129, 1133, 1140, 1177, 1242, 1246, 1248, 1249, 1251], "setup": [1, 2, 15, 17, 19, 55, 56, 57, 58, 100, 154, 162, 172, 173, 179, 180, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 200, 207, 604, 612, 616, 622, 624, 626, 627, 637, 652, 659, 663, 664, 667, 786, 798, 930, 931, 932, 933, 990, 994, 1065, 1068, 1069, 1071, 1073, 1076, 1078, 1080, 1082, 1084, 1086, 1146, 1147, 1177, 1246, 1247, 1251, 1255, 1256], "paramet": [1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 156, 158, 159, 161, 162, 163, 164, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 228, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 252, 254, 255, 256, 257, 258, 259, 260, 262, 264, 265, 267, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 373, 374, 376, 383, 384, 391, 400, 401, 402, 404, 406, 407, 408, 409, 410, 413, 415, 416, 418, 419, 422, 423, 424, 426, 433, 434, 435, 438, 439, 440, 443, 444, 445, 452, 453, 454, 455, 459, 460, 466, 467, 471, 472, 473, 479, 480, 481, 484, 485, 486, 487, 489, 490, 491, 492, 494, 495, 496, 504, 505, 506, 508, 509, 511, 512, 513, 518, 519, 521, 522, 523, 524, 531, 532, 533, 535, 536, 538, 539, 540, 541, 543, 545, 547, 549, 551, 552, 553, 555, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 591, 592, 593, 596, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 613, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 637, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 662, 664, 665, 666, 667, 668, 670, 671, 672, 674, 675, 677, 678, 679, 680, 682, 683, 684, 685, 688, 689, 690, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 772, 774, 775, 776, 777, 778, 781, 782, 786, 792, 793, 797, 798, 799, 801, 803, 805, 810, 812, 813, 814, 816, 818, 819, 820, 821, 824, 825, 826, 829, 831, 832, 833, 834, 836, 837, 838, 839, 842, 843, 847, 848, 849, 850, 852, 853, 854, 855, 856, 858, 859, 860, 862, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 914, 915, 917, 919, 920, 921, 922, 928, 929, 930, 931, 932, 933, 937, 938, 940, 941, 942, 944, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 984, 985, 987, 988, 989, 990, 994, 995, 997, 1000, 1001, 1002, 1003, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1061, 1065, 1066, 1067, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1091, 1092, 1094, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1113, 1114, 1115, 1116, 1117, 1119, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1129, 1130, 1131, 1134, 1135, 1136, 1137, 1138, 1139, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1169, 1170, 1171, 1172, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1208, 1209, 1210, 1212, 1213, 1214, 1215, 1216, 1221, 1222, 1223, 1225, 1226, 1227, 1229, 1230, 1231, 1232, 1234, 1235, 1236, 1237, 1244, 1247, 1249, 1251, 1252, 1253, 1254, 1255, 1256], "int": [1, 20, 31, 40, 43, 44, 49, 50, 54, 59, 60, 61, 62, 67, 81, 91, 92, 94, 106, 115, 116, 117, 118, 132, 133, 170, 171, 172, 174, 176, 179, 180, 215, 218, 232, 233, 274, 286, 295, 322, 323, 324, 325, 326, 327, 328, 329, 336, 341, 342, 343, 344, 348, 353, 404, 406, 407, 479, 480, 485, 489, 490, 524, 540, 561, 562, 576, 584, 586, 598, 605, 624, 629, 631, 632, 640, 643, 644, 650, 651, 688, 690, 691, 694, 703, 723, 727, 742, 745, 758, 766, 767, 768, 769, 772, 782, 786, 876, 893, 930, 932, 947, 952, 961, 976, 981, 990, 995, 1004, 1010, 1013, 1014, 1017, 1057, 1058, 1061, 1062, 1065, 1066, 1078, 1086, 1088, 1093, 1111, 1114, 1116, 1127, 1136, 1137, 1139, 1147, 1150, 1151, 1153, 1154, 1156, 1157, 1158, 1159, 1165, 1166, 1167, 1172, 1175, 1189, 1198, 1200, 1208, 1213, 1221, 1222, 1226, 1227, 1230, 1234, 1247, 1250, 1252, 1253, 1255], "port": [1, 375, 1253], "us": [1, 2, 5, 7, 9, 12, 15, 19, 23, 24, 48, 51, 55, 59, 69, 71, 82, 84, 85, 88, 94, 103, 104, 105, 106, 115, 116, 117, 118, 132, 151, 154, 155, 157, 158, 159, 160, 161, 162, 167, 172, 175, 177, 182, 185, 186, 194, 197, 199, 200, 202, 203, 209, 210, 211, 212, 216, 217, 218, 219, 221, 225, 226, 229, 236, 239, 240, 241, 242, 253, 259, 264, 266, 270, 273, 275, 279, 280, 283, 294, 295, 296, 298, 301, 303, 304, 311, 317, 318, 338, 344, 345, 348, 349, 353, 355, 356, 357, 358, 360, 363, 367, 375, 380, 391, 394, 399, 401, 404, 408, 409, 426, 451, 463, 471, 480, 483, 485, 487, 488, 515, 517, 518, 524, 531, 533, 536, 540, 543, 547, 548, 549, 552, 554, 555, 567, 581, 584, 586, 599, 600, 615, 617, 618, 619, 622, 624, 626, 628, 631, 635, 640, 643, 646, 647, 650, 651, 659, 667, 668, 669, 671, 672, 675, 676, 678, 679, 685, 686, 688, 689, 690, 694, 695, 696, 710, 712, 713, 719, 721, 723, 724, 735, 736, 737, 745, 747, 749, 758, 759, 761, 768, 775, 778, 781, 785, 786, 790, 799, 810, 818, 819, 826, 832, 833, 834, 836, 838, 844, 845, 846, 849, 850, 852, 853, 854, 855, 857, 859, 860, 861, 863, 864, 866, 893, 895, 898, 906, 915, 922, 927, 929, 930, 931, 932, 933, 936, 937, 942, 949, 954, 962, 966, 971, 974, 975, 976, 980, 985, 988, 995, 996, 999, 1000, 1001, 1003, 1004, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1017, 1022, 1024, 1032, 1033, 1035, 1036, 1041, 1048, 1050, 1053, 1056, 1057, 1076, 1088, 1093, 1098, 1114, 1119, 1120, 1122, 1127, 1129, 1131, 1143, 1145, 1146, 1148, 1151, 1152, 1153, 1154, 1157, 1159, 1160, 1162, 1163, 1164, 1165, 1167, 1168, 1170, 1179, 1184, 1188, 1189, 1203, 1204, 1205, 1206, 1209, 1210, 1212, 1213, 1214, 1215, 1220, 1221, 1222, 1225, 1227, 1236, 1241, 1242, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256], "float": [1, 11, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 59, 66, 80, 85, 87, 88, 89, 90, 92, 94, 103, 105, 106, 115, 116, 117, 118, 132, 153, 164, 170, 180, 187, 188, 189, 190, 191, 192, 193, 203, 210, 213, 215, 218, 219, 225, 226, 234, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 269, 270, 295, 322, 326, 329, 587, 588, 598, 610, 617, 618, 624, 646, 662, 675, 678, 688, 690, 694, 695, 696, 703, 706, 708, 711, 714, 716, 717, 718, 723, 724, 726, 730, 731, 734, 741, 748, 749, 750, 751, 753, 755, 756, 757, 758, 763, 766, 767, 768, 769, 774, 780, 781, 782, 786, 792, 801, 803, 805, 810, 812, 813, 816, 818, 826, 853, 859, 870, 872, 876, 877, 893, 906, 908, 922, 932, 938, 949, 956, 957, 965, 981, 982, 990, 995, 1017, 1024, 1026, 1037, 1039, 1043, 1052, 1057, 1061, 1062, 1080, 1082, 1084, 1088, 1090, 1093, 1103, 1104, 1106, 1107, 1109, 1110, 1127, 1131, 1136, 1137, 1139, 1143, 1145, 1146, 1147, 1149, 1150, 1151, 1153, 1154, 1156, 1157, 1158, 1159, 1163, 1166, 1178, 1185, 1186, 1187, 1189, 1190, 1193, 1195, 1198, 1201, 1213, 1214, 1216, 1221, 1222, 1225, 1226, 1252, 1253, 1255], "second": [1, 45, 46, 47, 49, 80, 85, 105, 132, 133, 137, 160, 198, 335, 394, 557, 586, 763, 768, 848, 940, 968, 1006, 1038, 1065, 1066, 1067, 1112, 1157, 1227, 1247, 1248, 1252], "return": [1, 2, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 62, 63, 64, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 166, 167, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 201, 202, 203, 204, 205, 206, 207, 210, 213, 214, 218, 219, 220, 223, 224, 225, 226, 227, 228, 232, 233, 234, 236, 237, 238, 240, 241, 244, 246, 247, 249, 250, 252, 253, 254, 255, 256, 257, 258, 261, 263, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 285, 286, 288, 296, 297, 298, 299, 301, 306, 308, 309, 310, 311, 313, 314, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 373, 374, 376, 383, 392, 393, 394, 401, 402, 404, 406, 407, 408, 409, 410, 411, 415, 416, 418, 420, 423, 426, 433, 434, 439, 444, 453, 454, 459, 466, 472, 473, 474, 475, 479, 480, 485, 486, 489, 490, 491, 492, 494, 495, 504, 505, 508, 509, 511, 512, 513, 518, 520, 521, 522, 523, 524, 527, 530, 532, 533, 535, 536, 537, 538, 539, 540, 541, 548, 549, 550, 552, 553, 554, 555, 560, 561, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 579, 580, 583, 584, 585, 586, 588, 590, 592, 593, 596, 598, 599, 601, 603, 604, 605, 606, 607, 608, 609, 610, 614, 620, 621, 628, 629, 630, 632, 639, 640, 644, 645, 646, 647, 648, 651, 652, 653, 655, 656, 657, 658, 662, 664, 665, 666, 667, 669, 671, 672, 675, 678, 679, 681, 683, 688, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 741, 743, 744, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 765, 767, 768, 769, 770, 771, 772, 774, 780, 792, 797, 798, 801, 803, 805, 809, 810, 812, 813, 814, 816, 818, 819, 827, 838, 846, 847, 852, 853, 862, 868, 869, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 910, 911, 915, 917, 919, 920, 921, 935, 938, 940, 941, 947, 949, 950, 951, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 972, 973, 976, 979, 981, 982, 983, 984, 985, 986, 991, 997, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1012, 1013, 1014, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1028, 1029, 1034, 1035, 1037, 1038, 1040, 1041, 1043, 1045, 1046, 1047, 1050, 1051, 1053, 1054, 1055, 1056, 1058, 1059, 1060, 1062, 1063, 1064, 1066, 1069, 1074, 1088, 1089, 1090, 1091, 1092, 1093, 1098, 1101, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1119, 1122, 1124, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1142, 1143, 1144, 1145, 1147, 1148, 1151, 1154, 1155, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1183, 1185, 1186, 1187, 1188, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1208, 1209, 1210, 1212, 1213, 1214, 1215, 1221, 1222, 1223, 1225, 1226, 1227, 1229, 1230, 1231, 1232, 1234, 1235, 1236, 1246, 1247, 1248, 1250, 1251, 1252, 1255, 1256], "type": [1, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53, 55, 56, 57, 59, 62, 63, 64, 65, 66, 72, 73, 74, 75, 77, 79, 80, 82, 83, 84, 85, 87, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 155, 156, 157, 158, 159, 160, 163, 171, 172, 173, 174, 176, 179, 182, 184, 186, 194, 195, 196, 197, 201, 202, 203, 204, 205, 206, 207, 210, 213, 218, 219, 220, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 246, 247, 249, 250, 252, 254, 255, 256, 257, 258, 259, 261, 263, 275, 278, 279, 280, 281, 282, 283, 285, 286, 288, 296, 297, 298, 299, 301, 306, 308, 309, 310, 311, 313, 314, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 369, 373, 374, 375, 377, 378, 380, 383, 392, 401, 402, 406, 408, 410, 414, 415, 416, 418, 423, 426, 433, 434, 439, 444, 452, 453, 454, 459, 466, 471, 472, 473, 474, 475, 479, 480, 484, 485, 486, 489, 490, 491, 492, 494, 495, 504, 505, 508, 509, 511, 516, 518, 521, 522, 523, 524, 527, 532, 533, 535, 536, 537, 538, 539, 541, 552, 553, 555, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 579, 580, 583, 584, 585, 587, 588, 590, 592, 593, 596, 598, 599, 601, 603, 604, 605, 607, 608, 610, 616, 620, 621, 622, 624, 628, 629, 630, 632, 634, 637, 639, 640, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 655, 656, 657, 658, 662, 665, 666, 667, 671, 675, 678, 679, 681, 683, 688, 690, 691, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 774, 777, 778, 780, 786, 792, 797, 798, 801, 803, 805, 809, 812, 813, 814, 816, 818, 819, 827, 839, 840, 844, 846, 847, 848, 850, 860, 862, 865, 866, 867, 868, 869, 872, 878, 889, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 915, 917, 919, 920, 922, 930, 931, 932, 933, 935, 937, 938, 940, 941, 942, 943, 944, 945, 947, 948, 949, 953, 955, 958, 962, 963, 964, 965, 966, 967, 968, 970, 972, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 988, 990, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1032, 1034, 1037, 1038, 1041, 1042, 1043, 1045, 1046, 1047, 1050, 1051, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1069, 1071, 1073, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1089, 1091, 1092, 1093, 1099, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1113, 1115, 1116, 1117, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1131, 1135, 1136, 1137, 1138, 1139, 1142, 1144, 1145, 1146, 1147, 1148, 1151, 1154, 1155, 1159, 1162, 1163, 1164, 1165, 1166, 1167, 1169, 1170, 1171, 1172, 1174, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1191, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1208, 1209, 1210, 1212, 1216, 1223, 1225, 1227, 1241, 1246, 1247, 1250, 1251, 1253, 1255], "give": [2, 46, 47, 323, 324, 325, 852, 1013, 1014, 1015, 1251, 1256], "api": [2, 229, 251, 380, 419, 446, 524, 531, 622, 766, 800, 809, 837, 893, 932, 936, 974, 995, 1151, 1159, 1238, 1240, 1246, 1253], "access": [2, 57, 197, 205, 206, 207, 209, 266, 294, 364, 375, 380, 480, 489, 518, 536, 541, 547, 549, 554, 604, 605, 622, 623, 633, 685, 786, 837, 893, 906, 975, 1024, 1057, 1061, 1112, 1130, 1229, 1236, 1241, 1251, 1253], "all": [2, 15, 52, 56, 59, 76, 78, 81, 82, 85, 86, 87, 88, 90, 91, 93, 94, 115, 116, 117, 118, 121, 122, 162, 163, 164, 165, 172, 175, 180, 194, 196, 218, 219, 238, 240, 241, 259, 261, 262, 264, 279, 286, 287, 288, 290, 291, 294, 296, 301, 303, 304, 311, 316, 317, 327, 328, 332, 335, 338, 346, 351, 352, 358, 361, 362, 394, 395, 411, 426, 463, 471, 477, 478, 518, 523, 524, 530, 539, 540, 542, 546, 554, 555, 561, 603, 604, 608, 618, 619, 631, 632, 637, 639, 647, 650, 657, 659, 667, 669, 672, 675, 679, 683, 686, 688, 694, 696, 699, 701, 702, 703, 704, 718, 719, 723, 724, 730, 731, 732, 745, 750, 754, 760, 761, 764, 766, 770, 774, 775, 776, 777, 786, 791, 799, 819, 824, 829, 831, 832, 834, 836, 839, 842, 845, 854, 855, 856, 859, 860, 895, 896, 902, 903, 905, 906, 930, 931, 932, 933, 944, 948, 952, 955, 958, 961, 962, 970, 977, 980, 984, 1000, 1003, 1007, 1008, 1009, 1014, 1024, 1035, 1041, 1042, 1049, 1050, 1051, 1088, 1105, 1108, 1112, 1117, 1122, 1130, 1138, 1143, 1159, 1162, 1163, 1164, 1165, 1170, 1172, 1177, 1183, 1184, 1191, 1194, 1195, 1206, 1208, 1228, 1242, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255], "subpackag": [2, 380, 516], "submodul": [2, 268, 409, 411, 1241], "isf": [2, 3, 7, 367, 372, 408, 409, 837, 890, 974, 990, 1241, 1248, 1249, 1250, 1251], "biophysics_fit": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 747, 801, 803, 805, 810, 812, 814, 816, 834, 1229, 1230, 1241, 1244, 1246, 1247, 1248], "data_bas": [2, 171, 173, 178, 179, 180, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 677, 679, 694, 895, 1076, 1241, 1248, 1251, 1252, 1253], "simrun": [2, 203, 230, 268, 277, 281, 282, 284, 288, 294, 295, 296, 311, 333, 338, 339, 346, 350, 380, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 800, 864, 866, 975, 1244, 1246, 1251, 1253], "single_cell_pars": [2, 6, 11, 14, 197, 202, 221, 224, 296, 380, 383, 587, 598, 678, 696, 697, 719, 725, 726, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 974, 980, 985, 995, 996, 1000, 1016, 1017, 1022, 1031, 1167, 1241, 1244, 1246, 1253, 1256], "singlecell_input_mapp": [2, 766, 819, 837, 839, 844, 860, 878, 880, 893, 898, 913, 932, 937, 942, 946, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1241, 1244, 1249, 1253], "spike_analysi": [2, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117], "visual": [2, 524, 540, 561, 587, 595, 643, 649, 650, 786, 790, 879, 954, 1056, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1246, 1248, 1250, 1255], "The": [2, 5, 6, 7, 8, 10, 11, 12, 13, 14, 19, 20, 22, 24, 31, 33, 39, 40, 43, 44, 45, 46, 47, 48, 49, 52, 54, 55, 57, 72, 76, 83, 85, 91, 92, 93, 94, 95, 101, 103, 104, 105, 106, 115, 116, 117, 118, 132, 133, 155, 156, 157, 158, 159, 160, 162, 163, 164, 171, 172, 173, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 234, 236, 245, 249, 250, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 278, 279, 281, 282, 283, 284, 286, 288, 292, 294, 295, 296, 297, 299, 301, 302, 303, 304, 305, 306, 313, 314, 317, 321, 326, 327, 328, 329, 333, 334, 335, 336, 339, 340, 342, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 369, 373, 374, 375, 391, 394, 401, 404, 408, 409, 410, 415, 426, 433, 453, 467, 468, 471, 479, 481, 485, 489, 490, 491, 492, 494, 504, 508, 509, 511, 512, 513, 515, 518, 519, 521, 522, 523, 531, 532, 533, 535, 536, 537, 538, 539, 541, 542, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 557, 561, 563, 566, 574, 579, 587, 591, 600, 601, 615, 623, 633, 637, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 656, 657, 659, 662, 664, 665, 666, 667, 668, 671, 672, 674, 675, 677, 678, 679, 680, 684, 685, 686, 688, 690, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 710, 714, 718, 719, 720, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 742, 749, 750, 752, 758, 762, 764, 766, 767, 768, 769, 772, 774, 776, 777, 780, 788, 792, 793, 797, 799, 800, 801, 803, 805, 810, 812, 813, 814, 816, 818, 826, 831, 832, 833, 837, 839, 840, 847, 848, 850, 858, 859, 860, 862, 865, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 889, 891, 892, 893, 897, 898, 900, 901, 904, 906, 907, 908, 909, 910, 911, 914, 915, 922, 928, 929, 937, 938, 939, 941, 942, 943, 944, 945, 947, 949, 950, 951, 952, 953, 954, 955, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 979, 980, 981, 987, 993, 997, 999, 1000, 1013, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1035, 1041, 1042, 1048, 1051, 1054, 1055, 1057, 1058, 1061, 1062, 1065, 1066, 1067, 1068, 1069, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1093, 1094, 1099, 1100, 1101, 1102, 1105, 1109, 1111, 1114, 1115, 1116, 1119, 1121, 1122, 1123, 1124, 1127, 1151, 1152, 1153, 1156, 1157, 1160, 1163, 1165, 1168, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1210, 1212, 1213, 1214, 1221, 1222, 1223, 1225, 1228, 1229, 1230, 1237, 1241, 1242, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256], "recommend": [2, 162, 229, 294, 296, 317, 357, 358, 895, 999, 1159, 1212, 1242, 1251, 1253, 1255], "wai": [2, 162, 268, 280, 299, 471, 517, 525, 554, 614, 679, 686, 810, 937, 974, 1001, 1035, 1162, 1163, 1164, 1165, 1170, 1248, 1249, 1253, 1255], "i": [2, 5, 6, 7, 10, 11, 12, 13, 15, 20, 24, 30, 32, 34, 35, 36, 38, 39, 40, 43, 44, 45, 46, 47, 48, 50, 51, 52, 54, 55, 56, 57, 59, 61, 66, 72, 73, 74, 75, 76, 77, 85, 88, 91, 95, 97, 100, 101, 103, 104, 105, 106, 107, 110, 111, 113, 115, 116, 117, 118, 121, 122, 123, 125, 129, 132, 133, 134, 135, 139, 160, 162, 170, 171, 172, 175, 176, 177, 179, 180, 182, 183, 185, 194, 197, 198, 199, 200, 201, 202, 209, 212, 214, 215, 218, 219, 220, 221, 223, 229, 232, 233, 239, 240, 241, 242, 243, 245, 246, 249, 253, 256, 257, 258, 259, 261, 262, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 292, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 311, 314, 316, 317, 318, 321, 322, 327, 334, 336, 342, 344, 347, 348, 349, 350, 351, 353, 355, 356, 357, 358, 363, 364, 365, 367, 375, 380, 383, 391, 392, 394, 401, 402, 404, 409, 411, 415, 418, 419, 422, 423, 424, 433, 434, 438, 439, 440, 443, 444, 445, 453, 454, 455, 459, 466, 468, 471, 480, 481, 485, 486, 487, 488, 494, 497, 504, 508, 509, 511, 512, 513, 518, 519, 523, 524, 525, 527, 529, 531, 536, 539, 541, 543, 544, 547, 548, 549, 551, 552, 554, 557, 561, 563, 567, 569, 573, 574, 577, 583, 586, 587, 591, 594, 597, 599, 600, 604, 609, 612, 613, 614, 615, 617, 619, 621, 622, 624, 629, 631, 635, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 655, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 672, 673, 675, 676, 677, 679, 682, 683, 684, 685, 686, 688, 690, 694, 695, 696, 698, 700, 701, 704, 705, 707, 710, 712, 713, 714, 718, 719, 721, 723, 724, 730, 732, 733, 734, 735, 736, 737, 741, 744, 749, 750, 751, 752, 753, 755, 758, 762, 766, 769, 770, 771, 772, 775, 778, 781, 783, 785, 786, 788, 790, 792, 793, 797, 799, 809, 810, 812, 819, 822, 823, 826, 827, 831, 832, 833, 834, 837, 838, 839, 840, 842, 844, 846, 848, 850, 852, 854, 855, 858, 859, 860, 866, 868, 869, 870, 871, 872, 878, 879, 887, 893, 894, 895, 897, 898, 900, 902, 904, 906, 907, 908, 909, 910, 911, 913, 931, 932, 933, 935, 937, 939, 941, 942, 944, 949, 950, 956, 962, 966, 970, 971, 973, 974, 975, 977, 980, 985, 986, 987, 988, 990, 993, 995, 996, 997, 999, 1000, 1002, 1004, 1005, 1008, 1011, 1013, 1017, 1018, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1035, 1039, 1040, 1041, 1042, 1046, 1047, 1050, 1051, 1052, 1055, 1057, 1058, 1062, 1066, 1069, 1074, 1081, 1088, 1090, 1092, 1093, 1098, 1101, 1103, 1105, 1107, 1109, 1112, 1113, 1115, 1116, 1119, 1122, 1123, 1127, 1131, 1134, 1137, 1138, 1139, 1142, 1145, 1146, 1147, 1148, 1150, 1151, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1172, 1175, 1176, 1179, 1180, 1181, 1183, 1184, 1185, 1187, 1188, 1189, 1191, 1192, 1193, 1194, 1195, 1198, 1199, 1201, 1203, 1204, 1205, 1212, 1213, 1214, 1216, 1222, 1223, 1225, 1227, 1229, 1230, 1236, 1237, 1238, 1241, 1242, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1254, 1255, 1256], "import": [2, 44, 380, 409, 411, 809, 810, 891, 1206, 1215, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256], "jupyt": [2, 380, 518, 1162, 1168, 1253, 1255], "notebook": [2, 518, 1146, 1147, 1153, 1162, 1164, 1168, 1221, 1246, 1248, 1250, 1252, 1253, 1255], "follow": [2, 6, 86, 160, 165, 194, 271, 294, 349, 369, 375, 394, 467, 468, 471, 472, 473, 474, 475, 518, 526, 542, 546, 548, 604, 606, 650, 690, 721, 762, 828, 830, 831, 832, 847, 887, 915, 939, 942, 962, 963, 970, 972, 974, 975, 976, 977, 979, 997, 1003, 1020, 1021, 1055, 1098, 1109, 1130, 1162, 1163, 1164, 1165, 1170, 1173, 1223, 1238, 1241, 1249, 1250, 1251, 1252, 1253], "manner": [2, 294, 1250], "you": [2, 84, 86, 162, 175, 180, 245, 259, 266, 294, 295, 480, 515, 524, 533, 534, 536, 540, 547, 679, 800, 814, 856, 876, 942, 954, 966, 973, 974, 975, 1146, 1147, 1149, 1150, 1154, 1237, 1238, 1241, 1242, 1246, 1247, 1248, 1249, 1251, 1252, 1255], "have": [2, 6, 59, 66, 87, 91, 95, 101, 175, 180, 202, 211, 215, 218, 219, 221, 240, 241, 242, 266, 286, 316, 317, 394, 468, 518, 520, 549, 611, 677, 696, 724, 727, 732, 735, 760, 792, 810, 812, 819, 832, 837, 844, 850, 852, 854, 855, 860, 863, 876, 894, 897, 898, 899, 900, 901, 904, 952, 956, 972, 975, 979, 1000, 1004, 1008, 1009, 1018, 1023, 1032, 1041, 1089, 1102, 1105, 1122, 1127, 1134, 1138, 1177, 1235, 1241, 1242, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1255, 1256], "builtin": 2, "top": [2, 12, 175, 268, 597, 624, 633, 1032, 1228, 1250, 1252], "level": [2, 12, 175, 296, 624, 633, 922, 927, 999, 1159, 1238, 1241, 1252, 1253], "pipelin": [2, 175, 345, 346, 631, 672, 837, 974, 975, 999, 1048, 1241, 1249, 1250, 1255], "via": [2, 57], "get_client": [2, 1247, 1248, 1249, 1251, 1252, 1253, 1255], "get_db_by_unique_id": [2, 253, 266], "databas": [2, 162, 163, 165, 170, 171, 172, 173, 175, 178, 179, 180, 229, 230, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 290, 291, 294, 295, 296, 297, 301, 306, 311, 312, 313, 314, 316, 317, 333, 338, 339, 345, 346, 350, 351, 352, 355, 356, 357, 358, 359, 360, 361, 362, 363, 375, 380, 391, 394, 408, 411, 421, 422, 424, 425, 467, 481, 517, 518, 521, 523, 526, 527, 528, 529, 530, 531, 532, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 561, 563, 573, 574, 586, 603, 604, 605, 610, 614, 615, 624, 674, 677, 678, 679, 680, 683, 684, 685, 688, 693, 694, 890, 892, 895, 1065, 1071, 1073, 1076, 1078, 1080, 1082, 1084, 1086, 1099, 1101, 1246, 1247, 1249, 1250, 1251, 1252, 1253], "simrun_run_new_simul": [2, 1251, 1253], "run": [2, 15, 55, 56, 59, 67, 68, 85, 86, 88, 151, 152, 170, 172, 173, 175, 179, 180, 194, 195, 197, 206, 209, 210, 216, 217, 221, 222, 223, 282, 294, 296, 297, 338, 340, 375, 518, 557, 587, 588, 598, 600, 603, 615, 616, 619, 622, 624, 626, 627, 633, 678, 679, 682, 683, 690, 696, 698, 723, 766, 775, 837, 838, 839, 856, 922, 923, 927, 948, 952, 974, 1035, 1088, 1096, 1146, 1207, 1209, 1227, 1228, 1241, 1242, 1247, 1249, 1251, 1252, 1255, 1256], "new": [2, 59, 68, 168, 180, 292, 294, 301, 302, 303, 304, 305, 314, 316, 317, 350, 360, 376, 468, 471, 478, 480, 518, 545, 551, 599, 601, 603, 675, 690, 735, 745, 775, 837, 839, 852, 856, 928, 929, 1181, 1188, 1199, 1212, 1213, 1214, 1237, 1246, 1248, 1249, 1251, 1253, 1255, 1256], "simul": [2, 5, 9, 15, 55, 56, 85, 88, 98, 100, 101, 154, 162, 173, 180, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 245, 268, 271, 275, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 294, 295, 296, 297, 298, 299, 300, 311, 313, 327, 380, 587, 588, 590, 592, 593, 597, 598, 600, 601, 603, 624, 674, 675, 677, 678, 679, 687, 688, 689, 690, 693, 694, 695, 696, 698, 701, 704, 707, 708, 716, 717, 718, 719, 723, 724, 739, 740, 766, 772, 775, 790, 800, 818, 819, 827, 832, 833, 837, 838, 839, 856, 859, 864, 866, 876, 922, 923, 927, 932, 948, 952, 974, 980, 995, 1000, 1014, 1127, 1140, 1141, 1151, 1153, 1156, 1157, 1158, 1160, 1172, 1175, 1176, 1177, 1206, 1228, 1229, 1230, 1233, 1238, 1241, 1247, 1248, 1249, 1256], "take": [2, 57, 59, 98, 173, 209, 346, 351, 352, 356, 363, 395, 488, 491, 566, 569, 672, 677, 678, 694, 695, 789, 841, 993, 1008, 1014, 1163, 1168, 1223, 1246, 1247, 1248, 1249, 1250, 1252, 1255], "look": [2, 180, 259, 262, 508, 540, 768, 786, 969, 1246, 1247, 1248, 1250, 1251, 1255, 1256], "tutori": [2, 180, 974, 1238, 1240, 1242, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255], "exampl": [2, 7, 12, 14, 15, 55, 59, 85, 99, 100, 182, 194, 197, 237, 282, 311, 316, 334, 345, 347, 354, 357, 375, 380, 394, 408, 409, 535, 541, 557, 575, 577, 605, 607, 614, 615, 622, 638, 651, 660, 667, 672, 677, 701, 710, 711, 765, 770, 771, 776, 786, 793, 797, 809, 810, 824, 863, 865, 868, 872, 873, 874, 877, 898, 900, 902, 904, 922, 950, 951, 952, 955, 956, 958, 960, 961, 962, 964, 965, 967, 970, 972, 973, 979, 1021, 1032, 1040, 1102, 1104, 1116, 1142, 1177, 1178, 1182, 1228, 1241, 1246, 1247, 1248, 1249, 1252, 1254, 1255], "how": [2, 56, 75, 86, 280, 346, 350, 380, 524, 540, 557, 608, 610, 615, 628, 630, 848, 852, 893, 949, 974, 976, 1000, 1002, 1010, 1048, 1161, 1225, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1255, 1256], "print_module_vers": 2, "print": [2, 3, 76, 78, 85, 282, 357, 518, 524, 540, 557, 561, 575, 786, 809, 810, 965, 973, 1120, 1121, 1246, 1247, 1248, 1249, 1252], "version": [2, 3, 175, 244, 245, 283, 295, 301, 323, 324, 325, 351, 352, 380, 468, 518, 549, 671, 675, 688, 690, 694, 695, 822, 833, 854, 855, 857, 858, 895, 987, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "each": [2, 3, 5, 15, 21, 23, 48, 52, 55, 57, 66, 73, 74, 79, 85, 94, 118, 160, 175, 179, 180, 194, 197, 198, 200, 204, 235, 237, 261, 268, 273, 278, 280, 283, 294, 296, 299, 306, 311, 321, 322, 323, 324, 325, 328, 332, 334, 338, 341, 342, 380, 394, 401, 404, 450, 468, 480, 512, 569, 599, 621, 631, 633, 637, 644, 650, 651, 652, 655, 659, 660, 677, 686, 690, 696, 698, 700, 703, 705, 708, 710, 714, 718, 719, 723, 724, 728, 732, 737, 744, 753, 766, 770, 771, 786, 789, 790, 797, 799, 809, 819, 826, 832, 839, 840, 847, 850, 853, 854, 855, 859, 860, 876, 893, 897, 902, 904, 915, 931, 933, 944, 948, 950, 952, 955, 956, 961, 962, 964, 965, 966, 967, 970, 971, 973, 974, 975, 976, 977, 996, 997, 998, 999, 1000, 1001, 1002, 1011, 1017, 1019, 1020, 1035, 1040, 1041, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1065, 1066, 1071, 1073, 1093, 1112, 1116, 1120, 1122, 1127, 1134, 1135, 1136, 1137, 1138, 1139, 1147, 1149, 1150, 1152, 1154, 1156, 1157, 1159, 1209, 1213, 1223, 1233, 1234, 1235, 1236, 1238, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255], "modul": [2, 3, 9, 19, 48, 68, 78, 90, 151, 161, 165, 175, 186, 194, 209, 221, 248, 253, 266, 295, 301, 318, 338, 358, 408, 409, 463, 488, 518, 522, 523, 531, 536, 543, 547, 552, 554, 600, 633, 642, 643, 646, 674, 677, 689, 693, 719, 764, 800, 809, 841, 860, 862, 893, 895, 898, 966, 971, 975, 1016, 1022, 1048, 1120, 1168, 1177, 1202, 1205, 1228, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "l5tt_parameter_setup": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 162, 1246, 1248], "cell_param": [4, 9, 10, 11, 12, 13, 14, 194, 197, 1246, 1248, 1256], "templat": [5, 6, 9, 115, 116, 117, 118, 197, 463, 712, 713, 947, 948, 970, 971, 974, 975, 977, 978, 1250], "cell": [5, 6, 7, 9, 10, 11, 12, 13, 14, 20, 73, 86, 91, 92, 93, 94, 95, 98, 99, 100, 103, 104, 105, 156, 160, 162, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 201, 202, 205, 209, 210, 213, 214, 215, 218, 219, 220, 221, 224, 225, 226, 227, 228, 231, 238, 272, 273, 274, 275, 278, 286, 291, 294, 296, 301, 304, 306, 311, 312, 313, 327, 332, 333, 334, 338, 358, 362, 380, 381, 382, 383, 384, 411, 587, 591, 592, 593, 597, 598, 599, 600, 601, 602, 603, 674, 675, 677, 678, 688, 689, 690, 693, 694, 695, 696, 697, 701, 702, 703, 704, 706, 707, 710, 712, 713, 718, 719, 723, 724, 728, 730, 731, 732, 734, 740, 742, 743, 745, 746, 747, 748, 749, 758, 759, 760, 761, 762, 764, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 824, 825, 827, 828, 830, 832, 833, 835, 836, 837, 839, 840, 842, 844, 846, 847, 848, 850, 852, 853, 854, 855, 856, 859, 860, 863, 864, 865, 866, 867, 870, 872, 875, 877, 878, 896, 897, 900, 903, 904, 905, 915, 918, 919, 920, 921, 922, 929, 930, 931, 932, 933, 936, 937, 942, 948, 952, 953, 954, 955, 958, 959, 962, 963, 964, 965, 966, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1020, 1021, 1022, 1032, 1035, 1040, 1041, 1042, 1047, 1050, 1051, 1053, 1054, 1055, 1127, 1128, 1129, 1130, 1133, 1135, 1136, 1139, 1140, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1163, 1167, 1168, 1172, 1175, 1176, 1177, 1178, 1182, 1191, 1192, 1202, 1206, 1237, 1238, 1244, 1246, 1247, 1248, 1250, 1252, 1253, 1255], "dictionari": [5, 6, 9, 10, 11, 12, 13, 14, 16, 50, 54, 55, 56, 57, 59, 66, 85, 88, 94, 98, 99, 100, 101, 102, 107, 108, 109, 110, 111, 112, 113, 114, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 146, 147, 148, 149, 150, 163, 169, 172, 180, 194, 196, 218, 272, 275, 278, 303, 304, 321, 327, 339, 345, 347, 351, 352, 353, 361, 362, 376, 380, 467, 468, 471, 477, 478, 518, 554, 555, 568, 569, 573, 587, 604, 607, 616, 621, 624, 639, 640, 650, 651, 652, 655, 681, 688, 694, 695, 704, 705, 718, 722, 728, 729, 732, 733, 735, 737, 762, 766, 770, 771, 797, 810, 836, 838, 839, 846, 865, 867, 895, 896, 897, 900, 902, 903, 904, 905, 915, 916, 918, 931, 933, 937, 939, 945, 953, 954, 958, 959, 961, 962, 966, 967, 972, 979, 980, 1001, 1003, 1004, 1006, 1007, 1011, 1013, 1014, 1015, 1020, 1021, 1032, 1035, 1040, 1041, 1042, 1051, 1053, 1054, 1055, 1057, 1058, 1061, 1062, 1071, 1073, 1074, 1088, 1093, 1099, 1103, 1107, 1112, 1113, 1127, 1130, 1131, 1137, 1151, 1159, 1161, 1167, 1168, 1170, 1171, 1172, 1178, 1183, 1184, 1189, 1191, 1203, 1229, 1230, 1236, 1241, 1246, 1252, 1253], "l5pt": [5, 6, 9, 11, 73, 99, 156, 160, 162, 214, 215, 218, 219, 220, 814, 1040, 1246, 1248, 1249, 1252, 1255], "thi": [5, 6, 7, 9, 11, 12, 15, 19, 20, 39, 44, 48, 51, 52, 55, 56, 57, 59, 68, 72, 73, 74, 75, 78, 85, 86, 87, 88, 91, 95, 99, 101, 103, 104, 105, 106, 113, 115, 116, 117, 118, 132, 139, 151, 154, 156, 160, 161, 162, 165, 170, 172, 173, 175, 177, 179, 180, 182, 185, 186, 191, 194, 197, 199, 200, 201, 202, 209, 211, 212, 214, 215, 216, 217, 218, 219, 221, 229, 230, 233, 239, 240, 241, 243, 245, 246, 248, 249, 253, 259, 264, 265, 266, 268, 273, 275, 279, 280, 282, 283, 285, 286, 288, 294, 295, 297, 298, 299, 301, 303, 304, 306, 311, 317, 321, 322, 323, 324, 325, 327, 328, 330, 331, 333, 334, 335, 337, 338, 342, 344, 347, 348, 349, 351, 352, 353, 356, 357, 358, 360, 363, 367, 380, 383, 385, 388, 390, 391, 392, 394, 395, 399, 402, 404, 405, 408, 409, 410, 411, 415, 418, 419, 420, 423, 425, 426, 429, 431, 434, 436, 439, 441, 444, 446, 449, 450, 451, 454, 456, 459, 461, 463, 466, 468, 471, 475, 480, 481, 483, 486, 487, 488, 489, 495, 497, 500, 502, 505, 507, 509, 512, 515, 516, 518, 519, 523, 524, 528, 529, 531, 536, 537, 540, 541, 542, 543, 544, 546, 547, 548, 554, 557, 567, 586, 587, 592, 593, 598, 600, 601, 603, 611, 614, 615, 616, 617, 620, 622, 624, 633, 635, 637, 638, 640, 642, 643, 646, 652, 655, 659, 660, 661, 663, 667, 668, 669, 670, 672, 673, 674, 676, 677, 678, 679, 685, 689, 690, 693, 694, 695, 700, 707, 710, 712, 713, 714, 717, 719, 721, 722, 723, 724, 728, 731, 735, 737, 748, 749, 762, 764, 766, 768, 770, 778, 779, 785, 786, 789, 790, 791, 792, 794, 797, 799, 800, 803, 809, 810, 819, 822, 823, 826, 833, 834, 837, 838, 839, 840, 842, 844, 847, 848, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 862, 887, 893, 894, 895, 896, 898, 903, 906, 907, 912, 913, 929, 931, 932, 933, 942, 943, 944, 945, 954, 962, 963, 964, 965, 966, 971, 973, 974, 975, 980, 985, 988, 990, 993, 995, 997, 999, 1000, 1005, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1022, 1024, 1025, 1030, 1031, 1032, 1035, 1040, 1041, 1048, 1054, 1055, 1057, 1058, 1070, 1081, 1084, 1088, 1102, 1105, 1114, 1120, 1122, 1124, 1127, 1131, 1134, 1138, 1139, 1144, 1146, 1147, 1148, 1150, 1151, 1155, 1157, 1159, 1160, 1162, 1163, 1164, 1165, 1167, 1168, 1170, 1177, 1179, 1182, 1184, 1188, 1189, 1192, 1194, 1197, 1202, 1203, 1205, 1214, 1222, 1227, 1228, 1229, 1230, 1232, 1233, 1234, 1236, 1241, 1242, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1254, 1255, 1256], "method": [5, 6, 9, 11, 12, 15, 17, 20, 48, 55, 57, 59, 69, 73, 85, 86, 91, 99, 106, 113, 118, 132, 139, 151, 152, 154, 160, 161, 162, 165, 175, 177, 182, 186, 191, 194, 197, 199, 200, 204, 214, 221, 224, 228, 230, 243, 246, 248, 259, 264, 268, 279, 280, 283, 285, 295, 296, 297, 301, 321, 322, 323, 324, 325, 327, 330, 331, 333, 334, 335, 337, 338, 340, 345, 347, 348, 349, 351, 352, 356, 357, 360, 363, 364, 367, 380, 381, 386, 391, 394, 395, 400, 411, 412, 414, 421, 427, 432, 437, 442, 447, 452, 457, 464, 469, 471, 481, 487, 493, 498, 503, 510, 516, 518, 519, 531, 536, 540, 541, 543, 544, 547, 548, 549, 557, 587, 592, 593, 601, 604, 611, 612, 616, 617, 620, 622, 624, 626, 627, 631, 632, 633, 634, 635, 637, 638, 641, 643, 650, 652, 659, 660, 661, 663, 665, 667, 668, 669, 673, 678, 679, 689, 690, 694, 695, 696, 700, 701, 704, 708, 710, 711, 714, 715, 717, 718, 719, 721, 722, 728, 731, 737, 743, 747, 751, 755, 766, 768, 770, 778, 782, 786, 797, 819, 822, 832, 833, 834, 839, 840, 844, 847, 848, 852, 857, 858, 859, 860, 862, 881, 887, 893, 898, 906, 907, 912, 922, 930, 932, 937, 942, 954, 966, 973, 974, 975, 980, 985, 988, 990, 993, 995, 997, 999, 1000, 1005, 1013, 1014, 1017, 1022, 1024, 1025, 1030, 1032, 1035, 1040, 1041, 1042, 1054, 1055, 1057, 1061, 1065, 1068, 1070, 1071, 1073, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1092, 1099, 1105, 1119, 1120, 1124, 1127, 1134, 1138, 1144, 1146, 1150, 1151, 1159, 1172, 1178, 1179, 1182, 1184, 1187, 1188, 1189, 1191, 1192, 1194, 1197, 1205, 1214, 1216, 1222, 1228, 1229, 1230, 1232, 1233, 1234, 1236, 1237, 1246, 1248, 1253, 1255, 1256], "nest": [5, 12, 14, 55, 288, 294, 317, 518, 539, 554, 555, 570, 573, 624, 770, 797, 810, 836, 1006, 1032, 1040, 1127, 1134, 1138, 1147, 1149, 1150, 1154, 1229, 1230], "like": [5, 24, 29, 33, 85, 156, 169, 181, 182, 245, 273, 311, 380, 523, 544, 836, 838, 876, 1074, 1142, 1163, 1204, 1213, 1241, 1246, 1248, 1250, 1251, 1254, 1255], "can": [5, 15, 19, 44, 55, 56, 86, 101, 160, 162, 175, 177, 180, 181, 182, 183, 194, 197, 202, 203, 209, 215, 225, 226, 234, 240, 241, 259, 266, 282, 286, 294, 295, 296, 299, 338, 346, 355, 380, 383, 385, 390, 394, 402, 405, 411, 418, 420, 423, 425, 429, 431, 434, 436, 439, 441, 444, 446, 449, 451, 454, 456, 459, 461, 466, 468, 483, 486, 487, 488, 495, 497, 500, 502, 505, 507, 518, 523, 533, 534, 541, 543, 547, 565, 573, 581, 599, 600, 615, 626, 642, 643, 647, 669, 672, 679, 684, 688, 712, 713, 719, 735, 747, 749, 785, 786, 809, 810, 826, 831, 832, 837, 838, 841, 853, 854, 855, 859, 860, 863, 864, 866, 878, 895, 896, 903, 915, 918, 922, 927, 937, 971, 974, 975, 976, 977, 993, 1035, 1040, 1042, 1048, 1053, 1054, 1055, 1056, 1078, 1080, 1086, 1091, 1109, 1119, 1120, 1131, 1138, 1151, 1153, 1156, 1157, 1158, 1167, 1168, 1206, 1207, 1209, 1213, 1215, 1236, 1238, 1241, 1242, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256], "set": [5, 6, 9, 10, 12, 14, 49, 55, 56, 59, 68, 86, 96, 97, 98, 100, 156, 161, 162, 186, 194, 195, 197, 200, 201, 207, 209, 212, 273, 280, 294, 296, 342, 361, 362, 365, 367, 372, 375, 380, 392, 488, 509, 518, 519, 525, 526, 529, 534, 539, 541, 542, 549, 587, 591, 592, 593, 604, 608, 611, 615, 616, 618, 622, 629, 631, 633, 634, 636, 637, 638, 641, 643, 650, 654, 659, 667, 668, 672, 690, 719, 725, 726, 732, 735, 742, 743, 745, 766, 786, 794, 799, 801, 803, 805, 816, 818, 819, 827, 828, 830, 833, 838, 839, 853, 856, 858, 859, 871, 877, 922, 927, 970, 971, 973, 977, 984, 985, 986, 987, 991, 996, 999, 1035, 1042, 1065, 1067, 1068, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1105, 1127, 1129, 1132, 1133, 1144, 1146, 1147, 1148, 1150, 1151, 1152, 1153, 1156, 1157, 1213, 1224, 1226, 1227, 1234, 1241, 1246, 1247, 1248, 1250, 1251, 1252, 1255, 1256], "up": [5, 9, 46, 47, 55, 56, 91, 96, 97, 98, 100, 162, 186, 193, 194, 195, 197, 200, 201, 207, 209, 294, 296, 573, 582, 587, 591, 592, 593, 604, 611, 634, 636, 637, 638, 650, 654, 659, 668, 690, 742, 743, 745, 768, 775, 794, 801, 803, 805, 816, 818, 819, 827, 828, 830, 833, 838, 839, 853, 858, 922, 927, 985, 986, 987, 990, 996, 999, 1065, 1067, 1068, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1146, 1148, 1161, 1203, 1246, 1247, 1248, 1252, 1255, 1256], "valu": [5, 12, 21, 23, 24, 25, 26, 27, 28, 31, 32, 33, 36, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 52, 53, 55, 56, 59, 66, 77, 78, 79, 85, 87, 88, 90, 92, 94, 102, 106, 113, 114, 115, 116, 117, 118, 126, 128, 132, 139, 140, 151, 153, 155, 156, 160, 173, 196, 218, 232, 233, 237, 240, 241, 242, 243, 244, 245, 246, 247, 278, 318, 326, 327, 338, 345, 346, 348, 351, 352, 376, 394, 467, 468, 511, 518, 541, 547, 569, 573, 577, 580, 587, 593, 639, 650, 653, 657, 659, 662, 679, 681, 684, 685, 696, 698, 703, 706, 707, 708, 721, 723, 724, 725, 726, 729, 732, 766, 770, 771, 786, 810, 819, 828, 830, 831, 832, 834, 846, 865, 867, 871, 875, 881, 883, 884, 895, 897, 900, 902, 904, 905, 906, 908, 922, 924, 939, 945, 948, 949, 950, 953, 954, 957, 958, 961, 962, 970, 975, 976, 977, 993, 1004, 1021, 1024, 1026, 1032, 1035, 1042, 1051, 1054, 1055, 1057, 1058, 1060, 1061, 1064, 1074, 1088, 1090, 1099, 1101, 1103, 1107, 1109, 1110, 1114, 1127, 1135, 1137, 1138, 1145, 1147, 1150, 1159, 1163, 1166, 1168, 1203, 1204, 1208, 1213, 1214, 1224, 1225, 1247, 1248, 1249, 1251, 1253, 1255], "kei": [5, 12, 55, 56, 84, 85, 88, 196, 218, 253, 256, 257, 258, 259, 272, 273, 274, 278, 280, 294, 301, 314, 315, 317, 327, 333, 339, 345, 346, 347, 350, 351, 352, 467, 518, 519, 520, 521, 522, 524, 530, 532, 533, 534, 535, 536, 540, 541, 545, 547, 548, 549, 552, 554, 561, 563, 564, 566, 569, 573, 579, 586, 587, 604, 605, 607, 609, 610, 616, 621, 622, 639, 640, 650, 675, 678, 681, 684, 685, 688, 690, 694, 695, 700, 714, 718, 729, 737, 762, 766, 770, 771, 797, 810, 829, 834, 836, 838, 846, 849, 859, 865, 867, 887, 891, 896, 897, 900, 902, 903, 904, 905, 939, 945, 953, 954, 958, 961, 970, 1035, 1051, 1054, 1055, 1065, 1071, 1073, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1099, 1101, 1102, 1103, 1107, 1127, 1129, 1137, 1151, 1159, 1183, 1184, 1191, 1203, 1228, 1229, 1230, 1237, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1255, 1256], "ar": [5, 9, 10, 15, 16, 22, 27, 38, 39, 40, 43, 44, 48, 50, 55, 56, 57, 59, 60, 62, 68, 76, 78, 85, 86, 88, 91, 93, 94, 95, 99, 105, 108, 109, 110, 115, 116, 117, 118, 119, 120, 124, 127, 130, 131, 155, 156, 159, 160, 162, 164, 178, 186, 196, 197, 198, 200, 205, 206, 207, 211, 215, 218, 219, 220, 221, 234, 238, 240, 241, 242, 253, 266, 270, 272, 275, 278, 285, 288, 294, 295, 296, 301, 303, 304, 314, 317, 327, 336, 350, 351, 352, 353, 355, 356, 360, 363, 369, 375, 380, 394, 401, 406, 407, 415, 422, 450, 451, 468, 518, 519, 523, 535, 541, 561, 587, 598, 608, 614, 615, 621, 624, 626, 630, 633, 640, 643, 650, 652, 655, 656, 657, 658, 659, 669, 672, 675, 676, 677, 678, 681, 682, 683, 685, 686, 688, 690, 698, 705, 707, 710, 715, 718, 729, 732, 735, 766, 768, 770, 771, 775, 777, 778, 786, 789, 809, 810, 812, 814, 818, 820, 821, 825, 829, 831, 832, 834, 838, 845, 846, 847, 848, 850, 853, 854, 855, 859, 867, 871, 891, 893, 894, 895, 900, 906, 922, 927, 937, 942, 952, 962, 966, 970, 973, 974, 975, 990, 995, 1000, 1001, 1008, 1010, 1013, 1014, 1015, 1018, 1024, 1032, 1035, 1036, 1040, 1041, 1042, 1048, 1050, 1051, 1054, 1074, 1076, 1084, 1089, 1090, 1092, 1098, 1103, 1105, 1106, 1109, 1119, 1122, 1123, 1124, 1137, 1143, 1146, 1148, 1151, 1152, 1153, 1156, 1159, 1161, 1162, 1163, 1164, 1165, 1168, 1170, 1178, 1195, 1202, 1203, 1204, 1212, 1213, 1214, 1221, 1223, 1229, 1230, 1238, 1241, 1242, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255], "default": [5, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 34, 36, 38, 39, 40, 42, 43, 44, 45, 51, 59, 61, 62, 66, 85, 92, 94, 95, 96, 98, 106, 115, 116, 117, 118, 132, 133, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 187, 209, 210, 220, 229, 232, 233, 259, 262, 264, 266, 269, 270, 271, 272, 274, 279, 280, 288, 294, 295, 296, 301, 321, 322, 323, 324, 325, 326, 329, 334, 336, 341, 342, 343, 344, 346, 348, 349, 351, 352, 357, 375, 391, 392, 426, 452, 489, 490, 491, 492, 497, 508, 509, 518, 523, 524, 533, 535, 536, 538, 539, 540, 547, 552, 561, 583, 592, 593, 622, 643, 646, 648, 649, 658, 664, 667, 683, 696, 699, 702, 703, 706, 707, 712, 713, 723, 724, 729, 732, 734, 735, 741, 750, 751, 752, 753, 755, 758, 759, 760, 762, 766, 767, 770, 772, 775, 777, 778, 782, 793, 797, 819, 826, 828, 830, 832, 837, 838, 839, 850, 853, 854, 855, 856, 858, 859, 870, 879, 922, 924, 942, 944, 949, 975, 977, 981, 984, 985, 988, 990, 995, 1035, 1047, 1065, 1071, 1073, 1076, 1078, 1080, 1082, 1084, 1086, 1091, 1094, 1104, 1109, 1116, 1123, 1127, 1131, 1143, 1145, 1146, 1148, 1151, 1154, 1157, 1158, 1159, 1162, 1163, 1165, 1172, 1175, 1176, 1181, 1183, 1184, 1185, 1187, 1188, 1189, 1191, 1193, 1194, 1195, 1198, 1199, 1203, 1204, 1212, 1213, 1214, 1221, 1222, 1225, 1227, 1231, 1232, 1234, 1236, 1241, 1246, 1248, 1253, 1255], "need": [5, 162, 177, 194, 314, 511, 587, 594, 600, 615, 634, 641, 659, 660, 673, 676, 859, 942, 954, 975, 976, 1000, 1010, 1044, 1070, 1088, 1098, 1127, 1141, 1151, 1165, 1203, 1204, 1221, 1241, 1242, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1255], "fill": [5, 197, 323, 324, 347, 348, 798, 937, 939, 1000, 1006, 1032, 1035, 1040, 1042, 1044, 1127, 1129, 1130, 1132, 1133, 1141, 1204, 1205, 1247, 1248], "actual": [5, 177, 295, 360, 552, 600, 758, 759, 937, 1042, 1127, 1141, 1147, 1150, 1248, 1251, 1253, 1255], "structur": [5, 165, 215, 218, 219, 221, 288, 294, 327, 375, 518, 524, 540, 561, 573, 614, 650, 766, 770, 819, 820, 821, 824, 828, 829, 830, 831, 832, 834, 836, 896, 903, 939, 942, 976, 980, 1003, 1004, 1007, 1020, 1021, 1032, 1035, 1040, 1041, 1047, 1054, 1055, 1231, 1233, 1241, 1246, 1251, 1254, 1255], "e": [5, 9, 15, 38, 39, 40, 45, 55, 59, 76, 86, 88, 90, 91, 95, 105, 106, 113, 115, 116, 117, 118, 132, 133, 139, 162, 180, 185, 197, 198, 203, 205, 206, 207, 231, 282, 286, 295, 327, 335, 346, 351, 352, 353, 357, 391, 395, 468, 480, 518, 524, 540, 552, 554, 561, 624, 640, 643, 650, 659, 673, 679, 690, 694, 696, 701, 704, 718, 719, 724, 730, 732, 750, 760, 761, 762, 766, 770, 772, 786, 792, 797, 826, 831, 834, 836, 844, 846, 858, 859, 864, 865, 866, 878, 881, 887, 893, 906, 915, 937, 942, 944, 950, 962, 964, 970, 971, 973, 976, 977, 980, 990, 996, 1004, 1005, 1017, 1024, 1035, 1042, 1047, 1058, 1062, 1066, 1074, 1088, 1092, 1122, 1127, 1159, 1177, 1184, 1191, 1205, 1208, 1209, 1216, 1223, 1229, 1230, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256], "g": [5, 9, 45, 55, 86, 95, 105, 106, 113, 115, 116, 117, 118, 132, 139, 156, 159, 180, 185, 197, 198, 203, 205, 206, 207, 231, 282, 286, 295, 335, 346, 351, 352, 353, 357, 391, 395, 480, 518, 524, 540, 561, 624, 643, 650, 652, 653, 655, 659, 679, 690, 696, 703, 706, 708, 710, 719, 760, 761, 762, 766, 786, 792, 797, 828, 834, 836, 858, 859, 864, 865, 866, 893, 906, 915, 937, 942, 944, 962, 964, 971, 976, 977, 980, 990, 1005, 1017, 1024, 1035, 1047, 1066, 1074, 1088, 1159, 1177, 1205, 1208, 1209, 1223, 1229, 1230, 1241, 1246, 1247, 1249, 1252, 1253, 1255, 1256], "It": [5, 44, 57, 91, 162, 172, 177, 180, 191, 200, 209, 225, 226, 240, 241, 275, 294, 301, 316, 317, 348, 380, 531, 544, 548, 549, 569, 600, 615, 624, 635, 652, 659, 677, 678, 679, 685, 719, 797, 800, 819, 833, 837, 852, 859, 860, 913, 942, 971, 974, 1013, 1031, 1032, 1148, 1155, 1159, 1168, 1177, 1189, 1192, 1238, 1241, 1246, 1247, 1248, 1251, 1253, 1254], "provid": [5, 9, 10, 19, 56, 68, 78, 86, 88, 99, 151, 154, 161, 162, 165, 186, 197, 219, 230, 248, 268, 294, 321, 327, 328, 335, 338, 351, 358, 372, 375, 376, 380, 388, 394, 404, 411, 463, 471, 513, 515, 516, 517, 536, 543, 547, 554, 603, 616, 622, 624, 633, 642, 650, 663, 672, 674, 675, 677, 685, 690, 693, 694, 695, 710, 719, 732, 758, 764, 766, 786, 800, 809, 819, 837, 895, 906, 974, 975, 980, 989, 990, 1016, 1024, 1120, 1146, 1150, 1160, 1162, 1163, 1164, 1165, 1170, 1177, 1195, 1202, 1205, 1206, 1212, 1213, 1214, 1228, 1238, 1241, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1255], "inform": [5, 7, 10, 11, 48, 96, 97, 98, 103, 104, 105, 106, 115, 116, 117, 118, 132, 164, 191, 220, 225, 226, 229, 280, 294, 321, 338, 375, 380, 400, 404, 406, 426, 452, 455, 513, 518, 542, 546, 573, 577, 598, 599, 600, 689, 762, 766, 847, 848, 849, 856, 893, 897, 898, 900, 904, 915, 932, 936, 953, 955, 959, 962, 963, 970, 974, 975, 977, 995, 996, 1055, 1099, 1102, 1123, 1125, 1127, 1130, 1151, 1189, 1192, 1241, 1246, 1247, 1248, 1249, 1250, 1255], "For": [5, 11, 15, 55, 59, 66, 180, 194, 229, 245, 296, 311, 313, 316, 392, 472, 473, 509, 519, 564, 599, 614, 615, 690, 698, 700, 705, 714, 723, 782, 797, 800, 803, 809, 814, 825, 840, 878, 880, 937, 942, 944, 946, 973, 974, 976, 977, 996, 1047, 1054, 1055, 1145, 1241, 1242, 1246, 1249, 1251, 1253, 1254, 1256], "section": [5, 11, 20, 52, 91, 92, 93, 94, 95, 162, 186, 191, 213, 214, 215, 218, 219, 220, 221, 225, 226, 227, 321, 327, 328, 332, 334, 335, 338, 341, 483, 488, 742, 745, 758, 759, 762, 766, 767, 768, 769, 770, 771, 772, 776, 786, 788, 789, 790, 791, 794, 797, 798, 799, 800, 810, 812, 813, 814, 819, 826, 832, 893, 896, 898, 900, 903, 904, 905, 914, 915, 922, 930, 932, 937, 938, 943, 944, 945, 952, 953, 959, 962, 963, 974, 980, 981, 982, 990, 991, 992, 993, 994, 995, 996, 1017, 1022, 1035, 1042, 1043, 1044, 1051, 1127, 1129, 1130, 1131, 1134, 1135, 1136, 1138, 1139, 1147, 1149, 1150, 1151, 1153, 1154, 1156, 1157, 1159, 1172, 1173, 1174, 1178, 1180, 1189, 1190, 1191, 1192, 1200, 1222, 1224, 1241, 1246, 1248, 1249, 1251, 1252, 1256], "label": [5, 94, 191, 214, 215, 218, 219, 221, 225, 226, 275, 278, 650, 659, 662, 666, 742, 760, 761, 762, 764, 766, 772, 774, 786, 797, 810, 812, 813, 814, 819, 820, 821, 824, 828, 829, 830, 831, 834, 893, 894, 896, 898, 903, 915, 944, 954, 962, 980, 990, 1017, 1018, 1035, 1099, 1103, 1107, 1131, 1189, 1190, 1191, 1198, 1203, 1204, 1205, 1209, 1211, 1212, 1214, 1241, 1246, 1247, 1249, 1251, 1252, 1255, 1256], "an": [5, 15, 16, 19, 24, 48, 51, 55, 56, 57, 58, 78, 84, 85, 88, 95, 97, 99, 100, 103, 106, 115, 116, 117, 118, 132, 151, 152, 160, 162, 166, 175, 176, 178, 180, 181, 182, 185, 186, 191, 194, 197, 202, 209, 218, 219, 225, 226, 240, 241, 253, 259, 266, 268, 282, 301, 316, 321, 322, 323, 327, 338, 351, 356, 360, 391, 392, 394, 408, 411, 419, 424, 437, 438, 440, 441, 442, 443, 445, 446, 468, 471, 472, 475, 476, 480, 483, 487, 488, 491, 492, 497, 508, 509, 510, 512, 513, 514, 516, 518, 522, 533, 535, 547, 548, 553, 554, 561, 565, 573, 601, 616, 617, 624, 634, 641, 650, 653, 658, 659, 661, 667, 671, 678, 679, 683, 690, 696, 703, 716, 718, 719, 721, 725, 726, 732, 735, 751, 755, 778, 781, 786, 792, 803, 805, 806, 810, 819, 824, 826, 832, 833, 837, 839, 852, 860, 895, 899, 900, 937, 946, 948, 954, 956, 974, 975, 985, 987, 990, 996, 1004, 1032, 1034, 1035, 1041, 1042, 1049, 1050, 1056, 1074, 1089, 1099, 1100, 1102, 1104, 1112, 1117, 1122, 1123, 1125, 1126, 1127, 1130, 1135, 1144, 1146, 1147, 1148, 1150, 1151, 1153, 1156, 1157, 1160, 1162, 1165, 1168, 1178, 1179, 1184, 1187, 1191, 1195, 1196, 1197, 1208, 1212, 1213, 1214, 1219, 1221, 1222, 1224, 1231, 1232, 1233, 1238, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255], "soma": [5, 9, 11, 36, 48, 50, 91, 100, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 160, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 213, 215, 218, 219, 220, 221, 225, 226, 228, 288, 327, 328, 334, 335, 338, 346, 349, 351, 352, 587, 588, 597, 604, 609, 690, 723, 740, 758, 759, 760, 761, 762, 764, 766, 769, 771, 772, 773, 774, 786, 801, 803, 804, 805, 806, 810, 815, 816, 828, 836, 837, 863, 864, 865, 866, 867, 893, 896, 898, 914, 937, 938, 942, 944, 962, 980, 982, 990, 1001, 1003, 1017, 1021, 1035, 1040, 1042, 1043, 1047, 1054, 1055, 1127, 1128, 1140, 1151, 1163, 1167, 1168, 1178, 1180, 1182, 1184, 1185, 1186, 1191, 1193, 1196, 1198, 1199, 1201, 1230, 1241, 1246, 1247, 1248, 1251, 1252, 1254, 1255], "ai": [5, 7, 118, 160, 819, 822, 823, 833, 836, 1241, 1246, 1247, 1256], "apicaldendrit": [5, 94, 186, 191, 215, 218, 219, 225, 226, 760, 761, 766, 810, 812, 813, 990, 1001, 1017, 1040, 1047, 1179, 1198, 1241, 1246, 1251, 1256], "dendrit": [5, 9, 11, 20, 29, 30, 31, 32, 33, 34, 36, 48, 50, 52, 94, 95, 100, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 162, 187, 191, 197, 214, 218, 219, 221, 225, 226, 227, 269, 270, 272, 275, 277, 278, 279, 294, 295, 301, 321, 329, 675, 688, 690, 694, 695, 758, 759, 760, 761, 762, 764, 766, 772, 786, 803, 810, 811, 812, 813, 820, 821, 828, 937, 942, 944, 962, 975, 980, 990, 1000, 1017, 1035, 1040, 1047, 1131, 1142, 1151, 1179, 1182, 1184, 1185, 1186, 1187, 1188, 1191, 1196, 1198, 1230, 1237, 1241, 1246, 1247, 1248, 1249, 1251, 1253, 1255], "myelin": [5, 766, 786, 1241, 1246, 1256], "neuron": [5, 7, 8, 9, 46, 47, 48, 73, 101, 105, 154, 162, 180, 197, 203, 214, 291, 304, 308, 309, 311, 327, 328, 333, 334, 338, 362, 587, 598, 599, 600, 603, 674, 677, 678, 687, 688, 689, 690, 693, 694, 695, 696, 697, 719, 724, 739, 765, 766, 768, 773, 775, 778, 786, 791, 795, 796, 797, 798, 799, 800, 810, 814, 819, 825, 826, 832, 834, 835, 836, 837, 838, 839, 859, 860, 878, 891, 893, 914, 922, 927, 931, 932, 933, 934, 936, 937, 943, 945, 946, 974, 975, 989, 990, 994, 995, 996, 999, 1000, 1009, 1014, 1017, 1032, 1034, 1040, 1041, 1042, 1048, 1151, 1152, 1153, 1156, 1157, 1178, 1189, 1202, 1206, 1229, 1230, 1233, 1236, 1237, 1241, 1246, 1247, 1248, 1250, 1251, 1252, 1253, 1254, 1255], "_label": [5, 812, 814], "mechan": [5, 6, 411, 766, 776, 786, 792, 793, 795, 797, 800, 819, 831, 832, 833, 834, 836, 890, 891, 931, 932, 933, 977, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1256], "activ": [5, 103, 186, 187, 230, 231, 238, 239, 240, 241, 268, 274, 286, 294, 295, 321, 336, 338, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 394, 587, 592, 593, 597, 598, 599, 600, 603, 604, 608, 610, 614, 615, 643, 647, 650, 657, 658, 672, 678, 687, 688, 690, 693, 694, 695, 696, 698, 701, 704, 705, 711, 712, 713, 716, 717, 718, 723, 724, 732, 734, 740, 751, 762, 764, 766, 772, 778, 783, 784, 800, 810, 817, 818, 837, 839, 840, 845, 850, 852, 853, 854, 855, 857, 858, 859, 860, 863, 864, 866, 867, 869, 872, 873, 874, 875, 876, 877, 895, 896, 902, 903, 930, 932, 935, 936, 948, 962, 964, 965, 966, 970, 971, 973, 977, 995, 1000, 1016, 1078, 1079, 1080, 1081, 1112, 1127, 1132, 1137, 1151, 1152, 1153, 1154, 1156, 1157, 1159, 1160, 1205, 1206, 1209, 1233, 1234, 1237, 1242, 1246, 1247, 1249, 1253], "biophys": [5, 9, 73, 75, 78, 82, 85, 86, 154, 156, 162, 163, 165, 194, 195, 197, 201, 204, 209, 221, 311, 598, 599, 690, 766, 786, 799, 800, 819, 832, 833, 836, 837, 859, 980, 985, 1151, 1241, 1250, 1251, 1252, 1254, 1256], "ion": [5, 819, 824, 829, 832, 1127, 1129, 1131, 1136, 1151, 1153, 1154, 1156, 1157, 1158, 1160, 1172, 1175, 1176, 1177, 1206, 1237, 1241, 1246, 1248, 1256], "channel": [5, 9, 11, 73, 75, 78, 797, 819, 1061, 1062, 1127, 1153, 1156, 1157, 1158, 1241, 1246, 1247, 1248, 1250, 1256], "densiti": [5, 230, 243, 246, 248, 766, 770, 786, 797, 832, 937, 942, 974, 975, 976, 999, 1000, 1005, 1009, 1013, 1014, 1015, 1032, 1040, 1041, 1042, 1048, 1184, 1185, 1191, 1193, 1195, 1196, 1241, 1246, 1249], "properti": [5, 48, 50, 394, 598, 599, 690, 786, 799, 800, 819, 824, 828, 829, 830, 832, 837, 1237, 1241, 1246, 1250, 1252, 1254, 1256], "passiv": [5, 819, 820, 821, 830, 832, 970, 971, 973, 974, 1246, 1250, 1251], "membran": [5, 28, 48, 221, 225, 270, 275, 294, 587, 588, 597, 696, 740, 750, 751, 752, 754, 755, 766, 786, 794, 819, 820, 821, 828, 829, 830, 832, 915, 1127, 1131, 1148, 1151, 1153, 1156, 1157, 1158, 1159, 1160, 1167, 1246, 1248, 1256], "capacit": [5, 820, 821, 826, 1246], "sim": [5, 273, 278, 280, 282, 297, 311, 351, 352, 922, 1241, 1246, 1256], "t": [5, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 84, 197, 203, 209, 210, 282, 295, 480, 520, 643, 646, 650, 652, 655, 679, 701, 704, 716, 717, 718, 719, 724, 751, 754, 755, 758, 759, 762, 764, 778, 780, 838, 922, 948, 951, 960, 1041, 1057, 1061, 1104, 1106, 1107, 1110, 1112, 1127, 1172, 1237, 1241, 1246, 1247, 1248, 1249, 1252, 1253, 1255, 1256], "temperatur": [5, 203, 210, 922], "vinit": [5, 97, 98, 100, 197, 203, 209, 210, 838, 1241, 1246, 1256], "initi": [5, 115, 116, 117, 123, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 160, 203, 210, 230, 249, 268, 294, 295, 296, 333, 338, 339, 346, 350, 377, 378, 380, 411, 414, 518, 526, 527, 592, 593, 594, 603, 614, 622, 623, 650, 653, 659, 661, 677, 678, 690, 694, 745, 747, 749, 754, 766, 773, 775, 778, 786, 793, 795, 799, 819, 832, 833, 839, 922, 924, 1088, 1094, 1127, 1141, 1146, 1151, 1159, 1168, 1169, 1172, 1192, 1195, 1237, 1241, 1246, 1247, 1248, 1251, 1253, 1255, 1256], "voltag": [5, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 85, 88, 97, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 162, 164, 194, 196, 197, 203, 205, 209, 210, 221, 225, 227, 228, 230, 234, 235, 236, 243, 244, 245, 246, 248, 270, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 288, 294, 295, 297, 299, 301, 330, 331, 337, 338, 587, 595, 597, 690, 696, 701, 703, 704, 705, 706, 708, 709, 711, 716, 717, 718, 719, 722, 723, 724, 740, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 766, 786, 794, 799, 922, 925, 926, 948, 951, 960, 1057, 1060, 1061, 1062, 1064, 1088, 1089, 1093, 1098, 1106, 1110, 1112, 1127, 1131, 1133, 1136, 1139, 1140, 1142, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1167, 1172, 1173, 1175, 1206, 1208, 1228, 1229, 1230, 1237, 1246, 1248, 1253], "dt": [5, 197, 203, 209, 210, 750, 753, 754, 755, 838, 922, 1127, 1241, 1246, 1256], "time": [5, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 59, 88, 90, 97, 100, 101, 115, 116, 117, 118, 125, 131, 160, 172, 191, 203, 210, 224, 230, 231, 232, 233, 237, 239, 240, 241, 242, 243, 244, 246, 269, 270, 274, 294, 295, 322, 323, 324, 325, 330, 331, 336, 337, 338, 341, 342, 343, 344, 348, 351, 352, 380, 395, 467, 468, 518, 525, 549, 557, 587, 588, 598, 599, 600, 604, 606, 611, 614, 615, 624, 643, 650, 675, 678, 688, 690, 694, 695, 696, 701, 704, 705, 709, 711, 716, 717, 718, 719, 723, 724, 732, 734, 740, 741, 748, 749, 750, 751, 753, 754, 755, 756, 757, 762, 764, 765, 766, 772, 773, 778, 781, 782, 805, 818, 826, 838, 839, 849, 858, 859, 860, 861, 872, 876, 877, 895, 896, 902, 903, 915, 922, 931, 933, 948, 950, 951, 952, 958, 960, 961, 962, 964, 965, 966, 967, 968, 970, 971, 974, 977, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1071, 1072, 1073, 1074, 1075, 1077, 1078, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1092, 1093, 1098, 1099, 1103, 1104, 1105, 1108, 1109, 1110, 1112, 1114, 1116, 1117, 1127, 1129, 1131, 1132, 1133, 1136, 1137, 1138, 1139, 1143, 1146, 1148, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1163, 1165, 1167, 1168, 1172, 1175, 1206, 1211, 1212, 1213, 1214, 1221, 1226, 1234, 1246, 1247, 1248, 1250, 1251, 1252, 1253, 1256], "step": [5, 37, 39, 40, 41, 42, 43, 44, 45, 48, 55, 59, 96, 97, 98, 100, 101, 104, 113, 115, 116, 117, 118, 128, 139, 151, 164, 186, 187, 188, 189, 190, 192, 193, 194, 203, 210, 288, 322, 323, 324, 325, 338, 342, 600, 696, 723, 724, 750, 753, 810, 815, 816, 838, 840, 842, 848, 850, 853, 854, 855, 922, 948, 952, 975, 976, 1035, 1204, 1228, 1246, 1247, 1248, 1249, 1250, 1251, 1255], "recordingsit": [5, 197, 203, 209, 210, 278, 743, 745, 746, 754, 1241, 1246, 1256], "record": [5, 48, 54, 86, 103, 105, 162, 185, 186, 187, 193, 197, 203, 210, 270, 275, 277, 278, 279, 294, 675, 690, 694, 695, 742, 743, 745, 746, 754, 766, 773, 776, 786, 793, 794, 795, 796, 799, 922, 925, 952, 964, 965, 966, 968, 971, 977, 1106, 1177, 1246, 1247, 1248, 1251], "site": [5, 48, 54, 103, 105, 187, 191, 193, 197, 203, 210, 270, 275, 277, 278, 279, 294, 690, 742, 743, 745, 754, 778, 932, 934, 1246, 1248, 1249, 1252, 1253, 1255, 1256], "tstart": [5, 197, 203, 209, 210, 1163, 1168, 1241, 1246, 1247, 1251, 1256], "start": [5, 40, 43, 44, 48, 68, 86, 162, 175, 177, 180, 194, 198, 203, 210, 326, 485, 489, 490, 566, 572, 573, 587, 600, 681, 685, 686, 690, 734, 741, 749, 753, 755, 756, 757, 778, 782, 849, 906, 1024, 1037, 1057, 1061, 1080, 1082, 1084, 1093, 1103, 1127, 1136, 1139, 1143, 1146, 1149, 1151, 1152, 1153, 1156, 1157, 1158, 1163, 1189, 1213, 1216, 1238, 1242, 1246, 1247, 1248, 1249, 1252, 1253, 1255, 1256], "tstop": [5, 197, 203, 209, 210, 598, 599, 600, 674, 675, 677, 678, 687, 688, 689, 690, 693, 694, 695, 817, 818, 838, 1241, 1246, 1251, 1253, 1256], "stop": [5, 59, 68, 88, 172, 180, 203, 210, 598, 599, 675, 678, 688, 694, 695, 778, 782, 818, 1127, 1163, 1248, 1251, 1253], "parameterset": [5, 6, 10, 11, 12, 13, 14, 197, 202, 203, 303, 304, 313, 361, 362, 587, 601, 678, 696, 697, 712, 713, 723, 724, 733, 737, 818, 824, 825, 829, 831, 832, 834, 839, 843, 847, 859, 869, 870, 871, 872, 873, 874, 876, 877, 889, 890, 891, 892, 931, 932, 933, 973, 1246], "ident": [6, 12, 246, 913, 942, 1031], "get_l5tt_templ": [6, 9], "add": [6, 9, 13, 113, 139, 181, 184, 185, 187, 188, 189, 190, 191, 192, 193, 259, 260, 262, 264, 267, 269, 270, 271, 272, 294, 321, 349, 541, 624, 626, 627, 659, 664, 679, 680, 710, 728, 743, 746, 758, 759, 766, 767, 778, 779, 810, 817, 818, 819, 820, 821, 832, 833, 836, 891, 977, 980, 981, 988, 989, 1040, 1189, 1190, 1191, 1192, 1219, 1252, 1255], "specif": [6, 11, 48, 54, 73, 98, 99, 100, 154, 155, 156, 157, 158, 159, 160, 165, 194, 197, 214, 218, 219, 221, 294, 321, 327, 338, 357, 358, 379, 380, 409, 411, 518, 603, 614, 635, 637, 640, 659, 661, 663, 665, 668, 719, 732, 831, 832, 860, 863, 878, 943, 945, 964, 966, 969, 971, 974, 975, 997, 999, 1008, 1032, 1040, 1041, 1229, 1230, 1241, 1246, 1247, 1249, 1250], "cadynamics_e2": [6, 1246, 1248, 1256], "replac": [6, 292, 302, 305, 468, 1248, 1251], "cadynamics_e2_v2": [6, 1246, 1248], "see": [6, 48, 82, 85, 86, 154, 156, 160, 161, 164, 175, 180, 191, 194, 197, 220, 226, 269, 270, 295, 301, 377, 378, 380, 414, 518, 615, 690, 778, 781, 782, 799, 824, 832, 834, 840, 847, 849, 859, 878, 891, 895, 897, 900, 904, 905, 943, 945, 949, 953, 955, 959, 962, 996, 1005, 1041, 1050, 1129, 1131, 1145, 1159, 1216, 1220, 1225, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256], "skv3_1": [6, 1246, 1247, 1248, 1256], "linear": [6, 615, 700, 710, 714, 719, 720, 721, 831, 1237, 1255], "spatial": [6, 232, 321, 332, 334, 335, 336, 341, 604, 605, 608, 610, 615, 643, 650, 651, 652, 657, 786, 797, 799, 819, 826, 832, 833, 834, 836, 976, 1127, 1241, 1246, 1247, 1248, 1249, 1252, 1256], "intercept": [6, 557], "schaefer": [6, 1237, 1248], "et": [6, 7, 10, 11, 48, 85, 96, 97, 98, 100, 103, 104, 105, 106, 118, 132, 151, 154, 156, 157, 158, 159, 160, 161, 162, 186, 615, 672, 819, 822, 823, 833, 975, 999, 1230, 1248, 1249, 1252, 1255], "al": [6, 7, 10, 11, 48, 85, 96, 97, 98, 100, 103, 104, 105, 106, 118, 132, 151, 154, 156, 157, 158, 159, 160, 161, 162, 186, 615, 672, 819, 822, 823, 833, 975, 999, 1230, 1248, 1249, 1252, 1255], "4": [6, 15, 66, 85, 106, 115, 117, 164, 237, 334, 347, 380, 651, 690, 765, 770, 850, 958, 962, 965, 967, 975, 1092, 1098, 1104, 1116, 1237, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255], "py": [6, 11, 14, 180, 220, 221, 224, 237, 369, 557, 633, 650, 678, 809, 810, 1162, 1220, 1251, 1252, 1253, 1255, 1256], "class": [6, 11, 14, 15, 16, 17, 55, 56, 57, 59, 69, 106, 115, 116, 117, 118, 132, 162, 175, 177, 194, 197, 199, 211, 212, 237, 249, 259, 357, 364, 377, 378, 380, 381, 386, 400, 411, 412, 414, 421, 427, 432, 437, 442, 447, 452, 457, 462, 464, 469, 471, 483, 493, 498, 503, 517, 518, 529, 543, 548, 549, 557, 559, 575, 581, 587, 604, 612, 616, 622, 624, 634, 637, 638, 643, 650, 659, 663, 668, 676, 678, 679, 696, 723, 724, 739, 742, 743, 747, 766, 778, 786, 810, 819, 839, 853, 881, 893, 906, 922, 930, 932, 937, 974, 980, 985, 988, 990, 995, 999, 1000, 1017, 1024, 1032, 1041, 1042, 1057, 1058, 1061, 1062, 1065, 1068, 1071, 1073, 1074, 1075, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1099, 1113, 1123, 1127, 1146, 1151, 1172, 1178, 1182, 1184, 1189, 1191, 1216, 1247, 1252, 1253], "p": [7, 9, 59, 64, 65, 85, 86, 88, 90, 1237, 1246, 1248, 1249, 1250, 1252, 1255], "convert": [7, 8, 9, 87, 90, 100, 102, 175, 176, 221, 224, 234, 240, 241, 242, 270, 290, 291, 295, 301, 303, 304, 355, 358, 361, 362, 380, 394, 408, 409, 411, 511, 521, 554, 555, 565, 567, 569, 573, 577, 650, 651, 652, 657, 659, 665, 670, 672, 673, 837, 915, 916, 917, 918, 974, 975, 977, 997, 998, 999, 1056, 1117, 1119, 1120, 1123, 1124, 1125, 1131, 1206, 1215, 1231, 1232, 1233, 1251, 1253], "hai": [7, 8, 9, 10, 48, 85, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 186, 819, 823, 833, 1228, 1230, 1237, 1246, 1247, 1248], "name": [7, 8, 9, 10, 12, 14, 15, 17, 18, 48, 50, 55, 56, 57, 87, 88, 115, 116, 117, 118, 156, 157, 158, 160, 161, 162, 181, 185, 191, 193, 194, 196, 197, 198, 199, 200, 205, 206, 207, 208, 232, 233, 240, 241, 242, 292, 302, 305, 306, 314, 335, 336, 338, 341, 369, 373, 374, 375, 392, 404, 416, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 488, 489, 490, 491, 492, 508, 509, 511, 512, 513, 518, 567, 569, 573, 587, 616, 617, 618, 621, 624, 626, 628, 631, 634, 637, 639, 640, 650, 659, 690, 693, 695, 696, 699, 729, 762, 776, 786, 792, 793, 809, 810, 819, 824, 829, 831, 834, 843, 852, 853, 854, 855, 858, 862, 863, 868, 891, 897, 898, 900, 901, 904, 947, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 967, 968, 969, 970, 973, 976, 977, 985, 990, 1010, 1011, 1013, 1014, 1015, 1020, 1021, 1022, 1023, 1040, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1061, 1062, 1065, 1071, 1073, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1093, 1099, 1100, 1101, 1102, 1109, 1151, 1155, 1158, 1159, 1172, 1174, 1178, 1180, 1189, 1208, 1212, 1214, 1223, 1226, 1227, 1231, 1232, 1235, 1236, 1241, 1246, 1247, 1248, 1249, 1251, 1252, 1254, 1255, 1256], "scp": [7, 8, 9, 1246, 1250, 1253, 1256], "function": [7, 19, 46, 47, 51, 55, 57, 59, 85, 88, 97, 98, 101, 141, 142, 143, 144, 145, 147, 148, 149, 152, 154, 172, 173, 180, 183, 194, 197, 198, 200, 205, 206, 207, 210, 216, 217, 222, 223, 232, 240, 241, 242, 251, 271, 273, 286, 295, 303, 304, 306, 311, 317, 328, 346, 351, 352, 353, 354, 357, 380, 393, 408, 410, 515, 541, 560, 577, 582, 586, 587, 598, 603, 615, 620, 631, 634, 635, 637, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 657, 658, 659, 661, 662, 675, 676, 678, 688, 690, 694, 695, 696, 698, 707, 710, 723, 724, 729, 733, 736, 768, 786, 792, 797, 800, 809, 819, 825, 826, 839, 840, 841, 842, 846, 848, 851, 852, 855, 856, 862, 878, 896, 897, 903, 953, 954, 955, 959, 964, 965, 967, 974, 996, 1016, 1050, 1096, 1119, 1122, 1127, 1144, 1146, 1148, 1155, 1161, 1164, 1167, 1170, 1203, 1204, 1209, 1213, 1237, 1241, 1246, 1249, 1251, 1253], "simpl": [7, 394, 395, 612, 740, 751, 755, 778, 780, 782, 930, 936, 1247], "convent": [7, 9, 10, 12, 14, 162, 181, 471, 472, 473, 474, 475, 481], "what": [7, 202, 245, 286, 600, 615, 631, 1246, 1248, 1250, 1251, 1252, 1253, 1255], "intern": [7, 15, 229, 273, 306, 408, 518, 524, 531], "str": [7, 13, 18, 34, 50, 59, 60, 61, 62, 75, 80, 81, 82, 83, 84, 88, 106, 115, 116, 117, 118, 182, 185, 195, 196, 199, 205, 206, 207, 232, 233, 236, 249, 250, 252, 254, 255, 256, 257, 258, 259, 260, 262, 264, 265, 267, 279, 280, 281, 282, 283, 284, 285, 288, 292, 296, 298, 302, 305, 306, 308, 309, 310, 311, 313, 314, 333, 334, 341, 346, 350, 351, 352, 355, 356, 357, 359, 360, 361, 362, 363, 364, 373, 374, 384, 391, 392, 394, 401, 404, 406, 407, 408, 410, 413, 415, 419, 422, 424, 426, 433, 435, 438, 440, 443, 445, 453, 455, 460, 467, 471, 472, 473, 479, 480, 481, 484, 485, 487, 489, 490, 491, 492, 494, 496, 504, 506, 508, 509, 511, 512, 518, 519, 521, 522, 524, 532, 533, 535, 536, 537, 538, 541, 545, 547, 551, 552, 553, 559, 561, 563, 564, 568, 571, 572, 583, 584, 586, 587, 592, 593, 598, 599, 604, 617, 618, 624, 626, 628, 634, 637, 650, 656, 659, 675, 678, 684, 685, 688, 690, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 706, 708, 714, 715, 718, 723, 724, 728, 730, 731, 733, 738, 742, 743, 744, 745, 755, 760, 761, 762, 766, 767, 774, 776, 777, 781, 782, 786, 792, 793, 810, 812, 818, 819, 824, 829, 831, 834, 843, 847, 853, 854, 855, 858, 862, 868, 869, 878, 879, 889, 892, 893, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 919, 921, 928, 929, 930, 932, 942, 944, 947, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 972, 973, 976, 977, 979, 980, 981, 984, 985, 988, 990, 995, 997, 1000, 1004, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1020, 1021, 1022, 1023, 1032, 1041, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1061, 1062, 1065, 1071, 1073, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1091, 1093, 1094, 1098, 1101, 1102, 1107, 1109, 1114, 1115, 1129, 1131, 1142, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1162, 1163, 1165, 1167, 1170, 1172, 1174, 1180, 1189, 1190, 1198, 1203, 1204, 1208, 1210, 1212, 1213, 1214, 1215, 1221, 1223, 1226, 1227, 1229, 1230, 1231, 1232, 1234, 1235, 1236, 1248, 1249, 1251, 1252, 1253, 1255], "_param": [7, 12, 14, 311, 334], "_name": [7, 336, 408, 868], "nata": 7, "_t": 7, "axon": [7, 819, 822, 823, 828, 833, 893, 898, 942, 975, 976, 1022, 1241, 1246, 1248, 1252, 1255, 1256], "gnata": 7, "_tbar": 7, "_to": [7, 408, 577], "_scp": 7, "_neuron": [7, 311], "2": [7, 10, 14, 15, 20, 24, 27, 31, 32, 38, 48, 50, 51, 55, 85, 91, 96, 97, 98, 100, 103, 104, 105, 106, 108, 109, 113, 115, 116, 117, 118, 119, 120, 124, 127, 130, 131, 132, 133, 151, 154, 156, 157, 158, 159, 160, 161, 182, 186, 194, 197, 237, 295, 334, 335, 336, 347, 380, 392, 509, 524, 540, 561, 568, 577, 589, 622, 643, 651, 667, 690, 696, 701, 710, 711, 718, 752, 761, 765, 770, 771, 797, 801, 802, 810, 826, 828, 830, 832, 840, 850, 872, 898, 902, 950, 951, 960, 961, 962, 965, 967, 968, 970, 975, 1008, 1021, 1071, 1073, 1074, 1088, 1104, 1105, 1109, 1116, 1158, 1168, 1223, 1228, 1230, 1236, 1237, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1256], "more": [7, 10, 11, 38, 48, 55, 82, 96, 97, 98, 103, 104, 105, 106, 115, 116, 117, 118, 132, 164, 175, 191, 220, 225, 226, 280, 294, 295, 327, 372, 400, 401, 404, 405, 415, 573, 576, 597, 624, 631, 633, 673, 689, 732, 747, 752, 782, 786, 822, 839, 847, 849, 856, 871, 878, 880, 897, 898, 900, 904, 937, 942, 946, 953, 955, 959, 974, 1005, 1048, 1230, 1241, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1255], "param": [8, 9, 10, 12, 14, 15, 55, 59, 77, 78, 79, 99, 100, 180, 181, 182, 183, 184, 194, 195, 196, 197, 201, 202, 203, 204, 311, 603, 674, 786, 869, 870, 871, 873, 874, 875, 876, 889, 890, 950, 958, 961, 964, 965, 973, 977, 1152, 1177, 1223, 1246, 1247, 1248, 1250, 1251, 1253, 1256], "list": [8, 9, 11, 15, 16, 18, 46, 47, 57, 59, 60, 66, 85, 88, 93, 94, 157, 158, 164, 170, 174, 180, 196, 197, 198, 205, 215, 218, 219, 238, 241, 261, 277, 279, 280, 283, 286, 287, 288, 294, 301, 306, 308, 309, 310, 311, 323, 324, 325, 327, 328, 332, 335, 336, 337, 338, 340, 341, 342, 345, 346, 347, 353, 357, 401, 406, 414, 417, 468, 471, 482, 518, 542, 546, 559, 561, 562, 569, 570, 573, 583, 585, 593, 598, 599, 615, 616, 618, 624, 631, 632, 639, 640, 643, 645, 650, 651, 658, 675, 678, 683, 687, 688, 694, 695, 696, 699, 702, 718, 722, 725, 727, 732, 734, 737, 741, 742, 743, 744, 748, 749, 750, 751, 753, 755, 756, 757, 762, 763, 764, 765, 766, 770, 771, 778, 786, 797, 798, 825, 831, 846, 859, 867, 868, 870, 871, 872, 873, 874, 876, 893, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 915, 916, 917, 918, 932, 937, 939, 943, 945, 948, 950, 951, 952, 953, 954, 955, 956, 958, 960, 962, 969, 980, 988, 990, 994, 1002, 1004, 1007, 1010, 1012, 1017, 1019, 1022, 1032, 1042, 1047, 1049, 1050, 1051, 1052, 1054, 1057, 1058, 1059, 1061, 1062, 1063, 1066, 1074, 1088, 1089, 1092, 1093, 1098, 1099, 1104, 1105, 1106, 1108, 1109, 1112, 1116, 1123, 1127, 1131, 1134, 1135, 1136, 1137, 1138, 1139, 1146, 1147, 1149, 1150, 1151, 1152, 1154, 1159, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1178, 1184, 1191, 1198, 1201, 1208, 1209, 1221, 1223, 1224, 1226, 1227, 1234, 1235, 1250, 1252], "layer": [9, 154, 162, 872, 877, 1237, 1246, 1249, 1250, 1253, 1254], "5": [9, 38, 40, 43, 44, 48, 53, 85, 106, 115, 116, 117, 118, 132, 154, 162, 164, 187, 191, 192, 237, 295, 301, 335, 347, 586, 615, 643, 651, 672, 696, 701, 711, 765, 805, 810, 826, 832, 922, 965, 967, 975, 1065, 1066, 1074, 1098, 1104, 1157, 1223, 1227, 1237, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256], "pyramid": [9, 95, 105, 154, 162, 1237, 1246, 1249, 1253, 1254], "tract": [9, 154, 162, 1237, 1246, 1249, 1254], "l5tt": [9, 162, 722, 865, 868, 964, 965, 967, 1249, 1250, 1251, 1253], "These": [9, 55, 98, 106, 118, 132, 155, 200, 296, 360, 422, 600, 614, 615, 634, 643, 650, 652, 655, 657, 658, 659, 672, 778, 786, 864, 866, 893, 973, 974, 975, 976, 977, 1000, 1013, 1014, 1015, 1041, 1056, 1124, 1152, 1153, 1156, 1182, 1223, 1241, 1246, 1247, 1248, 1249, 1251, 1252, 1255], "constraint": [9, 86, 844, 846, 851, 975, 1004, 1237, 1246, 1248, 1249, 1253], "hay_param_to_scp_neuron_param": 9, "hay_params_to_scp_neuron_param": 9, "get_l5tt_template_v2": [9, 1246, 1248], "set_morphologi": 9, "filenam": [9, 13, 170, 197, 279, 280, 281, 282, 283, 284, 285, 287, 290, 291, 297, 304, 471, 472, 473, 474, 475, 508, 510, 743, 745, 762, 836, 881, 885, 888, 889, 890, 896, 897, 899, 903, 905, 962, 965, 1155, 1162, 1206, 1215, 1220, 1241, 1246, 1248, 1251, 1255, 1256], "morphologi": [9, 13, 86, 95, 99, 156, 180, 197, 334, 338, 598, 599, 766, 819, 826, 833, 837, 937, 942, 943, 945, 946, 948, 974, 975, 976, 980, 985, 987, 996, 999, 1000, 1013, 1014, 1015, 1032, 1041, 1042, 1047, 1048, 1127, 1130, 1135, 1136, 1139, 1146, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1178, 1202, 1206, 1210, 1222, 1224, 1233, 1236, 1237, 1241, 1248, 1253, 1254, 1256], "check_unset_range_mechan": 9, "set_ephi": 9, "updat": [9, 10, 11, 12, 13, 14, 168, 169, 180, 375, 376, 395, 471, 478, 671, 698, 707, 710, 725, 726, 735, 766, 819, 834, 837, 853, 881, 912, 928, 929, 969, 1030, 1047, 1127, 1129, 1130, 1132, 1133, 1143, 1145, 1153, 1157, 1173, 1185, 1193, 1194], "file": [9, 10, 13, 59, 60, 61, 62, 175, 229, 253, 259, 264, 266, 268, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 294, 296, 297, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 333, 334, 338, 339, 341, 355, 356, 357, 358, 360, 361, 362, 363, 364, 369, 372, 375, 380, 391, 394, 395, 399, 400, 401, 404, 405, 406, 407, 409, 410, 411, 414, 415, 417, 426, 431, 436, 440, 441, 450, 451, 452, 455, 456, 457, 460, 461, 471, 478, 479, 480, 482, 484, 489, 490, 508, 510, 511, 512, 514, 515, 516, 517, 518, 521, 524, 525, 536, 540, 547, 548, 561, 571, 572, 573, 583, 587, 591, 598, 599, 600, 601, 602, 603, 674, 675, 678, 685, 686, 687, 688, 689, 690, 693, 694, 695, 696, 697, 712, 713, 719, 728, 730, 731, 732, 733, 743, 744, 745, 754, 762, 764, 766, 810, 818, 819, 825, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 843, 847, 851, 852, 853, 854, 855, 858, 859, 860, 875, 876, 878, 879, 880, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 915, 918, 919, 921, 928, 929, 937, 943, 945, 947, 948, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 985, 987, 996, 997, 998, 999, 1000, 1007, 1011, 1012, 1013, 1014, 1015, 1017, 1019, 1020, 1021, 1022, 1023, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1061, 1062, 1088, 1094, 1097, 1112, 1114, 1115, 1151, 1155, 1158, 1162, 1163, 1165, 1168, 1206, 1210, 1215, 1220, 1221, 1223, 1224, 1231, 1232, 1233, 1234, 1235, 1236, 1238, 1240, 1242, 1244, 1246, 1248, 1249, 1251, 1253, 1255, 1256], "set_param": [9, 12], "given": [9, 12, 14, 20, 21, 24, 25, 27, 48, 52, 54, 56, 75, 86, 91, 98, 141, 142, 143, 144, 145, 160, 162, 186, 191, 193, 194, 196, 240, 241, 249, 250, 253, 254, 255, 256, 257, 258, 322, 323, 324, 325, 326, 327, 332, 335, 338, 355, 358, 471, 472, 473, 476, 479, 485, 518, 523, 552, 554, 592, 637, 641, 642, 650, 652, 659, 660, 662, 666, 668, 672, 718, 719, 722, 724, 732, 734, 758, 792, 797, 803, 804, 810, 831, 834, 845, 847, 859, 862, 863, 871, 897, 906, 909, 910, 955, 956, 964, 966, 973, 1000, 1001, 1002, 1005, 1008, 1024, 1027, 1028, 1032, 1041, 1052, 1088, 1090, 1098, 1108, 1110, 1112, 1127, 1135, 1197, 1232, 1233, 1234, 1241, 1246, 1249, 1250, 1251, 1253, 1255], "dict": [9, 11, 12, 13, 14, 16, 50, 54, 56, 59, 63, 85, 94, 97, 98, 99, 101, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 146, 147, 148, 149, 150, 172, 180, 184, 196, 218, 272, 275, 278, 321, 327, 339, 345, 347, 350, 352, 361, 362, 376, 426, 452, 471, 518, 535, 555, 568, 569, 587, 604, 607, 616, 619, 621, 622, 624, 639, 640, 648, 649, 650, 651, 652, 655, 668, 681, 688, 700, 701, 704, 706, 708, 715, 728, 729, 733, 735, 737, 766, 770, 771, 786, 797, 814, 818, 819, 829, 836, 838, 839, 846, 850, 865, 867, 869, 870, 871, 872, 873, 874, 876, 877, 891, 896, 900, 902, 904, 915, 918, 920, 931, 933, 937, 943, 953, 954, 958, 959, 961, 962, 967, 972, 979, 980, 1000, 1001, 1003, 1007, 1011, 1012, 1013, 1014, 1015, 1020, 1021, 1032, 1035, 1041, 1042, 1051, 1053, 1054, 1055, 1058, 1062, 1071, 1073, 1074, 1076, 1093, 1099, 1103, 1107, 1113, 1127, 1131, 1137, 1151, 1159, 1172, 1178, 1183, 1184, 1189, 1191, 1203, 1208, 1209, 1212, 1213, 1222, 1229, 1230, 1236, 1252, 1255], "dot": [9, 12, 14, 162, 181, 194, 198, 652, 655, 881, 882, 1092, 1098], "set_many_param": 9, "set_hot_zon": 9, "min_": [9, 11, 59, 180, 247, 248, 1184, 1186, 1191, 1198, 1246, 1248], "max_": [9, 11, 59, 180, 247, 248, 1184, 1186, 1191, 1198, 1246, 1248], "outsidescale_sect": [9, 11, 831, 1246, 1248], "insert": [9, 11, 819, 824, 829, 831, 834, 836, 1246, 1256], "ca_lvast": [9, 11, 770, 1241, 1246, 1247, 1248, 1256], "ca_hva": [9, 11, 73, 78, 770, 776, 793, 1241, 1246, 1247, 1248, 1256], "along": [9, 11, 175, 321, 518, 767, 786, 788, 893, 932, 938, 981, 982, 990, 993, 994, 995, 1127, 1129, 1133, 1136, 1139, 1241, 1248, 1249, 1252], "apic": [9, 11, 95, 100, 103, 105, 187, 191, 197, 213, 218, 219, 221, 225, 226, 675, 688, 690, 694, 695, 803, 810, 811, 812, 813, 1191, 1241, 1246, 1247, 1248, 1255], "between": [9, 11, 40, 43, 44, 48, 50, 53, 59, 63, 64, 65, 91, 132, 136, 137, 160, 170, 213, 317, 360, 471, 488, 586, 600, 615, 622, 640, 662, 700, 714, 719, 720, 721, 750, 758, 759, 763, 764, 766, 768, 769, 782, 826, 860, 876, 975, 976, 988, 993, 1000, 1004, 1007, 1012, 1019, 1021, 1032, 1035, 1037, 1040, 1041, 1043, 1066, 1088, 1093, 1104, 1127, 1128, 1130, 1146, 1151, 1152, 1153, 1156, 1157, 1158, 1163, 1165, 1221, 1226, 1241, 1247, 1251, 1256], "distanc": [9, 11, 20, 91, 92, 94, 103, 105, 162, 186, 187, 191, 193, 194, 197, 213, 215, 218, 219, 220, 221, 225, 226, 231, 232, 233, 327, 328, 334, 335, 338, 346, 349, 351, 352, 740, 758, 759, 760, 761, 762, 763, 764, 768, 772, 801, 802, 803, 804, 805, 806, 810, 826, 836, 863, 864, 865, 866, 867, 896, 914, 937, 944, 962, 1000, 1002, 1003, 1008, 1151, 1159, 1163, 1167, 1168, 1178, 1182, 1184, 1185, 1186, 1189, 1191, 1193, 1196, 1198, 1199, 1241, 1246, 1251, 1252, 1256], "from": [9, 11, 44, 55, 56, 58, 59, 62, 67, 68, 86, 91, 100, 103, 104, 105, 162, 163, 164, 165, 175, 181, 182, 186, 187, 191, 193, 194, 197, 202, 205, 212, 213, 215, 218, 219, 221, 225, 226, 228, 230, 235, 247, 248, 251, 264, 265, 268, 272, 275, 277, 278, 282, 288, 294, 296, 301, 308, 309, 310, 312, 313, 316, 317, 325, 332, 333, 334, 335, 338, 339, 342, 345, 346, 351, 352, 355, 358, 367, 369, 380, 381, 382, 385, 391, 400, 401, 405, 406, 410, 411, 412, 413, 420, 421, 422, 432, 433, 452, 453, 457, 458, 463, 464, 465, 469, 470, 471, 473, 474, 475, 477, 480, 487, 488, 489, 490, 493, 494, 503, 504, 513, 514, 515, 516, 518, 521, 536, 543, 544, 548, 557, 573, 580, 582, 583, 586, 589, 600, 601, 602, 603, 604, 610, 614, 615, 622, 623, 624, 625, 631, 652, 671, 674, 675, 677, 678, 687, 688, 689, 690, 693, 694, 695, 696, 697, 701, 702, 704, 705, 707, 712, 713, 717, 718, 719, 728, 729, 730, 731, 732, 741, 742, 743, 745, 748, 754, 755, 758, 759, 762, 764, 765, 766, 777, 778, 792, 797, 801, 803, 804, 805, 806, 809, 810, 814, 817, 818, 819, 822, 823, 825, 829, 831, 832, 833, 834, 835, 836, 837, 839, 842, 843, 850, 851, 852, 853, 854, 855, 858, 859, 860, 861, 862, 867, 874, 879, 880, 881, 887, 890, 891, 893, 900, 914, 918, 919, 920, 932, 934, 937, 938, 942, 944, 948, 956, 962, 966, 970, 971, 973, 974, 975, 977, 978, 980, 982, 984, 985, 987, 996, 999, 1000, 1002, 1005, 1013, 1014, 1015, 1032, 1035, 1042, 1047, 1048, 1074, 1076, 1077, 1088, 1089, 1094, 1099, 1101, 1112, 1113, 1114, 1119, 1120, 1123, 1125, 1127, 1130, 1131, 1136, 1137, 1139, 1154, 1160, 1161, 1163, 1168, 1178, 1183, 1184, 1191, 1195, 1201, 1203, 1204, 1205, 1206, 1209, 1210, 1211, 1212, 1213, 1214, 1220, 1224, 1226, 1227, 1228, 1229, 1230, 1236, 1237, 1238, 1241, 1246, 1247, 1249, 1250, 1251, 1252, 1254, 1255, 1256], "reflect": [10, 182, 243, 244, 245, 246, 286, 971, 973, 1247, 1248, 1251, 1253], "pd": [10, 59, 63, 64, 65, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 87, 92, 155, 156, 159, 160, 164, 178, 182, 184, 194, 195, 201, 202, 203, 204, 209, 281, 282, 297, 298, 299, 300, 306, 311, 318, 321, 323, 324, 327, 328, 331, 332, 334, 335, 336, 337, 338, 341, 343, 394, 453, 455, 460, 468, 511, 513, 567, 577, 580, 584, 620, 630, 700, 701, 710, 711, 714, 715, 721, 730, 731, 734, 1066, 1067, 1072, 1075, 1088, 1108, 1109, 1117, 1122, 1127, 1144, 1159, 1208, 1209, 1222, 1234, 1236, 1248, 1249, 1252, 1253, 1255], "seri": [10, 59, 63, 64, 65, 73, 74, 75, 84, 85, 92, 181, 182, 183, 184, 194, 195, 201, 202, 203, 204, 209, 234, 294, 297, 298, 300, 323, 324, 331, 338, 346, 348, 351, 352, 454, 459, 513, 721, 871, 1108, 1112, 1122, 1146, 1149, 1151, 1152, 1153, 1155, 1156, 1157, 1158, 1203, 1248, 1251, 1252], "vector": [10, 46, 47, 59, 64, 65, 66, 89, 90, 194, 195, 196, 197, 201, 202, 203, 204, 209, 224, 322, 338, 342, 588, 642, 643, 644, 650, 651, 652, 654, 655, 723, 741, 742, 748, 749, 751, 755, 756, 757, 765, 766, 773, 775, 778, 785, 786, 794, 795, 796, 915, 952, 1002, 1167, 1172, 1229, 1230, 1252], "panda": [10, 69, 70, 78, 80, 85, 87, 90, 180, 231, 232, 233, 234, 236, 239, 241, 242, 244, 268, 277, 281, 282, 283, 294, 295, 297, 298, 318, 323, 324, 325, 331, 338, 344, 345, 346, 348, 349, 351, 352, 380, 391, 393, 394, 400, 406, 411, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 513, 573, 577, 584, 695, 730, 731, 772, 871, 895, 997, 1074, 1108, 1109, 1112, 1117, 1119, 1120, 1122, 1130, 1159, 1203, 1209, 1212, 1213, 1214, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255], "rais": [10, 56, 95, 97, 198, 199, 275, 285, 314, 318, 391, 415, 480, 481, 484, 508, 513, 518, 519, 520, 528, 529, 533, 535, 547, 557, 614, 615, 617, 618, 643, 644, 646, 650, 672, 683, 684, 688, 738, 760, 781, 792, 793, 797, 798, 810, 812, 827, 829, 831, 834, 868, 869, 871, 872, 897, 898, 899, 900, 901, 902, 904, 956, 986, 1023, 1051, 1052, 1069, 1076, 1090, 1098, 1103, 1109, 1113, 1123, 1252, 1253], "assertionerror": [10, 95, 211, 221, 480, 481, 513, 617, 618, 688, 781, 792, 797, 868, 869, 871, 872], "If": [10, 23, 24, 31, 40, 43, 44, 49, 52, 56, 59, 77, 78, 84, 85, 91, 95, 97, 162, 171, 172, 180, 198, 199, 238, 240, 241, 242, 245, 249, 253, 270, 271, 272, 274, 275, 278, 279, 280, 285, 294, 295, 296, 299, 314, 317, 318, 334, 336, 342, 343, 347, 351, 356, 363, 364, 365, 375, 380, 392, 394, 404, 415, 419, 424, 480, 481, 484, 487, 508, 509, 513, 518, 519, 523, 528, 529, 536, 539, 541, 547, 557, 561, 600, 617, 618, 622, 626, 627, 629, 631, 675, 678, 682, 683, 684, 688, 690, 694, 695, 723, 735, 738, 741, 751, 758, 770, 775, 777, 781, 792, 793, 797, 798, 810, 812, 813, 814, 818, 827, 829, 831, 834, 850, 854, 855, 859, 868, 869, 871, 872, 887, 893, 897, 898, 899, 900, 901, 902, 904, 906, 907, 937, 952, 966, 974, 975, 986, 997, 1023, 1024, 1025, 1041, 1042, 1051, 1052, 1055, 1057, 1069, 1076, 1088, 1090, 1094, 1098, 1101, 1103, 1105, 1109, 1113, 1119, 1122, 1123, 1127, 1131, 1137, 1143, 1146, 1147, 1149, 1150, 1154, 1155, 1159, 1163, 1177, 1195, 1209, 1212, 1213, 1214, 1222, 1223, 1227, 1247, 1248, 1249, 1252, 1253], "lack": [10, 887, 1252], "field": [10, 525, 837, 895, 901, 906, 913, 975, 976, 999, 1000, 1005, 1013, 1014, 1019, 1023, 1024, 1031, 1032, 1033, 1035, 1040, 1041, 1048, 1049, 1056, 1252], "howev": [10, 156, 357, 358, 631, 643, 673, 833, 895, 971, 1054, 1162, 1163, 1164, 1165, 1170, 1241, 1246, 1249, 1255], "defin": [10, 73, 74, 85, 86, 175, 177, 194, 197, 220, 225, 226, 278, 327, 351, 352, 518, 546, 594, 608, 615, 633, 642, 643, 644, 655, 659, 660, 672, 675, 690, 696, 712, 713, 749, 758, 809, 831, 832, 834, 850, 970, 971, 974, 975, 976, 977, 1017, 1032, 1074, 1076, 1088, 1098, 1103, 1105, 1107, 1127, 1139, 1143, 1151, 1152, 1156, 1163, 1208, 1213, 1241, 1246, 1247, 1250, 1251, 1252, 1254], "some": [10, 52, 78, 81, 84, 85, 91, 95, 194, 197, 199, 218, 219, 286, 321, 347, 395, 516, 549, 554, 573, 579, 659, 672, 679, 683, 704, 706, 977, 1120, 1127, 1131, 1138, 1146, 1147, 1149, 1150, 1154, 1159, 1160, 1161, 1246, 1247, 1248, 1250, 1251, 1252, 1253, 1255], "after": [10, 28, 29, 31, 40, 43, 44, 48, 59, 85, 106, 108, 110, 113, 115, 116, 117, 118, 132, 139, 160, 294, 297, 316, 557, 587, 616, 622, 667, 671, 685, 688, 690, 698, 701, 704, 718, 738, 747, 748, 797, 810, 837, 859, 863, 906, 929, 1024, 1151, 1155, 1248, 1251, 1253, 1255], "biphys": [10, 59], "min": [11, 59, 65, 77, 79, 156, 322, 323, 324, 325, 334, 336, 341, 342, 343, 741, 831, 1127, 1138, 1248, 1252, 1255, 1256], "_": [11, 39, 73, 74, 156, 334, 369, 467, 519, 577, 655, 809, 828, 1177, 1247, 1248, 1249, 1250, 1251, 1253], "max": [11, 15, 59, 65, 77, 79, 156, 322, 323, 324, 325, 334, 336, 341, 342, 343, 696, 708, 710, 718, 719, 740, 741, 748, 1066, 1074, 1127, 1138, 1248, 1252, 1255], "minimum": [11, 40, 43, 44, 50, 59, 106, 115, 116, 117, 118, 132, 215, 218, 219, 221, 232, 233, 237, 240, 241, 242, 243, 244, 245, 246, 247, 617, 624, 711, 867, 949, 957, 1061, 1062, 1088, 1090, 1091, 1093, 1127, 1145, 1186, 1198, 1225, 1252], "maximum": [11, 24, 31, 50, 52, 59, 85, 88, 106, 180, 221, 227, 232, 233, 237, 240, 241, 242, 243, 244, 245, 246, 247, 286, 287, 301, 330, 331, 338, 344, 348, 561, 624, 696, 700, 701, 704, 709, 710, 714, 716, 717, 718, 719, 721, 748, 750, 766, 772, 774, 826, 867, 895, 905, 949, 957, 1061, 1062, 1065, 1071, 1073, 1088, 1093, 1105, 1127, 1145, 1185, 1186, 1193, 1198, 1225, 1246, 1250, 1256], "A": [11, 15, 16, 54, 55, 57, 66, 93, 96, 98, 99, 100, 101, 102, 151, 154, 156, 164, 172, 175, 180, 194, 197, 198, 199, 205, 211, 212, 218, 220, 221, 223, 232, 233, 234, 236, 238, 243, 244, 245, 246, 268, 279, 280, 281, 282, 283, 294, 297, 298, 321, 323, 324, 325, 328, 329, 330, 331, 334, 335, 336, 337, 339, 341, 342, 343, 346, 348, 350, 351, 352, 357, 375, 376, 380, 391, 411, 471, 485, 489, 491, 518, 524, 542, 543, 546, 548, 597, 601, 615, 631, 634, 635, 639, 640, 642, 643, 651, 655, 659, 673, 675, 678, 681, 683, 691, 694, 696, 697, 699, 700, 701, 702, 704, 705, 706, 708, 710, 711, 714, 715, 718, 721, 722, 723, 724, 727, 728, 730, 731, 734, 737, 750, 753, 770, 797, 836, 838, 846, 860, 867, 876, 896, 897, 898, 900, 901, 904, 906, 928, 929, 950, 951, 952, 953, 954, 955, 958, 959, 961, 967, 969, 970, 976, 1004, 1017, 1020, 1021, 1022, 1023, 1024, 1050, 1057, 1058, 1059, 1061, 1062, 1063, 1089, 1091, 1093, 1099, 1103, 1104, 1105, 1106, 1108, 1112, 1113, 1115, 1116, 1117, 1127, 1162, 1163, 1164, 1165, 1170, 1178, 1183, 1184, 1189, 1191, 1198, 1201, 1209, 1212, 1213, 1214, 1223, 1237, 1241, 1246, 1247, 1248, 1249, 1250, 1252, 1254], "where": [11, 60, 61, 62, 113, 139, 170, 196, 198, 249, 275, 295, 321, 322, 323, 324, 325, 336, 342, 401, 404, 406, 407, 422, 424, 433, 435, 438, 440, 443, 445, 453, 455, 460, 467, 487, 494, 496, 504, 506, 511, 541, 598, 621, 643, 675, 678, 688, 710, 718, 729, 744, 766, 770, 771, 786, 810, 820, 821, 826, 838, 854, 855, 970, 973, 1074, 1127, 1137, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1163, 1203, 1204, 1213, 1216, 1226, 1227, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1255], "should": [11, 18, 28, 55, 57, 59, 106, 113, 139, 175, 197, 209, 252, 253, 266, 269, 270, 271, 272, 273, 274, 275, 278, 279, 282, 295, 297, 306, 314, 346, 351, 352, 353, 372, 424, 426, 435, 455, 460, 467, 483, 487, 496, 506, 518, 523, 524, 540, 544, 569, 598, 599, 675, 678, 688, 690, 694, 695, 696, 788, 799, 800, 803, 822, 823, 826, 833, 836, 837, 840, 848, 850, 852, 865, 893, 964, 974, 987, 1006, 1013, 1014, 1015, 1017, 1088, 1144, 1151, 1152, 1153, 1154, 1156, 1157, 1159, 1163, 1235, 1251, 1252, 1255, 1256], "about": [11, 225, 226, 598, 599, 893, 975, 1248, 1249, 1252, 1254], "hot": [11, 322, 338, 342], "zone": [11, 1246, 1248], "refer": [11, 198, 273, 306, 356, 363, 485, 489, 640, 669, 671, 672, 673, 674, 693, 778, 779, 785, 786, 825, 839, 860, 878, 880, 930, 931, 932, 933, 937, 946, 974, 1000, 1101, 1102, 1127, 1142, 1147, 1150, 1153, 1156, 1157, 1158, 1238, 1240, 1241, 1251, 1254], "bast": [11, 106, 118, 132, 615, 672, 1237, 1252], "3": [11, 14, 15, 27, 48, 85, 106, 108, 115, 116, 117, 118, 132, 164, 172, 175, 180, 237, 334, 347, 524, 540, 561, 577, 651, 690, 701, 711, 765, 770, 771, 828, 846, 850, 897, 898, 906, 909, 910, 924, 950, 956, 961, 962, 965, 967, 972, 975, 979, 1024, 1027, 1028, 1052, 1104, 1116, 1151, 1152, 1156, 1159, 1208, 1209, 1237, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256], "almost": 12, "differ": [12, 40, 43, 44, 50, 54, 55, 73, 74, 78, 275, 286, 311, 317, 360, 480, 568, 573, 582, 615, 631, 642, 644, 655, 690, 710, 753, 754, 876, 898, 942, 974, 1022, 1146, 1151, 1152, 1153, 1156, 1157, 1158, 1216, 1241, 1246, 1248, 1250, 1252, 1256], "behavior": [12, 859, 1194], "when": [12, 51, 84, 156, 259, 273, 317, 341, 357, 380, 519, 525, 543, 544, 547, 549, 601, 615, 655, 669, 676, 678, 723, 875, 877, 988, 990, 1032, 1119, 1129, 1133, 1147, 1150, 1163, 1168, 1250, 1251, 1252, 1253, 1255], "appear": [12, 88, 825, 859, 1151, 1154, 1159, 1195], "both": [12, 44, 59, 84, 93, 95, 162, 215, 231, 232, 233, 593, 596, 615, 633, 705, 780, 837, 863, 871, 874, 875, 1088, 1089, 1090, 1103, 1123, 1191, 1241, 1248, 1249, 1251, 1255], "In": [12, 39, 55, 95, 156, 198, 266, 273, 288, 294, 306, 351, 375, 394, 404, 411, 455, 516, 540, 615, 859, 887, 903, 942, 943, 944, 945, 1016, 1054, 1122, 1130, 1156, 1203, 1246, 1247, 1248, 1249, 1250, 1254, 1255], "case": [12, 39, 115, 116, 117, 180, 262, 264, 266, 294, 314, 321, 351, 468, 615, 657, 658, 673, 850, 859, 887, 937, 942, 943, 944, 945, 975, 990, 1122, 1131, 1177, 1203, 1246, 1248, 1252], "master": [12, 380, 1162, 1220], "b": [12, 14, 181, 182, 347, 622, 1223, 1237, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255], "c": [12, 14, 15, 172, 175, 181, 182, 345, 347, 375, 376, 557, 643, 646, 672, 831, 878, 922, 947, 948, 1162, 1163, 1164, 1165, 1170, 1211, 1213, 1223, 1237, 1247, 1248, 1250, 1252, 1255, 1256], "0": [12, 40, 43, 44, 48, 53, 59, 63, 64, 66, 80, 81, 91, 101, 106, 115, 116, 117, 118, 132, 133, 175, 180, 186, 187, 188, 190, 191, 193, 197, 203, 210, 232, 233, 234, 236, 237, 244, 245, 269, 270, 282, 295, 301, 311, 317, 325, 326, 330, 331, 334, 336, 337, 341, 342, 347, 380, 392, 485, 509, 524, 540, 561, 577, 587, 592, 593, 617, 618, 640, 643, 644, 646, 651, 662, 667, 675, 688, 690, 691, 694, 695, 696, 701, 703, 706, 708, 711, 714, 741, 750, 751, 753, 755, 758, 765, 766, 770, 771, 772, 782, 785, 786, 795, 796, 797, 805, 821, 822, 826, 828, 830, 833, 837, 854, 857, 858, 865, 872, 873, 874, 877, 898, 900, 902, 904, 906, 908, 914, 922, 931, 932, 937, 949, 950, 951, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 967, 970, 972, 973, 979, 981, 982, 987, 990, 993, 995, 1021, 1024, 1026, 1035, 1040, 1041, 1061, 1071, 1073, 1074, 1086, 1088, 1104, 1109, 1116, 1122, 1127, 1128, 1154, 1159, 1161, 1163, 1169, 1170, 1175, 1213, 1214, 1223, 1225, 1237, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256], "true": [12, 20, 22, 24, 27, 28, 30, 31, 32, 35, 36, 38, 56, 77, 82, 85, 88, 95, 96, 97, 100, 102, 106, 115, 116, 117, 118, 132, 180, 195, 210, 237, 238, 240, 241, 242, 249, 250, 254, 255, 256, 257, 258, 270, 271, 272, 273, 274, 278, 279, 280, 294, 295, 296, 299, 307, 314, 317, 334, 336, 342, 343, 364, 365, 391, 395, 426, 476, 480, 495, 505, 508, 511, 518, 524, 527, 532, 533, 534, 535, 539, 540, 561, 565, 573, 574, 575, 599, 601, 626, 627, 658, 664, 667, 678, 682, 683, 688, 690, 694, 695, 696, 703, 706, 738, 741, 751, 770, 775, 797, 836, 850, 854, 855, 856, 859, 868, 869, 894, 911, 937, 940, 941, 952, 962, 997, 1018, 1029, 1035, 1038, 1042, 1045, 1046, 1092, 1094, 1098, 1127, 1131, 1142, 1146, 1150, 1151, 1153, 1154, 1159, 1176, 1212, 1226, 1227, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256], "fals": [12, 22, 24, 27, 28, 30, 31, 32, 35, 36, 38, 44, 56, 77, 82, 85, 88, 96, 97, 98, 100, 102, 170, 177, 180, 195, 237, 241, 274, 294, 295, 296, 301, 314, 317, 318, 336, 343, 365, 380, 387, 391, 395, 398, 480, 518, 524, 527, 532, 539, 540, 547, 561, 565, 573, 574, 575, 643, 658, 675, 678, 690, 694, 695, 699, 702, 704, 707, 723, 724, 751, 758, 759, 760, 770, 775, 797, 826, 832, 833, 836, 838, 850, 854, 855, 856, 858, 859, 868, 869, 879, 894, 911, 937, 940, 941, 942, 952, 970, 977, 997, 1007, 1012, 1018, 1029, 1035, 1038, 1042, 1045, 1046, 1057, 1094, 1131, 1142, 1146, 1152, 1153, 1154, 1156, 1157, 1159, 1163, 1165, 1175, 1189, 1208, 1221, 1227, 1247, 1248, 1249, 1251, 1252, 1253, 1255], "_mani": 12, "output": [12, 56, 57, 59, 113, 139, 197, 199, 210, 221, 222, 223, 240, 241, 242, 268, 294, 317, 334, 341, 380, 391, 468, 524, 540, 559, 573, 589, 630, 658, 677, 678, 688, 690, 694, 732, 736, 762, 952, 956, 962, 964, 966, 970, 974, 975, 977, 997, 1000, 1007, 1011, 1012, 1013, 1014, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1151, 1157, 1231, 1232, 1235, 1236, 1246, 1247, 1248, 1250, 1251, 1252, 1253, 1255], "NOT": [12, 735, 1162, 1163, 1164, 1165, 1170, 1253], "flat": [12, 14, 55, 1127, 1134], "simpli": [13, 40, 266, 295, 299, 360, 392, 408, 509, 523, 540, 544, 564, 650, 797, 809, 848, 1151, 1203, 1242, 1248, 1249, 1253], "path": [13, 62, 69, 78, 82, 83, 84, 170, 180, 249, 250, 253, 254, 255, 259, 264, 266, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 294, 295, 297, 298, 302, 303, 304, 305, 308, 309, 310, 311, 312, 333, 334, 338, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 372, 375, 391, 394, 395, 408, 410, 411, 412, 413, 414, 419, 420, 426, 471, 484, 488, 489, 490, 501, 502, 518, 519, 521, 522, 531, 532, 533, 538, 542, 545, 546, 548, 549, 551, 561, 563, 566, 568, 571, 572, 573, 574, 575, 579, 584, 587, 598, 599, 624, 675, 678, 684, 685, 688, 690, 695, 696, 728, 730, 731, 732, 733, 738, 743, 744, 745, 762, 766, 768, 769, 774, 809, 819, 837, 852, 889, 890, 891, 892, 914, 918, 919, 921, 928, 929, 937, 938, 962, 966, 969, 972, 975, 976, 979, 980, 982, 997, 1007, 1012, 1013, 1014, 1015, 1042, 1043, 1054, 1055, 1057, 1058, 1061, 1062, 1088, 1094, 1097, 1098, 1112, 1114, 1115, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1165, 1168, 1170, 1210, 1215, 1221, 1224, 1226, 1227, 1231, 1232, 1233, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256], "hoc": [13, 286, 292, 305, 308, 327, 598, 599, 600, 735, 766, 778, 786, 800, 819, 829, 831, 833, 834, 835, 836, 837, 891, 893, 895, 898, 915, 916, 917, 918, 930, 931, 932, 933, 976, 985, 987, 989, 996, 999, 1007, 1012, 1013, 1014, 1015, 1017, 1019, 1022, 1155, 1206, 1210, 1244, 1246, 1248, 1249, 1255, 1256], "string": [13, 88, 102, 106, 118, 182, 198, 335, 392, 394, 409, 410, 411, 468, 509, 510, 511, 518, 519, 522, 524, 539, 543, 552, 554, 555, 561, 564, 567, 568, 571, 572, 573, 583, 604, 605, 696, 699, 732, 733, 846, 891, 905, 952, 956, 1004, 1032, 1131, 1147, 1149, 1150, 1154, 1162, 1213], "format": [13, 177, 229, 253, 270, 273, 280, 281, 282, 284, 286, 294, 295, 301, 314, 316, 317, 321, 332, 335, 353, 357, 358, 380, 385, 391, 394, 405, 410, 411, 436, 437, 438, 441, 442, 443, 445, 446, 456, 461, 497, 502, 507, 512, 516, 517, 555, 561, 573, 630, 675, 724, 728, 732, 738, 744, 762, 764, 810, 819, 833, 847, 895, 897, 898, 900, 902, 904, 906, 918, 919, 921, 953, 955, 956, 959, 966, 972, 974, 979, 991, 1024, 1045, 1046, 1069, 1092, 1098, 1109, 1127, 1151, 1160, 1203, 1204, 1206, 1213, 1223, 1233, 1238, 1240, 1244, 1246, 1247, 1248, 1250, 1251, 1252, 1253, 1255], "featur": [15, 16, 17, 18, 19, 48, 55, 56, 57, 58, 59, 160, 162, 172, 175, 178, 536, 747, 778, 800, 1008, 1237, 1248], "usual": [15, 19, 55, 56, 59, 194, 196, 197, 357, 358, 587, 642, 650, 658, 667, 990, 1147, 1148, 1159, 1188, 1241, 1246, 1248], "comput": [15, 16, 19, 23, 26, 34, 36, 39, 40, 41, 42, 43, 44, 45, 48, 55, 56, 69, 71, 73, 74, 75, 77, 78, 236, 240, 242, 270, 273, 301, 311, 341, 345, 351, 352, 599, 616, 620, 630, 643, 650, 654, 655, 659, 660, 662, 678, 679, 681, 685, 688, 693, 694, 695, 707, 740, 747, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 763, 764, 766, 768, 769, 770, 774, 778, 782, 786, 787, 788, 789, 790, 791, 797, 799, 826, 837, 859, 914, 937, 938, 971, 990, 991, 993, 994, 999, 1000, 1001, 1002, 1003, 1005, 1009, 1015, 1032, 1035, 1040, 1041, 1048, 1053, 1055, 1065, 1066, 1067, 1078, 1082, 1083, 1084, 1085, 1091, 1106, 1109, 1112, 1119, 1129, 1133, 1172, 1173, 1184, 1185, 1191, 1193, 1194, 1237, 1242, 1248, 1251, 1252, 1253, 1255], "evalu": [15, 16, 19, 57, 59, 68, 85, 86, 88, 90, 97, 100, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 162, 164, 165, 166, 172, 173, 175, 180, 209, 347, 353, 367, 616, 624, 631, 633, 747, 1246, 1248, 1252], "": [15, 20, 44, 55, 85, 86, 88, 90, 151, 154, 156, 159, 160, 161, 172, 181, 182, 194, 197, 219, 252, 259, 262, 321, 332, 341, 345, 348, 357, 394, 426, 573, 578, 579, 593, 650, 654, 667, 696, 704, 709, 719, 732, 736, 743, 746, 762, 764, 770, 786, 797, 819, 828, 830, 859, 860, 895, 931, 933, 942, 953, 959, 989, 990, 996, 1002, 1017, 1041, 1120, 1122, 1154, 1155, 1159, 1222, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256], "typic": [15, 55, 155, 194, 197, 377, 378, 379], "usecas": [15, 55, 197, 557, 600, 1119, 1189, 1246], "voltage_traces_dict": [15, 55], "combined_featur": 15, "iter": [15, 59, 60, 61, 62, 68, 171, 175, 178, 209, 523, 786, 881, 887, 944, 1047, 1120, 1122, 1192, 1248, 1255], "over": [15, 52, 270, 271, 272, 274, 278, 279, 280, 295, 299, 311, 519, 567, 643, 646, 655, 826, 860, 878, 880, 937, 946, 974, 1053, 1120, 1152, 1156, 1163, 1168, 1248, 1249, 1253, 1255], "specifi": [15, 28, 49, 54, 76, 78, 79, 84, 175, 180, 194, 197, 225, 226, 235, 237, 240, 241, 242, 275, 285, 287, 288, 294, 346, 351, 352, 408, 411, 414, 415, 419, 421, 422, 424, 425, 432, 433, 435, 436, 452, 453, 455, 456, 457, 458, 460, 461, 464, 465, 467, 468, 469, 470, 471, 476, 487, 488, 493, 494, 496, 497, 503, 504, 506, 507, 534, 540, 543, 547, 675, 677, 678, 688, 723, 766, 768, 769, 777, 778, 792, 801, 802, 810, 826, 833, 836, 839, 843, 987, 1098, 1123, 1127, 1129, 1132, 1133, 1143, 1148, 1165, 1166, 1168, 1209, 1221, 1224, 1226, 1227, 1231, 1232, 1235, 1236, 1241, 1246, 1249, 1250, 1251, 1256], "onli": [15, 57, 59, 87, 88, 92, 94, 156, 175, 195, 197, 209, 212, 219, 229, 242, 249, 253, 259, 270, 271, 272, 273, 274, 278, 279, 280, 295, 299, 303, 304, 351, 364, 375, 391, 394, 415, 419, 468, 480, 513, 514, 515, 516, 518, 519, 524, 540, 561, 562, 617, 640, 656, 658, 670, 682, 685, 686, 723, 727, 737, 748, 758, 777, 786, 790, 810, 812, 820, 821, 822, 823, 854, 855, 858, 894, 897, 955, 970, 974, 975, 1018, 1032, 1041, 1044, 1050, 1066, 1089, 1103, 1112, 1113, 1116, 1117, 1119, 1129, 1131, 1133, 1148, 1159, 1172, 1227, 1241, 1246, 1247, 1249, 1251, 1252, 1253], "also": [15, 156, 162, 172, 180, 269, 270, 295, 301, 303, 304, 317, 327, 380, 518, 548, 573, 615, 685, 695, 799, 800, 858, 859, 891, 895, 896, 897, 900, 904, 912, 943, 945, 953, 955, 959, 1030, 1047, 1048, 1054, 1055, 1122, 1241, 1242, 1246, 1247, 1250, 1251, 1252, 1253, 1254, 1255], "go": [15, 88, 600, 922, 1223, 1251, 1255], "call": [15, 55, 85, 113, 139, 146, 147, 148, 149, 150, 181, 183, 200, 232, 242, 243, 268, 294, 316, 357, 391, 411, 480, 524, 531, 541, 544, 547, 548, 601, 667, 688, 690, 707, 723, 736, 785, 822, 823, 929, 975, 999, 1040, 1044, 1069, 1119, 1120, 1122, 1159, 1192, 1207, 1209, 1248, 1249, 1251, 1255], "combinefun": 15, "feature1": 15, "1": [15, 36, 39, 40, 43, 44, 55, 59, 63, 64, 93, 95, 106, 115, 116, 117, 118, 132, 133, 139, 160, 162, 170, 171, 175, 177, 180, 182, 186, 187, 189, 191, 192, 194, 197, 215, 218, 232, 233, 237, 240, 311, 322, 323, 325, 326, 327, 334, 336, 337, 341, 342, 347, 375, 380, 394, 568, 577, 578, 592, 593, 605, 622, 643, 646, 650, 651, 653, 657, 662, 667, 675, 688, 690, 694, 695, 696, 701, 703, 706, 708, 710, 711, 714, 718, 728, 741, 758, 765, 766, 770, 771, 780, 782, 786, 788, 797, 805, 810, 820, 821, 822, 826, 831, 832, 833, 840, 848, 850, 854, 857, 858, 859, 871, 872, 873, 874, 898, 902, 924, 932, 937, 949, 950, 951, 952, 955, 956, 957, 958, 959, 960, 961, 962, 965, 967, 970, 972, 979, 981, 982, 987, 990, 993, 995, 1021, 1066, 1071, 1073, 1074, 1088, 1104, 1109, 1116, 1127, 1151, 1157, 1159, 1163, 1172, 1208, 1209, 1213, 1223, 1225, 1234, 1237, 1241, 1242, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1256], "feature2": 15, "feature3": 15, "feature4": 15, "append": [15, 17, 55, 88, 185, 194, 197, 471, 476, 561, 778, 1177, 1246, 1247, 1248, 1251, 1252], "combination1": 15, "combination2": 15, "attribut": [15, 55, 57, 59, 106, 118, 132, 185, 194, 197, 209, 259, 357, 364, 452, 468, 471, 518, 526, 529, 559, 587, 604, 616, 619, 622, 623, 624, 634, 637, 640, 643, 644, 650, 679, 696, 698, 707, 735, 742, 743, 766, 778, 786, 797, 798, 814, 818, 819, 839, 853, 893, 906, 922, 930, 931, 932, 933, 937, 980, 985, 988, 990, 995, 996, 1000, 1006, 1017, 1024, 1032, 1042, 1047, 1054, 1055, 1057, 1058, 1061, 1062, 1065, 1068, 1071, 1073, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1093, 1099, 1102, 1113, 1123, 1127, 1129, 1130, 1132, 1133, 1146, 1151, 1152, 1153, 1156, 1157, 1172, 1173, 1178, 1182, 1184, 1189, 1191, 1203, 1216, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1255], "combiner_setup": [15, 19], "keep": [15, 17, 55, 194, 212, 217, 221, 259, 266, 600, 624, 651, 856, 867, 974, 1130, 1248, 1252], "track": [15, 17, 55, 194, 259, 600, 624, 651, 669, 974, 1130], "combin": [17, 18, 55, 96, 100, 162, 172, 175, 180, 587, 590, 593, 596, 597, 615, 1040, 1248, 1251], "associ": [19, 160, 162, 198, 252, 253, 510, 511, 743, 814, 974, 1127, 1141, 1238, 1241, 1247], "sec": [20, 91, 162, 215, 221, 758, 764, 766, 769, 786, 793, 797, 832, 837, 914, 937, 938, 980, 982, 1042, 1043, 1172, 1189, 1200, 1246, 1256], "beyond_dist": [20, 91, 162, 215, 218, 219, 221], "n_children_requir": [20, 162, 215, 218, 221], "check": [20, 24, 27, 28, 30, 31, 32, 35, 38, 48, 50, 52, 59, 66, 71, 85, 87, 95, 106, 114, 118, 128, 132, 140, 162, 191, 197, 198, 199, 215, 218, 219, 221, 235, 237, 238, 250, 253, 254, 255, 256, 257, 258, 314, 327, 360, 364, 375, 385, 394, 405, 409, 411, 420, 425, 431, 436, 441, 446, 451, 456, 461, 468, 481, 484, 488, 497, 502, 507, 518, 519, 520, 525, 527, 532, 551, 573, 574, 586, 671, 755, 778, 783, 833, 868, 869, 893, 894, 906, 907, 909, 910, 911, 932, 935, 937, 940, 941, 1017, 1018, 1024, 1025, 1027, 1028, 1029, 1032, 1038, 1039, 1041, 1042, 1045, 1046, 1103, 1105, 1127, 1140, 1142, 1143, 1148, 1238, 1247, 1248, 1252, 1255], "connect": [20, 94, 162, 215, 218, 219, 221, 302, 310, 327, 587, 600, 690, 696, 724, 766, 771, 778, 779, 786, 822, 823, 837, 839, 844, 845, 846, 850, 851, 852, 853, 854, 855, 857, 860, 878, 880, 893, 895, 897, 930, 931, 932, 933, 948, 955, 958, 970, 975, 976, 977, 988, 997, 998, 999, 1000, 1003, 1004, 1005, 1007, 1010, 1012, 1013, 1014, 1016, 1019, 1021, 1032, 1035, 1040, 1049, 1050, 1053, 1054, 1055, 1127, 1130, 1241, 1249, 1253, 1255, 1256], "reach": [20, 59, 66, 94, 162, 591, 1252, 1256], "beyon": [20, 162], "number": [20, 31, 32, 47, 48, 49, 50, 55, 59, 60, 61, 62, 67, 91, 106, 112, 115, 116, 117, 118, 132, 138, 162, 170, 172, 174, 175, 180, 200, 215, 218, 240, 241, 242, 274, 295, 297, 299, 326, 327, 329, 338, 394, 406, 407, 485, 561, 562, 576, 578, 584, 598, 599, 650, 688, 690, 727, 766, 768, 772, 782, 786, 797, 799, 819, 826, 832, 876, 893, 902, 937, 948, 949, 952, 961, 970, 971, 972, 975, 976, 977, 978, 979, 990, 997, 998, 999, 1000, 1003, 1008, 1010, 1013, 1014, 1019, 1020, 1032, 1039, 1042, 1050, 1054, 1055, 1074, 1088, 1093, 1116, 1127, 1130, 1153, 1154, 1156, 1157, 1158, 1191, 1198, 1213, 1223, 1225, 1241, 1246, 1249, 1250, 1251, 1252, 1253, 1255, 1256], "least": [20, 22, 24, 38, 48, 50, 51, 88, 91, 107, 110, 111, 113, 121, 122, 123, 125, 129, 134, 135, 139, 162, 220, 225, 226, 235, 237, 294, 836, 894, 1018, 1054, 1055, 1249, 1255], "children": [20, 91, 211, 215, 218, 220, 221, 766, 771], "branchpoint": [20, 1127, 1130], "beyond": [20, 91, 94, 162, 218, 219, 220, 221, 909, 990, 1027], "dist": [20, 186, 187, 191, 193, 197, 213, 219, 221, 225, 226, 801, 802, 803, 804, 805, 806, 1151, 1159, 1246, 1248, 1252, 1256], "index": [20, 37, 38, 40, 43, 44, 46, 48, 67, 73, 74, 75, 78, 92, 115, 116, 117, 118, 120, 123, 133, 156, 160, 163, 171, 175, 179, 180, 181, 182, 213, 271, 282, 296, 313, 326, 327, 338, 369, 394, 446, 467, 468, 510, 513, 567, 573, 577, 604, 605, 637, 640, 694, 700, 721, 734, 772, 846, 871, 906, 907, 955, 1004, 1007, 1012, 1024, 1025, 1050, 1122, 1166, 1167, 1168, 1172, 1212, 1222, 1234, 1241, 1247, 1248, 1250, 1251, 1252], "threshold": [20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 76, 94, 106, 115, 116, 117, 118, 132, 234, 235, 236, 269, 270, 295, 617, 748, 749, 754, 755, 930, 931, 970, 1088, 1090, 1093, 1098, 1106, 1110, 1112, 1241, 1250, 1253, 1255], "option": [20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 36, 38, 39, 40, 42, 43, 44, 45, 49, 59, 92, 94, 95, 115, 116, 117, 118, 220, 240, 241, 242, 259, 262, 264, 269, 270, 295, 296, 301, 321, 322, 323, 324, 325, 326, 329, 334, 336, 341, 342, 343, 391, 419, 424, 452, 487, 489, 490, 491, 492, 508, 518, 524, 533, 535, 536, 538, 539, 540, 547, 552, 592, 593, 696, 701, 724, 741, 755, 758, 759, 760, 761, 766, 767, 770, 772, 777, 782, 786, 793, 797, 818, 826, 833, 836, 838, 850, 858, 876, 975, 1065, 1071, 1073, 1076, 1078, 1080, 1082, 1084, 1086, 1094, 1104, 1109, 1116, 1129, 1147, 1148, 1149, 1150, 1154, 1204, 1208, 1209, 1212, 1213, 1214, 1222, 1231, 1232, 1234, 1236, 1253], "amount": [20, 91, 160, 286, 287, 294, 323, 324, 325, 334, 404, 598, 624, 629, 631, 632, 633, 650, 698, 703, 707, 728, 732, 770, 797, 799, 876, 968, 977, 1151, 1182, 1184, 1186, 1191, 1194, 1199, 1235, 1241, 1248, 1249, 1251, 1252, 1253], "requir": [20, 38, 50, 56, 99, 106, 115, 116, 117, 118, 132, 162, 215, 218, 294, 418, 419, 423, 424, 480, 486, 487, 536, 614, 615, 758, 778, 847, 974, 1131, 1241, 1248, 1251, 1252, 1255], "whether": [20, 22, 48, 52, 56, 59, 66, 76, 77, 84, 95, 96, 97, 98, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 134, 135, 170, 195, 210, 235, 237, 259, 349, 380, 383, 385, 391, 402, 405, 411, 418, 420, 423, 425, 426, 434, 436, 439, 441, 444, 446, 454, 456, 459, 461, 466, 468, 484, 486, 488, 495, 497, 505, 507, 508, 518, 524, 525, 533, 535, 539, 540, 552, 624, 643, 658, 664, 667, 696, 698, 699, 702, 703, 704, 706, 723, 724, 732, 733, 778, 819, 826, 832, 833, 836, 838, 853, 854, 855, 856, 895, 900, 962, 970, 977, 1032, 1057, 1058, 1084, 1107, 1112, 1127, 1131, 1146, 1151, 1153, 1154, 1156, 1157, 1159, 1162, 1163, 1164, 1165, 1170, 1175, 1176, 1189, 1208, 1210, 1221, 1248], "two": [20, 22, 40, 41, 43, 44, 46, 47, 48, 55, 72, 78, 80, 100, 105, 110, 117, 118, 123, 151, 162, 194, 197, 198, 220, 229, 259, 266, 392, 509, 568, 573, 593, 596, 597, 662, 763, 764, 766, 768, 905, 937, 940, 974, 1032, 1035, 1037, 1038, 1042, 1045, 1060, 1064, 1241, 1248, 1251, 1253, 1255], "bool": [20, 22, 24, 27, 28, 30, 31, 32, 35, 36, 38, 52, 56, 77, 85, 95, 96, 97, 98, 106, 115, 116, 117, 118, 132, 170, 180, 195, 210, 238, 240, 241, 242, 249, 250, 254, 255, 256, 257, 258, 259, 270, 271, 272, 274, 278, 279, 280, 295, 296, 299, 314, 317, 334, 336, 343, 365, 383, 391, 402, 418, 423, 426, 434, 439, 444, 454, 459, 466, 480, 486, 495, 505, 508, 518, 524, 527, 532, 533, 535, 539, 540, 561, 565, 574, 624, 626, 627, 643, 658, 664, 667, 675, 678, 682, 683, 688, 690, 694, 695, 696, 699, 702, 703, 704, 706, 707, 723, 724, 738, 741, 751, 758, 759, 770, 775, 778, 797, 819, 826, 832, 833, 836, 838, 850, 854, 855, 856, 859, 868, 869, 879, 893, 894, 911, 922, 930, 932, 935, 937, 940, 941, 952, 970, 977, 997, 1018, 1029, 1035, 1038, 1042, 1045, 1046, 1057, 1058, 1094, 1098, 1127, 1131, 1142, 1146, 1151, 1153, 1154, 1156, 1157, 1159, 1165, 1175, 1176, 1189, 1208, 1210, 1212, 1221, 1226, 1227, 1252, 1253], "ephi": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 59, 162, 197, 1246, 1247, 1248], "v": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 89, 90, 243, 244, 245, 246, 248, 282, 716, 717, 719, 724, 751, 754, 755, 887, 948, 949, 960, 1057, 1061, 1106, 1110, 1112, 1163, 1167, 1168, 1224, 1225, 1247, 1248, 1256], "thresh": [21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 747, 748], "calcul": [21, 25, 33, 37, 38, 39, 44, 48, 53, 89, 90, 105, 213, 221, 227, 230, 243, 246, 248, 311, 323, 324, 329, 338, 345, 346, 351, 352, 518, 541, 573, 578, 587, 594, 597, 598, 603, 643, 646, 650, 652, 655, 662, 696, 700, 701, 704, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 741, 747, 748, 751, 754, 768, 778, 780, 849, 859, 974, 975, 976, 980, 982, 983, 990, 992, 999, 1002, 1032, 1036, 1040, 1041, 1042, 1043, 1054, 1078, 1079, 1127, 1128, 1141, 1184, 1185, 1193, 1194, 1255], "absolut": [21, 48, 180, 266, 295, 356, 358, 360, 361, 362, 363, 408, 411, 548, 650, 657, 678, 755, 797, 852, 1013, 1014, 1015, 1115, 1253], "afterhyperpolar": [21, 40, 43, 44, 48, 106, 109, 118, 119, 127, 130, 131], "ahp": [21, 40, 43, 44, 48, 747, 748, 1247], "depth": [21, 40, 43, 48, 91, 92, 95, 106, 109, 115, 116, 117, 118, 119, 127, 130, 160, 162, 518, 524, 540, 561, 573, 747, 748, 1242, 1247, 1254, 1255], "trace": [21, 22, 23, 24, 26, 27, 30, 32, 35, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 54, 55, 56, 57, 58, 85, 88, 97, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 162, 164, 194, 196, 197, 205, 209, 221, 228, 230, 234, 235, 236, 243, 244, 245, 246, 248, 270, 271, 272, 275, 277, 278, 279, 280, 281, 282, 283, 284, 288, 294, 295, 297, 299, 330, 331, 337, 338, 587, 595, 690, 696, 703, 704, 705, 706, 709, 711, 716, 717, 718, 719, 722, 723, 724, 742, 747, 748, 750, 752, 754, 755, 786, 922, 925, 926, 948, 951, 952, 960, 975, 976, 990, 1057, 1060, 1061, 1062, 1064, 1080, 1082, 1084, 1088, 1089, 1093, 1098, 1112, 1172, 1173, 1175, 1206, 1208, 1228, 1229, 1230, 1246, 1247, 1248, 1251, 1253], "numpi": [21, 22, 23, 25, 26, 28, 31, 36, 38, 39, 40, 41, 42, 43, 44, 45, 53, 221, 224, 225, 226, 227, 228, 237, 344, 346, 348, 350, 351, 352, 380, 392, 394, 411, 431, 432, 433, 434, 435, 436, 437, 439, 441, 444, 446, 469, 470, 471, 476, 480, 481, 487, 488, 489, 490, 509, 510, 518, 534, 588, 643, 646, 670, 672, 745, 752, 760, 761, 778, 837, 906, 913, 957, 995, 999, 1024, 1031, 1057, 1061, 1082, 1084, 1110, 1111, 1123, 1124, 1125, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253], "ndarrai": [21, 22, 23, 25, 26, 28, 31, 36, 38, 39, 40, 41, 42, 43, 44, 45, 53, 224, 225, 226, 227, 228, 433, 435, 472, 480, 481, 491, 745, 752, 760, 761, 906, 995, 1024, 1057, 1061, 1082, 1084, 1110, 1111, 1123, 1124, 1127, 1252], "arrai": [21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 66, 85, 89, 221, 224, 230, 232, 233, 237, 243, 246, 247, 248, 311, 322, 323, 324, 325, 336, 338, 342, 344, 346, 347, 348, 350, 351, 352, 353, 380, 411, 431, 432, 433, 435, 436, 437, 441, 446, 471, 472, 473, 475, 476, 479, 480, 481, 484, 485, 487, 488, 489, 490, 491, 492, 534, 562, 578, 588, 632, 643, 646, 647, 649, 650, 651, 652, 653, 657, 658, 665, 666, 667, 669, 670, 672, 703, 709, 716, 717, 720, 727, 732, 752, 755, 760, 761, 765, 766, 778, 837, 906, 913, 915, 916, 917, 918, 957, 999, 1002, 1024, 1031, 1034, 1037, 1040, 1046, 1052, 1110, 1123, 1124, 1125, 1127, 1130, 1131, 1135, 1136, 1139, 1144, 1159, 1172, 1173, 1174, 1184, 1191, 1196, 1213, 1235, 1241, 1247, 1252, 1255, 1256], "action": [21, 22, 23, 24, 25, 27, 33, 34, 35, 36, 42, 48, 106, 107, 108, 109, 110, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 186, 192, 1246, 1252], "potenti": [21, 22, 23, 24, 25, 27, 28, 33, 34, 35, 36, 42, 48, 106, 107, 108, 109, 110, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 186, 192, 587, 588, 591, 592, 593, 594, 597, 750, 751, 755, 766, 915, 975, 1246, 1247, 1252, 1256], "detect": [21, 22, 24, 25, 26, 30, 31, 32, 34, 36, 38, 39, 40, 42, 43, 44, 45, 49, 50, 52, 215, 230, 234, 235, 236, 740, 754, 755, 1073, 1074, 1075, 1088, 1090, 1092, 1093, 1096, 1105, 1106, 1112], "one": [21, 24, 30, 35, 46, 48, 59, 61, 85, 88, 90, 107, 110, 111, 115, 121, 122, 123, 125, 129, 134, 135, 151, 196, 225, 226, 229, 235, 237, 238, 327, 342, 347, 400, 401, 404, 405, 408, 411, 415, 480, 523, 569, 593, 596, 597, 599, 600, 624, 631, 633, 651, 658, 667, 696, 698, 712, 713, 719, 722, 724, 737, 748, 752, 770, 785, 786, 826, 836, 894, 1005, 1018, 1041, 1074, 1088, 1103, 1109, 1116, 1127, 1129, 1143, 1159, 1203, 1204, 1209, 1241, 1242, 1246, 1247, 1248, 1249, 1251, 1252, 1255], "determin": [22, 24, 48, 197, 286, 745, 751, 755, 799, 819, 826, 832, 893, 1000, 1008, 1013, 1131, 1246, 1253, 1256], "ap": [22, 23, 24, 25, 27, 40, 43, 44, 48, 105, 106, 113, 115, 116, 117, 118, 121, 122, 132, 139, 160, 186, 322, 659, 749, 950, 1246, 1247, 1252], "within": [22, 40, 59, 66, 78, 81, 85, 86, 156, 164, 235, 237, 350, 356, 363, 380, 391, 394, 518, 535, 557, 755, 826, 895, 902, 906, 911, 937, 939, 941, 962, 975, 1008, 1024, 1029, 1035, 1041, 1042, 1047, 1073, 1074, 1075, 1107, 1112, 1184, 1191, 1222, 1223, 1242, 1247, 1253, 1255], "rang": [22, 59, 77, 78, 156, 164, 247, 248, 593, 653, 672, 675, 694, 695, 766, 770, 776, 786, 793, 795, 797, 819, 826, 831, 832, 834, 865, 907, 949, 1025, 1127, 1143, 1163, 1167, 1172, 1174, 1184, 1191, 1225, 1237, 1241, 1246, 1247, 1248, 1252, 1255, 1256], "cross": [22, 24, 46, 47, 48, 212, 700, 714, 755], "otherwis": [22, 24, 27, 28, 30, 31, 32, 35, 36, 38, 84, 85, 314, 364, 365, 404, 450, 527, 532, 563, 565, 573, 574, 694, 695, 707, 777, 831, 868, 869, 894, 911, 940, 941, 1018, 1029, 1038, 1045, 1046, 1101, 1131, 1159, 1162, 1163, 1164, 1165, 1170, 1252], "amplitud": [23, 34, 36, 48, 186, 187, 188, 189, 190, 191, 192, 193, 696, 703, 709, 716, 717, 718, 719, 750, 751, 754, 803, 804, 805, 806, 815, 816, 826, 1088, 1089, 1091, 1105, 1112, 1256], "find_cross": [23, 48], "present": [24, 48, 50, 56, 113, 139, 322, 347, 573, 577, 793, 832, 834, 836, 887, 974, 975, 999, 1252], "correspond": [24, 55, 56, 59, 60, 83, 85, 253, 259, 279, 336, 342, 343, 411, 518, 521, 541, 616, 704, 745, 764, 765, 766, 786, 826, 836, 852, 897, 900, 904, 948, 952, 953, 955, 959, 980, 1042, 1049, 1050, 1051, 1101, 1105, 1110, 1112, 1127, 1135, 1168, 1192, 1241, 1249, 1251], "divid": [24, 31, 974, 1002, 1127], "width": [25, 33, 48, 106, 111, 115, 116, 117, 118, 122, 132, 135, 160, 611, 624, 643, 644, 647, 655, 747, 748, 750, 751, 753, 754, 831, 1247, 1252, 1254, 1255], "inter": [26, 39, 41, 48, 323, 324, 325, 338, 616, 617, 650, 1065, 1066, 1067, 1112, 1252], "spike": [26, 27, 29, 30, 31, 32, 33, 35, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 106, 110, 111, 112, 113, 115, 116, 117, 118, 123, 125, 132, 138, 139, 160, 186, 187, 230, 231, 234, 235, 236, 237, 239, 240, 241, 242, 269, 270, 274, 286, 294, 295, 322, 323, 324, 325, 336, 338, 341, 342, 467, 468, 598, 600, 615, 616, 617, 650, 672, 734, 740, 741, 747, 748, 749, 754, 755, 764, 765, 772, 778, 780, 781, 782, 785, 826, 839, 844, 845, 846, 849, 851, 853, 854, 855, 859, 860, 861, 863, 866, 867, 895, 902, 915, 931, 933, 948, 958, 961, 964, 965, 966, 967, 968, 970, 971, 974, 977, 1065, 1066, 1067, 1068, 1071, 1072, 1073, 1074, 1075, 1077, 1078, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1096, 1098, 1099, 1102, 1104, 1105, 1108, 1109, 1112, 1117, 1206, 1211, 1212, 1213, 1214, 1237, 1246, 1247, 1251, 1252, 1253], "interv": [26, 39, 41, 48, 59, 97, 100, 101, 106, 108, 115, 116, 117, 118, 124, 160, 235, 237, 322, 323, 324, 325, 330, 331, 337, 338, 342, 616, 617, 650, 732, 734, 778, 780, 782, 847, 849, 872, 874, 964, 965, 970, 973, 1065, 1066, 1067, 1074, 1075, 1088, 1093, 1104, 1112, 1127, 1143, 1149, 1165, 1168, 1221, 1224, 1226, 1241, 1246, 1247, 1250, 1252], "isi": [26, 38, 39, 41, 48, 96, 118, 123, 160, 650, 1065, 1066, 1067, 1088, 1089, 1109, 1112, 1247], "bac": [26, 27, 28, 41, 48, 72, 73, 74, 78, 85, 97, 98, 99, 103, 141, 146, 151, 160, 164, 186, 187, 194, 801, 802, 810, 1177, 1228, 1229, 1230, 1247, 1248], "stimulu": [26, 27, 28, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 48, 50, 51, 52, 53, 56, 68, 72, 73, 74, 78, 85, 86, 88, 90, 99, 103, 105, 106, 108, 113, 115, 116, 117, 118, 132, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 156, 160, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 200, 205, 206, 207, 750, 801, 802, 810, 876, 1057, 1061, 1062, 1088, 1092, 1093, 1098, 1109, 1112, 1116, 1127, 1175, 1177, 1228, 1230, 1241, 1247, 1248, 1250, 1251, 1252], "burst": [26, 41, 160, 597, 1071, 1072, 1073, 1112, 1247], "averag": [26, 40, 41, 43, 44, 48, 94, 160, 710, 753, 937, 964, 966, 1042, 1053, 1246, 1249, 1251, 1252, 1256], "stim_end": [28, 37, 39, 48], "repolar": [28, 48, 106, 108], "certain": [28, 48, 59, 66, 94, 162, 213, 220, 221, 225, 226, 342, 571, 572, 573, 597, 617, 632, 633, 696, 699, 703, 805, 806, 810, 864, 865, 1182, 1184, 1186, 1191, 1196, 1198, 1247], "which": [28, 54, 59, 68, 75, 78, 81, 85, 88, 93, 95, 101, 106, 177, 196, 197, 215, 225, 226, 229, 253, 259, 262, 264, 268, 269, 270, 271, 272, 273, 274, 275, 296, 306, 313, 321, 327, 351, 352, 353, 357, 358, 375, 380, 392, 395, 408, 411, 450, 468, 480, 481, 487, 509, 511, 518, 544, 546, 548, 552, 554, 573, 577, 598, 599, 600, 612, 613, 615, 619, 660, 668, 669, 675, 678, 679, 688, 690, 715, 727, 732, 758, 762, 766, 771, 786, 826, 838, 844, 850, 852, 853, 854, 858, 859, 865, 914, 931, 933, 937, 956, 962, 970, 973, 995, 999, 1000, 1008, 1037, 1052, 1069, 1088, 1090, 1092, 1093, 1106, 1107, 1127, 1131, 1136, 1137, 1139, 1147, 1150, 1151, 1154, 1159, 1166, 1168, 1172, 1206, 1207, 1209, 1215, 1241, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1255], "end": [28, 37, 326, 414, 415, 485, 489, 490, 559, 571, 573, 587, 696, 716, 717, 718, 723, 724, 734, 741, 755, 831, 950, 993, 1035, 1037, 1057, 1061, 1080, 1082, 1084, 1093, 1103, 1127, 1143, 1189, 1230, 1238, 1241, 1246, 1247, 1248, 1249, 1256], "v_dend": [29, 30, 31, 32, 33, 34, 36, 48], "ca_thresh": [29, 48], "55": [29, 106, 282, 1175, 1241, 1247, 1251], "tstim": [29, 48, 690, 696, 716, 717, 718, 719, 723, 724, 747, 749, 750, 753, 754, 756, 757], "295": [29, 106, 132, 187, 192, 203, 1175, 1230, 1241, 1246, 1247, 1249, 1256], "height": [29, 48, 106, 107, 110, 115, 116, 117, 118, 121, 132, 134, 160, 747, 748, 1032, 1036, 1247, 1255], "calcium": [29, 30, 31, 33, 48, 106, 110, 111, 1247, 1248], "stimul": [29, 749, 750, 753, 754, 756, 757, 875, 876, 1252], "exactli": [30, 35, 48, 194, 415, 679, 1246, 1247], "somat": [30, 35, 48, 106, 107, 108, 109, 110, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 138, 271, 275, 288, 294, 295, 587, 594, 597, 1247, 1253], "n": [31, 39, 48, 59, 175, 180, 237, 334, 562, 573, 576, 578, 584, 632, 633, 727, 752, 797, 821, 872, 875, 877, 972, 979, 1065, 1066, 1074, 1122, 1127, 1247, 1248, 1249, 1252], "occur": [31, 48, 106, 110, 151, 152, 172, 342, 826, 1073, 1074, 1075, 1104, 1112], "nth": [31, 48, 110, 1065, 1066, 1067, 1074, 1112], "sodium": [31, 48], "10": [31, 132, 177, 180, 557, 577, 617, 751, 819, 823, 833, 931, 952, 957, 965, 967, 975, 1032, 1039, 1071, 1073, 1127, 1130, 1159, 1165, 1208, 1209, 1221, 1223, 1237, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255], "greater": [32, 36, 48], "than": [32, 36, 38, 40, 43, 44, 48, 77, 91, 172, 215, 218, 219, 404, 415, 518, 523, 604, 608, 755, 782, 814, 826, 871, 966, 989, 1014, 1035, 1104, 1112, 1122, 1127, 1134, 1144, 1203, 1204, 1246, 1248, 1249, 1251], "equal": [32, 47, 48, 197, 562, 573, 643, 688, 727, 732, 786, 788, 797, 859, 906, 990, 1024, 1088, 1127, 1143, 1144], "39": [34, 50, 54, 85, 94, 215, 218, 219, 288, 306, 346, 352, 552, 568, 583, 598, 599, 675, 684, 688, 690, 714, 715, 718, 722, 724, 734, 755, 812, 813, 898, 901, 965, 1022, 1023, 1105, 1109, 1159, 1162, 1163, 1167, 1204, 1213, 1214, 1215, 1220, 1223, 1226, 1227, 1229, 1230, 1231, 1232, 1234, 1235, 1237, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256], "2mv": [34, 132], "stim_onset": [34, 35, 36, 45, 48, 50, 51, 52, 106, 115, 116, 117, 118, 132], "backpropag": [34, 36, 48, 105, 132, 133, 136, 137, 186, 192, 1246], "bap": [34, 36, 48, 85, 97, 98, 99, 103, 105, 145, 150, 151, 160, 186, 187, 192, 205, 206, 207, 1228, 1230, 1247, 1248], "onset": [34, 35, 36, 48, 50, 51, 52, 106, 113, 115, 116, 117, 118, 132, 139, 750, 875, 877, 1252, 1256], "v_soma": [35, 36, 48], "arg": [35, 239, 242, 243, 246, 248, 354, 388, 394, 414, 416, 514, 515, 785, 810, 968, 1120, 1121, 1122, 1164, 1168, 1216, 1219, 1248, 1253, 1255], "m": [35, 43, 44, 52, 74, 101, 106, 115, 116, 117, 118, 132, 156, 159, 187, 188, 189, 190, 191, 192, 203, 210, 213, 225, 226, 232, 233, 322, 323, 324, 325, 330, 331, 336, 337, 338, 341, 342, 343, 573, 578, 587, 598, 599, 610, 675, 678, 688, 690, 711, 741, 750, 751, 753, 762, 785, 803, 805, 816, 826, 876, 902, 922, 924, 962, 1078, 1127, 1153, 1156, 1157, 1175, 1178, 1185, 1187, 1189, 1193, 1195, 1221, 1226, 1237, 1241, 1246, 1247, 1248, 1252, 1255, 1256], "mv": [35, 46, 51, 52, 106, 115, 116, 117, 118, 132, 203, 210, 269, 270, 295, 587, 589, 755, 828, 830, 1248, 1253, 1256], "bap_thresh": [36, 48, 132], "ratio": [36, 48, 1246], "point": [36, 40, 43, 44, 48, 54, 59, 67, 68, 86, 94, 226, 253, 280, 281, 282, 283, 284, 290, 291, 294, 296, 304, 323, 324, 355, 372, 548, 669, 675, 709, 719, 730, 732, 758, 759, 762, 763, 764, 765, 766, 767, 768, 769, 772, 778, 783, 784, 786, 788, 789, 790, 794, 798, 799, 826, 836, 837, 839, 846, 847, 854, 855, 859, 893, 896, 899, 904, 906, 907, 908, 911, 915, 928, 929, 930, 932, 937, 939, 941, 951, 952, 954, 958, 960, 962, 981, 990, 993, 994, 995, 1004, 1017, 1024, 1025, 1026, 1029, 1032, 1035, 1037, 1042, 1044, 1046, 1047, 1057, 1060, 1061, 1064, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1146, 1148, 1149, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1201, 1216, 1231, 1233, 1234, 1235, 1236, 1241, 1248, 1252, 1254, 1255], "2000": [37, 42, 115, 116, 117, 118, 188, 189, 190, 872, 1249, 1252, 1256], "adapt": [37, 38, 48, 115, 116, 117, 118, 120, 160, 174, 175, 513, 582, 583, 603, 642, 678, 694, 695, 747, 852, 966, 973, 975, 1242, 1246, 1247, 1248, 1249, 1252, 1253, 1255], "current": [37, 48, 72, 75, 78, 96, 97, 98, 100, 104, 115, 116, 117, 118, 128, 151, 154, 186, 188, 189, 190, 193, 194, 229, 285, 287, 360, 414, 416, 518, 527, 542, 546, 587, 588, 589, 591, 594, 595, 597, 642, 656, 678, 682, 740, 749, 758, 759, 768, 801, 803, 804, 805, 806, 810, 812, 815, 816, 826, 837, 922, 924, 927, 1009, 1011, 1040, 1066, 1113, 1172, 1173, 1174, 1175, 1176, 1177, 1206, 1209, 1228, 1246, 1248, 1249, 1250, 1251, 1252, 1253], "end_tim": 37, "coeffici": [38, 39, 48, 115, 116, 117, 118, 124, 160, 720, 1247], "variat": [38, 39, 48, 86, 115, 116, 117, 118, 124, 160, 167, 780, 834, 1247, 1248], "cv": [39, 48], "frac": [39, 73, 74, 643, 730, 731, 732, 820, 821, 826, 831, 1252], "sigma": [39, 106, 115, 116, 117, 118, 132, 847, 1247, 1248], "mu": [39, 170, 175, 213, 225, 226, 232, 233, 593, 610, 696, 830, 847, 1178, 1185, 1187, 1189, 1193, 1195, 1241, 1246, 1247, 1255], "we": [39, 162, 288, 316, 392, 509, 512, 518, 520, 642, 1127, 1129, 1131, 1136, 1137, 1139, 1154, 1242, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256], "consid": [39, 40, 43, 44, 52, 94, 240, 241, 242, 322, 615, 701, 704, 711, 714, 718, 722, 774, 820, 821, 954, 975, 1032, 1177, 1250, 1252], "popul": [39, 166, 168, 169, 170, 174, 175, 177, 180, 696, 702, 703, 706, 837, 860, 915, 971, 974, 999, 1000, 1001, 1002, 1008, 1012, 1013, 1016, 1049, 1053, 1054, 1127, 1137, 1159, 1205, 1248, 1250], "sampl": [39, 573, 578, 690, 730, 731, 732, 860, 861, 970, 975, 976, 1000, 1002, 1008, 1010, 1014, 1032, 1042, 1047, 1057, 1058, 1078, 1111, 1114, 1248, 1249], "varianc": [39, 48, 51, 1248], "must": [39, 59, 88, 180, 191, 197, 232, 233, 238, 346, 410, 543, 589, 611, 612, 637, 650, 659, 700, 714, 722, 723, 758, 797, 831, 834, 838, 876, 891, 929, 931, 933, 972, 979, 1054, 1055, 1129, 1144, 1151, 1159, 1162, 1163, 1164, 1165, 1170, 1183, 1184, 1191, 1209, 1212, 1214, 1227, 1230, 1241, 1247, 1249], "bessel": 39, "correct": [39, 197, 200, 249, 318, 369, 373, 374, 375, 512, 513, 723, 724, 842, 852, 1013, 1014, 1015, 1255], "standard": [39, 106, 118, 132, 153, 160, 411, 426, 573, 578, 721, 736, 753, 754, 757, 1002, 1054, 1248, 1251], "deviat": [39, 44, 86, 106, 118, 132, 153, 160, 164, 573, 578, 589, 721, 753, 754, 757, 1002, 1054, 1247, 1248], "degre": [39, 1151, 1152, 1156], "freedom": 39, "denomin": 39, "instead": [39, 82, 180, 194, 246, 294, 347, 348, 514, 515, 516, 518, 600, 622, 674, 675, 688, 690, 693, 694, 695, 834, 844, 854, 857, 937, 942, 946, 1119, 1159, 1250, 1251, 1252], "time_scal": [40, 43, 44, 48], "fast": [40, 43, 44, 48, 115, 116, 117, 118, 127, 160, 268, 294, 345, 826, 1247, 1251], "fahp": [40, 48], "deepest": [40, 43, 44], "right": [40, 573, 582, 826, 950, 1162, 1163, 1164, 1165, 1170, 1249, 1251, 1256], "timescal": [40, 43, 44], "consecut": [40, 43, 44, 327, 597, 1251, 1253, 1255], "less": [40, 43, 44, 301, 1247, 1248], "apart": [40, 43, 44, 1246], "first": [40, 41, 43, 44, 45, 46, 47, 48, 72, 78, 80, 81, 85, 88, 105, 106, 107, 115, 116, 117, 118, 123, 125, 132, 133, 134, 135, 136, 160, 197, 198, 200, 288, 299, 326, 356, 363, 480, 485, 519, 523, 569, 604, 609, 615, 685, 758, 759, 763, 766, 768, 842, 940, 968, 1006, 1038, 1066, 1074, 1088, 1112, 1115, 1116, 1122, 1246, 1247, 1249, 1250, 1251, 1252, 1255], "next": [40, 43, 44, 171, 175, 766, 775, 778, 780, 1065, 1066, 1067, 1112, 1246, 1247, 1249, 1252, 1255], "slow": [40, 43, 44, 48, 115, 116, 117, 118, 130, 131, 160, 1247], "scale": [40, 43, 44, 84, 197, 245, 380, 675, 688, 690, 694, 695, 809, 810, 811, 812, 813, 814, 820, 821, 870, 871, 872, 875, 876, 1057, 1058, 1112, 1114, 1127, 1144, 1238, 1241, 1246, 1247, 1248, 1253, 1256], "millisecond": [40, 43, 44, 877], "omit": [40, 43, 44, 1183, 1184, 1191, 1195], "stim_dur": [42, 48, 50, 51, 106, 115, 116, 117, 118, 132], "mean": [42, 44, 48, 49, 53, 86, 91, 95, 106, 115, 116, 117, 118, 129, 132, 151, 153, 160, 164, 191, 327, 578, 686, 690, 700, 710, 714, 719, 721, 750, 754, 756, 782, 845, 931, 933, 1000, 1001, 1002, 1008, 1054, 1055, 1074, 1127, 1246, 1247, 1248, 1250, 1251, 1252, 1255], "frequenc": [42, 48, 115, 116, 117, 118, 129, 160, 826, 872, 875, 1073, 1074, 1075, 1078, 1080, 1081, 1112, 1246, 1247, 1256], "sahp": [43, 44, 48], "full": [44, 82, 86, 106, 114, 118, 128, 132, 140, 160, 162, 179, 194, 380, 518, 748, 809, 819, 826, 832, 836, 893, 975, 989, 1048, 1237, 1246, 1247, 1248, 1249, 1252, 1253], "neg": [44, 662, 696, 1088, 1109], "posit": [44, 696, 786, 788, 981, 982, 990, 993, 994, 995, 1216, 1251, 1255, 1256], "out": [44, 76, 94, 106, 113, 118, 126, 132, 139, 218, 219, 221, 234, 286, 294, 297, 300, 316, 327, 356, 363, 411, 445, 446, 510, 512, 518, 540, 544, 555, 573, 578, 617, 690, 732, 762, 772, 837, 907, 921, 948, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 970, 971, 977, 999, 1000, 1007, 1011, 1025, 1049, 1053, 1054, 1076, 1104, 1112, 1117, 1148, 1151, 1155, 1160, 1162, 1163, 1164, 1165, 1168, 1170, 1171, 1199, 1205, 1206, 1209, 1221, 1224, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1238, 1246, 1247, 1248, 1251, 1252, 1255], "lead": [44, 483], "sens": [44, 1247, 1249, 1255], "accuraci": [44, 468, 1255], "np": [44, 66, 89, 237, 247, 347, 348, 433, 435, 472, 480, 481, 489, 491, 643, 646, 653, 667, 703, 709, 716, 717, 720, 752, 1002, 1066, 1088, 1127, 1172, 1173, 1174, 1184, 1191, 1196, 1248, 1252, 1253, 1255, 1256], "ttf": [45, 48, 118, 160, 1247], "taken": [45, 52, 529, 686, 822, 823, 829, 856, 1042, 1054, 1161, 1168, 1246, 1247, 1255], "until": [45, 323, 324, 557, 573, 586, 1127, 1141, 1249, 1251, 1252, 1255], "peak": [45, 1247], "deriv": [45, 1252], "origin": [46, 47, 48, 282, 294, 311, 394, 399, 404, 451, 510, 512, 513, 567, 600, 622, 678, 710, 736, 737, 738, 772, 853, 854, 855, 860, 867, 906, 928, 929, 996, 1024, 1034, 1115, 1127, 1139, 1216, 1241, 1251, 1254, 1255], "doc": [46, 47, 48, 405, 489, 1088, 1095, 1248, 1252], "down": [46, 47], "One": [46, 322, 338, 342, 404, 672, 975, 1074, 1109, 1254], "upcross": [46, 1110, 1112], "downcross": 46, "extend": [47, 177, 735, 1040], "arco": [47, 1237], "content": [48, 78, 84, 162, 183, 253, 311, 357, 358, 518, 540, 561, 573, 676, 915, 965, 1112, 1115, 1237], "mostli": [48, 162], "reimplement": [48, 162], "2011": [48, 162, 1237, 1248], "extract": [48, 55, 56, 58, 100, 103, 104, 105, 162, 194, 197, 205, 209, 221, 228, 339, 577, 604, 614, 615, 620, 624, 631, 975, 985, 996, 1076, 1077, 1088, 1089, 1093, 1105, 1112, 1116, 1192, 1229, 1230, 1255], "trace_check": 48, "minspikenum": [48, 50], "soma_threshold": [48, 50], "returning_to_rest": [48, 50], "max_prestim_dendrite_depo": [48, 50, 52], "vmax": [48, 50, 52, 718, 948, 949, 957, 1127, 1145, 1224, 1225, 1247], "trace_check_max_prestim_dendrite_depo": 48, "anywher": [48, 52], "befor": [48, 50, 52, 57, 59, 113, 139, 346, 351, 352, 394, 557, 587, 685, 693, 694, 695, 701, 704, 718, 1006, 1069, 1105, 1223, 1247, 1251, 1252, 1255], "trace_check_err": 48, "punish": [48, 51, 106, 115, 116, 117, 118, 132], "basic": [48, 51, 497, 837, 946, 974, 995, 996, 1241], "error": [48, 51, 56, 78, 84, 85, 88, 151, 152, 172, 326, 377, 378, 379, 380, 468, 508, 518, 533, 535, 679, 683, 684, 1252, 1253, 1255], "penal": [48, 51, 1248], "low": [48, 51, 922, 927, 1247, 1248, 1255], "find_crossing_old": 48, "voltage_bas": 48, "stim_delai": [48, 53], "75": [48, 53, 115, 203, 210, 830, 1241, 1246, 1256], "voltage_base2": 48, "voltage_trac": [48, 54, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 294, 295, 1172, 1173, 1228, 1229, 1246, 1247, 1248, 1251, 1253], "t0": [48, 54], "recsiteid": [48, 54], "fetch": [48, 54, 162, 165, 181, 218, 219, 221, 225, 226, 311, 327, 339, 369, 373, 374, 375, 408, 518, 524, 561, 573, 610, 611, 614, 622, 624, 625, 628, 632, 659, 666, 671, 672, 723, 724, 728, 797, 809, 842, 862, 906, 907, 908, 910, 971, 973, 994, 1024, 1025, 1026, 1028, 1139, 1148, 1255], "id": [48, 54, 61, 67, 83, 252, 253, 259, 260, 261, 265, 266, 267, 327, 328, 332, 335, 341, 518, 529, 537, 553, 554, 723, 728, 734, 742, 743, 745, 758, 762, 766, 767, 768, 769, 771, 772, 850, 854, 855, 858, 893, 896, 897, 903, 904, 905, 915, 930, 932, 947, 948, 953, 955, 958, 959, 962, 963, 980, 981, 988, 995, 1008, 1011, 1017, 1042, 1050, 1051, 1061, 1062, 1127, 1130, 1178, 1189, 1200, 1237, 1241, 1246, 1249, 1251, 1255], "spike_count": [48, 138], "count": [48, 49, 91, 166, 346, 351, 352, 764, 765, 785, 931, 933, 975, 1078, 1081, 1182, 1202, 1252], "ap_height_check_1ap": 48, "ap_height": [48, 106, 107, 121, 132, 1248], "ap_width": [48, 122, 132, 1248], "ahp_depth_abs_check_2ap": 48, "ahp_depth_ab": [48, 106, 109, 118, 1248], "bac_caspike_height_check_1_ca_ap": 48, "bac_caspike_height_check_gt2_na_spik": 48, "bac_caspike_height_check_ca_spikes_after_na_spik": 48, "bac_caspike_height": [48, 106, 1247, 1248], "bac_caspike_width": [48, 106, 1247, 1248], "bpapatt_check_relative_height": 48, "bpapatt_check_1_ap": 48, "bpapatt": [48, 133, 136, 137], "bac_isi_check_2_or_3_ap": 48, "bac_isi_check_repolar": [48, 106], "bac_isi": [48, 106, 1247, 1248], "step_mean_frequ": [48, 129], "step_check_2_isi": 48, "step_adaptation_index": [48, 120], "step_coef_var": [48, 124], "step_initial_isi": 48, "step_time_to_first_spik": [48, 125], "step_fast_ahp_depth": [48, 127], "step_slow_ahp_depth": [48, 130], "step_slow_ahp_tim": 48, "array_lik": 49, "volt": 49, "50": [50, 106, 232, 233, 244, 245, 329, 334, 346, 349, 351, 352, 753, 965, 973, 976, 1013, 1185, 1187, 1193, 1195, 1222, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1255, 1256], "properli": [50, 113, 139], "rest": [50, 106, 113, 115, 116, 117, 118, 132, 139, 569, 597, 766], "last": [50, 57, 81, 106, 113, 115, 116, 117, 118, 132, 139, 323, 324, 325, 326, 338, 480, 728, 758, 759, 1136, 1139, 1146, 1149, 1151, 1152, 1153, 1156, 1157, 1158, 1159, 1252, 1255], "deadlin": [50, 106, 113, 115, 116, 117, 118, 132, 139], "depolar": [50, 52, 73, 75, 78, 330, 331, 338, 1172, 1173], "too": [50, 1252], "larg": [50, 69, 84, 245, 394, 450, 676, 696, 768, 974, 1249, 1252, 1255], "durat": [50, 51, 106, 115, 116, 117, 118, 132, 186, 187, 188, 189, 190, 192, 193, 587, 690, 749, 756, 757, 803, 804, 815, 816, 1071, 1073, 1074, 1156, 1157, 1248, 1255], "report": [50, 1237], "base": [50, 59, 78, 81, 94, 164, 165, 175, 249, 252, 253, 259, 266, 299, 300, 330, 331, 338, 350, 360, 369, 375, 380, 386, 394, 411, 427, 431, 447, 451, 462, 463, 484, 498, 502, 517, 525, 554, 556, 563, 573, 580, 600, 601, 603, 610, 612, 616, 617, 622, 637, 659, 672, 675, 689, 690, 719, 735, 811, 814, 819, 837, 839, 846, 847, 849, 852, 859, 863, 864, 866, 878, 880, 906, 913, 937, 942, 946, 974, 975, 999, 1009, 1024, 1031, 1048, 1068, 1088, 1089, 1090, 1091, 1105, 1107, 1109, 1112, 1127, 1131, 1184, 1187, 1188, 1214, 1249, 1252, 1253, 1255], "contain": [50, 54, 59, 72, 73, 75, 76, 78, 79, 81, 82, 84, 92, 95, 106, 113, 114, 115, 116, 117, 118, 126, 128, 132, 139, 140, 156, 160, 163, 172, 173, 179, 180, 182, 191, 197, 210, 221, 225, 226, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 250, 253, 254, 255, 270, 271, 272, 274, 275, 278, 279, 280, 281, 282, 283, 284, 288, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 306, 308, 309, 310, 311, 313, 321, 328, 329, 333, 334, 335, 343, 346, 351, 352, 361, 362, 376, 380, 410, 411, 426, 467, 468, 471, 481, 485, 491, 513, 518, 519, 542, 543, 546, 548, 568, 569, 598, 599, 600, 615, 633, 650, 672, 675, 679, 689, 690, 695, 696, 699, 700, 710, 714, 724, 727, 730, 731, 734, 735, 737, 741, 745, 748, 750, 753, 762, 766, 768, 769, 770, 772, 778, 800, 810, 831, 834, 838, 848, 852, 853, 854, 855, 858, 891, 898, 905, 906, 907, 908, 912, 915, 950, 953, 955, 959, 962, 963, 964, 965, 966, 968, 970, 973, 975, 976, 977, 985, 995, 999, 1017, 1024, 1025, 1026, 1030, 1032, 1034, 1035, 1042, 1044, 1047, 1049, 1050, 1051, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1071, 1072, 1073, 1074, 1075, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1089, 1091, 1092, 1093, 1098, 1099, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1113, 1115, 1116, 1117, 1127, 1130, 1151, 1154, 1159, 1172, 1189, 1195, 1196, 1197, 1208, 1209, 1212, 1213, 1214, 1222, 1223, 1229, 1230, 1236, 1241, 1246, 1247, 1248, 1250, 1251, 1252, 1253, 1254], "result": [50, 55, 56, 57, 59, 60, 61, 62, 67, 69, 70, 76, 77, 78, 81, 82, 83, 85, 86, 151, 160, 165, 172, 175, 178, 194, 209, 230, 234, 268, 271, 278, 279, 280, 281, 282, 283, 284, 288, 296, 297, 298, 311, 313, 329, 345, 347, 350, 351, 352, 353, 354, 358, 380, 392, 509, 518, 541, 560, 573, 598, 599, 616, 619, 620, 624, 625, 630, 633, 639, 640, 652, 662, 675, 677, 678, 688, 689, 690, 696, 705, 718, 740, 837, 852, 860, 878, 974, 976, 999, 1049, 1050, 1053, 1054, 1055, 1056, 1068, 1069, 1101, 1156, 1157, 1163, 1206, 1223, 1228, 1229, 1230, 1246, 1247, 1250, 1252, 1253, 1255], "250": [51, 106, 115, 116, 117, 118, 132, 210, 962, 1241, 1246, 1248, 1256], "evolutionari": [51, 162, 170, 175, 1248], "algorithm": [51, 59, 162, 170, 175, 179, 1032, 1033, 1035, 1255], "yet": [51, 97, 98, 480, 799, 814, 826, 829, 831, 834, 1127, 1129, 1133, 1238, 1251], "relat": [51, 710, 895, 1246], "cannot": [51, 78, 84, 106, 115, 116, 117, 118, 132, 1117], "appli": [51, 55, 57, 88, 156, 194, 195, 204, 209, 353, 819, 825, 833, 839, 841, 855, 870, 871, 872, 876, 966, 1057, 1058, 1088, 1093, 1099, 1100, 1111, 1112, 1144, 1213, 1214, 1246, 1251, 1252, 1256], "tell": 51, "reward": 51, "non": [51, 275, 294, 351, 487, 568, 573, 797, 814, 850, 906, 912, 1000, 1009, 1024, 1030, 1108, 1112, 1227, 1255], "someth": [51, 175, 176], "happen": [51, 294, 303, 304, 600, 851, 975, 1246, 1252], "baselin": [51, 106, 115, 116, 117, 118, 132, 701, 704, 717, 718, 751, 974, 1252], "penalti": 51, "timepoint": [52, 221, 227, 243, 244, 245, 246, 323, 324, 338, 380, 587, 589, 591, 701, 704, 709, 711, 716, 717, 718, 750, 751, 1074, 1098, 1104, 1105, 1106, 1107, 1112, 1127, 1138, 1148, 1230, 1233, 1234, 1252, 1253], "exce": [52, 85, 91, 1249], "delai": [53, 69, 71, 123, 186, 187, 188, 189, 190, 191, 192, 193, 283, 306, 311, 338, 340, 341, 345, 347, 351, 352, 353, 388, 394, 557, 558, 573, 586, 587, 599, 603, 678, 679, 680, 681, 682, 683, 685, 686, 688, 696, 698, 707, 750, 803, 804, 805, 806, 815, 816, 859, 922, 924, 930, 931, 970, 1241, 1248, 1249, 1250, 1251, 1252, 1255, 1256], "stimuli": [55, 85, 88, 97, 98, 99, 162, 186, 194, 196, 197, 208, 209, 876, 1057, 1058, 1059, 1061, 1062, 1063, 1088, 1093, 1112, 1116, 1228, 1246, 1247, 1248, 1250], "its": [55, 88, 91, 113, 139, 164, 216, 217, 221, 222, 223, 229, 252, 253, 273, 292, 294, 302, 305, 306, 404, 409, 411, 471, 472, 479, 488, 492, 548, 553, 554, 563, 573, 678, 696, 697, 704, 718, 740, 766, 769, 771, 810, 837, 852, 1105, 1112, 1115, 1136, 1139, 1152, 1156, 1160, 1178, 1180, 1200, 1206, 1216, 1241, 1247, 1252, 1255], "optim": [55, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 233, 294, 314, 316, 317, 394, 395, 587, 589, 615, 616, 619, 620, 624, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 650, 651, 652, 658, 659, 660, 662, 672, 696, 700, 710, 714, 719, 834, 871, 875, 1237, 1251, 1252, 1253], "save": [55, 59, 61, 67, 172, 175, 178, 180, 205, 206, 207, 229, 294, 295, 301, 314, 338, 341, 345, 350, 351, 352, 380, 383, 384, 385, 390, 391, 394, 399, 402, 404, 405, 407, 410, 411, 418, 419, 420, 423, 425, 429, 431, 434, 435, 436, 438, 439, 440, 441, 443, 444, 445, 446, 449, 450, 451, 452, 454, 455, 456, 459, 460, 461, 466, 467, 468, 471, 475, 486, 487, 488, 495, 496, 497, 500, 502, 505, 506, 507, 510, 511, 512, 523, 529, 531, 534, 536, 543, 546, 547, 548, 552, 554, 600, 616, 619, 640, 673, 679, 686, 690, 762, 764, 839, 850, 852, 854, 855, 858, 881, 895, 918, 921, 962, 997, 1013, 1014, 1015, 1088, 1098, 1124, 1151, 1154, 1159, 1160, 1161, 1163, 1206, 1224, 1226, 1231, 1232, 1233, 1234, 1235, 1236, 1241, 1246, 1247, 1249, 1251, 1252, 1253], "togeth": [55, 346, 351, 352, 712, 713, 722, 799, 1040, 1151, 1152, 1153, 1156, 1157], "workflow": [55, 86, 690, 799, 832, 974, 1238, 1241, 1249], "split": [55, 274, 295, 450, 451, 562, 573, 577, 582, 583, 616, 617, 618, 621, 624, 631, 633, 637, 639, 640, 658, 659, 665, 666, 667, 727, 732, 737, 990, 1248, 1249, 1250, 1251, 1252, 1253, 1255], "part": [55, 175, 394, 562, 615, 727, 974, 1168, 1246, 1247, 1251, 1255], "evaluate_fun": [55, 57], "match": [55, 85, 88, 484, 568, 573, 614, 615, 696, 700, 710, 714, 719, 721, 797, 798, 868, 1032, 1034, 1183, 1184, 1191, 1227, 1246], "regist": [55, 92, 197, 252, 253, 263, 264, 266, 267, 360, 518, 523, 528, 535, 542, 543, 544, 546], "under": [55, 175, 185, 191, 193, 205, 206, 207, 272, 274, 278, 536, 547, 548, 619, 718, 964, 977, 1168, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255], "evaluator_setup": [55, 58], "perform": [55, 59, 68, 86, 270, 295, 380, 615, 616, 631, 667, 668, 670, 907, 909, 910, 952, 1025, 1027, 1028, 1069, 1242, 1247, 1248, 1251, 1252, 1253], "arbitrari": [55, 562, 599, 688, 727, 906, 976, 1024], "oper": [55, 1122, 1246, 1255], "merg": [55, 294, 347, 395, 696, 700, 703, 704, 706, 714, 1151, 1157, 1252], "complex": [55, 1252], "found": [55, 172, 180, 194, 285, 322, 508, 518, 523, 573, 583, 688, 831, 841, 871, 902, 976], "get_evalu": [55, 56, 100, 180, 1247, 1248], "def": [55, 194, 197, 1177, 1246, 1247, 1248, 1250, 1252, 1255, 1256], "examplary_evaluate_fun": 55, "kwarg": [55, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 183, 197, 239, 242, 243, 246, 248, 345, 351, 354, 421, 422, 514, 515, 518, 535, 536, 541, 547, 573, 580, 582, 732, 735, 811, 814, 881, 887, 1120, 1121, 1151, 1159, 1164, 1168, 1206, 1210, 1216, 1219, 1228, 1230, 1248, 1255], "in_nam": 55, "out_dict": 55, "finalize_fun": [55, 56, 57], "dict_": [55, 100, 102, 554, 555, 732, 737, 1112, 1113], "out_nam": [55, 1151, 1156, 1157, 1158, 1233, 1235, 1236], "now": [55, 316, 895, 1119, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1255, 1256], "arbitrarili": 55, "modifi": [55, 175, 197, 204, 349, 361, 362, 677, 689, 694, 695, 809, 810, 819, 825, 837, 839, 841, 855, 862, 863, 864, 865, 866, 867, 875, 1115], "flatten": [55, 573, 696, 699, 702, 1134], "modified_dict": 55, "reduc": [55, 294, 394, 464, 465, 467, 468, 603, 611, 613, 614, 615, 616, 622, 623, 624, 626, 627, 631, 633, 634, 642, 672, 1251, 1253], "done": [55, 59, 177, 194, 673, 685, 786, 860, 1006, 1247, 1249, 1251, 1255], "features_dict": [55, 56], "raise_": [55, 56, 508, 510, 511, 518, 533, 534, 535, 1253], "detail": [56, 162, 175, 197, 209, 311, 600, 786, 812, 814, 819, 837, 859, 860, 974, 980, 985, 1032, 1053, 1151, 1230, 1238, 1249, 1250, 1251, 1252], "docstr": [56, 1253], "keyerror": [56, 541, 547, 760, 874], "tri": [56, 408, 513, 518, 525, 662, 1163], "whatev": 56, "obj": [56, 383, 384, 385, 390, 391, 392, 394, 398, 399, 402, 404, 405, 411, 418, 419, 420, 423, 424, 425, 429, 430, 431, 434, 435, 436, 439, 440, 441, 444, 445, 446, 449, 450, 451, 454, 455, 456, 459, 460, 461, 466, 467, 468, 486, 487, 488, 495, 496, 497, 500, 501, 502, 505, 506, 507, 509, 510, 512, 513, 547, 628, 671, 672, 673], "veer": 57, "care": [57, 92, 209, 389, 394, 397, 529, 566, 822, 823, 829, 856, 1255], "final": [57, 88, 485, 587, 590, 690, 710, 975, 1115, 1248], "pre_fun": 57, "input": [57, 86, 160, 232, 338, 380, 589, 597, 599, 604, 606, 607, 611, 615, 616, 643, 647, 649, 650, 651, 652, 655, 659, 665, 672, 677, 688, 689, 690, 694, 695, 766, 818, 897, 898, 899, 900, 901, 904, 974, 975, 976, 999, 1023, 1051, 1053, 1055, 1103, 1122, 1127, 1131, 1137, 1241, 1246, 1248, 1249, 1250, 1252, 1253], "element": [57, 197, 198, 200, 240, 241, 242, 322, 323, 324, 338, 342, 568, 570, 573, 585, 644, 658, 737, 744, 766, 770, 1108, 1112, 1127, 1134, 1135, 1138, 1203, 1204], "three": [57, 97, 116, 151, 186, 194, 411, 710, 1004, 1138, 1228, 1238, 1242, 1255], "exploration_from_seedpoint": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 162, 1248], "df_seed": [59, 67, 1248], "param_rang": [59, 78, 82, 1248], "params_to_explor": 59, "evaluation_funct": [59, 1248], "main_directori": [59, 67, 1248], "min_step_s": [59, 1248], "max_step_s": [59, 1248], "02": [59, 1241, 1246, 1248, 1252, 1256], "checkpoint_everi": [59, 1248], "100": [59, 244, 245, 282, 519, 587, 711, 826, 876, 877, 902, 958, 1057, 1114, 1223, 1241, 1246, 1248, 1249, 1251, 1253, 1255, 1256], "checkpoint_by_tim": 59, "concat_every_n_sav": 59, "60": [59, 117, 830, 1246, 1247, 1248, 1249, 1255], "n_iter": 59, "60000": 59, "mode": [59, 62, 357, 471, 480, 587, 592, 593, 696, 719, 724, 754, 755, 775, 1078, 1080, 1081, 1086, 1088, 1091, 1105, 1109, 1112, 1172, 1204, 1205, 1255], "aim_param": [59, 63, 66], "stop_n_inside_with_aim_param": 59, "explor": [59, 67, 68, 69, 70, 76, 77, 78, 81, 82, 83, 86, 162, 165, 834], "seedpoint": [59, 61, 68, 83, 86, 162, 180], "datafram": [59, 62, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 87, 90, 155, 156, 159, 160, 163, 164, 165, 178, 180, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 268, 270, 271, 272, 274, 277, 278, 279, 280, 281, 282, 283, 294, 295, 297, 298, 299, 301, 306, 311, 316, 318, 321, 323, 324, 327, 328, 330, 331, 332, 334, 335, 336, 337, 338, 341, 343, 344, 345, 346, 349, 351, 352, 380, 393, 394, 395, 399, 400, 401, 402, 404, 405, 406, 407, 411, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 468, 511, 512, 513, 514, 515, 567, 573, 576, 577, 580, 584, 610, 620, 630, 678, 695, 700, 701, 710, 711, 714, 715, 721, 730, 731, 734, 766, 772, 871, 895, 997, 998, 999, 1032, 1066, 1067, 1071, 1072, 1074, 1075, 1076, 1077, 1086, 1087, 1088, 1093, 1099, 1109, 1112, 1117, 1119, 1120, 1122, 1127, 1130, 1144, 1159, 1203, 1206, 1208, 1209, 1211, 1212, 1213, 1214, 1222, 1234, 1236, 1246, 1248, 1251, 1252, 1253, 1255], "individu": [59, 166, 169, 170, 174, 175, 180, 294, 401, 404, 587, 592, 593, 786, 820, 821, 931, 933, 974, 975, 999, 1035, 1120, 1151, 1157, 1168, 1172, 1177, 1241, 1249], "seed": [59, 67, 68, 82, 86, 282, 598, 599, 603, 690, 691, 692, 1248], "row": [59, 351, 352, 450, 451, 480, 485, 489, 490, 573, 580, 976, 1073, 1074, 1088, 1108, 1109, 1112, 1120, 1122, 1209, 1213, 1228, 1241, 1248, 1249, 1250, 1251, 1252], "column": [59, 72, 76, 78, 80, 87, 156, 160, 180, 230, 232, 233, 238, 240, 241, 242, 243, 244, 245, 246, 259, 266, 306, 321, 345, 346, 348, 349, 351, 352, 392, 394, 400, 401, 405, 406, 411, 509, 510, 511, 512, 513, 567, 573, 580, 710, 868, 871, 872, 873, 874, 877, 896, 900, 970, 971, 972, 973, 975, 976, 977, 979, 988, 997, 998, 999, 1040, 1055, 1066, 1067, 1074, 1076, 1077, 1109, 1112, 1117, 1208, 1212, 1214, 1246, 1247, 1248, 1250, 1251, 1252, 1254], "denot": [59, 335, 993, 1035, 1247, 1254], "mai": [59, 357, 358, 531, 678, 696, 723, 724, 768, 797, 838, 891, 909, 910, 944, 948, 954, 961, 971, 1027, 1028, 1051, 1055, 1154, 1242, 1246, 1248, 1249, 1252, 1253, 1255], "callabl": [59, 141, 142, 143, 144, 145, 172, 197, 206, 207, 346, 351, 352, 354, 587, 589, 601, 634, 635, 637, 650, 652, 665, 675, 690, 694, 695, 723, 729, 736, 809, 838, 862, 1122, 1151], "argument": [59, 97, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 180, 194, 216, 217, 221, 222, 223, 225, 226, 295, 301, 422, 426, 536, 541, 547, 582, 641, 648, 649, 655, 675, 688, 690, 694, 695, 700, 701, 704, 706, 708, 715, 729, 732, 735, 785, 810, 833, 841, 858, 987, 1051, 1119, 1120, 1121, 1122, 1143, 1146, 1150, 1151, 1159, 1164, 1166, 1168, 1210, 1213, 1216, 1222, 1223, 1227, 1246, 1253], "insid": [59, 76, 78, 1042, 1046, 1248], "boolean": [59, 66, 87, 90, 102, 230, 237, 238, 322, 342, 962], "indic": [59, 66, 88, 237, 243, 244, 245, 246, 294, 299, 300, 380, 573, 579, 610, 618, 624, 667, 678, 702, 778, 839, 893, 900, 906, 909, 910, 937, 939, 944, 952, 962, 976, 1000, 1024, 1027, 1028, 1042, 1044, 1074, 1114, 1127, 1130, 1253, 1255], "experiment": [59, 964, 970, 971, 977, 1238, 1250], "constrait": 59, "accept": [59, 180, 194, 1040, 1127, 1131, 1144, 1151], "physiologi": [59, 1237, 1248], "alongsid": [59, 411], "everi": [59, 68, 463, 567, 586, 786, 794, 1000, 1127, 1241, 1251, 1255], "check_point_by_tim": 59, "minut": [59, 1252], "checkpoint": [59, 170], "intermedi": [59, 60, 61, 85, 268, 294, 655], "pickl": [59, 60, 61, 62, 78, 84, 212, 221, 229, 268, 294, 385, 411, 457, 460, 461, 495, 503, 505, 507, 548, 573, 584, 735, 918, 919, 921], "concaten": [59, 61, 234, 564, 573, 584, 719, 722], "singl": [59, 78, 82, 83, 85, 162, 163, 277, 279, 280, 281, 282, 283, 284, 292, 294, 302, 305, 322, 353, 405, 406, 407, 441, 587, 593, 598, 603, 637, 640, 643, 646, 647, 652, 659, 686, 693, 694, 695, 696, 698, 707, 719, 723, 724, 731, 740, 748, 759, 764, 766, 809, 819, 837, 859, 860, 875, 876, 893, 964, 975, 976, 999, 1000, 1002, 1005, 1013, 1015, 1032, 1049, 1053, 1055, 1159, 1172, 1189, 1207, 1209, 1213, 1238, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "parquet": [59, 61, 62, 316, 317, 318, 399, 400, 401, 404, 405, 406, 407, 411, 451, 452, 456, 461, 510, 511, 512], "random": [59, 67, 68, 78, 86, 180, 598, 603, 653, 690, 691, 692, 780, 944, 1042, 1252], "walk": [59, 67, 68, 78, 86, 259], "expand": [59, 297, 1249], "propos": [59, 1248], "move": [59, 259, 266, 294, 295, 548, 1247, 1253], "further": [59, 91, 177, 203, 487, 975, 1000, 1041, 1151, 1238, 1241, 1246, 1247, 1249], "awai": [59, 1201, 1248], "make": [59, 86, 101, 197, 295, 536, 543, 676, 677, 809, 814, 875, 876, 952, 975, 990, 1035, 1206, 1207, 1241, 1247, 1248, 1249, 1252, 1253, 1254, 1255], "aim": [59, 63, 66], "dure": [59, 72, 73, 74, 78, 82, 84, 172, 286, 303, 304, 317, 322, 344, 348, 349, 468, 544, 561, 587, 594, 595, 600, 637, 652, 659, 685, 686, 723, 745, 749, 753, 754, 756, 757, 761, 834, 838, 875, 876, 970, 971, 974, 977, 995, 1041, 1127, 1129, 1132, 1133, 1151, 1157, 1160, 1177, 1195, 1206, 1241, 1247, 1250, 1251], "success": [59, 658, 1248, 1252], "model": [59, 73, 74, 76, 78, 85, 86, 88, 90, 154, 155, 156, 161, 162, 163, 164, 165, 172, 180, 303, 304, 311, 350, 361, 362, 464, 465, 467, 468, 587, 600, 603, 611, 613, 614, 615, 616, 622, 623, 624, 626, 627, 631, 633, 634, 642, 672, 674, 687, 689, 690, 693, 696, 697, 710, 719, 724, 800, 834, 836, 837, 839, 859, 860, 900, 906, 932, 934, 937, 944, 971, 974, 975, 1000, 1010, 1016, 1024, 1237, 1238, 1241, 1250, 1253, 1256], "space": [59, 68, 72, 76, 78, 86, 230, 231, 294, 488, 604, 606, 614, 643, 906, 1024, 1034, 1248, 1251], "find": [59, 92, 93, 94, 95, 156, 162, 299, 300, 326, 338, 356, 363, 518, 523, 568, 573, 672, 696, 740, 1110, 1112, 1166, 1168, 1223, 1224, 1241, 1248, 1253, 1254, 1255], "directori": [59, 60, 62, 78, 81, 83, 249, 259, 262, 264, 280, 281, 282, 283, 284, 285, 287, 288, 292, 302, 305, 341, 361, 362, 364, 375, 381, 382, 384, 385, 391, 401, 404, 406, 407, 422, 424, 426, 433, 435, 436, 438, 440, 443, 445, 453, 455, 456, 460, 461, 467, 468, 471, 482, 487, 488, 494, 496, 497, 504, 506, 507, 508, 511, 512, 518, 531, 533, 534, 538, 551, 561, 571, 572, 573, 574, 575, 598, 675, 677, 678, 688, 690, 730, 731, 732, 852, 952, 957, 966, 969, 976, 1011, 1013, 1014, 1015, 1153, 1155, 1156, 1157, 1221, 1224, 1226, 1227, 1231, 1232, 1234, 1235, 1236, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "store": [59, 170, 212, 259, 288, 346, 350, 375, 380, 393, 394, 395, 401, 404, 406, 407, 422, 424, 433, 435, 453, 455, 460, 467, 468, 469, 470, 471, 481, 487, 488, 494, 496, 504, 506, 511, 517, 518, 534, 548, 552, 554, 573, 577, 598, 624, 675, 677, 678, 679, 685, 688, 778, 893, 931, 932, 933, 936, 969, 995, 996, 1089, 1123, 1152, 1155, 1170, 1241, 1252, 1253], "tupl": [59, 62, 85, 88, 92, 163, 213, 219, 238, 240, 241, 296, 299, 310, 313, 329, 343, 473, 474, 475, 484, 485, 489, 490, 491, 492, 518, 519, 521, 522, 532, 533, 535, 539, 578, 587, 588, 604, 605, 646, 675, 684, 697, 709, 716, 717, 723, 724, 734, 741, 748, 750, 752, 753, 786, 846, 867, 896, 897, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 940, 941, 943, 945, 947, 949, 952, 955, 956, 961, 968, 980, 983, 990, 1001, 1003, 1004, 1024, 1025, 1026, 1027, 1028, 1029, 1034, 1038, 1045, 1050, 1052, 1060, 1064, 1091, 1092, 1098, 1103, 1110, 1127, 1138, 1159, 1161, 1163, 1169, 1170, 1175, 1183, 1187, 1195, 1203, 1204, 1209, 1212, 1214, 1216, 1225, 1241, 1255], "evaluation_function_incremental_help": [59, 86, 90, 1248], "size": [59, 80, 170, 232, 233, 240, 241, 242, 243, 244, 245, 246, 247, 322, 323, 324, 325, 329, 334, 338, 341, 343, 353, 484, 485, 562, 573, 610, 696, 723, 724, 727, 732, 741, 832, 957, 1032, 1183, 1185, 1187, 1193, 1195, 1208, 1209, 1222, 1248, 1249, 1254, 1255], "clean": [59, 775, 1247], "normalized_aim_param": 59, "normal": [59, 63, 64, 65, 66, 78, 82, 113, 114, 126, 128, 139, 140, 151, 239, 240, 241, 242, 468, 578, 650, 658, 847, 937, 944, 975, 976, 1002, 1032, 1040, 1041, 1127, 1172, 1173, 1175, 1191, 1241, 1247, 1248, 1249, 1252], "_normalize_aim_param": 59, "_normalize_param": 59, "_unnormalize_param": 59, "unnorm": [59, 65, 1191], "_concatenate_and_clean": 59, "seed_fold": [59, 61, 78, 82, 83], "particle_id": [59, 61, 67, 78, 82, 83, 1248], "_clean_the_pickl": 59, "outdir": [59, 60, 62, 338, 341, 677, 678, 1163, 1168, 1231, 1232, 1233, 1234, 1247, 1248, 1251, 1252], "remov": [59, 60, 61, 265, 295, 301, 468, 471, 477, 518, 549, 573, 586, 669, 672, 688, 690, 694, 695, 766, 775, 777, 833, 874, 900, 934, 980, 984, 987, 1248, 1253, 1255], "_load_pickle_or_parquet": 59, "load": [59, 62, 76, 78, 229, 245, 272, 277, 278, 294, 295, 296, 312, 313, 338, 339, 375, 380, 381, 382, 385, 394, 399, 400, 401, 405, 406, 411, 412, 420, 421, 422, 425, 432, 433, 451, 452, 453, 456, 457, 458, 464, 465, 469, 470, 471, 487, 488, 489, 490, 492, 493, 494, 503, 504, 518, 536, 548, 676, 731, 732, 733, 890, 891, 918, 919, 964, 966, 967, 970, 971, 972, 976, 978, 979, 1088, 1112, 1113, 1162, 1220, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1255, 1256], "assess_aim_params_reach": 59, "normalized_param": [59, 66], "toler": [59, 66, 106, 115, 116, 117, 118, 132, 326, 338, 1032, 1039], "run_rw": [59, 1248], "selected_seedpoint": [59, 67, 1248], "locat": [60, 61, 62, 100, 103, 105, 132, 136, 137, 221, 225, 226, 249, 252, 259, 260, 266, 267, 275, 321, 355, 356, 360, 363, 688, 743, 745, 767, 768, 769, 772, 837, 852, 854, 855, 858, 864, 866, 879, 895, 896, 900, 903, 904, 929, 932, 937, 938, 943, 945, 953, 959, 974, 975, 980, 982, 995, 999, 1000, 1011, 1012, 1013, 1014, 1015, 1035, 1042, 1043, 1051, 1127, 1151, 1153, 1156, 1157, 1159, 1165, 1221, 1234, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1255], "folder": [61, 82, 288, 294, 295, 297, 298, 311, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 432, 433, 452, 453, 457, 458, 464, 465, 469, 470, 493, 494, 503, 504, 518, 533, 548, 552, 554, 571, 572, 573, 599, 688, 732, 738, 948, 957, 964, 976, 997, 1115, 1163, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1256], "particl": [61, 67, 78, 81, 82, 83], "parquet_load": 62, "0001": 66, "li": [66, 1042, 1047], "1e": [66, 1032, 1039], "gener": [67, 156, 162, 165, 169, 170, 175, 180, 197, 198, 268, 277, 281, 282, 284, 287, 288, 294, 295, 297, 300, 311, 312, 357, 358, 408, 489, 548, 573, 576, 598, 599, 600, 603, 640, 672, 679, 688, 689, 690, 712, 713, 719, 762, 766, 767, 771, 786, 818, 837, 839, 844, 845, 846, 850, 851, 853, 854, 855, 857, 858, 859, 861, 896, 903, 942, 947, 948, 962, 970, 971, 973, 974, 977, 981, 997, 1000, 1007, 1047, 1050, 1117, 1153, 1156, 1157, 1158, 1159, 1161, 1167, 1168, 1170, 1171, 1226, 1227, 1237, 1238, 1246, 1247, 1250, 1251, 1253], "through": [68, 78, 86, 259, 1105, 1151, 1247, 1248, 1249, 1253, 1255], "implement": [68, 97, 98, 259, 612, 615, 631, 637, 642, 659, 768, 785, 831, 834, 837, 838, 859, 913, 999, 1031, 1035, 1247, 1256], "procedur": [68, 199, 1252], "biophsyic": [68, 600], "protocol": [68, 86, 96, 97, 98, 99, 100, 106, 115, 116, 117, 118, 132, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 156, 160, 197, 1228, 1230, 1247, 1248], "earli": [68, 88, 1237], "criteria": [68, 1076], "rw_analysi": [69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 1248], "n_particl": [69, 1248], "1000": [69, 81, 91, 94, 180, 218, 219, 220, 322, 323, 598, 599, 690, 865, 872, 874, 902, 1248, 1252], "effici": [69, 78, 294, 301, 380, 517, 554, 768, 799, 895, 1203, 1205, 1206, 1211, 1248, 1253], "parallel": [69, 240, 242, 270, 273, 295, 298, 300, 301, 391, 404, 615, 698, 707, 915, 1122, 1152, 1153, 1156, 1157, 1158, 1159, 1161, 1168, 1170, 1206, 1207, 1208, 1212, 1242, 1247, 1251, 1253], "dataset": [69, 650, 655, 975, 1251, 1252, 1255], "get_df": [69, 1248], "get_futur": 69, "futur": [69, 71, 295, 301, 311, 340, 688, 690, 694, 695, 696, 707, 768, 833, 987, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255], "progress": [71, 316, 317, 1251, 1253, 1255], "ddf": [72, 77, 78, 235, 236, 239, 240, 242, 345, 351, 394, 395, 573, 576], "augment": [72, 78, 214, 221, 230, 238, 299, 321, 336, 338, 341, 343, 345, 349], "princip": [72, 78, 1252], "compon": [72, 78, 411, 577, 593, 596, 659, 705, 725, 1168, 1242], "hz": [72, 78, 826], "util": [72, 86, 87, 88, 89, 162, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 294, 318, 319, 380, 411, 508, 509, 511, 512, 513, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 603, 679, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 810, 812, 814, 1076, 1153, 1206, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1225, 1226, 1227, 1248, 1251, 1255], "pca": 72, "span": [72, 893, 909, 910, 1027, 1028, 1040, 1234, 1254], "addit": [72, 88, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 200, 321, 345, 349, 404, 411, 422, 426, 455, 516, 535, 536, 540, 541, 547, 678, 690, 700, 701, 704, 706, 708, 715, 778, 781, 786, 800, 896, 900, 990, 1054, 1092, 1130, 1151, 1159, 1210, 1213, 1216, 1222, 1241, 1246, 1247, 1248], "pc0": 72, "pc1": 72, "depolarization_index": 72, "hyperpolarization_index": 72, "rel": [73, 74, 75, 78, 219, 259, 290, 291, 294, 356, 358, 359, 360, 361, 362, 363, 408, 409, 411, 548, 678, 758, 766, 767, 786, 788, 852, 890, 892, 932, 938, 973, 981, 982, 990, 993, 994, 995, 1013, 1014, 1015, 1061, 1062, 1165, 1175, 1216, 1221, 1246, 1247, 1248, 1255, 1256], "contribut": [73, 74, 75, 78, 1252], "ca_lva": [73, 78], "ca": [73, 186, 1177, 1246, 1247, 1251], "lva": 73, "hva": 73, "ani": [73, 85, 162, 175, 221, 227, 311, 346, 351, 352, 408, 497, 523, 565, 570, 701, 704, 717, 718, 729, 732, 766, 800, 814, 855, 980, 985, 990, 995, 1047, 1051, 1069, 1084, 1104, 1112, 1155, 1162, 1163, 1164, 1165, 1170, 1189, 1248, 1249, 1251, 1255], "hyperpolar": [74, 75, 78, 115, 116, 117, 160, 747, 748, 1172, 1173], "im": [74, 78, 1175, 1246, 1247, 1248, 1256], "sk": [74, 78], "much": [75, 86, 610, 976, 1247, 1248, 1249], "total": [75, 77, 78, 170, 240, 241, 242, 524, 540, 770, 786, 791, 797, 799, 1008, 1054, 1055, 1081, 1182, 1184, 1191, 1194, 1196, 1199, 1242, 1246, 1248, 1249, 1252, 1256], "l": [76, 78, 518, 570, 573, 616, 618, 828, 990, 1237, 1246, 1248, 1251, 1252, 1255, 1256], "fraction": [76, 77, 78, 156, 159, 730, 731, 826, 1251], "below": [76, 172, 180, 615, 617, 690, 749, 755, 831, 974, 1032, 1090, 1093, 1241, 1246, 1247, 1248, 1249, 1250, 1252, 1253, 1254, 1256], "return_mi_ma": [77, 78], "rw": [77, 78, 81, 82, 83, 86, 1248], "separ": [77, 198, 216, 217, 294, 616, 786, 797, 854, 902, 942, 1035, 1041, 1055, 1120, 1122, 1241, 1251, 1255], "rather": [77, 172, 218, 219, 487, 523, 966, 970, 989, 1014, 1035, 1122, 1134, 1144, 1159, 1246, 1255], "routin": [78, 86, 198, 1099, 1100, 1101, 1102, 1112], "analyz": [78, 86, 162, 172, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 295, 380, 598, 600, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 837, 896, 903, 1080, 1082, 1084, 1112, 1118, 1252, 1253], "read_paramet": 78, "only_in_spac": [78, 82], "only_return_paramet": [78, 82], "param_nam": [78, 82, 786, 792], "read": [78, 81, 82, 83, 84, 197, 221, 234, 249, 270, 277, 278, 279, 280, 281, 282, 283, 284, 286, 334, 357, 369, 373, 375, 392, 410, 411, 431, 436, 437, 438, 441, 442, 443, 446, 456, 461, 468, 488, 497, 502, 507, 509, 511, 513, 514, 515, 516, 517, 518, 541, 573, 583, 689, 690, 728, 743, 744, 819, 825, 832, 833, 835, 836, 837, 850, 878, 889, 890, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 937, 965, 966, 967, 968, 970, 971, 973, 974, 987, 999, 1017, 1019, 1020, 1021, 1022, 1023, 1057, 1061, 1062, 1065, 1071, 1073, 1076, 1078, 1082, 1084, 1086, 1112, 1114, 1115, 1118, 1241, 1246, 1249, 1255, 1256], "were": [78, 82, 106, 118, 132, 301, 732, 734, 854, 855, 858, 1152, 1255], "robust_read_pickl": 78, "still": [78, 84, 229, 295, 391, 557, 586, 704, 826, 857, 895, 922, 927, 954, 1253], "read_pickl": [78, 82], "read_al": 78, "basedir": [78, 81, 249, 518, 548, 731, 732, 948, 957, 1168, 1170, 1247, 1248, 1251, 1252], "n_particles_start": [78, 81], "n_particles_end": [78, 81], "independ": [78, 81, 355, 360, 480, 599, 688, 845, 913, 1031], "seepdoint": [78, 81], "get_inside_fract": 78, "df": [78, 79, 80, 87, 90, 231, 232, 233, 239, 241, 242, 345, 349, 450, 451, 567, 573, 577, 580, 1207, 1208, 1211, 1212, 1248, 1255], "accord": [78, 79, 154, 162, 404, 471, 478, 518, 542, 675, 766, 797, 819, 820, 821, 822, 823, 826, 833, 836, 837, 838, 839, 843, 844, 846, 858, 975, 1040, 1127, 1135, 1250, 1252], "get_param_range_evolution_from_ddf": 78, "get_index": 78, "get_depolarization_index": 78, "get_hyperpolarization_index": 78, "augment_ddf_with_pca_spac": 78, "pandas_binbi": 78, "c1": [78, 80, 965, 967, 972, 973, 979, 1250, 1251, 1252], "c2": [78, 80, 868, 872, 873, 874, 877, 972, 973, 979, 1249, 1250, 1251, 1252], "binsiz": [78, 80, 321, 329, 332, 334, 341, 604, 610, 741, 754, 1184, 1185, 1187, 1191, 1193, 1195], "bin": [78, 80, 230, 231, 232, 233, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 268, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 604, 608, 610, 614, 741, 752, 754, 799, 847, 860, 861, 872, 948, 950, 957, 970, 977, 1088, 1127, 1135, 1182, 1184, 1185, 1186, 1187, 1191, 1193, 1195, 1196, 1198, 1199, 1203, 1204, 1205, 1215, 1241, 1250, 1253], "01": [80, 106, 132, 197, 282, 391, 467, 468, 828, 1241, 1246, 1252, 1256], "To": [82, 411, 488, 490, 518, 600, 674, 693, 736, 809, 833, 844, 987, 999, 1115, 1144, 1238, 1241, 1242, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256], "info": [82, 321, 372, 619, 732, 839, 937, 970, 974, 1048, 1127, 1129, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1256], "particular": [82, 175, 219, 221, 696, 698, 702, 1127, 1136, 1137, 1139, 1162, 1163, 1164, 1165, 1168, 1170, 1241, 1246, 1249], "don": [84, 480, 520, 679, 758, 759, 1041, 1247, 1249, 1252, 1255], "want": [84, 245, 480, 515, 524, 540, 679, 814, 856, 876, 973, 974, 975, 1088, 1127, 1129, 1131, 1136, 1137, 1139, 1146, 1147, 1149, 1150, 1154, 1242, 1247, 1248, 1249, 1252, 1253], "your": [84, 266, 524, 540, 966, 974, 975, 1238, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255], "code": [84, 175, 229, 233, 380, 483, 488, 518, 557, 786, 896, 903, 905, 943, 945, 953, 955, 959, 1051, 1151, 1152, 1153, 1154, 1156, 1157, 1162, 1163, 1164, 1165, 1170, 1241, 1249, 1251, 1252, 1253, 1256], "analysi": [84, 294, 740, 747, 1065, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1096, 1099, 1100, 1101, 1102, 1112, 1177, 1238, 1241, 1253, 1255], "wa": [84, 170, 322, 364, 365, 366, 380, 388, 395, 518, 531, 552, 554, 615, 619, 762, 766, 833, 929, 962, 970, 973, 976, 1088, 1177, 1223, 1249, 1250, 1251, 1252, 1253], "succes": 84, "init_error": 84, "cutoff": [85, 86, 88, 90, 164, 165], "stim_ord": [85, 86, 88, 90, 1248], "stepon": [85, 97, 142, 147, 151, 205, 206, 207, 1230, 1246, 1247], "steptwo": [85, 97, 143, 144, 148, 149, 151, 1230, 1246, 1247], "stepthre": [85, 97, 143, 148, 151, 1230, 1246, 1247], "verbos": [85, 86, 88, 90, 386, 387, 1246], "evaluators_by_stimulu": [85, 86], "additional_evaluation_funct": [85, 86, 88, 90], "objectives_by_stimulu": [85, 86, 88, 90], "helper": [85, 86, 1161, 1207, 1209, 1229, 1230, 1248], "As": [85, 212, 311, 659, 669, 1248, 1249, 1251, 1253], "soon": [85, 212, 544, 1248], "show": [85, 88, 90, 317, 766, 771, 922, 1088, 1092, 1098, 1138, 1146, 1147, 1150, 1151, 1153, 1156, 1157, 1159, 1182, 1210, 1228, 1234, 1246, 1247, 1249, 1250, 1251, 1252, 1253, 1255], "doe": [85, 87, 106, 115, 116, 117, 118, 132, 162, 211, 212, 221, 249, 259, 285, 408, 481, 484, 487, 518, 529, 541, 544, 549, 600, 622, 652, 655, 748, 760, 785, 792, 798, 800, 834, 852, 858, 859, 872, 874, 887, 897, 898, 899, 900, 901, 903, 904, 907, 909, 910, 928, 929, 959, 970, 973, 980, 985, 995, 1016, 1022, 1023, 1025, 1027, 1028, 1098, 1105, 1127, 1129, 1133, 1141, 1143, 1147, 1150, 1155, 1189, 1195, 1204, 1238, 1241, 1246, 1247, 1248, 1255, 1256], "necessari": [85, 364, 365, 426, 518, 543, 548, 612, 613, 615, 659, 785, 930, 931, 932, 933, 1172, 1246, 1247, 1249, 1252, 1253], "other": [85, 95, 162, 231, 259, 266, 268, 294, 327, 355, 419, 488, 604, 608, 814, 837, 881, 887, 971, 973, 974, 975, 1035, 1127, 1146, 1147, 1148, 1149, 1150, 1154, 1162, 1163, 1164, 1165, 1170, 1246, 1248, 1253, 1254], "exit": [85, 357, 557], "prematur": 85, "abov": [85, 88, 975, 1054, 1055, 1088, 1089, 1090, 1093, 1105, 1106, 1112, 1122, 1130, 1162, 1163, 1164, 1165, 1170, 1242, 1247, 1248, 1250, 1251, 1252, 1253, 1255], "desir": [85, 164, 329, 338, 1246, 1247, 1248, 1250, 1251, 1253], "hay_complete_default_setup": [85, 180], "allow": [85, 86, 88, 101, 180, 182, 209, 211, 221, 351, 367, 489, 518, 519, 536, 540, 548, 557, 573, 600, 603, 615, 623, 677, 678, 693, 696, 766, 860, 999, 1014, 1048, 1119, 1227, 1238, 1241, 1247, 1248, 1251], "note": [85, 169, 198, 294, 426, 480, 523, 543, 640, 704, 768, 906, 913, 931, 933, 1024, 1031, 1127, 1136, 1139, 1241, 1250, 1252, 1255], "evok": [85, 675, 690, 869, 873, 874, 875, 876, 964, 965, 966, 967, 970, 971, 973, 974, 1246, 1256], "parametr": [85, 160], "multipl": [85, 95, 277, 279, 280, 283, 285, 288, 298, 300, 436, 488, 652, 655, 667, 696, 724, 727, 732, 741, 750, 754, 853, 854, 855, 1000, 1014, 1053, 1205, 1238, 1241, 1247, 1249, 1251], "own": [85, 392, 509, 766, 852, 966, 974, 1242], "largest": 85, "order": [85, 88, 91, 93, 162, 375, 600, 640, 652, 655, 839, 905, 1000, 1004, 1006, 1010, 1013, 1014, 1015, 1065, 1066, 1109, 1223, 1224, 1241, 1246, 1247, 1248, 1249, 1252, 1255], "ad": [85, 162, 183, 184, 186, 197, 266, 269, 270, 271, 272, 273, 274, 275, 306, 321, 327, 680, 820, 821, 832, 891, 942, 1147, 1246, 1248, 1254, 1256], "viabl": [86, 162, 523], "empir": [86, 106, 115, 116, 117, 118, 132, 160, 164, 696, 700, 710, 714, 719, 721, 837, 839, 851, 937, 973, 974, 1238, 1246, 1247, 1249], "respons": [86, 104, 156, 160, 194, 197, 205, 711, 870, 875, 974, 1014, 1082, 1083, 1084, 1085, 1112, 1237, 1241, 1246, 1247, 1248, 1250], "get_hay_problem_descript": [86, 161, 1248], "packag": [86, 229, 268, 277, 281, 282, 284, 380, 394, 399, 411, 451, 463, 603, 615, 732, 837, 891, 913, 937, 942, 946, 974, 999, 1031, 1168, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1255], "thei": [86, 99, 101, 156, 198, 205, 206, 207, 272, 301, 327, 356, 363, 394, 468, 480, 497, 536, 603, 631, 643, 655, 672, 685, 732, 735, 829, 834, 850, 852, 853, 854, 855, 859, 894, 895, 900, 970, 977, 1018, 1041, 1119, 1127, 1141, 1195, 1241, 1248, 1249, 1251, 1252, 1253, 1255], "eventu": 86, "veri": [86, 394, 395, 662, 672, 1248, 1254], "divers": [86, 162, 1237, 1238, 1248], "conveni": [86, 90, 154, 161, 162, 165, 197, 199, 209, 221, 224, 228, 230, 311, 338, 340, 380, 411, 510, 516, 549, 573, 603, 622, 632, 633, 673, 732, 733, 893, 906, 990, 996, 1017, 1024, 1120, 1205, 1228, 1246, 1248, 1251, 1255], "performac": 88, "fastest": 88, "criterion": [88, 1088, 1089, 1093, 1105], "abl": [88, 353, 523], "consist": [88, 360, 419, 786, 851, 878, 974, 976, 1241, 1248, 1249], "sever": 88, "onto": [88, 275, 697, 837, 839, 859, 937, 942, 943, 944, 945, 946, 974, 975, 980, 996, 999, 1000, 1032, 1041, 1042, 1151, 1153, 1156, 1157, 1216, 1217, 1241, 1249, 1250, 1252, 1255], "pass": [88, 94, 172, 243, 245, 422, 424, 487, 490, 535, 536, 541, 547, 600, 612, 613, 639, 640, 641, 651, 676, 700, 701, 704, 706, 708, 715, 797, 836, 838, 859, 952, 1111, 1120, 1121, 1144, 1151, 1203, 1210, 1216, 1222, 1246, 1251], "norm": [89, 90, 1021, 1127], "get_vector_norm": 90, "convert_all_check_columns_bool_to_float": 90, "branch": [91, 92, 93, 95, 162, 329, 766, 774, 944, 975, 990, 995, 1241, 1255], "inbetween": [91, 1241], "parent": [91, 167, 170, 180, 220, 253, 256, 257, 258, 327, 356, 363, 409, 518, 623, 758, 759, 766, 771, 786, 893, 915, 990, 1017, 1127, 1130, 1136, 1139, 1178, 1180], "z_offset": [92, 94, 162], "706": [92, 94], "inner": [92, 93, 95, 162], "z": [92, 94, 650, 652, 653, 655, 744, 831, 899, 1127, 1128, 1137, 1146, 1151, 1216, 1219, 1237, 1241, 1249, 1252, 1255], "coordin": [92, 94, 696, 699, 702, 703, 744, 758, 767, 786, 787, 788, 798, 893, 906, 907, 908, 910, 911, 915, 932, 938, 948, 956, 990, 993, 994, 995, 1024, 1025, 1026, 1028, 1029, 1042, 1052, 1127, 1137, 1153, 1154, 1156, 1157, 1190, 1201, 1216, 1222, 1241, 1249, 1255], "offset": [92, 94, 485, 643, 646, 720, 721, 831, 847, 875, 877, 1086, 1109, 1112, 1116, 1127, 1213, 1214, 1241, 1246, 1248, 1256], "get_inner_sec_dist_list": [92, 162], "um": [92, 94, 103, 105, 187, 191, 203, 210, 218, 219, 220, 346, 349, 351, 352, 801, 803, 805, 1252], "paramref": [92, 97, 194, 341, 1153, 1208, 1209, 1253], "accur": [92, 377, 378, 414], "d2": [92, 568, 972, 979, 1250, 1251, 1252], "main": [93, 95, 162, 201, 215, 220, 221, 345, 346, 517, 518, 536, 547, 554, 719, 766, 1005, 1013, 1014, 1146, 1148, 1151, 1159, 1178, 1179, 1189, 1238, 1246, 1253, 1256], "bifurc": [93, 95, 162, 215, 220, 221, 1151, 1172, 1178, 1189, 1246], "pysect": [93, 94, 95, 758, 766, 800, 833, 987, 1189], "select": [94, 162, 164, 165, 180, 181, 182, 221, 294, 301, 336, 341, 573, 611, 624, 703, 732, 734, 952, 1076, 1175, 1191, 1198, 1251, 1252, 1255], "connected_to_dend_beyond_dist": [94, 162], "filter": [94, 164, 218, 219, 617, 643, 647, 672, 1057, 1058, 1076, 1077, 1088, 1104, 1105, 1111, 1112, 1116, 1117], "outer": [94, 326], "termin": [94, 211, 544, 559, 564, 573, 1248, 1255], "pia": [94, 1032, 1255], "rat": [94, 870, 971, 974, 975, 1032, 1237, 1249, 1250, 1253, 1254, 1255], "barrel": [94, 814, 971, 973, 974, 975, 976, 977, 997, 1237, 1249, 1250, 1253, 1255], "cortex": [94, 814, 870, 971, 973, 974, 975, 976, 977, 997, 1032, 1237, 1249, 1250, 1252, 1253, 1255], "map": [94, 107, 108, 109, 110, 111, 112, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 133, 134, 135, 136, 137, 138, 163, 172, 175, 259, 266, 275, 321, 327, 338, 339, 471, 480, 488, 489, 622, 650, 656, 766, 771, 837, 839, 860, 881, 887, 937, 942, 943, 944, 945, 948, 949, 954, 974, 975, 976, 980, 990, 996, 999, 1000, 1004, 1005, 1040, 1042, 1048, 1127, 1130, 1131, 1151, 1159, 1183, 1184, 1191, 1208, 1209, 1212, 1224, 1225, 1247, 1249, 1251, 1256], "includ": [94, 96, 97, 98, 180, 186, 346, 351, 352, 380, 511, 518, 524, 530, 539, 540, 561, 597, 690, 722, 762, 768, 780, 800, 814, 836, 838, 859, 950, 953, 959, 962, 1055, 1061, 1062, 1160, 1162, 1163, 1164, 1165, 1170, 1182, 1184, 1191, 1241, 1246, 1251], "uniqu": [95, 252, 253, 260, 261, 265, 266, 267, 282, 285, 287, 308, 309, 310, 355, 360, 394, 471, 518, 529, 537, 542, 546, 553, 554, 573, 762, 852, 962, 980, 1013, 1014, 1015, 1127, 1130, 1165, 1221, 1253], "whose": [95, 220, 240, 241, 242, 351, 352, 672, 732, 734, 931, 933, 1119, 1249, 1253, 1255], "assert_uniqu": 95, "who": [95, 541], "default_setup": [96, 97, 98, 99, 101, 102, 103, 104, 105, 154, 1246, 1247, 1248], "include_di3": [96, 100], "measur": [96, 97, 98, 194, 197, 205, 710, 973, 1246, 1247], "doublet": [96, 115, 116, 117, 1071, 1073, 1074, 1075, 1112], "step3": 96, "bap_kwarg": [97, 100], "bac_kwarg": [97, 100], "stepone_kwarg": [97, 100], "steptwo_kwarg": [97, 100], "stepthree_kwarg": [97, 100], "interpolate_voltage_trac": [97, 100, 1247], "keyword": [97, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 194, 422, 426, 582, 700, 701, 704, 706, 708, 715, 729, 732, 735, 810, 832, 833, 839, 847, 849, 859, 943, 1121, 1127, 1129, 1131, 1142, 1153, 1156, 1157, 1158, 1159, 1164, 1213, 1216, 1222, 1256], "interpol": [97, 100, 101, 696, 700, 714, 719, 952, 1032, 1037, 1237, 1252], "fix": [97, 98, 99, 100, 101, 180, 184, 197, 587, 597, 799, 846, 878, 880, 977, 1014, 1144, 1147, 1150, 1153, 1156, 1157, 1158, 1246, 1248, 1255], "notimplementederror": [97, 275, 318, 688, 831, 834, 1113], "fixed_param": [98, 100, 181, 184, 197, 1246, 1248], "quit": [98, 1248, 1255], "long": [98, 294, 395, 519, 524, 540, 673, 679, 1248, 1249, 1252, 1255], "python": [100, 151, 154, 357, 392, 497, 509, 671, 672, 673, 838, 895, 989, 1111, 1165, 1221, 1241, 1246, 1251, 1252, 1253, 1255, 1256], "translat": [100, 151, 154], "silico": [100, 154, 1246, 1247], "inject": [100, 118, 128, 154, 162, 185, 186, 191, 193, 194, 587, 588, 591, 594, 595, 597, 801, 802, 803, 804, 805, 806, 810, 815, 816, 837, 927, 1246, 1247, 1248], "experi": [100, 154, 971, 973, 1238, 1246, 1249], "describ": [100, 154, 327, 328, 335, 338, 615, 712, 713, 826, 833, 836, 974, 987, 1122, 1241, 1248, 1249, 1250, 1251, 1252, 1256], "record_bap": 100, "recsite1": [100, 105, 1246, 1248], "recsite2": [100, 105, 1246, 1248], "record_bac": 100, "recsit": [100, 103, 160, 194, 197, 1246, 1248], "record_step": 100, "get_simul": [100, 180, 194, 1246, 1248], "interpolate_vt": 100, "voltage_trace_": [100, 101], "so": [100, 101, 191, 234, 282, 286, 299, 316, 317, 364, 375, 394, 518, 543, 615, 626, 640, 662, 667, 672, 673, 698, 704, 707, 826, 852, 872, 874, 915, 918, 929, 975, 1129, 1133, 1205, 1241, 1242, 1246, 1247, 1248, 1249, 1250, 1252, 1255], "map_truefalse_to_str": 100, "get_combin": [100, 180, 1248], "get_fixed_params_exampl": 100, "variabl": [101, 199, 210, 212, 221, 294, 367, 369, 372, 375, 376, 488, 675, 690, 694, 695, 696, 723, 724, 766, 770, 786, 792, 797, 838, 973, 1010, 1014, 1127, 1141, 1167, 1172, 1174, 1246, 1247, 1248, 1251, 1253], "compar": [101, 568, 573, 696, 893, 1013, 1053, 1246, 1247, 1248], "difficult": [101, 669, 1255], "025": [101, 203, 210, 282, 330, 331, 337, 1241, 1246, 1256], "quantifi": [103, 104, 105, 160, 1080, 1081, 1112, 1246, 1247], "ca2": [103, 160, 186, 187], "attenu": [105, 132, 133, 136, 137, 160, 826], "hot_zone_thresh": 106, "soma_thresh": [106, 115, 116, 117, 118, 132], "30": [106, 115, 116, 117, 118, 132, 269, 270, 295, 334, 561, 958, 965, 972, 979, 1071, 1073, 1159, 1161, 1223, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253], "ca_max_after_nth_somatic_spik": 106, "45": [106, 132, 965, 1241, 1248, 1250, 1252], "punish_last_spike_after_deadlin": [106, 115, 116, 117, 118, 132], "punish_minspikenum": [106, 115, 116, 117, 118, 132], "punish_returning_to_rest_toler": [106, 115, 116, 117, 118, 132], "punish_max_prestim_dendrite_depo": 106, "prefix": [106, 118, 160, 197, 277, 280, 281, 282, 283, 284, 518, 538, 598, 675, 690, 797], "definit": [106, 115, 116, 117, 118, 132, 1105], "hay_bac_definit": 106, "metric": [106, 113, 114, 115, 116, 117, 118, 126, 128, 132, 139, 140, 146, 147, 148, 149, 150, 231], "introduc": [106, 118, 132, 690, 1246, 1252, 1255], "illustr": [106, 118, 132, 1255], "setup_stim": [106, 115, 116, 117, 118, 132, 162, 185, 187, 188, 189, 190, 191, 192, 193, 801, 803, 805, 816], "setup_bac": [106, 186, 801], "target": [106, 213, 278, 279, 292, 297, 302, 305, 364, 375, 615, 622, 974, 999, 1032, 1040, 1048, 1238, 1248, 1249, 1250, 1252], "unit": [106, 115, 116, 117, 118, 132, 156, 159, 770, 797, 1008, 1213, 1246, 1247, 1248, 1249, 1254], "empti": [106, 118, 171, 468, 512, 669, 902, 948, 956, 961, 1032, 1034, 1088, 1127, 1154, 1155, 1159], "bac_apheight": [106, 1247, 1248], "25": [106, 115, 116, 132, 962, 965, 1241, 1246, 1247, 1248, 1250, 1251, 1252, 1253], "9": [106, 115, 132, 187, 192, 380, 651, 819, 822, 904, 951, 960, 965, 967, 970, 972, 979, 1074, 1223, 1237, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256], "901": [106, 1248], "8517": [106, 1248], "bac_ahpdepth": [106, 1247, 1248], "65": [106, 117, 334, 951, 960, 967, 1247, 1248, 1251], "6": [106, 116, 117, 334, 347, 634, 642, 651, 872, 877, 898, 906, 958, 964, 965, 967, 970, 983, 1024, 1046, 1237, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1256], "73": [106, 1252], "54": [106, 117, 828, 1246, 1248, 1251, 1256], "37": [106, 922, 965, 1241, 1246, 1248, 1250, 1252, 1255], "43": [106, 115, 965, 967, 973, 1241, 1246, 1247, 1248, 1250, 1256], "27": [106, 965, 1241, 1246, 1247, 1248, 1249, 1250, 1252], "bac_spikecount": [106, 1247, 1248], "spikecount": [106, 132, 160, 1248], "fire": [106, 114, 132, 140, 965, 977, 1247], "problem": [106, 113, 118, 126, 132, 139, 160, 161, 631], "interspik": [106, 108, 115, 116, 117, 118, 124, 160, 1075, 1247, 1250], "check_1ap": [107, 121, 122, 123, 125, 129, 134, 135, 1247, 1248], "raw": [107, 108, 109, 110, 111, 112, 113, 114, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 151, 153, 268, 294, 357, 380, 677, 678, 694, 1131, 1247, 1248], "check_2_or_3_ap": [108, 1247, 1248], "check_repolar": [108, 1247, 1248], "check_2ap": [109, 119, 127, 130, 131, 1247], "check_1_ca_ap": [110, 111, 1247, 1248], "check_": [110, 1247], "2_na_ap": [110, 1247], "check_ca_max_after_nth_somatic_spik": [110, 1247], "observ": [115, 116, 117, 160, 700, 710, 714, 974, 1246, 1247, 1248, 1252], "mf1": [115, 1247], "88": [115, 972, 979, 1252], "ai1": [115, 1247], "0036": 115, "0091": 115, "isicv1": [115, 1247], "1204": 115, "0321": 115, "di1": [115, 1247], "57": [115, 1251], "33": [115, 132, 965, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1256], "48": [115, 334, 965, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253], "ttfs1": [115, 1247], "7": [115, 116, 117, 180, 182, 347, 353, 577, 587, 617, 618, 651, 785, 819, 826, 837, 964, 965, 967, 972, 979, 989, 990, 994, 1237, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255], "32": [115, 965, 1237, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "aph1": [115, 1247], "26": [115, 965, 970, 1237, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253], "2274": 115, "9703": 115, "fahpd1": [115, 1247], "51": [115, 175, 380, 1237, 1246, 1248], "9511": 115, "8213": 115, "sahpd1": [115, 1247], "58": [115, 1246, 1248, 1249], "0443": 115, "5814": 115, "sahpt1": [115, 1247], "2376": 115, "0299": 115, "apw1": [115, 1247], "3077": 115, "1665": 115, "_step": [115, 116, 117, 323, 324, 325, 342], "setp_stepon": 115, "700": [115, 116, 117, 118, 188, 189, 190], "steptempl": [115, 116, 117, 118], "step_index": [115, 116, 117, 118], "mf3": [116, 1247], "22": [116, 965, 972, 979, 1237, 1241, 1246, 1247, 1248, 1250, 1252], "2222": 116, "ai3": [116, 1247], "0046": 116, "0026": 116, "isicv3": [116, 1247], "0954": 116, "014": 116, "di3": [116, 1247], "38": [116, 965, 1241, 1246, 1247, 1248, 1250, 1251, 1255], "83": [116, 1249], "ttfs3": [116, 1247], "aph3": [116, 1247], "16": [116, 117, 965, 967, 972, 979, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253], "4368": 116, "9322": 116, "fahpd3": [116, 1247], "56": [116, 117, 1246, 1248], "5579": 116, "5834": 116, "sahpd3": [116, 1247], "59": [116, 972, 979, 1247, 1248, 1250], "9923": 116, "9247": 116, "sahpt3": [116, 1247], "2131": 116, "0368": [116, 117], "apw3": [116, 1247], "8647": 116, "4119": 116, "setp_stepthre": 116, "mf2": [117, 1247], "14": [117, 965, 967, 972, 975, 979, 1032, 1033, 1237, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255], "ai2": [117, 1247], "0023": 117, "0056": 117, "isicv2": [117, 1247], "1083": 117, "di2": [117, 1247], "625": [117, 1251], "8": [117, 347, 651, 819, 821, 951, 960, 965, 967, 972, 979, 1237, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256], "ttfs2": [117, 1247], "19": [117, 965, 967, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253], "125": 117, "31": [117, 965, 1157, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1256], "aph2": [117, 1247], "5209": 117, "1127": 117, "fahpd2": [117, 1247], "1949": 117, "5706": 117, "sahpd2": [117, 1247], "5129": 117, "6717": 117, "sahpt2": [117, 1247], "2787": 117, "0266": 117, "apw2": [117, 1247], "3833": 117, "2843": 117, "setp_steptwo": 117, "overridden": [118, 1241], "child": [118, 211, 212, 216, 217, 221, 225, 226, 327, 386, 394, 411, 427, 431, 447, 451, 462, 463, 480, 498, 502, 599, 612, 637, 638, 659, 663, 668, 678], "mf": [118, 160, 1247], "isicv": [118, 160, 1247], "di": [118, 160, 1247], "aph": [118, 160, 1247], "fo": [118, 121, 632, 915, 1211, 1214], "fahpd": [118, 160, 1247], "sahpd": [118, 160, 1247], "sahpt": [118, 160, 1247], "apw": [118, 160, 1247], "check_2isi": [120, 124, 1247], "step_delay_index": 123, "hay_bap_definit": 132, "setup_bap": [132, 186], "bap_apheight": [132, 1247, 1248], "bap_apwidth": [132, 1247, 1248], "bap_att2": [132, 1247, 1248], "bpapatt2": [132, 1248], "bap_att3": [132, 1247, 1248], "bpapatt3": [132, 1248], "36": [132, 965, 1241, 1248, 1250, 1252, 1255], "bap_spikecount": [132, 1247, 1248], "_bap_att": 132, "_n": [132, 133], "pipett": [132, 133, 136, 137, 162, 185, 186, 191, 193, 1256], "apheight": [134, 160], "apwidth": [135, 160], "overrid": [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 1255], "std": [151, 153, 160, 1001, 1054, 1248], "nan_if_error": 151, "fun": [151, 152, 181, 183, 216, 217, 221, 518, 541, 581, 732, 736, 809, 810, 1119, 1120], "wrapper": [151, 152, 229, 249, 253, 414, 420, 622, 633, 676, 677, 685, 786, 800, 1096, 1164, 1168, 1246], "nan": [151, 152, 323, 324, 348, 1066, 1108, 1112, 1247, 1248, 1251, 1252], "get_evaluate_bap": 151, "get_evaluate_bac": 151, "get_evaluate_stepon": 151, "get_evaluate_steptwo": 151, "get_evaluate_stepthre": 151, "hay_evaluate_bap": [151, 1248], "hay_evaluate_bac": [151, 1248], "hay_evaluate_stepon": 151, "hay_evaluate_steptwo": 151, "hay_evaluate_stepthre": 151, "wrap": [152, 676, 912, 1030], "configur": [154, 162, 294, 295, 301, 314, 317, 367, 369, 372, 373, 374, 375, 376, 380, 598, 766, 819, 835, 970, 977, 1246, 1247, 1248, 1255], "feasibl": [155, 156, 161], "work": [155, 295, 471, 482, 557, 573, 678, 852, 1013, 1014, 1015, 1127, 1160, 1242, 1248, 1252, 1253, 1255], "test": [155, 180, 357, 358, 391, 565, 616, 617, 618, 621, 631, 633, 667, 930, 1000, 1010, 1015, 1127, 1140, 1146, 1252], "purpos": [155, 175, 268, 294, 357, 358, 391, 426, 554, 600, 672, 732, 766, 786, 790, 893, 930, 954, 974, 1015, 1017, 1127, 1146, 1160, 1162, 1163, 1164, 1165, 1170], "guarante": [156, 970], "yield": [156, 570, 655, 1040], "realist": [156, 1252], "heavili": [156, 643], "depend": [156, 180, 194, 369, 372, 373, 374, 375, 597, 603, 612, 613, 614, 631, 634, 799, 840, 847, 853, 854, 855, 860, 970, 974, 990, 1000, 1032, 1069, 1131, 1151, 1159, 1249, 1255], "well": [156, 230, 317, 512, 539, 643, 856, 954, 976, 1049, 1053, 1182, 1184, 1191, 1202, 1246, 1247, 1248, 1249, 1251, 1253], "conduct": [156, 159, 593, 696, 700, 710, 714, 719, 720, 721, 723, 724, 766, 770, 786, 792, 797, 826, 895, 905, 1237, 1241, 1248, 1250, 1254], "bar": [156, 159, 317, 828, 1237, 1250], "pa": [156, 159, 830, 832, 1241, 1246, 1256], "cm": [156, 159, 770, 797, 828, 830, 1127, 1241, 1246, 1251, 1256], "tau": [156, 159, 624, 643, 647, 649, 650, 652, 653, 655, 826, 1252], "gamma": [156, 159, 972, 979, 1246, 1248, 1250, 1256], "unitless": [156, 159], "x": [156, 175, 176, 182, 234, 237, 565, 573, 577, 615, 616, 619, 633, 642, 643, 647, 649, 650, 651, 652, 653, 655, 657, 659, 660, 661, 662, 665, 670, 672, 744, 758, 764, 766, 769, 786, 788, 826, 831, 837, 893, 899, 900, 904, 914, 932, 937, 938, 953, 959, 980, 982, 993, 995, 1042, 1043, 1049, 1051, 1144, 1151, 1153, 1154, 1156, 1157, 1161, 1163, 1169, 1170, 1187, 1189, 1190, 1195, 1212, 1213, 1214, 1216, 1219, 1222, 1241, 1246, 1248, 1249, 1250, 1251, 1252, 1254, 1255, 1256], "boundari": [159, 161, 172, 180, 212, 1255], "math": [159, 1253], "g_": [159, 830], "descript": [160, 161, 199, 294, 375, 468, 518, 1241, 1251, 1252, 1253], "per": [160, 286, 330, 331, 345, 351, 352, 404, 524, 540, 561, 578, 598, 599, 632, 633, 652, 657, 658, 688, 703, 719, 721, 797, 826, 836, 848, 937, 942, 962, 968, 970, 974, 975, 976, 977, 999, 1000, 1001, 1003, 1004, 1007, 1032, 1035, 1040, 1042, 1047, 1074, 1081, 1088, 1093, 1127, 1134, 1135, 1136, 1138, 1139, 1151, 1153, 1157, 1182, 1194, 1199, 1211, 1214, 1227, 1241, 1246, 1247, 1248, 1251, 1252, 1253, 1254], "stim_nam": [160, 1248], "acronym": [160, 1247], "stim_typ": [160, 1248], "squarepuls": 160, "suffix": [160, 272, 275, 277, 278, 279, 285, 287, 288, 414, 415, 471, 518, 538, 690, 897, 898, 899, 900, 901, 904, 966, 969, 1023, 1051, 1247], "att2": 160, "att3": 160, "ahpdepth": 160, "caspike_height": 160, "caspike_width": 160, "123": [160, 1237], "latenc": [160, 1082, 1083, 1112, 1247, 1252], "half": [160, 748, 1247, 1254], "get_hay_objective_nam": 161, "get_hay_param_nam": 161, "get_hay_params_pdf": 161, "get_feasible_model_param": [161, 1248], "get_feasible_model_object": 161, "multi": [162, 175, 485, 839, 860, 1000, 1238, 1241, 1253], "compartment": [162, 839, 860, 1251, 1252, 1253], "mcm": 162, "mutli": 162, "bluepyopt": [162, 172, 175, 177, 380, 1237, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "moea": [162, 1248], "priori": [162, 1248], "assumpt": 162, "fail": [162, 559, 738, 1252], "possibl": [162, 167, 176, 180, 229, 266, 394, 681, 797, 825, 834, 974, 1000, 1009, 1074, 1131, 1148, 1151, 1159, 1162, 1163, 1164, 1165, 1170, 1241, 1247, 1248, 1251, 1252], "On": [162, 600], "hand": [162, 600, 1255], "approach": [162, 672, 768, 860, 1248, 1252], "scratch": [162, 818, 858, 860, 1246, 1247, 1248, 1249, 1252, 1253, 1255, 1256], "connected_to_dend_beyond": 162, "get_branching_depth": 162, "get_branching_depth_seri": 162, "get_main_bifurcation_sect": [162, 221, 1151], "get_first_order_bifurcation_sect": 162, "model_select": [162, 163, 164], "concern": [162, 197, 209, 766], "itself": [162, 209, 259, 266, 294, 404, 455, 544, 549, 644, 766, 809, 975, 1242], "fit": [162, 166, 175, 221, 615, 696, 698, 710, 719, 720, 721, 1162, 1163, 1164, 1165, 1170], "db": [163, 165, 170, 175, 177, 179, 252, 259, 264, 266, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 294, 295, 296, 297, 300, 301, 306, 307, 312, 313, 315, 316, 317, 333, 338, 339, 345, 346, 350, 351, 352, 356, 357, 363, 518, 523, 524, 533, 534, 535, 536, 541, 548, 549, 550, 561, 573, 574, 586, 604, 609, 611, 624, 677, 678, 679, 684, 685, 693, 694, 892, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "pdf": [164, 165, 344, 345, 352, 389, 394, 397, 573, 577, 710, 719, 721, 1146, 1207, 1209, 1211, 1214, 1226, 1227, 1237, 1252, 1255], "bac_limit": [164, 165], "step_limit": [164, 165], "objectives_bac": [164, 165], "objectives_step": [164, 165], "sort": [164, 604, 609, 1008, 1009, 1226, 1227, 1250, 1252, 1255, 1256], "model_id": 164, "best": [164, 165, 318, 672, 1242, 1247, 1253], "get_model_pdf_from_db": 165, "get_pdf_select": 165, "toolbox": [166, 167, 170, 175, 1206], "invalid": [166, 669], "cxpb": [167, 170, 175, 180], "mutpb": [167, 170, 175, 180], "offsprint": 167, "stat": [168, 170, 175], "logbook": 168, "gen": 168, "invalid_count": 168, "statist": [168, 170, 696, 700, 701, 710, 711, 714, 715, 719, 721, 740, 1182, 1183, 1184, 1188, 1191, 1194, 1199, 1202, 1237], "halloffam": [169, 170, 175], "histori": [169, 380, 518], "hall": [169, 170], "fame": [169, 170], "behav": 169, "ngen": [170, 175], "cp_frequenc": [170, 175, 177], "db_run": [170, 171, 172, 175, 178], "continue_cp": [170, 175, 177, 180, 1248], "alpha": [170, 175, 972, 979, 1250, 1252], "lambda": [170, 175, 541, 577, 694, 695, 819, 826, 831, 836, 893, 1144, 1151, 1251, 1252], "deap": [170, 174, 180, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "ea": 170, "crossov": [170, 180], "probabl": [170, 180, 615, 672, 847, 853, 859, 860, 870, 873, 874, 875, 878, 964, 965, 970, 973, 976, 977, 999, 1000, 1019, 1021, 1084, 1085, 1112, 1241, 1250, 1252], "mutat": [170, 180], "tool": [170, 1237, 1247], "cp_filenam": [170, 175, 177], "_checkpoint": 170, "continu": [170, 180, 1248, 1249, 1250, 1252], "db_setup": [172, 173, 175, 179, 180, 1248], "satisfactory_boundary_dict": [172, 175, 180], "n_reschedule_on_runtime_error": [172, 175], "hook": 172, "optimis": [172, 175, 177, 1237, 1252], "deapoptimis": [172, 175, 177], "start_run": [172, 175, 177], "just": [172, 426, 749, 1247, 1248, 1249, 1254], "debug": [172, 197, 426, 1120, 1256], "sub": [172, 175, 179, 253, 256, 257, 258, 346, 356, 363, 518, 574, 891, 906, 1024], "reschedul": 172, "runtim": 172, "old_pop": [174, 175], "n_object": [174, 175], "organ": [175, 976, 1001, 1249, 1254], "data": [175, 194, 210, 229, 240, 241, 249, 252, 253, 259, 264, 266, 268, 269, 270, 271, 272, 274, 275, 280, 282, 286, 288, 294, 295, 301, 306, 316, 317, 327, 338, 346, 350, 360, 375, 380, 408, 409, 410, 411, 426, 468, 471, 473, 484, 485, 489, 490, 492, 510, 516, 517, 518, 519, 531, 536, 543, 546, 547, 548, 552, 554, 556, 577, 603, 604, 605, 607, 611, 612, 614, 615, 616, 617, 622, 624, 626, 627, 628, 629, 631, 633, 643, 647, 650, 652, 655, 657, 658, 659, 667, 668, 669, 672, 679, 690, 693, 694, 695, 696, 700, 710, 714, 719, 721, 766, 790, 837, 839, 881, 906, 912, 937, 948, 966, 973, 974, 975, 976, 999, 1000, 1003, 1024, 1030, 1053, 1054, 1055, 1057, 1058, 1069, 1111, 1112, 1114, 1118, 1127, 1131, 1133, 1134, 1136, 1138, 1139, 1140, 1141, 1142, 1146, 1147, 1148, 1150, 1153, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1170, 1172, 1205, 1206, 1229, 1230, 1233, 1234, 1235, 1236, 1237, 1238, 1240, 1246, 1247, 1248, 1249, 1250, 1251], "execut": [175, 216, 217, 221, 603, 679, 683, 686, 832, 891, 1242, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "system": [175, 253, 259, 266, 294, 355, 360, 380, 408, 488, 517, 1165, 1254], "ones": [175, 1246, 1252, 1255], "mark": [175, 1168], "comment": [175, 1247], "licens": [175, 1168], "gnu": 175, "lesser": 175, "public": [175, 1130], "publish": 175, "free": [175, 615, 633, 642, 669, 1242, 1246, 1248, 1251, 1253, 1254], "softwar": [175, 1162, 1163, 1164, 1165, 1170, 1237], "foundat": 175, "copyright": [175, 1162, 1163, 1164, 1165, 1170], "2016": [175, 1237], "epfl": 175, "blue": [175, 559, 563, 1253], "brain": [175, 814, 974, 975, 976, 1055, 1249], "project": [175, 180, 761, 764, 1159, 1216, 1217, 1241, 1249, 1255], "librari": [175, 295, 1251, 1253], "redistribut": [175, 1162, 1163, 1164, 1165, 1170], "term": [175, 294, 690, 1251], "hope": 175, "without": [175, 364, 489, 573, 576, 600, 701, 704, 717, 718, 721, 778, 785, 800, 859, 988, 990, 996, 1112, 1117, 1127, 1130, 1155, 1162, 1163, 1164, 1165, 1170], "warranti": [175, 1162, 1163, 1164, 1165, 1170], "even": [175, 229, 854, 855, 970, 977, 1162, 1163, 1164, 1165, 1170, 1223, 1247, 1251, 1255], "impli": [175, 643, 651, 1162, 1163, 1164, 1165, 1170], "merchant": [175, 1162, 1163, 1164, 1165, 1170], "FOR": [175, 1162, 1163, 1164, 1165, 1170], "receiv": [175, 197, 557, 1252], "copi": [175, 197, 273, 292, 302, 303, 304, 305, 306, 311, 567, 1115, 1248, 1251, 1252, 1253], "write": [175, 194, 270, 295, 316, 364, 365, 374, 375, 404, 409, 411, 431, 436, 440, 441, 445, 446, 456, 461, 468, 488, 497, 502, 507, 516, 517, 518, 520, 531, 555, 567, 598, 599, 600, 678, 690, 762, 772, 837, 852, 853, 879, 921, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 970, 971, 976, 977, 999, 1000, 1007, 1011, 1012, 1013, 1014, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1119, 1151, 1155, 1157, 1158, 1226, 1227, 1231, 1232, 1233, 1234, 1235, 1236, 1241, 1251, 1253, 1255], "inc": 175, "franklin": 175, "street": 175, "fifth": 175, "floor": [175, 1252], "boston": 175, "ma": 175, "02110": 175, "1301": 175, "usa": 175, "robust_int": 175, "robustli": [175, 176, 603, 685, 686], "integ": [175, 176, 240, 241, 242, 565, 573, 624, 741, 902, 906, 909, 910, 1024, 1027, 1028, 1117, 1165, 1221, 1251], "get_max_gener": 175, "save_result": 175, "setup_db_run": 175, "creat": [175, 177, 179, 202, 249, 253, 259, 266, 294, 298, 300, 301, 311, 327, 336, 338, 342, 350, 355, 356, 358, 380, 404, 411, 419, 420, 424, 425, 472, 473, 480, 483, 488, 489, 518, 525, 533, 534, 535, 538, 567, 573, 575, 600, 601, 603, 615, 650, 672, 673, 675, 689, 690, 698, 745, 766, 767, 781, 819, 822, 823, 833, 836, 837, 839, 840, 842, 844, 846, 847, 848, 849, 850, 852, 853, 854, 855, 858, 878, 879, 880, 928, 929, 937, 943, 945, 952, 964, 965, 966, 971, 974, 975, 976, 977, 978, 981, 996, 999, 1000, 1004, 1005, 1006, 1007, 1012, 1013, 1014, 1015, 1016, 1032, 1034, 1040, 1042, 1047, 1048, 1086, 1087, 1092, 1112, 1115, 1151, 1152, 1153, 1154, 1156, 1157, 1163, 1165, 1168, 1170, 1181, 1182, 1188, 1199, 1206, 1209, 1211, 1212, 1213, 1214, 1221, 1224, 1226, 1227, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1255, 1256], "get_objective_funct": 175, "get_mymap": 175, "eaalphamupluslambdacheckpoint": 175, "self": [175, 177, 285, 287, 294, 295, 377, 378, 414, 541, 705, 714, 715, 719, 846, 932, 1004, 1127, 1129, 1130, 1131, 1132, 1133, 1148, 1151, 1152, 1153, 1247, 1252, 1253, 1255], "max_ngen": [175, 177, 180, 1248], "offspring_s": [175, 177, 180, 1248], "pop": [175, 177, 180, 870, 871, 872, 875, 876, 1248], "get_population_with_different_n_object": 175, "eta": [175, 180], "convers": [176, 650, 652, 670, 1255], "here": [177, 179, 229, 388, 395, 419, 485, 557, 642, 643, 659, 662, 672, 686, 728, 797, 846, 853, 854, 855, 860, 913, 942, 974, 1031, 1032, 1048, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1255], "special": [177, 837, 839, 860, 932, 942, 974, 980, 985, 995, 1000, 1162, 1163, 1164, 1165, 1170, 1241], "600": [180, 336, 341, 1255], "parameternam": 180, "simular": 180, "therefor": [180, 182, 311, 394, 669, 1252], "accordingli": [180, 197, 273, 306, 735, 975], "previou": [180, 788, 975, 1159, 1246, 1247, 1248, 1250, 1251, 1252], "local": [180, 264, 624, 1242], "machin": [180, 295, 518, 632, 633, 1227, 1253, 1255], "offspr": [180, 1248], "exemplari": [180, 1162, 1163, 1164, 1165, 1170, 1252], "examplari": [180, 194, 1246], "complet": [180, 203, 679, 874, 942, 1246, 1248, 1251, 1255], "getting_start": [180, 974, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1255, 1256], "ipynb": [180, 1165, 1221], "test_biophysics_fit": 180, "optimizer_test": 180, "param_to_kwarg": 181, "some_seri": [181, 183], "param_selector": 181, "d": [181, 182, 643, 652, 655, 672, 679, 680, 694, 695, 819, 826, 881, 887, 893, 1178, 1182, 1237, 1248, 1250, 1251, 1252, 1253, 1255], "set_fixed_param": [181, 197], "seper": 182, "hierarchi": [182, 518], "_selector": 182, "item": [185, 212, 518, 523, 541, 554, 555, 685, 887, 1247, 1250, 1252, 1256], "epsp": [186, 187, 191, 587, 597, 696, 700, 704, 705, 706, 708, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 751, 805, 806, 810, 826, 1246, 1256], "619": [186, 188, 1256], "793": [186, 190, 1256], "507": [186, 189, 1246, 1256], "na": [186, 187, 188, 189, 190, 191, 192, 587, 588, 589, 803, 805, 816, 828, 924, 1256], "setup_soma_step": [186, 803, 816], "setup_apical_epsp_inject": [186, 805], "rise": [186, 191, 805, 806, 826, 1250, 1256], "decai": [186, 191, 805, 806, 1241, 1246, 1248, 1250, 1256], "setup_stepon": 186, "setup_steptwo": 186, "setup_stepthre": 186, "970": 187, "shape": [187, 192, 336, 471, 473, 474, 475, 479, 484, 485, 488, 489, 490, 492, 604, 607, 614, 650, 655, 747, 752, 805, 806, 810, 1134, 1138, 1246, 1252, 1254, 1255, 1256], "300": [187, 232, 233, 587, 1241, 1249, 1251, 1252, 1253, 1256], "assum": [191, 220, 225, 226, 240, 241, 273, 330, 331, 333, 337, 380, 569, 690, 810, 812, 813, 834, 852, 859, 975, 997, 1013, 1014, 1015, 1032, 1102, 1122, 1151, 1177, 1214, 1248], "get_inner_section_at_dist": [191, 218, 221, 225, 226], "constant": [191, 714, 715, 718, 826, 832, 975, 1241, 1246, 1256], "iclamp": [193, 1256], "transform": [194, 209, 273, 292, 302, 305, 306, 993, 1127, 1144, 1252], "simulator_setup": [194, 209], "varieti": [194, 209, 231, 380, 781, 1255], "program": [194, 544, 891, 1251, 1255], "flow": [194, 1247], "applic": [194, 1246], "stim_setup_fun": [194, 197, 200, 207], "stim_run_fun": [194, 197, 200, 206], "stim_response_measure_fun": [194, 196, 197, 200, 205], "ionic": [194, 826, 1172, 1173, 1174, 1177, 1206, 1247], "param1": 194, "param2": 194, "stim_1": [194, 197, 198, 205, 206, 207], "often": [194, 766, 1241], "easier": [194, 809, 1127, 1160], "params_to_kwarg": 194, "stim_setup_funct": 194, "dont": 194, "ask": 194, "directli": [194, 358, 380, 487, 524, 531, 548, 600, 701, 704, 718, 893, 1017, 1159, 1246], "stim_setup": [194, 197], "notabl": [194, 197, 898, 1022], "tvec": [194, 221, 747, 748, 749, 754, 756, 757, 764, 765, 766, 915, 948, 952, 1172, 1246, 1248, 1256], "vlist": [194, 1246, 1248], "stim_2": 194, "get_simulated_cel": [194, 1177, 1246, 1247, 1248], "stim": [194, 195, 196, 197, 205, 206, 207, 875, 876, 1177, 1246, 1247, 1248], "bipohys": [194, 1248], "get_cell_param": [194, 197, 1246], "get_cell_params_with_default_sim_pram": [194, 197, 1246], "neuron_parameter_fil": 194, "simulu": 194, "onc": [194, 303, 304, 353, 655, 672, 679, 685, 686, 1040, 1044, 1159, 1246, 1247, 1248, 1251, 1252, 1253], "sitmuli": 196, "either": [196, 238, 282, 318, 426, 677, 696, 768, 860, 887, 937, 974, 1042, 1081, 1103, 1123, 1125, 1159, 1179, 1241, 1247, 1255], "inher": [197, 209], "Such": [197, 225, 226, 597, 810, 863, 896, 903, 971, 974], "param_modify_fun": 197, "sure": [197, 480, 543, 814, 952, 1251], "param_modify_funct": 197, "alter": 197, "cell_params_gener": 197, "cell_param_modify_funct": 197, "cell_gener": [197, 200, 687, 688, 689, 690], "create_cel": [197, 202, 296, 837, 929, 1246, 1256], "cell_modify_funct": [197, 587, 677, 694, 695, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 815, 816, 817, 818, 825, 837, 1241, 1246, 1247, 1248, 1256], "instanti": [197, 1042, 1047], "measure_fun": 197, "835": 197, "params_modify_fun": [197, 204], "partial": [197, 1248, 1251, 1252], "cell_param_gener": [197, 200, 1246, 1248], "modify_param_1": 197, "cell_param_modify_fun": [197, 1246, 1248], "modify_cell_param_1": 197, "cell_modify_fun": [197, 675, 833, 836, 987, 1177, 1247, 1256], "modify_cell_1": 197, "subset": [197, 573, 582, 1252], "user": [197, 264, 364, 365, 519, 544, 548, 826, 1246, 1249, 1256], "apical_sc": 197, "gkv": 197, "001": [197, 922], "gnav": 197, "scale_ap": [197, 674, 675, 687, 688, 689, 690, 693, 694, 695, 809, 810, 813, 814, 1241, 1246, 1247, 1248, 1254], "nav": 197, "check_fun": [197, 200], "_check_not_non": 197, "var": [197, 199, 766, 776, 786, 792, 793, 1163], "varnam": [197, 199], "procedure_descript": [197, 199], "_check_first_element_of_name_is_the_sam": 197, "list1": [197, 198], "list2": [197, 198], "same": [197, 198, 200, 264, 266, 295, 311, 314, 327, 345, 347, 356, 363, 426, 513, 518, 567, 598, 652, 653, 655, 657, 658, 673, 690, 766, 772, 809, 819, 834, 839, 852, 853, 854, 855, 862, 871, 875, 876, 905, 929, 931, 932, 933, 937, 974, 980, 985, 995, 997, 1000, 1001, 1013, 1014, 1015, 1032, 1035, 1042, 1047, 1054, 1119, 1122, 1127, 1130, 1151, 1159, 1235, 1249, 1250, 1252, 1253, 1255], "get_stim": 197, "get_stim_setup_fun_by_stim": 197, "get_stim_run_fun_by_stim": 197, "get_stim_response_measure_fun": 197, "get_param": 197, "thu": [198, 353, 355, 652, 657, 658, 799, 859, 1041, 1241], "necessarili": [198, 311, 676, 772, 797, 931, 933, 1189, 1241], "tag": [198, 259, 1238, 1248], "valueerror": [198, 199, 285, 415, 480, 484, 519, 529, 684, 792, 810, 812, 1076, 1090, 1098, 1103, 1109, 1123, 1252], "saniti": 199, "throughout": [199, 689, 690, 1241], "produc": [199, 380, 518, 690, 799, 1241, 1248], "correctli": [200, 837, 929], "group": [200, 337, 338, 375, 394, 578, 604, 606, 607, 608, 609, 610, 632, 650, 651, 652, 655, 656, 657, 722, 1131, 1142, 1151, 1159, 1203, 1208, 1211, 1212, 1214, 1251, 1252], "belong": [200, 321, 326, 762, 962, 1051, 1074, 1249, 1251, 1255], "help": [202, 215, 377, 378, 414, 450, 510, 512, 1246], "inspect": [202, 296, 1172, 1246, 1247, 1251, 1253, 1255], "effect": [202, 351, 597, 600, 707, 820, 821, 1014, 1246, 1248, 1255], "34": [203, 210, 965, 967, 1241, 1246, 1248, 1250, 1252, 1255, 1256], "construct": [203, 247, 248, 279, 280, 283, 325, 338, 392, 509, 510, 512, 615, 631, 633, 659, 696, 698, 712, 713, 1159, 1160, 1241, 1255], "celsiu": [203, 210, 922], "stimulus_nam": [205, 206, 207], "equip": 209, "conjunct": [209, 1241], "run_fun": 209, "vardt": [209, 210, 696, 719, 723, 724, 837, 838, 1256], "silent": [209, 210, 334, 338, 599, 600, 677, 678, 687, 688, 689, 690, 693, 694, 836, 837, 1249, 1251, 1253], "suppress": [210, 317, 334, 518, 678, 688, 694], "resolv": [211, 221, 259, 290, 291, 355, 358, 359, 360, 363, 890, 892, 1165, 1221], "daemon": [211, 221], "process": [211, 212, 216, 217, 221, 273, 303, 304, 306, 348, 471, 480, 488, 548, 566, 573, 579, 586, 599, 678, 686, 688, 719, 966, 974, 1011, 1248, 1249, 1251, 1253, 1255], "might": [211, 1252], "spawn": 211, "stored_item": 212, "multiprocess": [212, 216, 217, 221, 223, 732, 1248], "pool": [212, 573, 578], "aliv": [212, 217, 221], "prevent": [212, 468, 557, 1252], "being": [212, 523, 557, 573, 579, 639, 672, 681, 685, 1127, 1151], "serial": [212, 216, 217, 221, 222, 223, 915, 918, 1212], "exist": [212, 225, 226, 249, 253, 273, 294, 301, 303, 304, 375, 471, 476, 480, 481, 488, 492, 518, 522, 532, 533, 535, 541, 547, 575, 601, 603, 617, 618, 622, 673, 689, 818, 837, 839, 852, 928, 929, 937, 946, 973, 990, 1041, 1153, 1156, 1157, 1241, 1246, 1247, 1248, 1251, 1253], "segment": [213, 694, 695, 742, 745, 766, 768, 770, 786, 789, 790, 791, 792, 793, 794, 797, 799, 819, 826, 832, 833, 836, 893, 1017, 1032, 1033, 1035, 1037, 1127, 1172, 1241, 1246, 1255, 1256], "discrimin": [214, 221], "tuft": [214, 215, 221, 814, 1249], "obliqu": [214, 218, 219, 221, 786, 814], "trunk": [214, 218, 219, 221, 786, 810, 812, 814, 1127, 1128, 1146, 1151, 1256], "basal": [214, 221, 786, 814, 1191, 1241], "assign": [214, 513, 652, 660, 667, 697, 723, 786, 810, 812, 814, 837, 839, 842, 843, 850, 852, 853, 854, 855, 906, 937, 942, 946, 974, 975, 999, 1005, 1024, 1032, 1041, 1042, 1047, 1048, 1127, 1135, 1241, 1249, 1251, 1255], "label_detail": [214, 786, 814], "beyond_struct": [215, 218, 219, 221], "larger": [215, 518, 755, 826], "compart": [218, 219, 786, 799, 810, 811, 812, 813, 814, 832, 839, 1000, 1246, 1256], "closest": [218, 219, 329, 338, 604, 609, 789, 1166, 1168, 1249], "get_inner_sec_dist_dict": [219, 221], "begin": [220, 327, 755, 831, 950, 993, 1035, 1044, 1246, 1249, 1255, 1256], "bifuract": 220, "meth": [220, 327, 810, 1253], "_inner": 220, "_sec": 220, "_dist": [220, 865], "_dict": [220, 467], "vm": [221, 282, 288, 952, 1131, 1142, 1147, 1149, 1150, 1154, 1163, 1167, 1241, 1256], "undemon": 221, "variablethatdoesnotgetpickl": 221, "connected_to_structure_beyond": 221, "augment_cell_with_detailed_label": [221, 786, 810, 812, 814], "attr": [221, 224], "vmsoma": 221, "vmmax": 221, "vmapic": 221, "vmapical_posit": [221, 225], "exact": [221, 225, 226, 380, 690, 1032, 1249, 1253], "run_cloudpickled_remot": 221, "queue": [221, 223], "unseri": [221, 222, 223], "execute_in_child_process": 221, "pool_help": 221, "callable_parti": [221, 222], "execute_in_child_process_kept_al": 221, "put": [223, 488, 490, 491, 548, 1153, 1156, 1253], "back": [223, 234, 316, 392, 411, 509, 511, 785, 1247], "across": [227, 229, 243, 244, 245, 248, 277, 279, 286, 287, 288, 298, 300, 311, 380, 698, 707, 750, 754, 1013, 1053, 1054, 1138, 1238, 1247, 1249, 1250, 1254], "dynam": [229, 380, 710, 711, 714, 715, 718, 859, 970, 977, 1127, 1129, 1131, 1136, 1151, 1153, 1154, 1156, 1157, 1158, 1160, 1241, 1246], "backend": [229, 259, 518, 548, 643, 646, 1146, 1148], "isf_data_bas": [229, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 1246, 1248, 1251, 1253], "highli": 229, "model_data_bas": [229, 1252], "strongli": [229, 294], "discourag": [229, 294], "former": 229, "json": [229, 380, 404, 409, 410, 411, 426, 455, 517, 518, 524, 540, 542, 546, 555, 970, 1088, 1094, 1097, 1146, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255], "metadata": [229, 271, 294, 295, 297, 298, 299, 300, 380, 471, 473, 474, 475, 479, 510, 511, 513, 517, 525, 529, 531, 549, 554, 555, 584, 1112, 1117, 1249, 1251, 1253], "latter": [229, 650, 800, 859], "made": [229, 1252], "fragil": 229, "sourc": [229, 380, 778, 781, 782, 785, 845, 853, 854, 855, 863, 866, 867, 930, 931, 932, 933, 1065, 1071, 1073, 1076, 1078, 1080, 1082, 1084, 1086, 1162, 1163, 1164, 1165, 1170, 1237, 1241, 1246, 1247, 1248, 1249, 1250, 1251], "chang": [229, 251, 295, 389, 394, 397, 468, 471, 511, 678, 693, 838, 839, 845, 853, 859, 871, 872, 875, 877, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "reason": [229, 392, 509, 519, 690, 1010, 1241, 1254], "deprec": [229, 295, 301, 316, 391, 675, 688, 690, 694, 695, 822, 833, 836, 847, 854, 857, 858, 895, 922, 927, 954, 987, 1253, 1256], "why": [229, 600, 1246, 1248, 1251], "backward": [229, 391], "compat": [229, 251, 391, 975, 1056, 1206, 1233, 1251], "aggreg": [230, 345, 346, 347, 353, 766], "synaps": [230, 231, 238, 239, 240, 241, 268, 274, 286, 292, 294, 295, 296, 301, 302, 305, 310, 321, 336, 338, 339, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 394, 587, 592, 593, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 610, 614, 615, 647, 650, 657, 658, 672, 674, 675, 678, 687, 688, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 711, 712, 713, 716, 717, 718, 719, 723, 724, 725, 726, 732, 734, 740, 759, 760, 761, 762, 764, 765, 766, 767, 768, 772, 775, 777, 778, 779, 818, 837, 839, 840, 842, 843, 844, 845, 846, 848, 850, 851, 853, 854, 855, 858, 859, 860, 863, 864, 865, 866, 867, 871, 875, 879, 880, 895, 896, 897, 900, 903, 904, 905, 906, 915, 929, 930, 931, 937, 942, 943, 944, 945, 946, 948, 953, 955, 959, 962, 963, 970, 974, 975, 976, 977, 980, 981, 984, 988, 989, 990, 996, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1015, 1024, 1032, 1034, 1040, 1041, 1042, 1047, 1048, 1049, 1050, 1051, 1054, 1055, 1127, 1132, 1137, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1159, 1160, 1182, 1183, 1184, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1202, 1233, 1234, 1250, 1253, 1254, 1256], "reduced_model": [230, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632], "db_initi": [230, 231, 239, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 380, 677, 694, 1241, 1251, 1253], "load_simrun_gener": [230, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 677, 1241, 1253], "split_synapse_activ": 230, "sa": [230, 238, 732, 734, 1233, 1234, 1251, 1252, 1253], "selfcheck": [230, 238], "excitatori": [230, 238, 345, 349, 587, 590, 592, 593, 596, 696, 698, 705, 712, 713, 714, 719, 723, 725, 751, 837, 871, 929, 930, 936, 976, 1032, 1041, 1241, 1252], "inhibitori": [230, 238, 345, 349, 587, 590, 592, 593, 596, 696, 698, 704, 705, 712, 713, 719, 723, 726, 751, 870, 875, 976, 1032, 1041, 1252], "spatiotemporal_bin": [230, 232, 233], "presynapt": [230, 231, 239, 240, 241, 274, 294, 295, 346, 349, 351, 352, 598, 600, 696, 712, 713, 723, 724, 760, 761, 762, 767, 772, 778, 781, 782, 800, 837, 839, 840, 844, 846, 847, 848, 850, 852, 853, 854, 855, 856, 859, 860, 867, 872, 895, 915, 930, 931, 932, 933, 942, 948, 955, 958, 962, 972, 974, 975, 976, 979, 980, 981, 984, 988, 995, 996, 997, 998, 999, 1000, 1004, 1006, 1007, 1009, 1012, 1016, 1032, 1041, 1047, 1050, 1054, 1055, 1249, 1250, 1253], "spike_detect": [230, 234, 237, 269, 295, 1252, 1253], "temporal_bin": [230, 240, 241, 242, 1252], "voltage_bin": [230, 243, 244, 245, 246, 247], "synapse_activation_bin": [231, 239, 268, 344, 346, 347, 348, 349, 350, 351, 352, 353], "universal_pd": [231, 232], "distance_column": [231, 232, 233], "spatial_distance_bin": [231, 232, 233], "min_tim": [231, 232, 233, 239, 240, 241, 242, 322, 323, 325, 336, 338, 341, 342, 343, 1252], "max_tim": [231, 232, 233, 239, 240, 241, 242, 322, 323, 325, 336, 338, 341, 342, 343, 1252], "time_distance_bin": [231, 232, 233], "univers": [231, 239, 344, 345], "infer": [232, 242, 243, 253, 272, 282, 299, 301, 318, 321, 334, 357, 358, 369, 485, 518, 521, 615, 624, 633, 696, 700, 714, 719, 728, 1114, 1251, 1255], "appropri": [232, 242, 243, 1168], "300m": [232, 1251, 1253], "1m": [232, 330, 331, 338], "2d": [232, 233, 237, 573, 577, 761, 766, 974, 999, 1163, 1168, 1255], "speed": [233, 394, 1161, 1203, 1253], "pars": [234, 268, 270, 271, 274, 277, 278, 279, 280, 282, 283, 288, 294, 295, 296, 297, 313, 338, 614, 615, 690, 732, 742, 743, 754, 764, 765, 829, 831, 834, 835, 837, 895, 898, 973, 990, 1022, 1127, 1160, 1251], "fed": 234, "simple_spike_detect": [234, 754], "spike_in_interv": [235, 1252], "st": [235, 237, 322, 323, 324, 325, 338, 467, 468, 650, 1071, 1088, 1112, 1117, 1211, 1213, 1252], "tmin": [235, 237, 611, 624, 732, 734, 1252], "tmax": [235, 237, 611, 624, 718, 732, 734, 1252], "trial": [235, 237, 243, 244, 245, 248, 271, 275, 277, 279, 280, 282, 294, 296, 297, 298, 299, 300, 311, 313, 322, 345, 351, 352, 603, 604, 606, 611, 614, 617, 618, 624, 629, 650, 659, 677, 678, 690, 693, 694, 695, 772, 875, 876, 895, 902, 948, 950, 961, 966, 967, 968, 1081, 1082, 1084, 1088, 1093, 1099, 1102, 1109, 1213, 1251, 1252, 1253], "schedul": [235, 236, 270, 294, 295, 301, 345, 346, 351, 352, 391, 394, 398, 399, 573, 584, 599, 624, 625, 678, 688, 1207, 1208, 1251, 1252, 1253], "_trial": [237, 273, 280, 282, 297, 311, 967], "_spike": [237, 902, 958, 961], "inclus": 237, "exclus": 237, "_in": 237, "_interv": [237, 872, 1116], "1d": [237, 380, 650, 657, 760, 761, 974, 999], "_type": [238, 710, 718, 728, 734, 859, 955, 958, 962, 970, 972, 979], "temporal_binning_pd": [239, 242, 1252], "bin_siz": [239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 336, 338, 341, 343, 847, 1252], "bin_bord": [239, 240, 241, 242], "rate": [239, 241, 242, 845, 847, 860, 861, 965, 977, 1057, 1058, 1111, 1114, 1241], "timevalu": [239, 240, 241], "temporal_binning_dask": [239, 242], "border": [240, 241, 343], "valid": [242, 295, 518, 519, 893, 894, 897, 955, 1017, 1018, 1050, 1103, 1241, 1249, 1253], "ymin": [243, 244, 245, 246, 248, 906, 983, 991, 1024, 1046, 1247], "ymax": [243, 244, 245, 246, 248, 906, 983, 991, 1024, 1046, 1247], "xmin": [243, 244, 245, 246, 248, 906, 983, 991, 1024, 1046], "unus": [243, 244, 728, 766], "xmax": [243, 244, 245, 246, 248, 906, 983, 991, 1024, 1046], "05": [244, 245, 282, 1161, 1241, 1246, 1252, 1256], "timebin": [244, 245, 248, 1252], "calculate_vdensity_array_pd": [244, 248], "monolith": 245, "memori": [245, 375, 411, 471, 477, 480, 487, 488, 489, 490, 491, 492, 518, 544, 669, 673, 676, 786, 1251, 1252, 1253, 1255], "calculate_vdensity_array_dask": [245, 248], "pixelobject": [246, 248, 1125, 1126, 1208], "calculate_vdensity_arrai": [246, 248], "edg": [247, 248, 326, 893, 894, 895, 898, 937, 1017, 1018, 1019, 1022, 1042, 1203, 1204, 1252, 1255], "sice": [247, 248], "histogram": [248, 343, 696, 708, 740, 741, 752, 754, 1088, 1091, 1184, 1185, 1187, 1191, 1193, 1195, 1196, 1199, 1204, 1206, 1250, 1252], "mani": [248, 286, 287, 311, 345, 347, 524, 540, 848, 1000, 1010, 1207, 1208, 1241, 1248, 1249, 1254], "them": [248, 259, 262, 272, 279, 282, 288, 317, 347, 471, 477, 488, 557, 558, 561, 573, 593, 599, 600, 626, 632, 650, 679, 722, 770, 809, 814, 858, 862, 874, 1008, 1009, 1040, 1042, 1127, 1135, 1151, 1157, 1162, 1214, 1223, 1224, 1246, 1252, 1253], "get_bin": [248, 338], "calculate_vdensity_array_pixelobject": 248, "isfdatabas": [249, 253, 255, 271, 272, 273, 274, 275, 278, 279, 296, 297, 306, 313, 317, 333, 339, 346, 350, 411, 421, 422, 424, 425, 497, 517, 549, 553, 554, 1248, 1251, 1253], "modeldatabas": [249, 250, 548], "readonli": [249, 518], "nocreat": [249, 518], "mdb": [251, 355, 360, 1252], "account": [251, 758, 759, 1223, 1250, 1252], "isf_db": 251, "unique_id": [252, 253, 259, 260, 265, 266, 267, 468, 553, 554], "data_base_regist": [252, 259, 260, 261, 262, 263, 264, 265, 267, 380], "identifi": [252, 282, 518, 542, 546, 742, 755, 762, 962, 980, 1165, 1221, 1241, 1254, 1255], "modular": [253, 355, 358, 359, 360, 380, 600, 615], "newli": [253, 259, 266, 535, 767, 981], "automat": [253, 266, 357, 358, 450, 451, 549, 673, 766, 786, 822, 823], "newest": 253, "older": [253, 301, 468], "open": [253, 266, 282, 357, 358, 375, 380, 895, 965, 1237, 1246, 1249, 1251, 1252, 1255], "old": [253, 314, 316, 478, 545], "writer": [253, 517, 837, 897, 900, 904, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 999, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1241], "reader": [253, 517, 837, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 953, 955, 959, 999, 1017, 1018, 1020, 1021, 1022, 1023, 1088, 1093, 1094, 1112, 1113, 1241, 1246, 1256], "is_isf_data_bas": 253, "is_data_bas": 253, "is_sub_isf_data_bas": 253, "parent_db": [253, 256, 257, 258, 518], "is_sub_model_data_bas": 253, "parent_mdb": [253, 258], "is_sub_data_bas": 253, "registry_basedir": 259, "search_db": 259, "on_first_init": 259, "registri": [259, 260, 261, 262, 265, 266, 355, 360, 380], "disk": [259, 271, 294, 471, 480, 481, 487, 488, 489, 490, 544, 852, 853, 976, 1007, 1012, 1013, 1014, 1050, 1053, 1054, 1055, 1056, 1255], "share": [259, 266, 294, 311, 356, 363, 411, 469, 470, 471, 477, 480, 487, 488, 489, 490, 491, 492, 518, 534], "peopl": 259, "sqlite": [259, 548], "explicitli": [259, 357, 358, 544, 797, 859, 895, 1098, 1251], "encount": 259, "subfold": [259, 262, 295, 414, 416, 548, 561, 688, 1253], "sqlitebackend": 259, "add_db": 259, "db_basedir": [259, 260, 266, 267, 358, 359, 361, 362, 363], "search": [262, 699, 1237], "databaseregist": [263, 266], "remote_path": [264, 266], "local_path": [264, 266], "assimil": [264, 266], "remot": [264, 266, 624, 631, 1252, 1255], "_base": [264, 408, 409], "_regist": 264, "deregist": [265, 266], "ledger": 266, "link": [266, 294, 295, 598, 599, 973, 1238, 1241, 1251, 1253, 1254, 1255], "particularli": 266, "ideal": [266, 282], "obviou": 266, "place": [266, 615, 735, 738, 944, 969, 975, 1035, 1040, 1222, 1249, 1256], "someon": 266, "els": [266, 548, 1247, 1250, 1252, 1253, 1255], "Its": [266, 518, 766, 974, 1109, 1188], "filesystem": [266, 294, 360, 518, 542, 546], "know": [266, 511, 1247, 1250], "assimilate_remote_regist": 266, "register_this_databas": 266, "register_db": 266, "deregister_db": 266, "perman": [268, 294], "heraft": 268, "init": [268, 270, 273, 294, 333, 339, 344, 345, 348, 349, 350, 810, 837, 838, 863, 1241, 1251, 1253], "build": [268, 294, 551, 601, 602, 603, 689, 690, 1247, 1253], "previous": [268, 833, 854, 855, 858, 937, 943, 945, 1127, 1143, 1153, 1156, 1157, 1249], "prepare_ann_batch": [268, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343], "ann": [268, 327, 338], "batch": [268, 338, 341], "prepar": [268, 327, 338, 1255], "dendritic_spike_times_threshold": [269, 270, 294, 295, 1253], "rewrite_in_optimized_format": [270, 294, 295, 1253], "dendritic_spike_tim": [270, 294, 295, 1251, 1253], "repartit": [270, 271, 272, 274, 277, 278, 279, 280, 294, 295, 299, 300, 301, 391, 394, 398, 399, 404, 405, 573, 576, 1253], "high": [270, 295, 296, 380, 662, 694, 695, 826, 922, 927, 999, 1073, 1074, 1075, 1111, 1112, 1159, 1242, 1246, 1248, 1251, 1253, 1255], "5000": [270, 271, 272, 274, 278, 279, 280, 295, 299, 301, 394, 635, 1248, 1253], "partit": [270, 271, 272, 274, 278, 279, 280, 295, 299, 301, 394, 404, 405, 406, 407, 576, 1253], "10000": [270, 271, 272, 274, 278, 279, 280, 295, 299, 394, 404, 1248, 1253], "entri": [270, 271, 272, 274, 278, 279, 280, 295, 299, 311, 342, 380, 1001, 1250, 1253], "add_dendritic_spike_tim": [270, 294, 295, 1253], "builder": [271, 272, 273, 274, 275, 294], "metadata_dump": 271, "pandas_to_msgpack": [271, 295, 394, 399, 411, 447, 448, 449, 450, 1253], "essenti": [271, 722, 834], "filelist": [271, 294, 295, 514, 515, 516, 524, 540, 1251, 1253], "dump": [271, 357, 385, 394, 399, 405, 411, 420, 425, 431, 436, 441, 446, 451, 456, 461, 468, 488, 497, 502, 507, 543, 567, 1255], "suffix_dict": 272, "_record": [272, 301], "renam": [273, 292, 294, 302, 303, 304, 305, 306, 471, 478, 518, 573, 579], "parameterfil": [273, 294, 295, 303, 304, 306, 311, 333, 339, 852, 1241, 1246, 1250, 1251, 1256], "network": [273, 290, 294, 296, 303, 306, 310, 311, 312, 313, 338, 339, 358, 361, 394, 587, 598, 599, 600, 601, 602, 603, 674, 675, 677, 678, 687, 688, 689, 690, 693, 694, 695, 696, 697, 712, 713, 719, 723, 724, 732, 737, 740, 766, 775, 778, 781, 782, 800, 810, 817, 818, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 928, 937, 942, 970, 971, 974, 976, 977, 978, 996, 1000, 1002, 1010, 1013, 1014, 1015, 1016, 1032, 1041, 1053, 1054, 1237, 1238, 1244, 1251, 1252, 1253], "syn": [273, 292, 305, 306, 601, 674, 675, 719, 725, 726, 759, 764, 837, 839, 842, 843, 859, 860, 895, 897, 900, 904, 928, 929, 930, 937, 943, 945, 948, 953, 955, 959, 970, 974, 975, 977, 1049, 1050, 1051, 1244, 1249, 1250], "con": [273, 302, 306, 587, 696, 712, 713, 719, 728, 837, 852, 895, 897, 948, 955, 970, 974, 975, 977, 997, 998, 999, 1049, 1050, 1244, 1248, 1249, 1250], "hash": [273, 290, 291, 292, 294, 302, 304, 305, 306, 311, 380, 549], "_cell": [273, 311, 333, 728, 809, 952, 972, 979], "_folder": [273, 333, 339], "_network": [273, 311, 339], "simresult": [273, 297, 311, 1256], "_path": [273, 297, 311], "_index": [273, 280, 282, 297, 311, 952], "alreadi": [273, 316, 471, 480, 481, 529, 533, 535, 541, 547, 617, 618, 650, 652, 655, 683, 707, 735, 819, 834, 839, 840, 848, 850, 852, 928, 929, 970, 1246, 1248, 1249, 1253], "context": [273, 357, 358, 483, 488, 557, 573, 575, 581, 931, 933, 993, 1253], "n_chunk": [274, 294, 295, 1253], "_activ": [274, 301, 346, 765, 873, 874, 930, 932, 962, 964, 965, 967, 970], "respect": [274, 394, 395, 411, 426, 548, 634, 656, 685, 694, 695, 710, 820, 821, 871, 1060, 1064, 1195, 1246, 1247, 1250], "chunk": [274, 295, 340, 353, 562, 584, 727, 1253], "postsynapt": [275, 294, 592, 593, 600, 762, 767, 839, 842, 853, 854, 855, 859, 860, 864, 866, 930, 931, 932, 933, 962, 974, 975, 976, 981, 988, 995, 999, 1000, 1004, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1032, 1034, 1040, 1041, 1042, 1241, 1249, 1251], "read_voltage_traces_from_files_panda": 277, "fname": [277, 280, 281, 282, 283, 284, 471, 474, 488, 492, 762, 764, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 948, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 966, 967, 969, 1019, 1020, 1021, 1022, 1023, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1250], "read_voltage_traces_from_fil": [277, 280, 281, 283, 284], "read_voltage_traces_from_csv": [277, 282], "csv": [277, 281, 282, 288, 294, 311, 514, 515, 516, 762, 764, 962, 972, 979, 997, 1021, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253], "read_voltage_traces_from_npz": [277, 282], "npz": [277, 282, 284, 294, 411, 437, 438, 440, 441, 487, 1252], "read_voltage_traces_by_filenam": [277, 279, 283], "divis": [277, 279, 280, 299, 300, 386], "load_dendritic_voltage_traces_help": [277, 278], "load_dendritic_voltage_trac": 277, "suffix_key_dict": [277, 278], "data_pars": [278, 279, 280, 281, 282, 283, 284, 294], "let": [279, 280, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1255, 1256], "handl": [279, 280, 353, 557, 558, 614, 673, 686, 739, 800, 837, 890, 1016, 1247, 1252], "consult": [280, 800, 975, 1048, 1053, 1242, 1249], "expect": [281, 284, 471, 479, 484, 677, 684, 859, 1248, 1255], "extens": [282, 762, 837, 962, 1162, 1220, 1253, 1255], "_result": [282, 347, 960, 1067, 1068, 1072, 1075, 1077, 1079, 1081, 1083, 1085, 1087], "_fn": 282, "_all": [282, 288, 951], "_trace": [282, 288, 301, 752, 951, 960], "r": [282, 357, 375, 826, 965, 1127, 1179, 1237, 1246, 1252, 1255], "00": [282, 1241, 1246, 1251, 1252, 1253, 1255, 1256], "61": [282, 1241, 1247], "4607218758": [282, 1241], "1366909604": [282, 1241], "4665809176": [282, 1241], "1294343391": [282, 1241], "4735021526": [282, 1241], "1223216173": [282, 1241], "_voltag": [282, 711], "_from": [282, 964], "_file": [282, 311, 334, 471, 478, 809, 898, 900, 902, 904, 955, 956, 961, 962, 972, 979], "000000": [282, 311, 334, 1251], "000001": [282, 311], "date": [282, 311, 380, 549, 970, 1011, 1241, 1246, 1256], "pid": [282, 311, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "singular": [283, 942], "file_handl": [285, 286, 288, 294], "recurs": [285, 317, 345, 353, 518, 539, 561, 568, 573, 966, 969], "subdirectori": [285, 288, 976], "delimit": [286, 287, 1249], "vari": [286, 1246], "comma": [286, 902, 1241], "pad": [286, 1223, 1255], "sinc": [286, 294, 295, 301, 323, 324, 325, 338, 391, 497, 652, 655, 675, 688, 690, 694, 695, 768, 822, 823, 833, 854, 857, 858, 895, 987, 1165, 1221, 1249, 1252, 1254], "known": [286, 294, 356, 363, 860, 996, 1241], "post": [286, 735, 740, 750, 751, 974, 975, 999, 1000, 1032, 1041, 1048, 1241, 1249, 1250, 1255, 1256], "make_filelist": 287, "get_fil": [287, 414, 1248, 1249, 1250], "get_max_comma": 287, "vm_all_trac": 288, "spread": [288, 1248], "toward": [288, 1248], "interest": [288, 316, 974, 975, 1148, 1247, 1249, 1252], "filepath_resolut": [289, 290, 291, 292, 294], "con_cont": 289, "syn_fn_map": [289, 290, 302, 303], "con_fn": [289, 302], "netp": [290, 358, 361, 875, 876], "con_fn_map": [290, 303], "resolve_netp_reldb_path": [290, 358], "neup": [291, 358, 362, 797], "hoc_fn_map": [291, 292, 304, 305], "recsites_fn_map": [291, 304], "resolve_neup_reldb_path": [291, 358], "syn_cont": 292, "syn_fn": [292, 305], "new_hoc": [292, 305], "written": [294, 357, 358, 380, 404, 518, 952, 1055, 1056, 1248, 1255], "timestep": [294, 322, 325, 342, 1127, 1163], "advanc": 294, "gather": [294, 311, 696, 705, 966, 1136, 1137, 1139, 1154, 1241, 1255], "io": [294, 369, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 543, 569, 679, 895, 1248, 1253, 1255], "hpc": [294, 488, 679, 1242, 1253], "inod": 294, "simresult_path": [294, 295, 298, 300, 311, 312, 1251, 1253], "filepath": [294, 303, 304, 306, 360, 410, 411, 415, 471, 965], "sim_trial_index": [294, 295, 297, 298, 300, 311, 312, 468, 693, 694, 766, 772, 1241, 1251, 1253], "sim_trial_indic": [294, 311], "parameterfiles_cell_fold": [294, 1251], "managedfold": [294, 411, 412, 413, 420, 533, 603, 679, 686, 1251], "parameterfiles_network_fold": [294, 1251], "synapse_activ": [294, 295, 345, 1251, 1253], "cell_activ": [294, 1251], "dendritic_record": [294, 1251], "subdatabas": [294, 317, 518, 524, 530, 539, 540, 563], "spike_tim": [294, 295, 338, 342, 1065, 1066, 1071, 1073, 1078, 1086, 1088, 1093, 1105, 1109, 1112, 1251, 1252, 1253], "intial": 294, "whichev": 294, "config": [294, 295, 301, 314, 375], "essenc": 294, "insturct": 294, "intend": [294, 971, 1238, 1242], "storag": [294, 446], "afterward": [294, 355, 600, 736, 1247], "symlink": 294, "delet": [294, 295, 478, 518, 533, 544, 566, 573, 579, 669, 738, 1115, 1251, 1253], "archiv": [294, 1252], "favor": [294, 295, 822], "run_new_simul": [294, 600, 603, 838], "_evoked_act": [294, 762, 962], "core": [294, 295, 635, 689, 690, 723, 724, 871, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1113, 1114, 1115, 1116, 1117, 1118, 1207, 1209, 1251, 1252, 1253], "dendritic_voltage_trac": [294, 295, 1253], "burst_tim": [294, 295, 1253], "dumper": [294, 295, 301, 314, 316, 317, 318, 380, 383, 385, 390, 391, 394, 402, 405, 408, 409, 410, 411, 418, 419, 420, 423, 425, 429, 431, 434, 436, 439, 441, 444, 446, 449, 451, 454, 456, 459, 461, 466, 468, 486, 488, 495, 497, 500, 502, 505, 507, 511, 518, 522, 523, 531, 534, 535, 541, 542, 543, 546, 547, 548, 549, 552, 554, 567, 895, 1248, 1253], "add_dendritic_voltage_trac": 294, "categor": [294, 301, 318, 391, 393, 394, 395, 411, 718, 766, 770, 1238, 1251], "rewrit": [294, 301], "load_initialized_cell_and_evokednw_from_db": 294, "sti": [294, 296, 312, 313, 677, 678], "allpoint": [294, 296, 674, 675, 693, 694, 695, 836, 837, 915, 948, 952], "reconnect_synaps": [294, 296], "metadata_util": [294, 297, 298, 299], "param_file_pars": [294, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313], "reoptim": [294, 314, 315, 317], "re": [294, 296, 301, 314, 316, 317, 360, 380, 600, 603, 674, 693, 766, 775, 786, 795, 834, 839, 854, 855, 857, 864, 866, 1177, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1255], "_build_cor": [295, 1253], "_build_dendritic_voltage_trac": [295, 1253], "_build_synapse_activ": [295, 1253], "_build_param_fil": [295, 1253], "binari": [295, 357, 380, 1057, 1112, 1114, 1162, 1163, 1164, 1165, 1170, 1215, 1251, 1253], "unpickl": [295, 468, 548, 1253], "robust": [295, 517, 554, 673, 679, 686, 1253], "against": [295, 892, 1046, 1253], "third": [295, 840, 1253], "parti": [295, 1253], "anoth": [295, 391, 838, 1055, 1252, 1253], "everyth": [295, 548, 1249, 1253], "would": [295, 450, 481, 544, 876, 1223, 1253, 1254, 1255], "caus": [295, 1162, 1163, 1164, 1165, 1170, 1212, 1252, 1253], "loss": [295, 392, 509, 1162, 1163, 1164, 1165, 1170, 1253], "transfer": [295, 355, 1253], "anyth": [295, 1253], "isn": [295, 1253], "central": [295, 301, 375], "reconnect": [296, 674, 675], "networkmapp": [296, 600, 601, 675, 690, 696, 697, 723, 781, 782, 860, 975, 976, 997, 1016, 1032, 1041, 1048], "reconnect_saved_synaps": [296, 839], "rerun_db": [296, 603, 676, 688, 689, 864, 866], "create_metadata": [298, 300], "alwai": [299, 327, 356, 363, 411, 495, 505, 518, 523, 788, 832, 841, 906, 990, 1024, 1074, 1241, 1248, 1252], "lowest": [299, 1157, 1252], "get_voltage_traces_divisions_by_metadata": 300, "create_metadata_parallelization_help": 300, "_get_dump": 301, "target_fn": [302, 303, 304, 305], "new_syn": 302, "netp_fn": [303, 310], "transform_fun": [303, 304, 306], "write_param_files_to_fold": [303, 304], "relev": [303, 304, 480, 619, 826, 1151, 1192, 1249, 1250, 1251, 1252, 1253], "neup_fn": [304, 308, 309], "paramfile_hashmap_df": 306, "neup_path_column": 306, "path_neuron": 306, "neup_hash_column": 306, "hash_neuron": 306, "netp_path_column": 306, "path_network": 306, "netp_hash_column": 306, "hash_network": 306, "path_column": 306, "hash_column": 306, "dir_nam": 307, "file_list": 307, "hash_renam": 307, "landmark": [309, 730, 731, 732, 743, 744, 745, 895, 899, 947, 948, 956, 957, 975, 1000, 1011, 1049, 1052, 1249, 1255], "hashmap": [311, 312], "embed": [311, 601, 603, 674, 675, 677, 678, 687, 688, 689, 690, 693, 696, 697, 719, 740, 837, 839, 844, 850, 854, 855, 860, 976, 1165, 1168, 1221, 1224, 1241, 1247, 1251], "collect": [311, 322, 544, 931, 933, 975, 1008, 1238, 1247, 1252], "necessarilli": 311, "paramfil": 311, "_seed": 311, "_pid": 311, "o": [311, 375, 575, 732, 735, 736, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256], "listdir": [311, 414, 1249, 1250, 1251], "_run000000": 311, "_synaps": [311, 900, 904, 962], "_presynapt": [311, 958], "_run000001": 311, "_model": 311, "_hash": 311, "concat": [311, 710, 1248, 1252], "0b1": 311, "0b2": 311, "construct_param_filename_hashmap_df": 312, "load_param_files_from_db": 312, "old_dumper_nam": 314, "new_dumper_nam": 314, "databaseexcept": [314, 379, 520, 528, 547], "warn": [314, 317, 518, 559, 567, 684, 1246, 1247, 1248, 1251, 1253, 1256], "new_dump": 315, "involv": 316, "variou": [316, 338, 411, 516, 517, 999, 1229, 1230, 1241, 1246, 1250, 1255], "sometim": [316, 395], "past": [316, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "switch": [316, 317], "msgpack": [316, 317, 391, 394, 399, 411, 431, 450, 451, 502, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "un": 316, "could": [316, 528, 768, 785, 1074, 1241, 1248], "principl": [316, 426, 523, 1014, 1251], "reoptimize_db": 316, "n_db_parent": [316, 317], "suppress_warn": [316, 317], "stai": [317, 1251], "readabl": 317, "dd": 318, "fn": [319, 1151, 1155], "sa_": [321, 336, 338, 341], "section_distances_df": [321, 327, 328, 332, 335, 338, 341], "synaptic_weight_dict": [321, 338, 341], "excitatory_celltyp": [321, 338, 339], "imping": 321, "repres": [321, 322, 332, 341, 342, 561, 573, 786, 800, 906, 952, 1000, 1008, 1010, 1013, 1014, 1024, 1035, 1189, 1249], "section_id": [321, 327, 328, 338, 1138, 1251], "bin_within_sect": 321, "synapt": [321, 336, 339, 597, 599, 603, 643, 650, 672, 678, 688, 689, 690, 696, 698, 700, 701, 703, 704, 706, 707, 708, 710, 714, 718, 719, 720, 721, 723, 724, 725, 726, 740, 750, 751, 772, 810, 817, 818, 837, 859, 905, 932, 936, 974, 975, 999, 1000, 1032, 1041, 1048, 1191, 1237, 1241, 1249, 1250, 1252, 1253, 1256], "weight": [321, 336, 338, 339, 343, 615, 643, 647, 649, 650, 651, 652, 653, 655, 657, 659, 661, 672, 710, 719, 725, 726, 839, 843, 845, 850, 851, 853, 854, 855, 858, 871, 875, 905, 930, 931, 932, 948, 963, 970, 1241, 1250, 1252], "branch_bin": 321, "celltyp": [321, 346, 349, 351, 352, 696, 698, 700, 701, 702, 703, 706, 707, 708, 710, 711, 714, 718, 719, 721, 722, 723, 724, 728, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 965, 966, 970, 971, 972, 973, 976, 979, 988, 997, 998, 999, 1021, 1032, 1041, 1233, 1234, 1241, 1246, 1249, 1250, 1251, 1253], "ei": [321, 345, 346, 349, 351, 352], "syn_weight": 321, "fillna": [322, 323, 324, 338], "encod": [322, 338, 342, 1162, 1241], "length": [322, 323, 324, 329, 338, 342, 345, 353, 392, 471, 479, 509, 629, 647, 650, 651, 652, 653, 766, 768, 769, 774, 786, 798, 826, 837, 876, 914, 937, 938, 947, 974, 975, 980, 982, 990, 992, 994, 999, 1032, 1035, 1040, 1042, 1043, 1046, 1054, 1055, 1078, 1127, 1135, 1144, 1182, 1184, 1186, 1187, 1191, 1196, 1202, 1203, 1204, 1213, 1235, 1246, 1249, 1256], "_time": [322, 323, 324, 325, 336, 342, 711, 765, 902, 958, 961], "compute_isi_from_st_list": [323, 324, 338], "compute_isi_from_st": [323, 325, 338], "compute_isi_arrai": [324, 325, 338], "505": [325, 342, 1251], "time_step": [325, 338, 342], "window": [325, 611, 749, 750, 751, 753, 754, 755, 756, 757, 847, 1151, 1175, 1227], "bin_min": [326, 338], "bin_max": [326, 338], "n_bin": [326, 338], "ibn": 326, "round": [326, 1158, 1159, 1252], "adjac": [327, 338, 771, 826], "resolut": [327, 338, 694, 695, 975, 1246, 1252], "trivial": 327, "exploit": 327, "tree": [327, 518, 524, 540, 561, 573, 766, 937, 944, 1241, 1247, 1248, 1249], "goal": [327, 329, 338], "figur": [327, 356, 363, 706, 708, 1098, 1124, 1147, 1154, 1159, 1161, 1168, 1169, 1170, 1181, 1183, 1188, 1199, 1208, 1209, 1210, 1212, 1213, 1214, 1230, 1246, 1247, 1248, 1249, 1252, 1255, 1256], "eeach": 327, "get_section_distances_df": [327, 328, 335, 338], "binsize_go": [329, 338], "vt_dask": [330, 338], "subsampl": [330, 331, 338, 1255], "vt_panda": [331, 337, 338], "bin_id": [332, 338], "neighbor": [332, 338], "_type_": [332, 391], "_id": [332, 335, 355, 360, 734], "neuron_param_fil": [334, 338], "get_bins": [334, 338], "_distanc": 334, "_df": 334, "_section": 334, "_bin": [334, 336], "35": [334, 750, 753, 962, 965, 1241, 1246, 1248, 1250, 1252, 1255], "032795": 334, "0328": 334, "131": [334, 1252], "179980": 334, "0736": 334, "41": [334, 965, 973, 1241, 1250], "505115": 334, "47232": 334, "252": [334, 1251], "996874": 334, "52": [334, 380, 1246, 1248], "8729": 334, "165": 334, "95": [334, 967, 1237, 1252], "220299": 334, "161": 334, "215314": 334, "995": 334, "166": 334, "158": 334, "805975": 334, "63": [334, 1247, 1251], "5857": 334, "167": [334, 1251], "20": [334, 394, 524, 540, 772, 965, 1153, 1156, 1157, 1237, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255], "168": 334, "169": [334, 1251], "1049": 334, "999969": 334, "selected_sti": [336, 338, 341], "spatial_bin_nam": [336, 338, 341], "use_weight": [336, 338, 343], "4d": [336, 338], "ax": [336, 643, 648, 649, 1088, 1095, 1123, 1125, 1126, 1138, 1159, 1168, 1171, 1172, 1175, 1176, 1178, 1179, 1181, 1184, 1187, 1188, 1191, 1195, 1196, 1197, 1199, 1203, 1204, 1205, 1207, 1208, 1209, 1211, 1212, 1213, 1214, 1219, 1222, 1224, 1247, 1248, 1249, 1250, 1252, 1256], "exc": [336, 346, 351, 352, 592, 650, 651, 656, 696, 1021, 1040, 1252, 1253, 1255], "inh": [336, 346, 351, 352, 650, 651, 656, 696, 1021, 1040, 1252, 1253], "len": [336, 651, 698, 707, 947, 948, 950, 1246, 1248, 1250, 1251, 1252, 1255], "_sti": 336, "_size": [336, 485], "weigh": [336, 343, 643, 647, 655, 672, 710], "actic": 338, "train": [338, 616, 617, 618, 621, 631, 633, 778, 780, 782, 839, 845, 849, 853, 854, 855, 861, 1252], "artifici": 338, "neural": 338, "get_neuron_param_fil": 338, "get_spatial_bin_nam": 338, "get_bin_soma_distances_in_sect": 338, "get_bin_adjacency_map_in_sect": 338, "get_neighboring_spatial_bin": 338, "augment_synapse_activation_df_with_branch_bin": [338, 343], "spike_times_to_onehot": 338, "compute_ap_arrai": 338, "load_syn_weight": 338, "temporal_binning_augmented_sa": 338, "sa_aug": [338, 343], "tempor": [338, 343, 615, 624, 650, 651, 652, 657, 970, 977, 1252], "get_synapse_activation_array_weight": 338, "save_sa_batch": 338, "batch_id": [338, 341], "get_time_group": 338, "get_max_per_ms_on_pandas_datafram": 338, "get_max_depolarization_per_m": 338, "run_delayeds_increment": 338, "increment": [338, 340, 1248], "batch_": 341, "_synapse_activ": 341, "npy": [341, 411, 432, 436, 441, 487], "maxtim": [344, 345, 346, 348], "groupbi": [345, 346, 350, 351, 352, 1249, 1251, 1252], "synapse_activation_postprocess_dask": [345, 350, 352, 353], "prefun": [345, 346, 351, 352], "applyfun": [345, 346, 351, 352], "postfun": [345, 346, 351, 352], "save_groupbi": 345, "postprocess": [345, 346, 348, 351, 352], "synapse_activation_postprocess_panda": [345, 351, 353], "merge_results_togeth": [345, 353], "tree_reduct": 345, "aggregate_fun": [345, 353], "400": [346, 826, 1248, 1252], "avail": [346, 351, 352, 391, 394, 399, 451, 587, 615, 619, 626, 627, 631, 634, 670, 678, 974, 1048, 1129, 1145, 1146, 1151, 1159, 1242, 1249, 1252, 1255], "_column": [346, 349, 351, 352, 873, 874], "proxim": [346, 349, 351, 352], "500": [346, 349, 351, 352, 958, 1252, 1256], "lump": [346, 351, 352], "_somadist": [346, 349, 351, 352], "micron": [346, 349, 351, 352, 1182, 1246, 1256], "subgroup": [346, 351, 352], "comptat": 346, "preprocess": [346, 351, 352, 626, 633], "zero": [347, 348, 906, 912, 1000, 1009, 1024, 1030, 1032, 1039, 1088, 1090, 1091, 1252], "_togeth": 347, "speci": [351, 352], "immedi": [351, 352, 1255], "dbopen": [354, 355, 356, 359, 360, 361, 362, 363, 380], "my": [354, 408, 409], "_function": [354, 688, 690, 809, 836, 955], "form": [355, 356, 360, 363, 404, 455, 643, 655, 705, 718, 786, 937, 972, 979, 1004, 1007, 1012, 1040, 1050, 1054, 1116, 1162, 1163, 1164, 1165, 1170, 1241, 1252, 1255], "hard": [355, 360, 395, 1251], "drive": [355, 360, 1237, 1251], "reldb": [356, 363], "matter": [356, 363, 652, 655, 1032, 1255], "manag": [357, 358, 483, 488, 557, 573, 575, 581, 673, 719, 1242, 1253], "develop": [357, 358, 1251, 1253], "my_db": 357, "my_kei": 357, "f": [357, 375, 573, 583, 643, 644, 645, 647, 648, 649, 650, 652, 653, 655, 672, 819, 820, 821, 826, 830, 881, 887, 965, 1237, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255], "exit_hook": 357, "close": [357, 471, 797, 1032, 1039, 1248, 1252, 1255], "tar": [357, 689, 690, 732, 738], "funtcion": 358, "cach": [358, 375, 573, 601, 602, 1253], "resolve_reldb_path": 358, "create_reldb_path": 358, "resolve_modular_db_path": 358, "create_modular_db_path": 358, "resolve_db_path": 358, "migrat": 360, "upon": [360, 511, 549, 970, 1192, 1241, 1252], "creation": [360, 380, 833, 850, 880, 937, 946], "distributed_lock": [364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 380], "lock": [364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 380, 518, 536, 547, 685, 686], "permiss": [364, 365, 518, 520], "acquir": [364, 366, 671, 685, 1255], "fasten": [364, 375, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "interprocesslock": 364, "releas": [364, 778, 853, 859, 931, 932, 933, 934, 970, 977, 1241], "successfulli": 365, "environ": [367, 372, 375, 488, 518, 1165, 1221, 1238, 1242, 1246, 1247, 1248, 1251, 1253], "_distribut": [367, 372], "_lock": [367, 372], "_config": [367, 372], "lazi": 367, "global": [367, 369, 373, 374, 375, 376, 973, 1241, 1246, 1256], "server": [369, 371, 373, 374, 375, 380, 1146, 1237, 1242, 1253, 1255], "support": [369, 375, 380, 391, 515, 518, 810, 812, 847, 1113, 1155, 1194, 1203, 1238, 1242, 1251], "interprocesslocknowritepermiss": [369, 373, 374, 375], "redi": [369, 373, 374, 375], "kazoo": [369, 373, 374], "apach": [369, 405, 411, 461], "zookeep": [369, 375], "document": [369, 375, 1048, 1162, 1163, 1164, 1165, 1170, 1241, 1250, 1252, 1253], "http": [369, 388, 395, 405, 446, 489, 557, 562, 570, 581, 582, 583, 671, 727, 778, 891, 949, 975, 1035, 1111, 1124, 1145, 1151, 1159, 1161, 1162, 1216, 1220, 1225, 1237, 1242, 1251, 1252, 1253, 1255], "readthedoc": [369, 446], "en": [369, 446, 1035, 1252], "latest": [369, 1088, 1105, 1242], "html": [369, 446, 489, 778, 891, 1145, 1146, 1148, 1151, 1159, 1161, 1162, 1164, 1165, 1221, 1252, 1255], "stabl": [369, 446, 489, 1145, 1151, 1252], "yml": [372, 375], "writelock": 374, "isf_distributed_lock_config": 375, "messag": 375, "broker": 375, "servic": [375, 1162, 1163, 1164, 1165, 1170], "maintain": [375, 858, 1223], "synchron": [375, 723, 1256], "decreas": 375, "preced": 375, "spock": 375, "8885": 375, "localhost": [375, 380, 1253], "6379": 375, "config_path": 375, "yaml": [375, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "loader": [375, 380, 385, 394, 405, 409, 410, 411, 420, 425, 426, 431, 436, 441, 446, 451, 456, 461, 463, 468, 481, 488, 497, 502, 507, 518, 524, 536, 540, 543, 548, 1249, 1251], "yamlload": 375, "host": [375, 1253], "defualt_config": 375, "socket_timeout": 375, "get_locking_server_cli": 375, "get_locking_cli": 375, "get_locking_serv": 375, "update_config": 375, "get_lock": 375, "get_read_lock": 375, "get_write_lock": 375, "except": [377, 378, 380], "signatur": [377, 378, 414, 1253], "isfdatabaseexcept": 379, "reproduc": [380, 395, 615, 833, 987, 1162, 1163, 1164, 1165, 1170, 1248, 1256], "flexibl": [380, 1241, 1253], "scalabl": [380, 1253], "terrabyt": [380, 1253], "wide": [380, 672, 1002, 1237, 1251, 1255], "loaderdump": [380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 518, 523, 536, 543, 679, 895, 1248, 1253], "nd": 380, "reducedldamodel": [380, 411, 464, 466, 467, 468], "dask_to_parquet": [380, 399, 400, 401, 402, 403, 404, 406, 407, 411, 456, 567], "commit": [380, 549], "uncommit": [380, 1246, 1247, 1248, 1249, 1250], "dirti": [380, 1246, 1247, 1248, 1249, 1250], "session": [380, 1168, 1206, 1242, 1253, 1256], "2025": 380, "21": [380, 965, 1237, 1241, 1246, 1247, 1248, 1250, 1251, 1252], "15": [380, 577, 701, 711, 750, 753, 962, 965, 967, 1208, 1209, 1237, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255], "23": [380, 965, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253], "module_list": [380, 518], "module_vers": [380, 518], "pygment": [380, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "18": [380, 965, 967, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255], "126": [380, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "hostnam": [380, 518], "metadata_creation_tim": [380, 525, 549], "together_with_new_kei": 380, "head": [380, 710, 837, 929, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1255], "revisionid": 380, "9fd2c2a94cdc36ee806d4625e353cd289cd7ce16": 380, "null": 380, "load_cell_from_fil": [381, 918], "savedir": [381, 382, 384, 385, 386, 387, 391, 394, 396, 398, 399, 400, 401, 404, 405, 406, 407, 410, 411, 412, 413, 419, 420, 421, 422, 424, 425, 426, 427, 428, 430, 431, 432, 433, 435, 436, 437, 438, 440, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 460, 461, 464, 465, 467, 468, 469, 470, 487, 488, 493, 494, 496, 497, 498, 499, 503, 504, 506, 507, 508, 510, 511, 512, 513], "save_cell_to_fil": [384, 918], "dask_to_categorized_msgpack": [386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 411], "meta": [386, 400, 404, 405, 406, 452, 455, 508, 510, 511, 512, 513, 573, 584, 1251], "index_nam": 386, "bundel": [388, 394], "huge": [388, 394], "speedup": [388, 394], "issu": [388, 395, 685, 1252], "adress": 388, "github": [388, 395, 1162, 1216, 1220, 1242, 1255], "com": [388, 395, 557, 562, 570, 581, 582, 583, 671, 727, 949, 1111, 1124, 1162, 1216, 1220, 1225, 1242, 1252, 1255], "1884": 388, "wherther": [390, 394, 429, 431, 449, 451, 500, 502], "2023": [391, 1237], "09": 391, "pleas": [391, 674, 693, 854, 878, 880, 937, 946, 966, 974, 975, 1227, 1251], "getter": 391, "runtimeerror": [391, 684, 688, 738, 798, 827, 829, 831, 834, 899, 902, 956, 986, 1051, 1052, 1069], "_description_": 391, "represent": [392, 394, 509, 510, 518, 524, 577, 786, 1178, 1202], "dtype": [392, 394, 471, 473, 474, 475, 479, 484, 485, 488, 489, 490, 492, 509, 510, 511, 512, 513, 1246, 1251, 1252], "unicod": [392, 509], "left": [392, 509, 652, 826, 950, 1248, 1249, 1255], "unspecifi": [392, 509], "unknown": [392, 509, 781], "our": [392, 509, 1146, 1149, 1151, 1152, 1153, 1156, 1157, 1158, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254], "design": [394, 483, 1122, 1241], "lot": [394, 395, 1247, 1248, 1255], "repetit": 394, "normali": 394, "datatyp": 394, "restor": [394, 548, 736, 918, 920], "serv": [394, 954, 971, 975], "increas": [394, 1151, 1248, 1249], "traffic": 394, "suitabl": [394, 518, 523, 551], "fork": [394, 399, 451], "pypi": [394, 399, 451], "str_to_categori": 394, "category_to_str": 394, "get_writer_funct": 394, "bundle_delai": 394, "my_dask_writ": 394, "optimize_graph": [394, 395], "bunch": [394, 395], "get_numpy_dtype_as_str": [394, 510], "read_object_meta": [394, 510], "There": [395, 1041, 1255], "frustrat": 395, "weir": 395, "ram": [395, 1252, 1255], "512gb": 395, "graph": [395, 819, 833], "address": [395, 1146, 1253], "1888": 395, "dask_to_msgpack": [398, 411], "partitoin": [401, 404], "load_help": [401, 405], "delayed_df": [403, 405, 407], "schema": [404, 405], "pandas_to_parquet": [404, 411, 451, 452, 453, 454, 455, 461, 567], "n_partit": [404, 405, 406, 407], "save_object_meta": [404, 455, 510], "twice": [404, 902], "save_help": [404, 405], "org": [405, 489, 1035, 1145, 1151, 1159, 1237, 1252], "overview": [405, 1241, 1244, 1247], "check_df_suitable_for_pq": 405, "module_nam": [408, 411], "_dumper": [408, 409], "_specif": 408, "_databas": 408, "_modul": [408, 409], "_data": [408, 409, 710, 964, 965, 967, 972, 979], "module_path": 408, "dumper_modul": [409, 411, 518, 543], "_string": 409, "_by": [409, 873, 874], "mydump": 411, "load_data": [411, 426], "loader_kwarg": [411, 426], "get_dumper_string_by_dumper_modul": 411, "generic_to_specific_databases_module_nam": 411, "get_dumper_string_by_savedir": 411, "just_create_fold": [411, 412, 413, 414, 415, 416, 417, 418, 419, 679], "just_create_isf_db": [411, 421, 422, 423, 424], "numpy_to_msgpack": [411, 427, 428, 429, 430], "numpy_to_npi": [411, 432, 433, 434, 435, 441], "numpy_to_npz": [411, 436, 437, 438, 439, 440], "compress": [411, 441, 690, 732, 738, 1251, 1252, 1253], "numpy_to_zarr": [411, 442, 443, 444, 445], "zarr": [411, 442, 443, 445, 446, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "pandas_to_pickl": [411, 457, 458, 459, 460, 1248], "parent_class": [411, 462], "reduced_lda_model": [411, 464, 465, 466, 467], "shared_numpy_stor": [411, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492], "to_cloudpickl": [411, 493, 494, 495, 496, 507, 523, 547, 549, 1248], "cloudpickl": [411, 493, 497, 507, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "to_msgpack": [411, 498, 499, 500, 501], "to_pickl": [411, 503, 504, 505, 506], "join": [414, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1255, 1256], "ignor": [419, 424, 483, 487, 690, 826, 829, 1147, 1150, 1157], "constructor": [422, 1222], "No": [424, 487, 1151, 1246, 1247, 1248, 1251, 1253, 1256], "zip": [436, 1247, 1248, 1250, 1252, 1255], "localstor": 446, "rows_per_fil": [450, 451], "hit": 450, "1gb": 450, "limit": [450, 524, 540, 587, 1088, 1090, 1092, 1098, 1161, 1162, 1163, 1164, 1165, 1169, 1170, 1187, 1195, 1208, 1209, 1212, 1214, 1247, 1249, 1252, 1253, 1255], "correpsond": 456, "inherit": 463, "precis": [467, 468, 820, 821, 1203], "lda": [467, 468, 1253], "_valu": 467, "rm": [467, 468, 604, 611, 612, 613, 616, 622, 623, 633, 1252], "undergo": 468, "kept": [468, 672], "reset": [468, 510, 513, 559, 679, 682, 698, 1212], "db_list": 468, "instanc": [468, 471, 475, 481, 792, 1122, 1208, 1219], "do": [468, 531, 650, 673, 676, 970, 977, 1092, 1242, 1246, 1248, 1249, 1250, 1251, 1252, 1255], "compliant": 468, "lda_value_dicts_": 468, "sharednumpystor": [469, 487, 488, 534], "working_dir": [471, 481, 551], "reload": 471, "_suffix": 471, "_shared_memory_buff": 471, "buffer": [471, 583, 1246], "_pending_renam": [471, 478], "pend": 471, "_get_metadata_from_fnam": 471, "static": [471, 474, 604, 605, 634, 635, 643, 646, 650, 651, 652, 659, 662, 665, 666, 747, 748, 749, 778, 891, 1065, 1066, 1073, 1074, 1088, 1094, 1151, 1154, 1255], "numpystor": [471, 472, 473, 474, 475, 481], "_get_metadata_from_nam": 471, "get_expected_file_length": 471, "byte": [471, 479, 485], "_get_fname_from_metadata": 471, "_get_fnam": 471, "arr": [471, 472, 476, 481, 488, 491], "flush": 471, "append_sav": 471, "autoflush": [471, 476], "start_row": [471, 480, 485, 488, 489, 490], "end_row": [471, 480, 485, 488, 489, 490], "allow_create_shm": [471, 480], "shared_memori": 480, "memmap": [480, 489], "overwritten": [481, 1070, 1203, 1253], "reserv": [481, 1162, 1163, 1164, 1165, 1170], "doubl": 481, "underscor": 481, "throw": 481, "off": [481, 778, 785, 856, 934, 1246, 1247, 1248], "temporarili": 483, "sigint": 483, "sigterm": [483, 1248], "signal": [483, 557, 558, 826, 1061, 1062, 1255], "caution": [483, 518], "unrespons": 483, "_row": 485, "dimens": [485, 604, 605, 606, 615, 643, 651], "dimension": [485, 651, 1255], "_offset": [485, 710], "_shape": 485, "themselv": 487, "speical": 488, "slurm": 488, "job_shmtmpdir": 488, "uninterrupt": 488, "shared_array_from_numpi": 488, "shared_array_from_disk": 488, "memmap_from_disk": 488, "shared_array_from_shared_mem_nam": 488, "entir": [489, 544, 832, 948, 952, 1040, 1080, 1082, 1084, 1247, 1248, 1249, 1255], "block": [489, 490, 491, 492, 557, 1112, 1115], "sharedmemori": [490, 491, 492], "filenotfounderror": 508, "later": [510, 512, 679], "get_meta_filenam": 510, "set_object_meta": 510, "explicit": [514, 515, 516, 1151], "globstr": [514, 515, 516, 688, 1165, 1168, 1221, 1224], "read_csv": [514, 1249, 1252], "dask_wrapp": [515, 516], "nativ": 515, "mainli": 516, "retriev": [517, 554, 792, 809, 1127, 1129, 1130, 1131, 1132, 1133, 1136, 1137, 1139], "suppress_error": 518, "syntax": [518, 1241, 1246], "my_new_el": 518, "my_reloaded_el": 518, "instal": [518, 975, 1238, 1240, 1253], "conda": [518, 1242], "get_module_vers": 518, "ipython": [518, 1153, 1164, 1165, 1168, 1206, 1221, 1224, 1242, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "get_histori": 518, "metadataaccessor": [518, 554], "_unique_id": [518, 526, 542, 546], "_registered_to_path": [518, 526, 542, 546], "_registereddump": [518, 526, 542, 546], "_suppress_error": 518, "_db_state_fn": 518, "state": [518, 542, 546, 690, 747, 749, 1127, 1252, 1256], "_forbidden_kei": 518, "sqlitedict": [518, 586], "db_state": [518, 542, 546], "_basedir": [518, 1251, 1253], "pathlib": [518, 519, 521, 522, 531, 532, 533, 538, 545, 563, 566, 574, 579, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "_infer_missing_metadata": 518, "miss": [518, 525, 735, 1183, 1184, 1191, 1195], "estim": [518, 525, 549, 710, 1010, 1252, 1255], "_register_this_databas": 518, "_set_unique_id": 518, "_is_initi": 518, "_initi": [518, 529], "_convert_key_to_path": 518, "_check_key_format": 518, "key_str_tupl": [518, 519], "_detect_dumper_string_of_existing_kei": 518, "_find_dump": 518, "_write_metadata": 518, "dir_to_data": [518, 531, 573, 574], "_check_writing_privileg": 518, "check_if_key_exist": 518, "get_id": 518, "register_dump": 518, "save_db_st": 518, "read_db_stat": 518, "get_mkdtemp": 518, "temporari": [518, 538, 573, 575, 1115], "create_managed_fold": [518, 1247, 1248, 1249, 1250, 1251, 1253], "create_shared_numpy_stor": 518, "create_sub_db": [518, 1246, 1247, 1248, 1249, 1253], "old_kei": [518, 545], "new_kei": [518, 545], "maybe_calcul": 518, "_subkei": 518, "max_depth": [518, 524, 540, 561, 573], "max_lin": [518, 524, 540, 561, 573], "all_fil": [518, 524, 540, 561, 573], "max_lines_per_kei": [518, 524, 540, 561, 573, 1248], "color": [518, 524, 540, 559, 561, 563, 564, 573, 650, 656, 947, 948, 949, 957, 1092, 1098, 1127, 1131, 1135, 1142, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1159, 1160, 1183, 1184, 1191, 1195, 1203, 1204, 1205, 1208, 1209, 1211, 1212, 1213, 1214, 1224, 1225, 1230, 1247, 1248, 1249, 1250, 1251, 1253, 1255], "_get_str": 518, "line": [519, 524, 540, 561, 569, 573, 790, 1032, 1033, 1035, 1092, 1098, 1127, 1161, 1167, 1168, 1170, 1171, 1205, 1206, 1207, 1208, 1209, 1213, 1214, 1237, 1246, 1247, 1252, 1255], "charact": 519, "numer": [519, 797, 1088, 1252], "latin": 519, "alphabet": 519, "savabl": 523, "never": [524, 1241], "deep": [524, 540, 1246], "filestructur": [524, 540], "timestamp": 525, "post_hoc": [525, 549], "invok": [531, 786, 798, 893, 990, 994, 1017], "destruct": 531, "del": [533, 1247, 1248, 1251], "umpi": 534, "as_par": 535, "my_sub_databas": 535, "some_kei": 535, "some_valu": 535, "sub_db": [535, 547], "todo": [535, 1256], "overwrit": [535, 547, 567, 1153, 1156, 1157], "thread": [536, 547, 566, 1248, 1249, 1255], "safe": [536, 547], "grant": [536, 547], "knok_knok": 541, "setitem": 543, "strictli": 543, "background": [544, 566, 573, 1127, 1146, 1148, 1237], "de": [544, 607, 1161, 1237], "destructor": 544, "nor": [544, 1123], "equival": [544, 973, 1172], "__del__": 544, "__delete__": 544, "garbag": [544, 673], "goe": 544, "scope": 544, "advantag": [547, 1251], "__setitem__": 547, "relpath": 548, "pointer": [548, 554, 786, 989, 1251], "elsewher": [548, 554], "mkdtemp": [548, 573], "recov": 548, "datafold": 548, "request": [548, 622, 973, 1069, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "somekei": [548, 549], "sql": 548, "methdod": 548, "acc": 549, "somevalu": 549, "git": [549, 1242], "accident": 549, "try": [549, 966, 1131, 1159, 1252], "_update_metadata_if_necessari": 549, "return_": [552, 554], "loaderwrapp": 554, "make_all_str": 554, "get_dumper_from_fold": 554, "get_isfdb_by_unique_id": 554, "keyboardinterrupt": [557, 558, 573, 1255], "subthread": [557, 573], "while": [557, 587, 597, 641, 690, 736, 797, 898, 1048, 1194, 1241, 1246, 1248, 1255], "finish": [557, 586, 681, 685, 686, 690, 707, 1255], "sleep": [557, 1248], "press": [557, 1237], "ctrl": 557, "am": [557, 837, 895, 901, 976, 1023, 1255], "stackoverflow": [557, 562, 570, 581, 582, 583, 671, 727, 949, 1124, 1225], "question": [557, 562, 671, 727, 949, 1111, 1124, 1225, 1252], "842557": 557, "interrupt": [557, 679, 1162, 1163, 1164, 1165, 1170, 1249], "handler": 557, "sig": [557, 558], "frame": [557, 558, 871, 952, 1122, 1151, 1153, 1156, 1157, 1158, 1163, 1165, 1221, 1226, 1227, 1247, 1251, 1255], "bash": [559, 573], "header": [559, 1249], "okblu": 559, "okcyan": 559, "cyan": [559, 1253], "okgreen": 559, "green": [559, 563, 1253], "endc": 559, "bold": 559, "underlin": 559, "decor": [560, 573, 581, 732, 736, 1119, 1120, 1122, 1203, 1204, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "root_dir_path": [561, 573], "indent": [561, 573], "datanas": 561, "root": [561, 766], "shown": [561, 1032, 1098, 1127, 1152, 1154, 1156, 1241, 1247, 1252], "seq": [562, 573, 727, 732], "num": [562, 573, 727, 732], "approxim": [562, 573, 727, 732, 768, 789, 790], "2130016": [562, 727], "roughli": [562, 727, 1254], "black": [563, 1092, 1098, 1183, 1184, 1191, 1194, 1247, 1253, 1255], "bcolor": [564, 573], "escap": 564, "sequenc": [564, 727, 732, 1213], "colroiz": 564, "text": [564, 831, 1248, 1252], "prefer": [567, 678, 762, 852, 962, 1013, 1014, 1015], "overhead": 567, "dict_1": [568, 573], "dict_2": [568, 573], "dict_1_nam": [568, 573], "d1": [568, 972, 979, 1249, 1250, 1251, 1252], "dict_2_nam": [568, 573], "stringio": [569, 573, 583], "tabl": [569, 700, 701, 710, 711, 714, 715, 721, 768, 831, 1012, 1055, 1236, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "conatin": 569, "2158532": 570, "5082048": [570, 581, 582, 583], "endswith": [571, 573, 1247, 1249, 1250], "startswith": [572, 573], "silence_stdout": [573, 732, 1250, 1253], "silenc": [573, 581, 732, 736, 863, 864, 865, 866, 867, 1253], "stdout": [573, 581, 732], "delayedkeyboardinterrupt": 573, "chunkit": [573, 732], "convertible_to_int": 573, "split_file_to_buff": 573, "split_str": [573, 583], "wherev": [573, 583], "first_line_to_kei": 573, "pandas_to_arrai": 573, "x_component_fun": [573, 577], "y_component_fun": [573, 577], "value_fun": [573, 577], "linearli": [573, 577, 700, 714, 719], "pooled_std": 573, "skit": 573, "func": [573, 582, 729, 732, 739, 1251, 1255], "suppli": [573, 582, 785, 838], "list_": [573, 585, 1166, 1168], "fancy_dict_compar": 573, "wait_until_key_remov": 573, "wait": [573, 586, 876, 1255], "get_file_or_folder_that_startswith": 573, "get_file_or_folder_that_endswith": 573, "synchronous_ddf_concat": 573, "ddf_path": [573, 584], "myrepartit": 573, "task": [573, 576, 679, 1251, 1253], "df_colnames_to_str": 573, "colorize_kei": 573, "colorize_str": 573, "calc_recursive_filetre": 573, "rename_for_delet": 573, "delete_in_background": 573, "is_db": 573, "tempdir": 575, "pat": 575, "tmpdir": 575, "y": [577, 650, 652, 653, 655, 657, 659, 662, 666, 744, 831, 899, 1098, 1111, 1112, 1161, 1163, 1169, 1170, 1213, 1216, 1219, 1241, 1247, 1248, 1249, 1251, 1252, 1255], "bla": 577, "_1": [577, 710, 718, 898, 955, 958, 962, 970, 972, 979, 1021], "_y": 577, "_2": [577, 710, 718, 955, 958, 970, 972, 979, 1021], "_3": 577, "_arrai": 577, "unbias": 578, "2829036": 581, "23430335": 582, "33346758": 583, "psp_with_cell_modif": [587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 603], "neuron_param": [587, 601, 602, 696, 719, 723, 724, 766], "confil": [587, 696, 712, 713, 719, 728, 732], "target_vm": [587, 589, 591, 594], "70": [587, 766, 951, 1223, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1255], "200": [587, 830, 865, 962, 1223, 1241, 1248, 1256], "optimize_for_timepoint": [587, 589, 591], "150": [587, 696, 701, 711, 962, 1241, 1252, 1256], "tend": [587, 696, 716, 717, 718, 719, 723, 724, 741, 754, 755, 1163, 1168, 1247, 1251], "bound": [587, 786, 787, 798, 906, 907, 908, 909, 910, 911, 912, 937, 940, 941, 980, 983, 990, 991, 994, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1034, 1038, 1040, 1042, 1045, 1046, 1247], "ipsp": [587, 597, 751], "clamp": [587, 597, 922, 924, 927], "modif": [587, 597, 603, 677, 678, 809, 810, 1162, 1163, 1164, 1165, 1170, 1246], "coincid": [587, 597], "stabil": [587, 696, 797], "holding_curr": 587, "hold": [587, 594, 838, 839, 956, 1052, 1123, 1125], "optimize_holding_curr": 587, "_objective_fun": 587, "_get_current_dependent_vt": 587, "plot_current_injection_voltage_trac": 587, "get_neuron_param_with_current_inject": 587, "get_psp_simul": 587, "gexrang": [587, 592, 593, 696, 698, 705, 707], "exc_inh": [587, 592, 696, 698], "psp": [587, 590, 592, 593, 596, 597, 603, 710, 711, 719, 723, 724, 750, 754], "get_psp_simulator_exc_and_inh_combin": 587, "squar": [589, 1254, 1255], "shortcut": [590, 1242, 1253], "pspexc": [596, 597], "pspinh": [596, 597], "ensur": [597, 685, 686, 833, 987, 1256], "trigger": [597, 778], "investig": [597, 1014, 1016], "integr": [597, 652, 655, 838, 854, 855, 1238, 1247, 1249], "subthreshold": 597, "psp_with_current_inject": 597, "combine_psp_object": 597, "generate_synapse_activ": [598, 603], "cellparamnam": [598, 599, 600, 687, 688, 689, 690, 878, 880], "evokedupparamnam": [598, 599, 600, 687, 688, 689, 690], "dirprefix": [598, 599, 600, 674, 675, 687, 688, 689, 690, 1251, 1253], "nsweep": [598, 599, 600, 688, 689, 690, 1251, 1253], "345": [598, 599, 675, 688, 690, 694, 695, 1252], "compute_synapse_distances_tim": [598, 764, 962], "write_presynaptic_spike_tim": [598, 948], "nproc": [599, 600, 687, 688, 689, 690, 1251, 1253], "40": [599, 688, 690, 752, 965, 973, 1226, 1241, 1246, 1248, 1249, 1250, 1251, 1253, 1255, 1256], "simnam": [599, 687, 688], "worker": [599, 631, 632, 633, 637, 639, 640, 1242, 1251, 1252, 1253], "seed_manag": [599, 603, 691], "sole": [600, 672], "run_existing_synapse_activ": [600, 603], "morphoplog": 600, "backlink": [600, 852], "morpholog": [600, 778, 800, 820, 821, 893, 988, 996, 1136, 1139, 1189, 1237, 1246, 1250, 1254], "But": 600, "ref": [600, 1253], "hoc_file_format": 600, "becaus": [600, 785, 826, 1247, 1252], "fact": [600, 758, 759, 1035, 1254], "despit": [600, 1237], "network_param": [601, 602, 696, 697, 719, 723, 724, 817, 818, 1250, 1251], "realiz": [601, 602, 603, 675, 690, 775, 837, 839, 846, 851, 852, 856, 878, 879, 880, 897, 900, 937, 942, 943, 945, 955, 974, 975, 996, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1010, 1013, 1014, 1015, 1016, 1032, 1041, 1042, 1048, 1049, 1050, 1053, 1054, 1055, 1241, 1249, 1250], "parameters_to_cel": [601, 603, 693, 1241], "rebuild": [601, 603, 674, 675, 689, 693], "framework": 603, "modular_reduced_model_infer": [603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 1252], "get_cell_with_network": 603, "recreat": [603, 677, 678, 687, 688, 693, 694, 695, 839, 844, 854, 855, 856, 974], "resimul": [603, 677, 678, 687, 688, 689, 693, 694, 695], "robust_dask_delayed_execut": [603, 679, 680, 681, 682, 683, 684, 685], "ongo": [603, 687, 872, 874, 875, 964, 965, 966, 974, 977, 1078, 1079, 1112], "l2": [603, 687, 701, 711, 722, 1250, 1251, 1253], "sim_trial_to_cell_object": [603, 674, 694, 695], "synaptic_strength_fit": [603, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726], "strength": [603, 696, 698, 700, 703, 706, 707, 708, 714, 719, 725, 726], "data_extractor": [604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 624, 626, 628, 1252], "matrix": [604, 614], "spatiotempor": [604, 606, 607, 614, 643, 650, 672], "inputpattern": [604, 607], "extractor": [604, 611, 612, 614, 622, 624, 626, 628], "_get_spatial_bin_level": 604, "relect": [604, 605], "get_spatial_bins": 604, "get_group": 604, "get_sorted_keys_by_group": 604, "_get_spatiotemporal_input": 604, "pattern": [604, 607, 615, 643, 650, 672, 678, 689, 690, 839, 840, 857, 860, 864, 866, 974, 1227, 1241], "sub_databas": 605, "spatiotemporal_synapse_activation__binned_somadist__100to150__group1": 605, "group1": 607, "group2": 607, "n_trial": [607, 624, 650, 652, 655, 1252], "n_time": [607, 1138], "n_space": 607, "cover": [610, 1241, 1250, 1251, 1252], "synapts": 611, "atttribut": 611, "selected_indic": [611, 624], "reducedmodel": [614, 1252], "strategi": [614, 615, 619, 624, 626, 627, 631, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 1252], "cosin": [614, 615, 643, 644, 646, 650, 672, 1252], "dataextractor_spatiotemporalsynapseactiv": [614, 1252], "snaps": 615, "mathbf": [615, 633, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 655, 657, 659, 661, 1252], "constitut": 615, "good": [615, 1162, 1163, 1164, 1165, 1170, 1246, 1248], "basi": [615, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 661, 672, 942, 1001], "strategy_spatiotemporalraisedcosin": [615, 672, 1252], "sum": [615, 643, 647, 650, 657, 788, 1172, 1173, 1246, 1247, 1252], "multipli": [615, 650, 652, 655, 657, 658, 672, 770, 797, 975, 1040, 1252], "predict": [615, 672, 1238], "solver": [615, 616, 619, 624, 625, 634, 635, 636, 637, 638, 639, 640, 641, 659, 660, 664, 672, 696, 723, 724, 1252], "cost": [615, 620, 631, 633, 637, 639, 640, 642, 650, 652, 659, 672], "score": [616, 620, 630, 659, 660, 662, 665, 667, 1252], "optimizer_result": 616, "optimizer_results_kei": 616, "scores_kei": 616, "add_random_split": [616, 1252], "percentage_train": [616, 617, 618, 1252], "randomli": [616, 618, 975, 1047], "add_isi_dependent_random_split": [616, 1252], "min_isi": [616, 617, 1252], "get_split": 616, "add_result": 616, "compute_scor": [616, 630], "percentag": [617, 618], "_solver": [619, 631], "_objective_funct": [620, 634, 635], "subtest1": [621, 1252], "subtest2": [621, 1252], "mapping_dict": 622, "redirect": [622, 736], "dv": [622, 755], "kernel": [624, 643, 650, 657, 672, 1252], "domain": [624, 643, 644, 646, 650, 651, 655], "raisedcosinebasi": [624, 650, 652, 655, 657, 658, 672, 1252], "_dataextractor": [624, 626], "view": [624, 627, 947, 1159, 1252, 1255], "dataview": [624, 627, 633], "datasplitevalu": [624, 633, 659, 668, 1252], "results_remot": 624, "flag": [624, 778, 893, 937, 948, 953, 959], "add_data_extractor": [624, 1252], "add_strategi": [624, 1252], "get_n_trial": 624, "n_worker": [624, 631], "strategy_select": [624, 631], "_gather_result": 624, "get_result": [624, 1067, 1068, 1072, 1075, 1077, 1079, 1081, 1083, 1085, 1087, 1252], "solv": 631, "get_scor": [631, 659, 662, 667], "n_machin": 632, "dataextractor": 633, "_strategi": [633, 637, 641, 642], "minim": [633, 634, 635, 662, 1088, 1104, 1252], "get_n_workers_per_ip": 633, "powel": [634, 642, 1237], "scipi": [634, 635, 658, 1111, 1127, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "cobyla": [634, 635, 1252], "objecet": 634, "_setup_optim": [634, 637, 641], "_optim": [634, 710], "maxit": [634, 635], "x0": [634, 635], "optimize_all_split": 637, "optimize_one_split": [637, 639], "overload": [638, 661, 663, 668], "solver_cobyla": [638, 642, 1252], "submit": [639, 640], "unord": 640, "differenti": 640, "scheme": 642, "phi": [643, 646, 1252], "80": [643, 644, 646, 752, 1035, 1161, 1163, 1169, 1170, 1230, 1241, 1252], "reversed_": [643, 1252], "f_i": [643, 644, 646, 647, 1252], "co": [643, 1241, 1252, 1255], "cdot": [643, 647, 652, 655, 780, 830, 831, 1252], "log": [643, 826, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253], "phi_i": [643, 644, 1252], "steep": [643, 646], "phase": [643, 646, 1032, 1041], "superimpos": [643, 672, 1255], "learnabl": [643, 647, 649, 650, 651, 652, 653, 657, 659, 661, 1252], "x_i": [643, 647, 1252], "w": [643, 647, 649, 655, 1127, 1252], "sum_": [643, 647, 1247], "And": 643, "wi": 643, "int_": [643, 655], "notat": 643, "arang": [643, 752, 1252], "11": [643, 820, 904, 965, 967, 1237, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255], "revers": [643, 1246, 1250, 1252, 1255], "cupi": [643, 646, 669, 670, 672], "get_superposit": 643, "plot_kwarg": [643, 648, 649, 1211, 1213, 1252], "visualize_w": 643, "superposit": [643, 647, 649, 1241], "get_raised_cosin": 643, "plt": [648, 649, 706, 708, 1182, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1255, 1256], "axi": [648, 649, 710, 766, 1098, 1123, 1125, 1126, 1127, 1128, 1137, 1146, 1151, 1152, 1156, 1159, 1161, 1163, 1169, 1170, 1171, 1187, 1195, 1207, 1208, 1209, 1212, 1214, 1248, 1252], "plot": [648, 649, 650, 658, 696, 706, 708, 922, 926, 1098, 1122, 1123, 1124, 1146, 1147, 1148, 1150, 1151, 1153, 1156, 1157, 1159, 1160, 1163, 1167, 1168, 1171, 1172, 1175, 1176, 1177, 1178, 1179, 1182, 1184, 1187, 1191, 1194, 1195, 1196, 1197, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1216, 1224, 1228, 1229, 1230, 1246, 1247, 1248, 1252, 1255, 1256], "raisedcosinebasis_spati": [650, 1252], "raisedcosinebasis_tempor": [650, 1252], "spatiotemporalsa": [650, 1252], "n_spatial_bin": 650, "n_temporal_bin": 650, "base_vectors_arrays_dict": [650, 652], "n_": 650, "confus": [650, 837, 974, 1254], "activaiton": 650, "len_z": [650, 651, 1252], "len_t": [650, 651, 1252], "len_trial": 650, "convert_x": [650, 652, 657, 1252], "_get_scor": [650, 652, 659, 665], "_setup": [650, 659, 668], "compute_basi": [650, 657], "_get_x0": [650, 659], "guess": [650, 653, 659, 661], "_convert_x_stat": [650, 1252], "_get_score_stat": [650, 660], "net": [650, 652, 655, 1172, 1173, 1175, 1176, 1177, 1252], "wni": [650, 652, 655], "flipkei": [650, 657], "get_color_by_group": 650, "optimizer_output": [650, 658], "only_success": [650, 658], "product": [652, 655], "commut": [652, 655], "int_z": 655, "dim": 655, "red": [656, 1092, 1098, 1195, 1252, 1253], "grei": [656, 1032, 1142, 1149, 1150, 1152, 1153, 1154, 1156, 1157, 1159, 1179, 1250, 1252, 1253], "optimizeresult": 658, "only_succes": 658, "noth": [658, 813, 1128, 1129, 1130, 1133, 1143, 1144, 1145, 1185, 1193, 1194, 1248], "highest": [659, 1074, 1157], "auroc": [659, 662], "repr": 659, "refractori": 659, "incorpor": 659, "set_split": 659, "get_score_stat": 659, "cupy_split": [659, 665], "get_y_stat": 659, "numpy_split": [659, 666], "_objective_function_stat": 659, "get_i": [659, 662, 667], "add_solv": [659, 1252], "consequ": 667, "weak": [669, 671, 672, 673], "gpu": 669, "make_weakref": [669, 672], "storesal": 669, "_weakref_array_list": 669, "weakref": [669, 671], "interact": [669, 1146, 1147, 1148, 1150, 1151, 1160, 1237, 1242, 1246, 1255], "suffici": [669, 1249], "weakrefobj": [671, 672], "privat": [671, 893, 1017], "19621036": 671, "regular": [671, 755, 906, 1024, 1131], "proxi": 671, "wearkef": 671, "underli": [671, 1237, 1242], "wear": 671, "rightarrow": 672, "purposefulli": 672, "derefer": 672, "clear_memori": 672, "convert_to_numpi": 672, "vram": 673, "clear": 673, "manual": [673, 786, 810, 812, 814, 1252], "collector": 673, "practic": 673, "direct": [673, 696, 995, 1162, 1163, 1164, 1165, 1170, 1216, 1237, 1255], "destroi": [673, 785, 856], "neuronparam": [674, 675], "networkparam": [674, 675], "synfil": [674, 675], "range_var": [674, 675, 693, 694, 695, 786, 797, 1163, 1167, 1168, 1247], "evokednw": [674, 675, 818, 864, 865, 866, 867], "opaqy": [676, 677], "network_modify_funct": [677, 837, 841, 862, 864, 865, 866, 867], "opaqu": 677, "neuron_param_modify_funct": [677, 678, 693, 694, 695], "network_param_modify_funct": [677, 678, 693, 694, 695, 837, 868, 869, 870, 871, 872, 873, 874, 876, 877], "synapse_activation_modify_funct": [677, 678, 693, 694, 695], "additional_network_param": [677, 678, 693, 694, 695], "child_process": [677, 678, 689, 690], "unmodifi": 678, "init_simrun_gener": [678, 694], "offer": 679, "rune": 679, "cluster": [679, 964, 965, 966, 967, 968, 977, 1251, 1252, 1253], "remain": [679, 1035, 1255], "turn": [679, 712, 713, 778, 785, 856, 934, 995, 1000, 1241, 1255], "get_statu": 679, "statu": [679, 681, 682, 685, 686, 922, 930, 932, 935, 943, 1251, 1252, 1253], "add_delayed_to_db": 679, "reset_statu": 679, "only_start": [679, 682], "not_start": [679, 681, 682, 686], "run_db": [679, 685], "error_start": [679, 683], "k": [684, 828, 887, 906, 909, 910, 1024, 1027, 1028, 1214, 1230, 1237, 1247, 1252, 1255, 1256], "behaviour": 684, "assert": [684, 1246, 1248, 1252], "key_first_item": 685, "wile": 685, "mitig": 685, "concurr": 685, "_start": [685, 964, 965, 967, 972, 979], "robustdaskdelayedexecut": [685, 686], "synapseactiv": [687, 688], "post_hook": [687, 688], "auto_organize_results_fold": [687, 688], "synapseactivationglob": 688, "factor": [688, 810, 812, 813, 814, 870, 872, 875, 876, 1246, 1255], "_modifi": [688, 690, 809, 836], "rerun": [688, 696, 707, 1241], "init_neuron_run": [690, 837, 1256], "create_saved_network2": [690, 818, 839, 840, 848, 850, 854, 858, 860, 878], "_run": 690, "dirnam": [690, 1000, 1011], "yyyymmdd": 690, "hhmm": 690, "_uid": 690, "nswep": 690, "created_saved_network2": 690, "vivo": [690, 974, 977, 1250, 1251, 1252, 1253], "tarbal": 690, "captur": [690, 971, 974, 1041, 1237, 1248, 1250], "anim": [690, 971, 974, 1151, 1152, 1163, 1164, 1165, 1168, 1170, 1206, 1220, 1221, 1224, 1248, 1253, 1255], "anatom": [690, 728, 837, 839, 844, 846, 851, 852, 853, 854, 855, 860, 878, 880, 895, 897, 905, 943, 948, 955, 972, 974, 975, 976, 979, 999, 1000, 1001, 1004, 1005, 1006, 1008, 1012, 1013, 1014, 1015, 1016, 1019, 1020, 1050, 1053, 1055, 1241, 1250, 1253], "stochast": 690, "compute_spike_train_tim": [690, 778, 849], "recursion_depth": [691, 692], "get_se": 692, "simtrial_to_cell_object": 693, "trial_to_cell_object": [693, 694], "cellnam": [693, 695, 975, 976, 1000, 1011, 1249], "networknam": [693, 695], "synapse_activation_fil": [693, 695, 817, 818], "skip": [694, 695, 1088, 1095, 1249, 1252], "readi": [694, 695, 1248, 1250], "ampa_compon": 696, "nmda_compon": 696, "110": [696, 904, 967, 1241, 1249, 1251], "amlitud": [696, 719], "deflect": [696, 704, 708, 709, 711, 716, 717, 719, 748, 750, 964, 970, 973, 1250, 1253], "enough": [696, 826, 1246, 1249, 1252], "network_params_by_celltyp": [696, 698, 705, 707], "_setup_comput": 696, "_delai": [696, 698, 707], "get_voltage_trac": [696, 711, 718, 722, 1057, 1061, 1088], "get_voltage_and_tim": [696, 719], "merge_celltype_kwarg": [696, 700, 701, 704, 706, 708, 715, 719], "thereof": [696, 704, 709, 717, 719], "get_summary_statist": [696, 719], "epsp_summary_statistics_kwarg": [696, 701, 715, 719], "summari": [696, 701, 711, 715, 719, 721, 975, 1000, 1003, 1007, 1012, 1049, 1053, 1054, 1055], "get_optimal_g": [696, 719], "measured_data": [696, 700, 714, 719], "visualize_psp": 696, "fig": [696, 706, 708, 1124, 1125, 1154, 1159, 1182, 1208, 1209, 1228, 1230, 1246, 1247, 1248, 1249, 1250, 1252, 1255, 1256], "_get_cell_and_nw_map": 696, "get_synapse_coordin": 696, "cell_indic": [696, 702], "get_merged_synapse_coordin": 696, "mergestr": [696, 699], "get_synapse_coordinates_with_psp_amplitud": 696, "select_synapses_per_cel": [696, 703], "plot_vt": [696, 1228], "opac": [696, 706, 1255], "_kei": 698, "dynamic_baselin": [700, 701, 704, 708, 714, 715, 718], "relationship": [700, 714, 719], "median": [700, 710, 714, 719, 721, 749, 1082], "referenc": [700, 714], "epsp_mean_measur": 700, "epsp_median_measur": 700, "epsp_max_measur": 700, "constant_baselin": [700, 701, 704, 708], "merge_celltyp": [700, 701, 703, 704, 706, 708, 715, 719], "calculate_optimal_g": [700, 714, 719], "substract": [701, 704, 718], "110m": [701, 704, 718], "epsp_summary_statist": [701, 715, 719, 721], "threashold": [701, 711, 714, 719, 1088], "tpspstart": [701, 711, 719], "epspmean": [701, 711], "epspstd": [701, 711], "epspm": [701, 711], "epspmin": [701, 711], "epspmax": [701, 711], "tmean": [701, 711], "tstd": [701, 711], "tmed": [701, 711], "gampa": [701, 711, 719, 721, 723, 724], "gnmda": [701, 711, 719, 723, 724], "288331": [701, 711], "141456": [701, 711], "262698": [701, 711], "100779": [701, 711], "440870": [701, 711], "509268": [701, 711], "305882": [701, 711], "050": [701, 711, 1241], "538904": [701, 711], "273115": [701, 711], "500306": [701, 711], "129087": [701, 711], "739804": [701, 711], "696267": [701, 711], "420884": [701, 711], "773226": [701, 711], "395746": [701, 711], "707955": [701, 711], "181199": [701, 711], "927223": [701, 711], "741435": [701, 711], "441578": [701, 711], "175": [701, 711], "994781": [701, 711], "513567": [701, 711], "891020": [701, 711], "108587": [701, 711], "031582": [701, 711], "881431": [701, 711], "539182": [701, 711], "350": [701, 711, 1247], "invert": 704, "extremum": [704, 709, 718, 719], "defaultdict": [704, 705, 711, 718, 722, 1252], "celltype_1": 705, "g1_1": 705, "g2_1": 705, "t_baselin": [705, 717, 719], "v_baselin": [705, 717, 719], "t_vec_1": 705, "v_soma_synapse_1": 705, "v_soma_synapse_2": 705, "g2_2": 705, "g1_2": 705, "celltype_2": 705, "g_1": 705, "ampa": [705, 723, 724, 725, 871, 1241, 1250], "g_2": 705, "nmda": [705, 723, 724, 725, 871, 1241, 1250], "gaba": [705, 713, 723, 724], "matplotlib": [706, 708, 949, 1123, 1124, 1125, 1126, 1127, 1145, 1151, 1154, 1159, 1160, 1161, 1175, 1176, 1179, 1181, 1183, 1184, 1187, 1188, 1191, 1195, 1196, 1197, 1199, 1203, 1204, 1206, 1208, 1209, 1210, 1212, 1213, 1214, 1216, 1222, 1224, 1225, 1230, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256], "forc": 707, "vtrace": [709, 719, 750, 752, 754, 948, 951], "ttrace": [709, 719], "inplac": [710, 1252], "linear_fit_pdf": [710, 719], "_summari": [710, 711], "_statist": [710, 711], "_baselin": [710, 711, 714, 715, 718, 724], "_fit": 710, "_pdf": 710, "_slope": 710, "med": 710, "_std": 710, "_mean": [710, 714], "_measur": [710, 714], "_med": 710, "_max": [710, 714, 1105], "_g": 710, "85": [710, 1241, 1246, 1251, 1252, 1256], "vt": [711, 718, 719, 722, 1228, 1230], "_and": [711, 873, 874], "glutam": [712, 871, 875, 970, 1241], "bind": [712, 713], "generate_inh_network_param_from_network_embed": [712, 719], "generate_exc_network_param_from_network_embed": 713, "_median": 714, "subtract": [717, 1252], "hether": 718, "mimimum": 718, "g1": 718, "g2": 718, "_v": 718, "set_ex_synapse_weight": 719, "set_inh_synapse_weight": 719, "run_ex_synaps": 719, "cell_nw_gener": [719, 723], "presyncellid": [719, 723], "ggaba": [719, 723, 724], "return_cel": [719, 723], "synapseid": [719, 723], "generate_ex_network_param_from_network_embed": 719, "get_tmax_vmax_baselin": 719, "analyze_voltage_trac": 719, "get_tmax_vmax": 719, "detection_str": [719, 722], "celltype_must_be_in": [719, 722], "linear_fit": 719, "gampanmda": [719, 720], "slope": [720, 755, 831, 1246, 1248], "l34": [722, 1249, 1250, 1251, 1253], "l4": 722, "l5st": [722, 1250, 1251, 1253], "l6cc": [722, 868, 872, 873, 874, 877, 972, 979, 1250, 1251, 1253], "l6ct": [722, 973, 1250, 1251, 1253], "vpm_c2": [722, 1250, 1251], "votlag": 724, "bbaselin": 724, "_vec": 724, "alongisd": 728, "cellid": [728, 948, 953, 959, 1049, 1051, 1088, 1093], "synid": 728, "_of": 728, "3d": [730, 732, 786, 787, 788, 790, 798, 837, 906, 907, 908, 910, 911, 913, 932, 948, 956, 974, 975, 990, 993, 994, 995, 999, 1024, 1025, 1026, 1028, 1029, 1031, 1032, 1033, 1040, 1127, 1146, 1147, 1151, 1154, 1159, 1160, 1216, 1219, 1224, 1233, 1235, 1241, 1249, 1255], "landmarkascii": [730, 731, 732, 743, 754, 879, 899, 956, 1241, 1246, 1255, 1256], "get_fraction_of_landmarkascii_dir": [730, 732, 1251], "get_fraction_of_landmarkascii": [731, 732], "subdivid": [732, 1055], "get_cellnumbers_from_confil": 732, "split_network_param_in_one_elem_dict": 732, "get_default_argu": 732, "set_default_arguments_if_not_set": 732, "load_param_file_if_path_is_provid": 732, "pathorparam": [732, 733], "tar_fold": 732, "source_dir": [732, 738], "delete_fold": [732, 738], "select_cells_that_spike_in_interv": 732, "set_index": [732, 734, 1233, 1234, 1248, 1251], "synapse_id": [734, 1234, 1251], "synapse_typ": [734, 1251, 1253], "opverwritten": 735, "devnul": 736, "command": [738, 832, 891, 1227, 1242, 1253], "membrane_potential_analysi": [740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757], "psth": [740, 741, 754, 847, 948, 950, 964, 965, 966, 970, 971, 973, 974, 977, 1206, 1241, 1250, 1253], "depolaris": 740, "intracellular": 740, "synanalysi": [740, 758, 759, 760, 761, 762, 763, 765, 896, 903, 1241], "spiketimevector": [741, 754], "tbegin": [741, 754, 755], "align": [741, 754, 1127, 1128, 1137, 1146, 1151, 1249, 1251], "secid": [742, 766, 767, 932, 980, 981, 995, 1172], "segid": [742, 1172], "dataclass": [742, 754, 766, 980, 985, 995, 996, 1123, 1125, 1189, 1253], "recordingsitemanag": [742, 754], "vrecord": 742, "landmarkfilenam": [743, 744, 895, 899], "amira": [743, 744, 745, 754, 819, 833, 879, 895, 899, 901, 947, 948, 952, 954, 956, 985, 987, 996, 999, 1019, 1023, 1049, 1052, 1056, 1231, 1232, 1233, 1241, 1255], "set_up_recording_sit": 743, "update_record": 743, "_read_landmark_fil": 743, "obtain": [747, 1040], "etc": [747, 1003, 1159, 1241, 1246], "exhaust": 747, "vm_steady_st": 747, "dtstim": [747, 749, 754, 756, 757], "steadi": [747, 749, 1252, 1256], "analyze_single_spik": 747, "fwhm": [747, 748], "intens": 749, "t_delai": [750, 754], "tsyn": [751, 754], "isepsp": [751, 754], "t_width_baselin": [751, 754], "upsp": [751, 754], "unitari": 751, "_timepoint": 752, "vstd": [753, 754], "window_start_tim": [753, 754], "spikeinit": 754, "vm_mean": 754, "vvec": [754, 756, 757], "vm_std": 754, "compute_mean_psp_amplitud": 754, "compute_vm_std_window": 754, "compute_vm_histogram": 754, "compute_upsp_amplitud": 754, "psth_from_spike_tim": 754, "consider_gap_to_soma": [758, 759, 760, 764], "compute_syn_dist": [758, 764], "touch": [758, 759, 970, 971, 973, 974, 1250, 1251], "attach": [759, 760, 761, 930, 932, 952], "syntyp": [760, 761, 762, 764, 937, 944, 948, 962], "xy": [761, 764], "plane": 761, "seen": [761, 1241, 1247, 1248, 1252, 1253, 1254], "photon": 761, "spine": [761, 819, 820, 821, 829, 832, 833, 837, 929], "imag": [761, 1151, 1152, 1153, 1156, 1157, 1158, 1159, 1161, 1162, 1163, 1165, 1170, 1221, 1224, 1226, 1227, 1241, 1248], "proejct": 761, "pt": [762, 786, 798, 903, 905, 930, 932, 937, 939, 941, 962, 963, 990, 994, 995, 1042, 1046, 1237, 1241, 1249], "ful": [762, 962], "syaps": [762, 962], "x1": [763, 764, 766, 768], "x2": [763, 764, 766, 768], "euclidean": [763, 764], "synapse_activation_tim": 764, "cntvec": [764, 765], "compute_syn_distances_2dproject": 764, "get_dist": 764, "compute_distance_to_soma": 764, "h": [765, 766, 778, 794, 795, 796, 838, 914, 922, 930, 1237, 1246, 1255, 1256], "cummul": 765, "cellpars": [766, 799, 835, 898, 922, 996, 1022], "hoc_path": [766, 819], "sectionlist": 766, "subtre": 766, "apicaltuft": 766, "changesynparamdict": 766, "section_adjacency_map": [766, 771], "re_init_cel": 766, "replaymod": [766, 775, 839, 856], "record_range_var": [766, 1177, 1247], "mech": [766, 776, 786, 793, 819, 834], "get_range_var_conduct": 766, "distance_between_pt": 766, "sec1": [766, 768], "sec2": [766, 768], "distance_to_soma": [766, 980, 1256], "max_dist": 766, "add_synaps": [766, 980], "ptid": [766, 767, 932, 980, 981, 995], "ptx": [766, 767, 980, 981], "pretyp": [766, 767, 777, 937, 942, 980, 981, 984, 1042, 1047], "posttyp": [766, 767, 980, 981], "remove_synaps": [766, 980], "init_time_record": 766, "get_synapse_activation_datafram": 766, "max_spik": [766, 772], "get_section_adjacancy_map": 766, "built": 768, "ineffici": 768, "due": [768, 859, 1252], "repeat": [768, 975, 1251, 1252], "addition": [768, 895, 1055], "center": [768, 786, 789, 790, 799, 906, 910, 1024, 1028, 1127, 1249], "improv": 768, "pair": [768, 937, 939, 1035, 1042, 1088, 1127, 1252], "wise": 768, "enhanc": 768, "area": [770, 786, 791, 797, 799, 814, 974, 975, 976, 999, 1000, 1006, 1012, 1013, 1014, 1015, 1019, 1020, 1032, 1035, 1036, 1040, 1053, 1055, 1246, 1247, 1249, 1254], "0017": 770, "disconnect": [775, 932, 934], "replai": 775, "ica": [776, 793, 1247, 1248], "spiketim": [778, 948, 961], "electrophysiolog": [778, 800, 1112, 1118, 1247, 1248], "nrn": [778, 786, 792, 794, 795, 796, 800, 989], "vecstim": [778, 785], "precomput": [778, 1000, 1012, 1205, 1249, 1252], "activate_functional_synaps": [778, 860], "spikevec": 778, "netcon": [778, 930, 931, 932, 933, 934, 1241], "www": [778, 891, 1237], "yale": [778, 891], "edu": [778, 891, 975], "py_doc": 778, "modelspec": 778, "programmat": 778, "plai": [778, 785, 1247, 1255], "synapselist": [778, 988], "is_act": [778, 932], "spiket": [778, 781, 847], "spike_sourc": [778, 781, 782, 866, 867], "nois": [778, 780, 782, 849], "nspike": [778, 782, 849, 1252], "_next_interv": 778, "_add_synapse_point": [778, 988], "turn_off": [778, 856], "sigma_": 780, "rand": 780, "delta_t": 780, "_create_pointcell_act": [781, 782, 839, 840], "categori": [781, 782], "sophist": 782, "resiz": [785, 795, 796, 906, 912, 1024, 1030], "hine": [785, 819, 826, 1237], "Or": [785, 1246, 1248], "carneval": [785, 819, 826, 1237], "around": [786, 787, 800, 906, 912, 980, 983, 990, 996, 1017, 1024, 1030, 1247, 1252, 1255], "geometri": [786, 798, 800, 990, 994], "__nrnsec_0x": 786, "dash": [786, 1146, 1160, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "nseg": [786, 952, 1241], "similar": [786, 893, 953, 959, 990, 1214, 1250], "seg": [786, 792, 1172], "nata_t": [786, 792, 797, 1246, 1247, 1248, 1256], "gnata_tbar": [786, 792, 797, 1246, 1248, 1256], "scale_by_detailed_compart": [786, 811], "parentx": [786, 990], "box": [786, 787, 906, 907, 908, 909, 911, 912, 937, 940, 941, 980, 983, 990, 991, 994, 1024, 1025, 1026, 1027, 1029, 1030, 1032, 1034, 1038, 1040, 1042, 1045, 1046, 1248], "nrofpt": [786, 798, 952, 990], "relpt": [786, 788, 798, 990], "diamlist": [786, 798, 990, 1035], "diamet": [786, 789, 798, 799, 810, 893, 990, 994, 1017, 1035, 1127, 1130, 1144, 1146, 1147, 1150, 1159, 1241, 1246, 1254, 1255, 1256], "segpt": 786, "loop": [786, 1247, 1248, 1251, 1253, 1255], "akin": 786, "exclud": 786, "segx": 786, "segdiam": 786, "recvlist": [786, 915, 1246, 1256], "recordvar": [786, 915, 1129], "set_3d_geometri": [786, 990], "diam": [786, 798, 990, 994], "set_seg": 786, "nrofseg": [786, 799], "discret": [786, 799, 826, 832, 836, 1246, 1256], "_get_seg_conduct": 786, "get_range_conduct": 786, "transmembran": [786, 797, 826, 1177, 1206], "_compute_seg_diamet": 786, "_compute_total_area": 786, "_compute_bound": [786, 990], "_compute_relative_pt": [786, 990], "_compute_seg_pt": 786, "_init_vm_record": 786, "_re_init_vm_record": 786, "reiniti": [786, 796, 839, 856], "votag": [786, 796], "_re_init_range_var_record": 786, "_init_range_var_record": 786, "ergo": 788, "straight": 790, "nameerror": 793, "attributeerror": [793, 1255], "avoid": [795, 796, 1115, 1252], "segfault": [795, 796], "uniform": [797, 831, 832, 847, 937, 944, 1241, 1246, 1252, 1256], "00001": 797, "subsect": 797, "pai": 797, "meaning": 799, "cell_pars": [799, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 837, 985, 1241, 1246, 1256], "determine_nseg": [799, 819, 832, 836, 893], "pointcel": [800, 839, 840, 844, 846, 848, 851, 853, 854, 855, 859, 872, 873, 874, 875, 877, 930, 931, 932, 933, 970, 995, 996, 1000, 1004, 1241, 1250], "multiscal": [800, 1252], "funnam": [809, 810, 862, 863], "_parser": 809, "_apic": 809, "0x7f0c3f2b6e18": [809, 810], "cell_paramet": [810, 1241], "__doc__": 810, "detailed_label": [810, 811], "bac_inject": 810, "apical_current_inject": 810, "apical_epsp_inject": 810, "blender_record": 810, "soma_current_inject": 810, "synaptic_input": 810, "scale_apical_dendrit": 811, "subcellular": [811, 814], "altern": [814, 1247], "labl": 814, "hocfilenam": [819, 985], "accrod": 819, "membraneparam": 819, "cell_modify_functions_appli": 819, "apply_cell_modify_funct": 819, "spatialgraph_to_cel": [819, 822, 823, 898, 985, 1022], "scalefunc": [819, 833, 836, 837, 987, 1256], "set_up_biophys": [819, 833], "get_cel": [819, 922, 985], "insert_membrane_properti": [819, 832], "prop": [819, 829], "insert_range_mechan": [819, 829, 832, 834], "update_range_mechan": 819, "updatemechnam": [819, 834], "_insert_ion_properti": [819, 829, 832], "ionparam": [819, 824], "_add_spin": [819, 832], "spineparam": [819, 820, 821], "_add_spines_ar": [819, 832], "anomal": [819, 821, 832], "rectifi": [819, 821, 832], "insert_passive_membran": 819, "insert_hh_membran": 819, "hodgkin": [819, 828, 1246], "huxlei": [819, 828, 1246], "max_seg_length": [819, 826], "rule": [819, 826, 836], "_create_ai": 819, "hillock": [819, 822, 823, 1246, 1256], "mainen": [819, 822, 1237], "_create_ais_hay2013": [819, 822], "c_m": [820, 821, 826, 830, 832], "r_m": [820, 826], "a_": [820, 821], "dend": [820, 821, 1246, 1248], "resist": [820, 821, 1246], "koch": [820, 1237], "segev": [820, 1237], "r_": 821, "recent": [822, 854, 855, 1252, 1255], "predic": 826, "grid": [826, 1035, 1247, 1249, 1250], "ac": 826, "lambda_f": 826, "primarili": 826, "suggest": 826, "node": [826, 1252, 1255], "lambda_": 826, "propag": 826, "insensit": [826, 1131], "shunt": 826, "unreason": 826, "\u03c4r": 826, "bandpass": 826, "pi": 826, "approx": 826, "At": [826, 1238, 1249], "v_0": 826, "v_x": 826, "sqrt": 826, "r_a": [826, 830, 832], "fold": 826, "chapter": 826, "0003": 828, "e_": [828, 830], "003": 828, "omega": 830, "00025": 830, "linear_cap": 831, "prox_valu": 831, "dist_valu": 831, "dist_value_dist": 831, "exponenti": [831, 1246, 1256], "linscal": [831, 1246, 1256], "_lambda": [831, 1246, 1256], "xoffset": [831, 1246, 1256], "exponential_by_z_dist": 831, "capped_exponenti": 831, "max_g": 831, "sigmoid": 831, "uniform_rang": [831, 1246, 1256], "outsidescal": [831, 1246, 1256], "leq": 831, "transient": 832, "poperti": 832, "setupbiophys": [836, 837], "Will": 836, "among": [837, 1254], "thing": [837, 1255], "constrain": [837, 937, 974, 1238, 1253], "event": [837, 838, 1066, 1071, 1073, 1074, 1075, 1088, 1092, 1098, 1099, 1100, 1101, 1102, 1104, 1112, 1162, 1163, 1164, 1165, 1170, 1213, 1214, 1255], "simparam": [837, 838, 839], "sec_distance_to_soma": 837, "currentsec": [837, 914], "spines_update_synapse_distribution_fil": 837, "synapse_distribution_fil": [837, 929], "new_synapse_distribution_fil": [837, 928, 929], "spines_update_network_paramfil": 837, "network_paramfil": [837, 928], "new_network_paramfil": [837, 928], "network_r": [837, 878, 879], "params_file_format": [837, 890], "scalar_field": [837, 906, 907, 908, 909, 910, 911, 912, 937, 999, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1040], "scalar": [837, 895, 901, 906, 908, 912, 913, 975, 976, 999, 1019, 1023, 1024, 1026, 1030, 1031, 1032, 1033, 1035, 1040, 1049, 1056, 1127, 1131, 1135, 1142, 1146, 1147, 1148, 1150, 1153, 1155, 1156, 1157, 1158, 1159, 1160, 1235, 1236, 1241, 1252], "serialize_cel": [837, 915, 916, 917, 919, 920, 921], "serializ": [837, 915, 918, 920], "vice": [837, 918], "versa": [837, 918], "sim_control": [837, 922, 923, 924, 925, 926], "synapse_mapp": [837, 937, 938, 939, 940, 941, 942, 943, 944, 945, 980, 985, 995, 999, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "mapper": [837, 946, 1249, 1251], "finitializehandl": 838, "cours": 838, "cvode": 838, "statement": 838, "postcel": [839, 841, 846, 1000, 1004], "nwparam": 839, "network_embed": [839, 854, 855, 860, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "control": [839, 860, 878, 880, 922, 927, 937, 942, 946, 974], "connected_cel": [839, 1000], "create_network": [839, 844, 845, 852, 860], "synweightnam": [839, 853, 854, 855, 858], "full_network": [839, 850, 854, 855], "syninfonam": [839, 858], "include_silent_synaps": [839, 858], "create_functional_r": [839, 846, 853, 860, 878], "converg": [839, 844, 846, 852, 860, 878, 880, 1001, 1003, 1004, 1054, 1055, 1249], "re_init_network": 839, "_assign_anatomical_synaps": [839, 840, 848, 850, 853, 854, 855], "_apply_network_modify_funct": 839, "_create_presyn_cel": [839, 840, 850, 853, 854, 855, 861, 1000], "_activate_presyn_cel": [839, 850, 853, 854, 855], "spiketrain": [839, 840, 845, 849, 853, 854, 855, 872, 970, 1241, 1250], "patter": [839, 840, 853, 854, 855], "_create_spiketrain_act": [839, 840], "precelltyp": [839, 847, 849, 930, 932, 995, 1032, 1041], "networkparamet": [839, 847, 849], "_connect_functional_synaps": [839, 853, 857], "_create_functional_connectivity_map": [839, 852], "_map_functional_r": [839, 854], "_map_complete_anatomical_r": [839, 844, 855], "_assign_synapse_weight": [839, 850], "receptor": [839, 843, 871, 905, 931, 932, 933, 963, 970, 1250], "recepstr": [839, 843], "_connect_spike_train": [839, 853, 854, 857], "create_saved_network": 839, "reconnect_network": 839, "physiolog": [844, 846], "create_saved_network_2": 844, "spikewidth": 847, "lognorm": 847, "psth_absolute_numb": 847, "number_active_synaps": 847, "psth_poissontrain": [847, 1241], "psth_poissontrain_v2": 847, "poissontrain_modul": 847, "rate_before_t_offset": 847, "mean_rat": 847, "max_modul": 847, "modulation_frequ": 847, "phase_distribut": 847, "pecif": 850, "sequenti": [850, 854, 855], "single_cel": 850, "single_cell_input_mapp": [850, 995, 1253], "somewhat": [852, 1013, 1014, 1015], "contrast": [852, 853, 858, 903, 1016], "entiti": 854, "most": [854, 855, 860, 1008, 1013, 1014, 1247, 1248, 1249, 1250, 1252, 1255], "commonli": [854, 855], "_apply_network_modification_funct": 855, "_map_complete_synapse_r": 857, "mayb": 858, "slightli": [858, 1248], "slower": [858, 1247], "presyncel": [859, 860], "synparamet": [859, 860], "tchang": [859, 860], "synparameterschang": [859, 860], "forcesynapseactiv": [859, 860], "releasetim": [859, 860], "releaseprob": [859, 970, 1241, 1250], "pre": [859, 995, 1000, 1005, 1015, 1247, 1253, 1255], "recurr": 859, "rerceptor": 859, "regardless": 859, "synapseparamet": 859, "fine": [860, 878, 880, 937, 942, 946, 974], "grain": [860, 878, 880, 937, 942, 946, 974], "offload": 860, "sample_times_from_r": 860, "poisson": [861, 937, 942, 970, 975, 1000, 1032, 1042, 1047], "resid": 862, "said": 862, "deactiv": [863, 932, 936], "silence_synapses_by_somadist": 863, "silence_synapses_by_somadist_and_spike_sourc": 863, "soma_dist_rang": [864, 865, 866, 867], "l5tt_c2": [865, 1250], "_rang": 865, "vpm": [865, 900, 904, 1250, 1251, 1253], "_c2": [865, 868, 872, 873, 874, 877, 900, 904, 972, 979], "1200": 865, "celltype_nam": 868, "b2": [868, 972, 973, 979, 1250, 1251, 1252], "_celltyp": [868, 873, 874, 964], "_match": 868, "_c1": 868, "somatosensori": [870, 1032], "vs1": 870, "g_optim": [871, 875], "presynpt": 872, "cortico": [872, 877], "cortic": [872, 877, 1237, 1254], "_ongo": [872, 874], "inact_celltyp": [873, 874, 875], "inact_column": [873, 874, 875], "inactiv": [873, 874, 875], "inact": [873, 874, 1251, 1253], "_paramet": [873, 874], "_evok": [873, 874, 965, 973], "change_ongoing_interv": 875, "set_stim_onset": 875, "change_glutamate_syn_weight": 875, "change_evoked_inh_sc": 875, "inactivate_evoked_activity_by_celltype_and_column": 875, "inactivate_evoked_and_ongoing_activity_by_celltype_and_column": 875, "multi_stimulus_tri": 875, "inter_stimulus_interv": [875, 876], "scale_factor": [875, 876], "repeatedli": [875, 876], "whisker": [875, 876, 964, 965, 966, 968, 970, 971, 973, 974, 1250, 1251, 1252, 1253, 1254], "subsequ": 876, "_stim": [877, 1250, 1251], "_onset": 877, "nwparamnam": [878, 880], "map_single_cell_input": 878, "postsynaptith": 878, "pname": [879, 880], "write_synaps": [879, 880], "create_synapse_r": 880, "create_functional_network": 880, "_wrap": 881, "_unwrap": 881, "to_dict": 881, "_resolve_path": 881, "build_paramet": [890, 1241, 1246, 1250, 1256], "load_nmodl_paramet": 890, "nmodl": [890, 891, 1241], "resolve_parameter_path": 890, "params_fn": [890, 892], "namespac": 891, "new_doc": 891, "neuronpython": 891, "nmodl_mechan": [891, 1246, 1250, 1256], "mech_glob": [891, 1246, 1256], "read_hoc_fil": [893, 895, 1019, 1241], "loos": 893, "dendrite_1_0_0": 893, "hoclabel": [893, 894, 898, 1017, 1018], "edgept": [893, 894, 898, 1017, 1018, 1042], "diameterlist": [893, 898, 1017], "parentid": [893, 898, 1017], "parentconnect": [893, 898, 1017], "far": [893, 1002, 1246, 1247, 1248], "is_valid": [893, 1017], "capabl": [895, 1248], "read_scalar_field": [895, 1019, 1241], "read_synapse_r": [895, 900, 937, 945, 953], "read_pruned_synapse_r": [895, 904, 943, 959], "prune": [895, 900, 932, 943, 948, 953, 959], "read_functional_realization_map": [895, 955], "read_synapse_activation_fil": [895, 896], "read_complete_synapse_activation_fil": [895, 903], "read_spike_times_fil": 895, "read_synapse_weight_fil": 895, "read_landmark_fil": [895, 1241], "comute_synapse_distances_tim": [896, 903], "t1": [896, 903], "t2": [896, 903], "tn": [896, 903], "anatomicalid": [897, 948, 955, 1049, 1050], "write_functional_realization_map": [897, 948], "ioerror": [897, 898, 900, 901, 904, 1023], "variant": 898, "_hoc": 898, "_edg": 898, "93339": 898, "221": [898, 1241], "367004": [898, 1241], "450": [898, 1241, 1248], "04599": 898, "13": [898, 965, 967, 975, 999, 1237, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1256], "9619": 898, "210": [898, 1241, 1251], "149002": [898, 1241], "447": [898, 1241], "901001": [898, 1241], "12": [898, 965, 967, 999, 1237, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253], "542": 898, "3094": 898, "5997": 898, "basaldendrit": [898, 1001], "_0": 898, "36964": 898, "224": [898, 1241], "735992": [898, 1241], "452": [898, 1241], "399994": [898, 1241], "34155": 898, "222": [898, 1241], "962997": [898, 1241], "451": [898, 1241], "906006": [898, 1241], "04": 898, "009696": [898, 1241], "write_pruned_synapse_loc": [900, 948, 953], "86": [900, 904, 1251, 1252], "_center": [900, 904, 972, 979], "_e1": [900, 904], "112": [900, 904, 1241, 1249], "138046479525": [900, 904, 1241, 1249], "130": [900, 904, 1241, 1249, 1252], "305058053119": [900, 904, 1241, 1249], "_prune": 900, "_realiz": [900, 904, 955], "scalarfield": [901, 913, 937, 942, 975, 976, 1000, 1023, 1031, 1032, 1035, 1040, 1041, 1042, 1049, 1056], "nr": [902, 1248, 1251], "698": 902, "write_cell_synapse_loc": [904, 948, 959, 1007, 1049, 1050], "190509288017": [904, 1241, 1249], "368760777084": [904, 1241, 1249], "120662910562": [904, 1241, 1249], "write_synapse_weight_fil": [905, 948], "1st": 905, "2nd": 905, "gmax_0": 905, "gmax_1": 905, "gmax_n": 905, "mesh": [906, 907, 909, 910, 911, 912, 954, 975, 999, 1019, 1024, 1025, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1040, 1041, 1042, 1047, 1048, 1241], "extent": [906, 912, 1024, 1030, 1034, 1123, 1248], "bbox": [906, 1024], "voxel": [906, 907, 908, 909, 910, 912, 937, 939, 975, 1000, 1024, 1025, 1026, 1027, 1028, 1030, 1032, 1035, 1041, 1042, 1044, 1047], "cellular": [906, 1024, 1241, 1250, 1252], "vtkimagedata": [906, 1024], "zmax": [906, 983, 991, 1024, 1046], "zmin": [906, 983, 991, 1024, 1046], "cubic": [906, 1024], "boundingbox": [906, 912, 980, 1024, 1030], "resize_mesh": [906, 1024], "get_scalar": [906, 1024], "xyz": [906, 907, 908, 911, 995, 1024, 1025, 1026, 1029], "is_in_bound": [906, 1024], "get_mesh_coordin": [906, 1024], "get_voxel_bound": [906, 1024], "ijk": [906, 909, 910, 1024, 1027, 1028], "j": [906, 909, 910, 1024, 1027, 1028, 1237], "get_voxel_cent": [906, 1024], "outsid": [907, 908, 910, 1025, 1026, 1028], "duplic": [913, 1031, 1127, 1130, 1159], "joblib": [915, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "sec_id": [915, 1189], "parent_id": 915, "precel": [915, 931, 932, 933, 995], "hoc_array_dict": [916, 918], "hoc_arrai": [917, 918], "convert_hoc_array_to_np_arrai": 918, "convert_dict_of_hoc_arrays_to_dict_of_np_arrai": 918, "cell_to_serializable_object": 918, "restore_cell_from_serializable_object": 918, "sc": [918, 920], "sim_tim": 922, "simtim": [922, 923], "goalreadi": 922, "set_iclamp": 922, "amp": [922, 924, 1256], "dur": [922, 924, 1256], "set_record": 922, "simcontrol": 927, "new_synfil": 929, "edgeid": [930, 932, 995], "edgeptid": [930, 932, 995], "postcelltyp": [930, 932, 995, 1000, 1032], "expsyn": 930, "activate_hoc_syn": [930, 932, 934, 935], "targetcel": [930, 931, 932, 933], "edgex": [932, 995], "releasesit": 932, "disconnect_hoc_synaps": [932, 935], "exsyn": 936, "syndist": [937, 942, 943, 944, 945, 948, 962, 1042], "isdens": [937, 942, 1042], "create_synaps": [937, 1000, 1042], "interpret": [937, 1042, 1252, 1255], "drawn": [937, 942], "voxeledgemap": [937, 939, 1042, 1044], "sectionid": [937, 939, 943, 945, 1049, 1051], "pointid": [937, 939], "map_synapse_r": 937, "map_pruned_synapse_r": 937, "map_synapse_model_distribut": 937, "structlabel": [937, 944], "_create_voxel_edge_map": [937, 1042], "_intersect_bbox": [937, 1032, 1042], "bbox1": [937, 940, 1032, 1038, 1042, 1045], "bbox2": [937, 940, 1032, 1038, 1042, 1045], "overlap": [937, 940, 975, 1000, 1009, 1032, 1038, 1041, 1042, 1045], "_pt_in_box": [937, 1042], "_compute_path_length": [937, 1042], "minx": [940, 941, 1034, 1038, 1045], "maxx": [940, 941, 1034, 1038, 1045], "mini": [940, 941, 1034, 1038, 1045], "maxi": [940, 941, 1034, 1038, 1045], "minz": [940, 941, 1034, 1038, 1045], "maxz": [940, 941, 1034, 1038, 1045], "nearli": 942, "singlecell_inputmapp": 942, "quick": 942, "sectionx": [943, 945], "substructur": 944, "synapsemapp": [946, 975, 985, 1005, 1032, 1048], "landmark_nam": [947, 948], "vertexviewid": [947, 948], "vertex": 947, "write_landmark_fil": [948, 1049], "landmarklist": [948, 956, 1049, 1052], "write_sim_result": 948, "write_all_trac": 948, "functionalmap": [948, 954, 955, 1049, 1050], "write_synapse_activation_fil": 948, "syntim": [948, 962], "activesyn": [948, 962], "write_psth": 948, "write_spike_times_fil": 948, "write_cell_simul": 948, "step_fram": [948, 952], "selected_index": [948, 952], "spatialgraph": [948, 952], "write_functional_map": 948, "generate_landmark_templ": 948, "write_landmarks_colorcoded_to_fold": 948, "vmin": [948, 949, 957, 1127, 1145, 1224, 1225, 1247], "vbinsiz": [948, 957], "colorcod": [948, 957], "value_to_color": [948, 1224], "15140072": [949, 1225], "colormap": [949, 1127, 1145, 1172, 1178, 1179, 1195, 1203, 1205, 1207, 1208, 1209, 1211, 1212, 1225, 1252], "rgba": [949, 1225], "_psth": [950, 964, 965, 973], "64": [951, 960, 965, 1247, 1251], "69": 951, "dat": [951, 960], "quantiti": 952, "_simul": 952, "_frame": 952, "vtk": [954, 1056, 1151, 1155, 1158, 1206, 1231, 1232, 1234, 1235, 1236, 1241, 1251], "write_vtk_pointcloud_fil": [954, 1233], "write_vtk_fram": [954, 1151, 1236, 1251], "_map": 955, "wrong": 956, "_landmark": 956, "cell1": 958, "cell2": 958, "cell3": 958, "205": 958, "read_pruned_synapse_loc": 959, "_sim": 960, "evoked_psth_from_spike_tim": [964, 965, 967, 968, 969, 971, 974], "celltypefold": [964, 966], "outfilenam": [964, 965, 966, 970, 971, 977, 978], "condit": [964, 970, 971, 974, 977, 1162, 1163, 1164, 1165, 1170, 1247, 1250, 1251, 1252, 1253, 1255], "_averag": 964, "_cluster": [964, 967], "_constraint": [964, 965, 967, 972, 979], "_84": [964, 965, 967], "l5": 964, "_upstat": 964, "_b1": [964, 965], "0216": 964, "_b2": [964, 965], "spiketimesnam": [965, 966, 968], "ongoingr": [965, 966], "_040929": [965, 967], "129": [965, 967], "ctx": [965, 967], "cluster1": [965, 967], "readlin": 965, "17": [965, 967, 1237, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255], "24": [965, 1227, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253], "28": [965, 1241, 1246, 1248, 1249, 1250, 1252], "29": [965, 1241, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253], "42": [965, 1241, 1246, 1248, 1250], "44": [965, 973, 1241, 1246, 1248, 1250, 1256], "46": [965, 1241, 1246, 1248, 1250, 1251], "47": [965, 970, 1241, 1250], "49": [965, 973, 1241, 1250], "0000": [965, 1248], "0227": 965, "1363": 965, "0909": 965, "1136": 965, "0454": 965, "0682": 965, "_b3": 965, "oberlaend": [966, 1237], "lab": [966, 1255], "bonn": 966, "focu": 966, "blindli": 966, "create_average_celltype_psth_from_clust": [966, 977], "create_evoked_psth": 966, "load_spike_tim": 966, "load_cluster_tri": 966, "scan_directori": 966, "scan": [966, 969, 1255], "87": [967, 1251, 1252], "80000000000001": 967, "138": [967, 1241, 1251], "70000000000002": 967, "151": [967, 1249, 1251, 1252], "430": [967, 1248, 1251], "40000000000003": 967, "471": [967, 1249], "478": 967, "90000000000003": 967, "265": 967, "269": 967, "283": [967, 1250], "290": 967, "459": 967, "20000000000005": 967, "100000000000001": 967, "90": [967, 1241, 1246, 1247, 1248, 1251, 1256], "10000000000001": 967, "387": 967, "320": [967, 1249], "464": 967, "317": 967, "409": 967, "483": [967, 1249, 1251], "dictioinari": 968, "evoked_network_param_from_templ": [970, 972, 973, 974], "templateparamnam": [970, 971, 977, 978], "cellnumberfilenam": [970, 971, 972, 977, 978, 979], "synfilenam": [970, 971, 977, 978], "confilenam": [970, 971, 977, 978], "write_all_celltyp": [970, 971, 977, 978], "scenario": [970, 971, 973, 1250], "columnm": 970, "relas": 970, "templateparam": 970, "11feb2015": [970, 1241], "author": [970, 1241, 1246, 1256], "2173": 970, "_syn": 970, "tau1": [970, 1241, 1250, 1256], "tau2": [970, 1241, 1250], "tau3": [970, 1241, 1250], "tau4": [970, 1241, 1250], "decayampa": [970, 1241, 1250], "decaynmda": [970, 1241, 1250], "facilampa": [970, 1241, 1250], "facilnmda": [970, 1241, 1250], "runfil": [971, 973, 974, 975], "anasthes": [971, 974], "create_network_paramet": [971, 978], "whisker_evoked_psth": 971, "deflectedwhisk": [971, 973], "load_cell_number_fil": [971, 978], "_area": [972, 979, 1021], "a1": [972, 979, 1250], "nr_of_cel": [972, 979], "_number": [972, 979], "_embed": [972, 979], "_86": [972, 979], "numberofconnectedcel": [972, 979, 1249, 1250], "l4py": [972, 979, 1250, 1251, 1253], "a2": [972, 979, 1250], "a3": [972, 979, 1250], "a4": [972, 979, 1250], "b1": [972, 979, 1250, 1251, 1252], "72": [972, 979, 1151, 1159, 1241, 1251, 1252], "b3": [972, 979, 1250, 1251, 1252], "97": [972, 979, 1248, 1252], "b4": [972, 979, 1250], "beta": [972, 979, 1250], "374": [972, 979], "c3": [972, 973, 979, 1250, 1251, 1252], "c4": [972, 979, 1250], "89": [972, 979, 1246, 1248, 1251, 1252], "d3": [972, 979, 1249, 1250, 1251, 1252], "d4": [972, 979, 1250], "delta": [972, 979, 1114, 1250], "e1": [972, 979, 1250], "e2": [972, 979, 1035, 1250, 1252], "e3": [972, 979, 1250], "e4": [972, 979, 1250], "situat": 973, "0057": 973, "dens": [974, 975, 1237, 1241], "connectom": [974, 975, 1237, 1241], "abil": 974, "pst": [974, 975, 976, 999, 1032, 1040, 1041, 1048, 1249], "region": [974, 976, 1255], "unspecif": [974, 999], "bouton": [974, 975, 976, 999, 1000, 1013, 1014, 1041, 1249], "map_singlecell_input": [974, 999, 1048, 1249, 1253], "familiar": 974, "yourself": [974, 1252], "distinguish": 974, "kind": [974, 1248, 1255], "absenc": 974, "tandem": [974, 1241], "example_data": [974, 1241, 1246, 1248, 1249, 1250, 1251, 1253, 1255, 1256], "functional_constraint": [974, 1241, 1250, 1253], "ongoing_network_param_from_templ": [974, 977, 979], "udvari": [975, 999, 1237, 1249], "download": [975, 1249, 1252], "datavers": [975, 1249, 1252], "harvard": [975, 1249, 1252], "xhtml": 975, "persistentid": 975, "doi": [975, 1237, 1252], "7910": [975, 1252], "dvn": [975, 1252], "jzpulna": 975, "download_bc_model": [975, 1249], "spreadsheet": [975, 976, 999, 1019, 1020, 1021, 1032, 1040, 1050, 1250], "mention": [975, 1054, 1055, 1130, 1249], "liang": [975, 1032, 1033, 1035, 1237], "barski": [975, 1032, 1033, 1035, 1237], "clip": [975, 1032, 1033, 1035, 1036, 1237], "synapsedens": [975, 1000, 1015, 1048], "amiramesh": [975, 1049, 1056], "celltypenam": [975, 976, 1249], "nrofsampl": [975, 976, 1000, 1010, 1013, 1249], "numberofcellsspreadsheetnam": [975, 976], "connectionsspreadsheetnam": [975, 976], "expstdensitynam": [975, 976], "inhpstdensitynam": [975, 976], "boutondensityfoldernam": [975, 976], "tissu": 976, "innerv": 976, "create_network_embed": [976, 1000, 1003, 1014], "neuropil": [976, 999], "anatomical_area": [976, 1000, 1003, 1009, 1020], "presynaptic_cell_typ": [976, 1251], "leightweight": [980, 985, 995, 996, 1189], "contrari": 980, "pysection2": [980, 982, 995, 996], "get_bounding_box": 980, "micromet": 982, "hoc_fnam": 985, "defalut": 988, "_compute_length": 990, "ind": 995, "generate_nr_of_cells_spreadsheet": [997, 999], "con_fil": [997, 998, 1249, 1250], "write_output": [997, 998], "presenc": [997, 1000], "con_file_to_numberofconnectedcells_sheet": [998, 1050], "egger": [999, 1237, 1249], "supon": 999, "celltypenumbersspreadsheet": 1000, "connectionsspreadsheet": [1000, 1021], "expst": [1000, 1032], "inhpst": [1000, 1032], "syanptic": 1000, "mutipl": 1000, "reconstruct": [1000, 1241, 1249, 1250, 1251], "postcellnam": [1000, 1007, 1010, 1012, 1013, 1014, 1015], "boutondens": [1000, 1009, 1013, 1014, 1032, 1041], "create_network_embedding_for_simul": [1000, 1003, 1007], "nrofreal": [1000, 1014], "create_network_embedding_from_synapse_dens": [1000, 1007, 1041], "_precompute_anatomical_area_celltype_synapse_dens": [1000, 1005, 1041], "_create_anatomical_r": 1000, "celltypesynapsedens": [1000, 1005], "_create_anatomical_connectivity_map": [1000, 1007, 1012], "_get_representative_sampl": [1000, 1013], "realizationpopul": [1000, 1001, 1008], "populationdistribut": [1000, 1008, 1012, 1049, 1053, 1054], "_compute_parameter_distribut": [1000, 1053, 1054], "sd": [1000, 1001, 1002, 1008, 1054, 1055], "_compute_sample_dist": 1000, "realizationsampl": [1000, 1002], "realizationpopulationdistribut": [1000, 1002], "_test_population_converg": 1000, "sampleconnectivitydata": [1000, 1010], "_compute_summary_t": 1000, "connectedcel": [1000, 1003, 1007], "connectedcellsperstructur": [1000, 1003, 1007], "_write_landmark_fil": 1000, "synapseloc": [1000, 1003, 1011, 1012], "id1": [1000, 1011], "id2": [1000, 1011], "_generate_output_fil": [1000, 1011, 1053, 1055], "connectivitymap": [1000, 1007, 1012], "writelandmarkfil": [1000, 1007, 1012], "_write_population_output_fil": 1000, "cellsynapseloc": [1000, 1012], "celltypesummaryt": [1000, 1001, 1003, 1012], "anatomicalareasummaryt": [1000, 1003, 1012], "nrofsynaps": 1001, "nrconnectedcel": 1001, "nrprecel": 1001, "distancemean": 1001, "distancestd": 1001, "celltypesynapsesperstructur": 1001, "celltypeconnectionsperstructur": 1001, "celltypeconvergenceperstructur": 1001, "celltypedistancesperstructur": 1001, "write_anatomical_realization_map": [1007, 1049], "write_sample_connectivity_summari": [1007, 1049, 1053, 1054], "choos": [1008, 1256], "smallest": 1008, "postynapt": [1009, 1249], "_create_network_embed": 1012, "Then": [1013, 1014, 1015, 1032, 1105, 1248], "mont": 1014, "carlo": 1014, "fulli": [1016, 1251], "read_connections_spreadsheet": 1019, "read_celltype_numbers_spreadsheet": 1019, "cell_typ": [1020, 1249, 1250], "number_of_cel": 1020, "_connect": 1021, "_spreadsheet": 1021, "_length": [1021, 1116], "conain": 1022, "connectionspreadsheet": [1032, 1040], "extyp": 1032, "inhtyp": 1032, "compute_synapse_dens": [1032, 1040], "25000": 1032, "50000": 1032, "75000": 1032, "100000": 1032, "isosurfac": 1032, "white": [1032, 1127, 1253, 1255], "bottom": [1032, 1228, 1252], "wire": 1032, "surfac": [1032, 1040, 1205, 1232, 1233, 1255], "cellpst": [1032, 1040], "compute_cell_pst": [1032, 1041], "_compute_length_surface_area_dens": [1032, 1033, 1036, 1040], "lengthdens": [1032, 1035], "surfaceareadens": [1032, 1035], "likeamira": [1032, 1035], "surfacedens": [1032, 1035], "_clip_u": 1032, "pq": [1032, 1033], "u1u2": [1032, 1033], "_get_truncated_cone_area": 1032, "radius1": [1032, 1036, 1037], "radius2": [1032, 1036], "truncat": [1032, 1036], "cone": [1032, 1036], "_interpolate_radiu": 1032, "p0": [1032, 1037], "p1": [1032, 1037], "radius0": [1032, 1037], "targetpt": [1032, 1037], "radiu": [1032, 1035, 1037, 1254], "_compute_cell_density_grid": 1032, "_is_zero": 1032, "cellmesh": 1034, "cellorigin": 1034, "cellext": 1034, "cellspac": 1034, "dx": [1034, 1216, 1219, 1247], "dy": [1034, 1216, 1219], "dz": [1034, 1216, 1219], "cellboundingbox": 1034, "wikipedia": 1035, "wiki": 1035, "93barsky_algorithm": 1035, "treat": 1035, "vast": 1035, "major": 1035, "neurit": 1036, "structure_1": 1040, "structure_2": 1040, "hardcod": 1040, "0x7f7f3c0b3b90": 1040, "0x7f7f3c0b3c10": 1040, "0x7f7f3c0b3c50": 1040, "0x7f7f3c0b3c90": 1040, "0x7f7f3c0b3cd0": 1040, "0x7f7f3c0b3d10": 1040, "distinct": 1041, "idem": 1041, "ditto": 1041, "varat": 1041, "exitatori": 1041, "everywher": 1041, "whole": [1042, 1127, 1129, 1133, 1136, 1139, 1247, 1252], "betwen": [1042, 1043], "isol": 1048, "celltypesummarydata": [1049, 1053, 1055], "columnsummarydata": [1049, 1053, 1055], "write_population_connectivity_summari": [1049, 1053], "write_population_and_sample_connectivity_summari": 1049, "write_scalar_field": 1049, "rpesynapt": 1055, "convert_amira_lattice_to_vtk": [1056, 1233], "render": [1056, 1146, 1147, 1148, 1150, 1160, 1168, 1216, 1217, 1218, 1246, 1251, 1255], "stim_tim": [1057, 1058, 1061, 1062, 1086, 1093, 1109, 1112, 1116], "sampling_r": [1057, 1058, 1112, 1114], "32000": [1057, 1114], "apply_filt": [1057, 1058], "labview": [1057, 1058, 1112, 1114], "read_labview_junk1_dat_fil": [1057, 1112], "highpass": [1057, 1058, 1111, 1112], "highpass_filt": [1057, 1112], "readersmr": [1057, 1088, 1112, 1113], "smr": [1057, 1061, 1062, 1112], "t_start": [1057, 1061, 1080, 1082, 1084, 1093, 1103, 1127, 1143, 1146, 1148, 1149, 1151, 1152, 1153, 1156, 1157, 1158, 1247, 1248, 1251, 1253], "t_end": [1057, 1061, 1080, 1082, 1084, 1093, 1103], "get_stim_tim": [1057, 1061, 1088], "get_serialize_dict": [1057, 1061, 1088], "analogsignal_id": [1061, 1062], "stim_times_channel": [1061, 1062], "min_rel_tim": [1061, 1062], "max_rel_tim": [1061, 1062], "readerlabview": [1061, 1112], "analog": [1061, 1062], "isin": [1065, 1248], "max_n": 1065, "spiketimeanalysi": [1065, 1071, 1073, 1076, 1078, 1080, 1082, 1084, 1086, 1112], "sta": [1065, 1071, 1073, 1076, 1078, 1080, 1082, 1084, 1086, 1112], "plugin": [1065, 1068, 1071, 1073, 1076, 1078, 1080, 1082, 1084, 1086, 1112], "spiketimesanalysi": [1065, 1067, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1082, 1083, 1084, 1085, 1086, 1087, 1112], "spike_times_analysi": [1065, 1067, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087], "event_analysis_isin": 1065, "isi_1": [1066, 1067], "isi_n": [1066, 1067], "event_tim": [1066, 1067, 1074], "abc": 1068, "abstract": 1070, "subclass": 1070, "bursts_st": 1071, "event_maxtim": [1071, 1073, 1074], "event_nam": [1071, 1073, 1074], "annot": [1071, 1072, 1075, 1112, 1216, 1222, 1224], "singlet": [1071, 1073, 1074], "triplet": [1071, 1073, 1074, 1075, 1112, 1246], "timewindow": [1073, 1074, 1075, 1112], "event_analysis_burst": 1073, "classifi": [1074, 1107, 1112], "event_class": 1074, "isi_": 1074, "column_nam": 1076, "ongoing_act": [1078, 1250], "ongoing_sample_length": 1078, "90000": 1078, "frequency_in_period": [1080, 1082, 1084], "st_df": [1080, 1082, 1084], "period": [1080, 1081, 1082, 1083, 1084, 1085, 1093, 1099, 1103, 1107, 1112, 1116, 1252], "count_per_tri": [1080, 1081], "count_tot": [1080, 1081], "_by_trial": [1082, 1084, 1102], "spike_times_datafram": 1086, "reader_object": [1088, 1093], "lim_creast": [1088, 1090, 1093], "lim_trough": [1088, 1090, 1093], "max_creast_trough_interv": [1088, 1093], "tdelta": [1088, 1089, 1093, 1104, 1112], "stimulus_period": [1088, 1093], "stimulus_period_offset": [1088, 1093], "upper_creast_threshold": [1088, 1105, 1112], "inf": [1088, 1252], "__no_cellid_assigned__": 1088, "spike_time_mod": 1088, "creast": [1088, 1089, 1090, 1091, 1092, 1093, 1105, 1112], "trough": [1088, 1089, 1090, 1091, 1092, 1093, 1098, 1105, 1112], "labviewread": 1088, "chosen": [1088, 1249], "4mv": 1088, "lim": [1088, 1106, 1110, 1112], "recogn": [1088, 1093, 1113], "puls": [1088, 1256], "stimulus_period_offs": 1088, "fullfil": [1088, 1089, 1093, 1105], "thatth": 1088, "_spike_times_creast": [1088, 1089, 1093], "_spike_times_trough": [1088, 1093], "run_analysi": 1088, "_set_creast_trough": 1088, "_extract_spike_tim": [1088, 1096], "get_creast_and_trough_ampltidues_by_bin": [1088, 1090], "get_default_ev": [1088, 1098], "show_stim_tim": [1088, 1092], "show_trough_candid": [1088, 1092], "displai": [1088, 1092, 1098, 1125, 1126, 1151, 1153, 1163, 1164, 1165, 1167, 1168, 1206, 1221, 1246, 1247, 1248, 1251, 1253, 1255], "show_ev": [1088, 1092], "savepdf": [1088, 1098], "showfig": [1088, 1098], "ylim": [1088, 1098, 1161, 1163, 1168, 1169, 1170, 1247, 1251], "init_read": [1088, 1094], "plot_creast_trough_histogram": 1088, "similarli": [1089, 1127], "detec": 1092, "candid": [1092, 1098], "exceed": [1092, 1252], "qualifi": 1092, "linestyl": [1092, 1098], "linewidth": [1092, 1098, 1248, 1252], "pink": [1092, 1098], "auto": [1098, 1255], "only_creast": 1098, "toupl": 1098, "spike_times_object": 1099, "default_event_analysi": 1099, "event_analysi": [1099, 1112], "period_start": [1099, 1103, 1107], "period_end": [1099, 1103, 1107], "_db": 1099, "apply_extractor": 1099, "sta_plugin": [1099, 1100], "get_by_tri": 1099, "staplugin": [1101, 1102], "staplugin_response_probability_in_period": [1102, 1112], "staplugin_response_latency_in_period": [1102, 1112], "shorter": [1104, 1112], "_short": 1104, "_isi": 1104, "spike_times_trough": [1105, 1112], "creast_trough_interv": [1105, 1112], "spike_times_amplitud": [1105, 1112], "creast_upcross_tim": [1105, 1112], "waveform": 1105, "filtered_spike_tim": 1105, "maxima": [1106, 1112], "max_v": 1106, "max_t": 1106, "fall": [1107, 1112], "undefin": 1107, "ascend": 1109, "sr": [1111, 1112], "dsp": 1111, "stackexchang": [1111, 1252], "41184": 1111, "spikedetectioncreasttrough": 1112, "staplugin_templ": 1112, "staplugin_isin": 1112, "staplugin_burst": 1112, "staplugin_annotate_bursts_in_st": 1112, "staplugin_ongo": 1112, "staplugin_quantification_in_period": 1112, "staplugin_extract_column_in_filtered_datafram": 1112, "staplugin_spike_times_datafram": 1112, "read_smr_fil": 1112, "spike2": [1112, 1115], "neo": [1112, 1115], "load_read": 1112, "get_peaks_abov": 1112, "get_upcross": 1112, "filter_spike_tim": 1112, "filter_short_isi": 1112, "stimulus_interval_filt": 1112, "period_length": [1112, 1116], "retain": [1112, 1116, 1162, 1163, 1164, 1165, 1170], "get_st_from_spike_times_and_stim_tim": [1112, 1117], "strip_st": 1112, "get_spike_times_from_row": 1112, "get_period_label_by_tim": 1112, "_filter": 1116, "_decor": [1119, 1121, 1122], "enctoun": 1119, "stil": 1119, "outsourc": 1119, "logic": 1119, "visualizast": 1120, "dask_to_panda": 1120, "pr": 1120, "subsequent_calls_per_lin": [1120, 1203, 1204], "plotfun": [1120, 1122], "plotfunct": 1122, "_figure_array_convert": [1123, 1124, 1126], "pixel": [1123, 1124, 1125, 1255], "pyplot": [1123, 1124, 1125, 1126, 1208, 1209, 1210, 1212, 1252], "neither": 1123, "rgb": [1124, 1148], "matric": 1124, "7821518": 1124, "show_pixel_object": 1125, "fig2np": 1125, "cell_morphology_visu": [1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1206, 1236, 1246, 1248, 1251], "align_trunk": [1127, 1146, 1151, 1251], "t_stop": [1127, 1143, 1146, 1148, 1149, 1151, 1152, 1153, 1156, 1157, 1158, 1247, 1248, 1251, 1253], "t_step": [1127, 1143, 1146, 1148, 1149, 1151, 1152, 1153, 1156, 1157, 1158, 1247, 1248, 1251, 1253], "By": 1127, "chop": 1127, "t_begin": 1127, "evenli": 1127, "line_pair": 1127, "soma_cent": 1127, "unalign": 1127, "n_section": [1127, 1130, 1134, 1138], "rotation_with_zaxi": [1127, 1137], "rotat": [1127, 1137, 1152, 1156, 1255], "background_color": [1127, 1146, 1148], "cmap": [1127, 1145, 1255], "scalar_mapp": [1127, 1135], "mappabl": 1127, "scalarmapp": 1127, "simulation_tim": 1127, "time_offset": 1127, "suppos": 1127, "times_to_show": [1127, 1129, 1132, 1133, 1143, 1148, 1152, 1156, 1157, 1233, 1234, 1251], "possible_scalar": [1127, 1129, 1148], "voltage_timeseri": [1127, 1133], "timeseri": [1127, 1138, 1151], "henc": [1127, 1138], "synapses_timeseri": [1127, 1132], "ion_dynamics_timeseri": 1127, "concentr": 1127, "time_show_syn_activ": 1127, "_has_simulation_data": 1127, "_init_simulation_data": 1127, "_align_trunk_with_z_axi": 1127, "polar": [1127, 1128], "angl": [1127, 1128, 1151, 1159], "zenith": [1127, 1128], "_calc_morphologi": 1127, "_get_voltages_at_timepoint": 1127, "time_point": [1127, 1131, 1136, 1137, 1139, 1146, 1147, 1150, 1151, 1154, 1159, 1160, 1248], "coltag": [1127, 1139], "_data_per_section_to_data_per_point": 1127, "data_per_sect": [1127, 1134], "unravel": [1127, 1134], "_get_ion_dynamics_at_timepoint": 1127, "ion_keyword": [1127, 1129, 1136], "_calc_voltage_timeseri": 1127, "bodi": [1127, 1129, 1133], "_calc_ion_dynamics_timeseri": 1127, "_get_synapses_at_timepoint": 1127, "_calc_synapses_timeseri": 1127, "_get_timeseries_minmax": 1127, "_update_times_to_show": 1127, "_calc_scalar_data_from_keyword": 1127, "return_as_color": [1127, 1131], "color_dict": [1127, 1131], "_keyword_is_scalar_data": 1127, "_get_color_per_sect": 1127, "nan_color": [1127, 1135], "n_point": [1127, 1134, 1135], "scale_diamet": 1127, "scale_func": [1127, 1144], "set_cmap": [1127, 1247], "anchor": [1128, 1249], "ion_dynam": 1129, "timeseries_voltag": [1129, 1133], "_morphology_unconnect": 1130, "_morphology_connect": 1130, "WITH": 1130, "colorscal": [1131, 1255], "rangevar": [1131, 1172, 1247], "available_scalar": 1131, "amatplotlib": 1131, "n_points_in_sect": [1134, 1138], "f0f0f0": [1135, 1146, 1251, 1253], "ion_point": 1136, "section_point": 1138, "minmax": 1138, "annoi": 1138, "voltage_point": 1139, "solid": 1142, "fixed_d": 1144, "jet": 1145, "galleri": 1145, "colormap_refer": 1145, "dash_ip": 1146, "notebook_connect": [1146, 1148, 1150, 1246, 1255], "plotli": [1146, 1147, 1160, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1255], "javascript": [1146, 1148, 1165, 1221], "vbox": [1146, 1147, 1148], "plotly_mimetyp": [1146, 1255], "jupyterlab": [1146, 1242, 1255], "nteract": [1146, 1255], "vscode": [1146, 1255], "kaggl": [1146, 1255], "azur": [1146, 1255], "colab": [1146, 1255], "cocalc": [1146, 1255], "databrick": [1146, 1255], "png": [1146, 1162, 1163, 1220, 1223, 1226, 1227, 1247, 1251, 1255], "jpeg": [1146, 1255], "jpg": [1146, 1223, 1226, 1227, 1255], "svg": [1146, 1206, 1215, 1255], "browser": [1146, 1165, 1221, 1238, 1253, 1255], "firefox": [1146, 1255], "chrome": [1146, 1255], "chromium": [1146, 1255], "ifram": [1146, 1255], "iframe_connect": [1146, 1255], "sphinx_galleri": [1146, 1255], "sphinx_gallery_png": [1146, 1255], "_get_interactive_cel": 1146, "_get_interactive_dash_app": 1146, "overlai": [1146, 1147, 1148, 1149, 1150, 1154, 1159, 1160, 1197], "interactive_plot": [1146, 1246], "interactive_app": 1146, "NO": [1147, 1162, 1163, 1164, 1165, 1170], "poorli": [1147, 1150], "visibl": [1147, 1150, 1247, 1251, 1255], "ipywidget": [1147, 1148, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "graph_obj": 1147, "_figur": 1147, "180": 1148, "video": [1151, 1152, 1157, 1167, 1224, 1226, 1227, 1238, 1247], "gif": [1151, 1152, 1153, 1156, 1157, 1158, 1224, 1226], "morpholgi": 1151, "export": 1151, "ascii": [1151, 1241], "camera_posit": [1151, 1159, 1160], "camera": [1151, 1159, 1255], "azim": [1151, 1159, 1249], "elev": [1151, 1159, 1249], "roll": [1151, 1159], "toolkit": [1151, 1238], "mplot3d": 1151, "view_angl": 1151, "neuron_rot": 1151, "azimuth": 1151, "dpi": [1151, 1159, 1160, 1256], "qualiti": [1151, 1157, 1159, 1212, 1224, 1227], "show_synaps": [1151, 1152, 1153, 1154, 1156, 1157, 1251, 1253], "synapse_legend": [1151, 1159, 1160], "legend": [1151, 1153, 1154, 1156, 1157, 1159, 1160, 1172, 1176, 1247, 1249, 1252, 1256], "highlight_arrow_kwarg": [1151, 1222, 1224], "arrow": [1151, 1153, 1156, 1157, 1159, 1216, 1217, 1218, 1219, 1222, 1224, 1255], "_as_gen": [1151, 1159], "patch": [1151, 1159, 1249], "synapse_group_funct": 1151, "population_to_color_dict": [1151, 1159, 1160, 1251, 1253], "_write_png_timeseri": 1151, "overwrite_fram": [1151, 1152, 1153, 1156, 1157, 1247], "show_legend": [1151, 1152, 1153, 1154, 1156, 1157, 1247, 1248], "highlight_sect": [1151, 1152, 1153, 1154, 1156, 1157, 1222, 1224], "highlight_x": [1151, 1152, 1153, 1154, 1156, 1157, 1159, 1222, 1224], "write_gif": 1151, "images_path": [1151, 1153, 1156, 1157, 1247, 1248, 1251, 1253], "tpf": [1151, 1153, 1156, 1157], "write_video": 1151, "codec": [1151, 1157, 1224, 1227], "out_dir": [1151, 1155, 1158, 1233, 1235, 1236], "n_decim": [1151, 1158, 1233, 1236], "to_vtk": 1151, "bit": [1152, 1156, 1247, 1251], "display_animation_from_imag": [1153, 1220, 1224], "visualization_start": 1153, "distrubt": 1153, "highlight": [1153, 1154, 1156, 1157, 1222, 1224, 1246, 1248, 1255], "cam": 1154, "dir": [1156, 1157, 1226, 1227], "mpeg4": [1157, 1227], "framer": 1157, "mpeg": 1157, "mpeg2video": 1157, "mpeg1video": 1157, "mjpeg": 1157, "libxvid": 1157, "msmpeg4": 1157, "decim": [1158, 1246, 1247, 1248, 1249, 1250, 1251, 1253], "lookup_t": [1159, 1160, 1233, 1236], "color_keyword": [1159, 1160], "highlight_section_kwarg": [1159, 1160], "sec_n": 1159, "arrow_arg": 1159, "return_figax": [1159, 1160], "proj_typ": [1159, 1160], "ortho": 1159, "cellmorphologyvisu": [1159, 1160, 1210, 1222, 1236, 1246, 1247, 1248, 1251, 1253], "linecollect": 1159, "joinstyl": 1159, "cellmorphologyinteractivevisu": [1160, 1246], "cmvdatapars": 1160, "get_3d_plot_morphologi": 1160, "cell_to_ipython_anim": [1161, 1162, 1163, 1165, 1166, 1167, 1169, 1170, 1171, 1206], "lines_object": 1161, "xlim": [1161, 1163, 1168, 1169, 1170, 1184, 1187, 1191, 1195, 1211, 1214, 1247, 1251, 1252], "1500": [1161, 1169, 1170, 1247, 1251, 1252], "launch": [1161, 1242, 1253], "idea": 1161, "draw": [1161, 1216, 1222, 1224, 1249, 1255], "bastib": 1161, "2013": [1161, 1162, 1163, 1164, 1165, 1170, 1237], "base64": [1162, 1165, 1220], "emb": [1162, 1165, 1220, 1221, 1249, 1250, 1251], "jakevdp": [1162, 1220], "jsanim": [1162, 1168, 1220], "blob": [1162, 1220], "html_writer": [1162, 1220], "jake": [1162, 1163, 1164, 1165, 1170], "vanderpla": [1162, 1163, 1164, 1165, 1170], "permit": [1162, 1163, 1164, 1165, 1170], "met": [1162, 1163, 1164, 1165, 1170, 1247], "notic": [1162, 1163, 1164, 1165, 1170], "disclaim": [1162, 1163, 1164, 1165, 1170], "materi": [1162, 1163, 1164, 1165, 1170], "BY": [1162, 1163, 1164, 1165, 1170], "THE": [1162, 1163, 1164, 1165, 1170], "holder": [1162, 1163, 1164, 1165, 1170], "AND": [1162, 1163, 1164, 1165, 1170], "contributor": [1162, 1163, 1164, 1165, 1170], "AS": [1162, 1163, 1164, 1165, 1170], "express": [1162, 1163, 1164, 1165, 1170, 1248, 1254, 1255], "OR": [1162, 1163, 1164, 1165, 1170], "BUT": [1162, 1163, 1164, 1165, 1170], "TO": [1162, 1163, 1164, 1165, 1170], "OF": [1162, 1163, 1164, 1165, 1170], "IN": [1162, 1163, 1164, 1165, 1170], "shall": [1162, 1163, 1164, 1165, 1170], "BE": [1162, 1163, 1164, 1165, 1170], "liabl": [1162, 1163, 1164, 1165, 1170], "indirect": [1162, 1163, 1164, 1165, 1170], "incident": [1162, 1163, 1164, 1165, 1170], "consequenti": [1162, 1163, 1164, 1165, 1170], "damag": [1162, 1163, 1164, 1165, 1170], "procur": [1162, 1163, 1164, 1165, 1170], "substitut": [1162, 1163, 1164, 1165, 1170], "profit": [1162, 1163, 1164, 1165, 1170], "busi": [1162, 1163, 1164, 1165, 1170], "ON": [1162, 1163, 1164, 1165, 1170], "theori": [1162, 1163, 1164, 1165, 1170], "liabil": [1162, 1163, 1164, 1165, 1170], "contract": [1162, 1163, 1164, 1165, 1170], "strict": [1162, 1163, 1164, 1165, 1170], "tort": [1162, 1163, 1164, 1165, 1170], "neglig": [1162, 1163, 1164, 1165, 1170], "aris": [1162, 1163, 1164, 1165, 1170], "IF": [1162, 1163, 1164, 1165, 1170], "advis": [1162, 1163, 1164, 1165, 1170], "SUCH": [1162, 1163, 1164, 1165, 1170], "245": [1163, 1251, 1252, 1253], "310": 1163, "tstep": [1163, 1168, 1247, 1251], "plot_synaptic_input": [1163, 1168], "1600": 1163, "get_default_axi": 1163, "cell_to_anim": [1164, 1168, 1169, 1247, 1251], "style": [1165, 1168, 1213, 1221, 1224, 1242, 1246, 1247, 1248, 1249, 1250], "animid": [1165, 1168, 1221, 1224], "html_templat": 1165, "embedd": 1165, "time_index": [1167, 1168], "plot_lin": [1167, 1168, 1172], "proivd": 1168, "anmat": 1168, "bsd": 1168, "claus": 1168, "display_anim": [1168, 1247, 1251], "find_closest_index": 1168, "get_lin": [1168, 1171], "init_fig": 1168, "plot_lines_fun": 1168, "parallelmoviemak": 1168, "generate_lin": 1170, "current_visu": [1172, 1173, 1174, 1175, 1176, 1206, 1247], "cell_or_dict": 1172, "depolarizing_curr": [1172, 1173], "hyperpolarizing_curr": [1172, 1173], "depolarizing_currents_sum": [1172, 1173], "hyperpolarizing_currents_sum": [1172, 1173], "net_curr": [1172, 1173], "depolarizing_currents_norm": [1172, 1173], "hyperpolarizing_currents_norm": [1172, 1173], "_get_current_by_rv": 1172, "rv": [1172, 1174, 1177, 1247], "_compute_current_arrai": 1172, "plot_area": [1172, 1177, 1247], "plot_net": [1172, 1175], "plot_voltag": [1172, 1175, 1247], "t_stim": [1172, 1175, 1247], "select_window_relative_to_stim": [1172, 1175], "visul": [1177, 1206], "record_rangevar": [1177, 1247], "record_var": [1177, 1247], "biophysical_paramet": [1177, 1246, 1247], "currentanalysi": [1177, 1247], "schemat": [1178, 1202], "set_xlabel": [1178, 1247, 1248, 1250, 1252, 1256], "dendrogram_db": [1178, 1184, 1191, 1200, 1201], "_dendrogramsect": [1178, 1180, 1184, 1191, 1192, 1200, 1201], "dendrogram_db_by_nam": 1178, "dendrogram_db_by_sec_id": 1178, "main_bifur_dist": 1178, "get_parent_by_nam": 1178, "_plot_dendrogram": 1178, "dendogram": [1178, 1179], "alon": [1179, 1188, 1237], "dendrogramstatist": [1179, 1189, 1202], "dendrogram": [1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1206], "composit": 1182, "dend_statist": 1182, "_dendrogramdendritestatist": 1182, "syn_statist": 1182, "_dendrogramsynapsestatist": 1182, "figsiz": [1182, 1183, 1207, 1208, 1209, 1247, 1248, 1250, 1252, 1256], "colormap_synaps": [1182, 1183, 1184, 1191], "alltogeth": [1183, 1184, 1191], "dendrite_dens": [1184, 1185, 1191, 1196], "_get_amount_of_dendrite_in_bin": 1184, "_plot_dendrite_hist": [1184, 1188], "_compute_dendrite_hist": 1184, "dist_end": [1184, 1185, 1193], "x_dist_start": 1189, "x_dist_end": 1189, "main_bifurc": 1189, "_add_synaps": [1189, 1191], "synapse_dens": [1191, 1193], "synapse_density_ap": [1191, 1193], "synapse_density_bas": [1191, 1193], "synapse_statist": [1191, 1194], "get_number_of_synapses_in_bin": 1191, "_compute_synapse_hist": 1191, "_compute_synapse_statist": 1191, "_plot_synapse_density_hist": 1191, "_plot_synapse_hist": 1191, "_plot_synapses_dendrogram_overlai": 1191, "amound": 1196, "furthest": 1201, "denddrit": 1202, "hist_bin": [1203, 1204, 1205], "groupby_attribut": [1203, 1205, 1207, 1208, 1209, 1211, 1212], "labela": 1203, "hist": [1203, 1204], "labelb": 1203, "longer": [1203, 1204, 1249], "histogram2": 1205, "rasterplot": [1206, 1213, 1214, 1252], "svg2emf": 1206, "path_to_inkscap": [1206, 1215], "emf": [1206, 1215], "word": [1206, 1215, 1249], "inkscap": [1206, 1215], "plot_hoc": 1206, "hoc_fil": [1206, 1210], "manylin": [1206, 1209], "lineplot": [1206, 1207], "voltage_trace_visu": [1206, 1229, 1230, 1246], "returnpixelobject": [1207, 1208], "manylines_help": 1207, "map_partit": [1207, 1209, 1251], "tupe": 1208, "maptlotlib": 1209, "instati": 1210, "rasterplot2": [1211, 1214], "x_offset": [1211, 1213, 1214], "y_offset": [1211, 1213], "y_plot_length": [1211, 1213], "marker": [1211, 1213, 1255], "rasterplot2_pdf_group": 1211, "grouplabel": [1211, 1214], "tlim": [1211, 1212], "reset_index": [1211, 1212], "bad": 1212, "solid_capstyl": 1213, "butt": 1213, "horizont": 1214, "usr": 1215, "gist": 1216, "wethat": 1216, "1d6cd0f7309535311a539b42cccca89c": 1216, "fancyarrowpatch": 1216, "_xyz": 1216, "_dxdydz": 1216, "do_3d_project": 1216, "axes3d": [1216, 1217, 1219], "arrow_s": [1222, 1224], "arrow3d": [1222, 1224], "midpoint": [1222, 1252], "files_format": [1223, 1224], "dir_a": 1223, "dir_b": 1223, "dir_c": 1223, "world": 1223, "hello": 1223, "write_video_from_imag": 1224, "out_path": [1224, 1226, 1227], "fp": [1224, 1227, 1252], "images_format": [1224, 1226, 1227], "auto_sort_path": [1224, 1226, 1227], "write_gif_from_imag": 1224, "find_files_and_order_them": 1224, "draw_arrow": 1224, "glob": [1227, 1255], "wildcard": 1227, "enabl": 1227, "visualize_vt": [1228, 1246], "soma_color": [1228, 1230], "dend_color": [1228, 1230], "bac_select": [1228, 1230], "lw": [1228, 1230, 1246, 1248, 1250], "hay_measur": [1229, 1230, 1246, 1248], "those": [1229, 1230, 1248], "f7941d": 1230, "surf_fil": [1231, 1232, 1233], "outnam": [1231, 1232, 1233], "lattic": [1231, 1233], "surf": [1232, 1233], "convert_amira_surf_to_vtk": 1233, "scalar_data": [1233, 1235], "scalar_data_nam": [1233, 1235], "cloud": [1233, 1234, 1235, 1237], "save_cells_landmark_files_vtk": [1233, 1251], "synapse_location_pdf": [1233, 1234], "tspan": [1233, 1234, 1251], "write_vtk_skeleton_fil": 1233, "point_scalar_data": [1233, 1236], "lookup": 1236, "werner": 1237, "van": 1237, "geit": 1237, "michael": 1237, "gevaert": 1237, "giusepp": 1237, "chindemi": 1237, "christian": 1237, "roessert": 1237, "jean": 1237, "deni": 1237, "courcol": 1237, "eilif": 1237, "muller": 1237, "felix": 1237, "schuermann": 1237, "idan": 1237, "henri": 1237, "markram": 1237, "leverag": 1237, "infrastructur": 1237, "neurosci": 1237, "frontier": 1237, "neuroinformat": 1237, "june": 1237, "3389": 1237, "fninf": 1237, "00017": 1237, "etai": 1237, "sean": 1237, "hill": 1237, "neocort": 1237, "5b": 1237, "perisomat": 1237, "plo": 1237, "biologi": 1237, "e1002107": 1237, "juli": 1237, "1371": 1237, "journal": 1237, "pcbi": 1237, "1002107": 1237, "jason": 1237, "guest": 1237, "riek": 1237, "fruengel": [1237, 1252], "rajeevan": 1237, "narayanan": 1237, "christiaan": 1237, "kock": 1237, "marcel": 1237, "thalamu": 1237, "biorxiv": 1237, "preprint": 1237, "citat": 1237, "bast2021": 1237, "465325": 1237, "tex": 1237, "eloc": 1237, "2021": 1237, "eprint": 1237, "07": 1237, "url": 1237, "1101": 1237, "andrea": 1237, "moritz": 1237, "helmstaedt": 1237, "arno": 1237, "schmitt": 1237, "dan": 1237, "yehuda": 1237, "mara": 1237, "almog": 1237, "hana": 1237, "ben": 1237, "porat": 1237, "bert": 1237, "sakmann": 1237, "korngreen": 1237, "gate": 1237, "gradient": 1237, "579": 1237, "737": 1237, "752": 1237, "march": 1237, "2007": [1237, 1248], "1113": 1237, "jphysiol": 1237, "2006": 1237, "122564": 1237, "sensori": [1237, 1252], "e1011468": 1237, "april": 1237, "2024": [1237, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253], "1011468": 1237, "That": 1237, "page": 1237, "67": [1237, 1241, 1246, 1247, 1248, 1249, 1250], "springer": 1237, "netherland": 1237, "dordrecht": 1237, "1994": [1237, 1252], "1007": 1237, "978": 1237, "94": [1237, 1248, 1249, 1251], "015": 1237, "8330": 1237, "5_4": 1237, "nichola": 1237, "neuroscientist": 1237, "135": [1237, 1252], "2001": 1237, "jack": 1237, "water": 1237, "fritjof": 1237, "helmchen": 1237, "spars": 1237, "neocortex": [1237, 1254], "8267": 1237, "8277": 1237, "august": 1237, "1523": 1237, "jneurosci": 1237, "2152": 1237, "06": [1237, 1246, 1251], "joerg": 1237, "huguenard": 1237, "sejnowski": 1237, "1427": 1237, "1439": [1237, 1251], "decemb": 1237, "1995": [1237, 1252], "1016": 1237, "0896": 1237, "6273": 1237, "90020": 1237, "sch\u00fcrmann": 1237, "preserv": 1237, "axosomat": 1237, "neurophysiologi": 1237, "109": 1237, "2972": 1237, "2981": 1237, "1152": 1237, "jn": 1237, "00048": 1237, "christof": 1237, "mit": 1237, "1998": [1237, 1252], "isbn": 1237, "262": 1237, "11231": 1237, "googl": 1237, "book": 1237, "5gmv2onekvsc": 1237, "robert": 1237, "vincent": 1237, "dercksen": [1237, 1255], "daniel": 1237, "han": 1237, "hege": 1237, "neuroanatomi": 1237, "2014": [1237, 1249, 1255], "fnana": 1237, "00129": 1237, "frontiersin": 1237, "articl": 1237, "philipp": 1237, "harth": 1237, "jakob": 1237, "mack": 1237, "impact": 1237, "architectur": 1237, "110677": 1237, "2022": [1237, 1249], "celrep": 1237, "dong": 1237, "brian": 1237, "concept": [1237, 1246], "acm": 1237, "transact": 1237, "graphic": [1237, 1246, 1247, 1248, 1251, 1253], "tog": 1237, "1984": [1237, 1252], "neurobiolog": [1238, 1253], "tractabl": [1238, 1253], "mechanist": 1238, "manipul": 1238, "molecular": 1238, "biolog": [1238, 1248], "concret": 1238, "testabl": 1238, "guid": [1238, 1246, 1248, 1249], "custom": 1241, "vpm_e1": [1241, 1249, 1250], "synapse_ralization_fil": 1241, "l6cc_a3": [1241, 1249, 1250], "trail": [1241, 1251], "quot": 1241, "higher": [1241, 1255], "anatomical_constraint": [1241, 1246, 1248, 1249, 1250, 1251, 1256], "ra": [1241, 1246, 1256], "ek": [1241, 1246, 1256], "ena": [1241, 1246, 1256], "26e": [1241, 1246, 1256], "gca_lvastbar": [1241, 1246, 1248, 1256], "00462": [1241, 1246, 1256], "apical_proximal_distal_rec_sit": [1241, 1246, 1256], "cellnr": 1241, "connectionfil": 1241, "distributionfil": 1241, "gaba_syn": 1241, "downstream": 1241, "facilit": 1241, "evoked_act": [1241, 1250], "cell_type_1": 1241, "274": 1241, "945": 1241, "1145": 1241, "4357770278148136": 1241, "0890981376857083": 1241, "7588271630292192": 1241, "glutamate_syn": [1241, 1250], "5480934081344324": 1241, "presyn_cel": 1241, "syn_loc": 1241, "cell_type_2": 1241, "l4ss_b1": [1241, 1250], "0004": 1241, "0062": 1241, "0129": 1241, "l4ss_b2": [1241, 1250], "common": [1241, 1253], "presyn_cell_type_1": 1241, "140": [1241, 1252], "presyn_cell_type_2": 1241, "553": 1241, "Not": [1241, 1249], "induc": [1241, 1254], "write_presynaptic_spike_fil": 1241, "unlik": 1241, "1747143695": 1241, "1580037786": 1241, "1424366078": 1241, "075": 1241, "4814187507": 1241, "1153403448": 1241, "1279980017": 1241, "000": [1241, 1248], "trial_0": 1241, "017715": 1241, "033995": 1241, "04979": 1241, "trial_1": 1241, "017722": 1241, "034002": 1241, "049797": 1241, "piec": 1241, "pt3dadd": 1241, "pt3dclear": 1241, "933390": 1241, "045990": 1241, "542000": 1241, "321820": 1241, "046997": 1241, "449": 1241, "989990": 1241, "309400": 1241, "961900": 1241, "599700": 1241, "basaldendrite_1_0": 1241, "369640": 1241, "040000": 1241, "341550": 1241, "proprietari": 1241, "slice": [1241, 1252], "linux": 1242, "maco": 1242, "pixi": [1242, 1249, 1253, 1255], "curl": 1242, "fssl": 1242, "sh": 1242, "clone": 1242, "mpinb": 1242, "in_silico_framework": [1242, 1246, 1250, 1253, 1255, 1256], "cd": 1242, "launch_dask_serv": [1242, 1253], "launch_dask_work": [1242, 1253], "launch_jupyter_lab_serv": 1242, "feel": [1242, 1253], "suit": 1242, "shell": 1242, "script": 1242, "pyproject": 1242, "toml": 1242, "job": 1242, "submiss": 1242, "outlin": [1246, 1247, 1256], "satisfi": 1246, "tutorial_output_dir": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "home": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "isf_tutorial_output": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "inlin": [1246, 1247, 1248, 1249, 1250, 1252, 1255, 1256], "neuron_model": [1246, 1247, 1248], "g1077bcf8": [1246, 1247], "227340": 1246, "attent": [1246, 1247, 1248, 1249, 1250], "__version__": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "pil": [1246, 1247, 1248, 1249, 1250, 1251, 1253, 1255], "_brotli": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "_csv": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "_ctype": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "_curs": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "_decim": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "argpars": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "backcal": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "blosc": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "brotli": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "certifi": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "08": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "cffi": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "charset_norm": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "click": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "colorama": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "comm": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "ctype": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "cycler": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "cytoolz": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "dateutil": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "debugpi": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "defusedxml": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "distutil": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "django": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "entrypoint": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "flask": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "fsspec": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "greenlet": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "idna": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "ipaddress": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "ipykernel": [1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253], "isf_pandas_msgpack": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "itsdanger": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "jedi": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "jinja2": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "jupyter_cli": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "jupyter_cor": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "kiwisolv": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "markupsaf": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "matplotlib_inlin": [1246, 1249], "numcodec": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "numexpr": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "parso": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "pexpect": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "pickleshar": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "platform": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "platformdir": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "prompt_toolkit": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "psutil": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "ptyprocess": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "pure_ev": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "pydevd": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "pypars": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "pytz": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "scandir": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "seaborn": [1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253], "six": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "sklearn": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "socketserv": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "sock": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "sortedcontain": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "stack_data": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "statsmodel": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "sumatra": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "tblib": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "tlz": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "toolz": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "tqdm": [1246, 1247, 1248, 1249, 1250], "traitlet": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "urllib3": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "wcwidth": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "werkzeug": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "zlib": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "zmq": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "zstandard": [1246, 1247, 1248, 1249, 1250, 1251, 1253], "example_data_dir": [1246, 1247, 1248, 1249, 1256], "ast": 1246, "pprint": 1246, "cell_param_fil": [1246, 1256], "biophysical_constraint": [1246, 1251, 1253, 1256], "86_c2_center": [1246, 1249, 1251, 1253, 1256], "pp": 1246, "literal_ev": 1246, "hay_2011_dend_test": [1246, 1256], "regger": [1246, 1256], "15oct2014": [1246, 1256], "gpf": [1246, 1248, 1251, 1253, 1255, 1256], "soma_f": [1246, 1248, 1251, 1253, 1255, 1256], "meulemeest": [1246, 1248, 1251, 1253, 1255, 1256], "project_src": [1246, 1253, 1255, 1256], "scale_apical_morph_86": [1246, 1256], "gca_hvabar": [1246, 1248, 1256], "000642": [1246, 1256], "gskv3_1bar": [1246, 1248, 1256], "983": [1246, 1256], "sk_e2": [1246, 1247, 1248, 1256], "gsk_e2bar": [1246, 1248, 1256], "0492": [1246, 1256], "k_tst": [1246, 1248, 1256], "gk_tstbar": [1246, 1248, 1256], "0471": [1246, 1256], "k_pst": [1246, 1248, 1256], "gk_pstbar": [1246, 1248, 1256], "nap_et2": [1246, 1248, 1256], "gnap_et2bar": [1246, 1248, 1256], "00499": [1246, 1256], "770": [1246, 1249, 1256], "000616": [1246, 1256], "ih": [1246, 1247, 1248, 1256], "gihbar": [1246, 1256], "8e": [1246, 1256], "31e": [1246, 1256], "0002": [1246, 1256], "82e": [1246, 1256], "0034": [1246, 1250, 1256], "104": [1246, 1252, 1256], "900": [1246, 1256], "1100": [1246, 1256], "00452": [1246, 1256], "133": [1246, 1252, 1256], "0005": [1246, 1256], "0112": [1246, 1256], "0252": [1246, 1256], "gimbar": [1246, 1248, 1256], "000179": [1246, 1256], "8696": [1246, 1256], "087": [1246, 1256], "6161": [1246, 1256], "56e": [1246, 1256], "00858": [1246, 1256], "000692": [1246, 1256], "958": [1246, 1256], "77e": [1246, 1256], "0841": [1246, 1256], "773": [1246, 1256], "00146": [1246, 1256], "088": [1246, 1256], "0175": [1246, 1256], "4e": [1246, 1256], "big": 1246, "logger": [1246, 1251, 1256], "setlevel": [1246, 1251, 1256], "1109": [1246, 1256], "15290": [1246, 1256], "79": [1246, 1252, 1256], "dendrite_length": 1246, "soma_area": 1246, "apic_area": 1246, "0f": 1246, "16340": 1246, "916": 1246, "16855": 1246, "cmiv": 1246, "auxiliari": [1246, 1248, 1255], "walkthrough": [1246, 1248], "showcas": 1246, "model_db": [1246, 1247, 1248], "simulation_data": [1246, 1247, 1248], "example_model": [1246, 1247, 1248], "iloc": [1246, 1247, 1248, 1252], "1369": 1246, "00471227": 1246, "281": [1246, 1248], "484": 1246, "00226783": 1246, "695": 1246, "0229926": 1246, "66599e": 1246, "000664151": 1246, "000443414": 1246, "172148": [1246, 1248], "00138693": 1246, "00474682": 1246, "72481e": 1246, "386035": 1246, "173312": 1246, "06864": 1246, "0475422": 1246, "0164207": 1246, "3257": 1246, "69863": 1246, "00747167": 1246, "00775383": 1246, "00336e": 1246, "0232935": 1246, "000241686": 1246, "000231903": 1246, "783382": 1246, "10522": 1246, "82322": 1246, "894344": 1246, "g_pa": [1246, 1248], "26842e": 1246, "61739e": 1246, "03134e": 1246, "02194e": 1246, "69117": 1246, "aspect": 1246, "gxbar": 1246, "skv3": 1246, "get_example_fixed_param": 1246, "get_fixed_param": [1246, 1248], "294": [1246, 1248, 1249], "8203371921156": [1246, 1248], "474": [1246, 1248], "hot_zon": [1246, 1248], "384": [1246, 1248], "584": [1246, 1248], "89_l5_cdk20050712_nr6l5b_dend_pc_neuron_transform_registered_c2": [1246, 1249], "hotzon": 1246, "small": [1246, 1247, 1251, 1252, 1255], "voltagetrac": 1246, "filethat": 1246, "strong": 1246, "fivethirtyeight": [1246, 1247, 1248, 1250], "lt": [1246, 1248, 1251, 1252, 1253, 1255], "line2d": [1246, 1252], "0x2ab6c65df160": 1246, "gt": [1246, 1247, 1248, 1251, 1252, 1253, 1255], "stand": 1246, "0x2ab6c6575790": 1246, "ran": 1246, "verifi": 1246, "especi": 1246, "dict_kei": [1246, 1250], "vtv": 1246, "great": 1246, "recor": 1246, "227965": 1247, "66002227": 1247, "8688259": 1247, "41371875": 1247, "0076752949319177": 1247, "936833063034726": 1247, "04207239994684291": 1247, "413835125674638": 1247, "6629272148325343": 1247, "31055111593054": 1247, "6933473353783755": 1247, "68694881": 1247, "42729689": 1247, "1392807122615114": 1247, "err": [1247, 1248], "143": 1247, "74912826015054": 1247, "check_minspikenum": [1247, 1248], "check_returning_to_rest": [1247, 1248], "check_no_spike_before_stimulu": [1247, 1248], "check_last_spike_before_deadlin": [1247, 1248], "check_max_prestim_dendrite_depo": [1247, 1248], "65989277": 1247, "7319785547438031": 1247, "98336221": 1247, "0332755883802065": 1247, "61344140808186": 1247, "check_1_ap": [1247, 1248], "check_relative_height": [1247, 1248], "2386558591918138": 1247, "018319507819953": 1247, "6057535361393405": 1247, "248": [1247, 1248, 1249], "30532972531503": 1247, "7045454545454546": 1247, "008210116836947173": 1247, "5066062458183707": 1247, "07166545818156783": 1247, "518210025496329": 1247, "55860401502662": 1247, "42387682153444994": 1247, "83428349013741": 1247, "5595241133692064": 1247, "09137071": 1247, "99574218": 1247, "78835239": 1247, "69107345": 1247, "68429012": 1247, "67564812": 1247, "6771194": 1247, "52439294": 1247, "60587203": 1247, "56109392": 1247, "51164211": 1247, "4663929": 1247, "52556049": 1247, "46631672": 1247, "40467648": 1247, "40949821": 1247, "42663761": 1247, "33953598": 1247, "30147383": 1247, "33121202": 1247, "36159536": 1247, "7275205487209074": 1247, "07277651": 1247, "62": 1247, "78005906": 1247, "6583248": 1247, "53651584": 1247, "52194432": 1247, "43449412": 1247, "32089897": 1247, "39006": 1247, "31048539": 1247, "33128433": 1247, "28978495": 1247, "31658177": 1247, "28410763": 1247, "30394597": 1247, "3336867": 1247, "30956485": 1247, "31995899": 1247, "31292736": 1247, "3652368": 1247, "8003008765264834": 1247, "67978109": 1247, "10984807": 1247, "25590053": 1247, "21579511": 1247, "11367589": 1247, "00336828": 1247, "86072748": 1247, "80277767": 1247, "68235573": 1247, "62529579": 1247, "56086612": 1247, "52874268": 1247, "48671966": 1247, "43637328": 1247, "41316377": 1247, "38445205": 1247, "35582907": 1247, "33716901": 1247, "35128974": 1247, "0151163975923705": 1247, "21629595": 1247, "19349339": 1247, "21138262": 1247, "21059077": 1247, "21985869": 1247, "22330926": 1247, "226997": 1247, "2386829": 1247, "24629334": 1247, "23097281": 1247, "24412891": 1247, "2647404": 1247, "24537822": 1247, "25003761": 1247, "24583298": 1247, "24744496": 1247, "25608634": 1247, "26335499": 1247, "25594333": 1247, "5495925224841391": 1247, "96198111": 1247, "93800774": 1247, "97709169": 1247, "94631752": 1247, "97689972": 1247, "95077889": 1247, "97062854": 1247, "9449781": 1247, "94071347": 1247, "95432122": 1247, "95311969": 1247, "932242": 1247, "98678948": 1247, "93568953": 1247, "95748403": 1247, "96239958": 1247, "95148441": 1247, "96229513": 1247, "95876679": 1247, "95203888": 1247, "94387863": 1247, "117487156301": 1247, "186": 1247, "063249205872": 1247, "01302293276553171": 1247, "9148094224163767": 1247, "1270919522564917": 1247, "5106508765351007": 1247, "335769758475635": 1247, "4694531512688596": 1247, "04291489923446": 1247, "125569753657245": 1247, "289338": 1247, "91487818": 1247, "00459579": 1247, "49166693": 1247, "29761099": 1247, "21175384": 1247, "25860675": 1247, "2450473": 1247, "26937709": 1247, "14045844": 1247, "22940218": 1247, "18828798": 1247, "08730248": 1247, "09746412": 1247, "02329864": 1247, "00543709": 1247, "02109181": 1247, "95402584": 1247, "0333001": 1247, "00324597": 1247, "94894466": 1247, "94920213": 1247, "92281833": 1247, "88771034": 1247, "88948634": 1247, "84765357": 1247, "89441045": 1247, "77926653": 1247, "82714999": 1247, "9342151521837061": 1247, "31954044": 1247, "99594263": 1247, "62724758": 1247, "40615908": 1247, "20911732": 1247, "17715377": 1247, "09167612": 1247, "07826386": 1247, "96563229": 1247, "0238239": 1247, "00215742": 1247, "93515078": 1247, "90298672": 1247, "90306708": 1247, "89143113": 1247, "89131561": 1247, "89810665": 1247, "95373015": 1247, "93932434": 1247, "9037699": 1247, "95375415": 1247, "95347455": 1247, "93760715": 1247, "94996851": 1247, "95934734": 1247, "99514349": 1247, "95610612": 1247, "4198796199388009": 1247, "69571127": 1247, "50916915": 1247, "79705684": 1247, "91073606": 1247, "7546071": 1247, "61809871": 1247, "47858224": 1247, "35608982": 1247, "23057261": 1247, "10762341": 1247, "06436578": 1247, "98290703": 1247, "93966353": 1247, "85511224": 1247, "81083838": 1247, "76599192": 1247, "73416086": 1247, "72949083": 1247, "69477853": 1247, "65643276": 1247, "64104844": 1247, "61903164": 1247, "58479313": 1247, "58183362": 1247, "55295009": 1247, "55902855": 1247, "52938553": 1247, "3243466774696222": 1247, "14440786": 1247, "10149109": 1247, "23006425": 1247, "23913882": 1247, "23972689": 1247, "22124587": 1247, "26057754": 1247, "26478589": 1247, "26298941": 1247, "27062517": 1247, "2596264": 1247, "26580278": 1247, "2734945": 1247, "28501231": 1247, "26285161": 1247, "28442103": 1247, "27858236": 1247, "26828522": 1247, "29121099": 1247, "28293423": 1247, "27761429": 1247, "29550939": 1247, "26738561": 1247, "28966649": 1247, "25861875": 1247, "27133896": 1247, "29678496": 1247, "01641064338122": 1247, "94586939": 1247, "91959924": 1247, "94497682": 1247, "94000711": 1247, "97506431": 1247, "96358534": 1247, "94363674": 1247, "93621152": 1247, "95582546": 1247, "95260643": 1247, "97758583": 1247, "94832052": 1247, "93123934": 1247, "9398469": 1247, "93592603": 1247, "93713813": 1247, "94962583": 1247, "96446361": 1247, "93927337": 1247, "9493291": 1247, "9349232": 1247, "96418846": 1247, "94105855": 1247, "9350136": 1247, "95549361": 1247, "96590542": 1247, "94363678": 1247, "93346691": 1247, "95732679": 1247, "5324457777590226": 1247, "183": [1247, 1252], "82534769658955": 1247, "2500225002250023": 1247, "009023622914987494": 1247, "701393428841344": 1247, "15152925677739668": 1247, "009232626956906": 1247, "828677080833472": 1247, "950213350401774": 1247, "333930069455391": 1247, "08393006945539128": 1247, "06548527": 1247, "12701956": 1247, "61311489": 1247, "73688262": 1247, "21078341": 1247, "57937786": 1247, "04672383": 1247, "76563028": 1247, "64813921": 1247, "55610157": 1247, "42377868": 1247, "4599674": 1247, "45969288": 1247, "43528102": 1247, "174338": 1247, "30478441": 1247, "35465197": 1247, "28209844": 1247, "22536986": 1247, "27072808": 1247, "15914034": 1247, "19224602": 1247, "15232081": 1247, "14372265": 1247, "13439816": 1247, "07233316": 1247, "11473716": 1247, "03663349": 1247, "0170812": 1247, "05731578": 1247, "03805308": 1247, "00040917": 1247, "95123863": 1247, "94288751": 1247, "95577528": 1247, "95158293": 1247, "93562061": 1247, "92758261": 1247, "78689311": 1247, "87964998": 1247, "87197628": 1247, "83337694": 1247, "81677821": 1247, "84509897": 1247, "72888495": 1247, "79162615": 1247, "76673602": 1247, "77400936": 1247, "76127948": 1247, "80455543": 1247, "74585616": 1247, "75381166": 1247, "72279777": 1247, "77130918": 1247, "69740275": 1247, "592363621161479": 1247, "49147803": 1247, "19511496": 1247, "72814944": 1247, "28446636": 1247, "75978386": 1247, "31762381": 1247, "01314808": 1247, "81151239": 1247, "67912156": 1247, "52746746": 1247, "53372268": 1247, "48151412": 1247, "44317895": 1247, "18392669": 1247, "31955776": 1247, "34059709": 1247, "298159": 1247, "263136": 1247, "28501073": 1247, "1924222": 1247, "25948116": 1247, "24707285": 1247, "21552421": 1247, "22883443": 1247, "2118771": 1247, "244356": 1247, "18499324": 1247, "2022267": 1247, "23005033": 1247, "25431815": 1247, "26227308": 1247, "23695933": 1247, "22131564": 1247, "26720735": 1247, "29679708": 1247, "27592727": 1247, "29552467": 1247, "22672025": 1247, "29066048": 1247, "313126": 1247, "31248887": 1247, "2925893": 1247, "3463166": 1247, "25238435": 1247, "3302365": 1247, "35249597": 1247, "37554333": 1247, "36903818": 1247, "38429871": 1247, "39394615": 1247, "37696266": 1247, "39843727": 1247, "45272127": 1247, "1277531070124256": 1247, "3132864": 1247, "88864277": 1247, "77676612": 1247, "69415586": 1247, "30304238": 1247, "98434918": 1247, "72257492": 1247, "51480139": 1247, "46581423": 1247, "27360188": 1247, "30502217": 1247, "21105122": 1247, "18140053": 1247, "9297075": 1247, "08423894": 1247, "03726704": 1247, "01453674": 1247, "98993216": 1247, "93277795": 1247, "89552556": 1247, "91701656": 1247, "92733511": 1247, "86207856": 1247, "79412642": 1247, "77317544": 1247, "86225267": 1247, "76805902": 1247, "80739407": 1247, "8257073": 1247, "77714064": 1247, "74146828": 1247, "73339037": 1247, "83316817": 1247, "84775185": 1247, "85289352": 1247, "8342664": 1247, "86712761": 1247, "73352912": 1247, "73979828": 1247, "84408651": 1247, "77256854": 1247, "81154729": 1247, "80507675": 1247, "78089181": 1247, "76471253": 1247, "79733875": 1247, "74039751": 1247, "80519001": 1247, "83571012": 1247, "7251643": 1247, "81061982": 1247, "81074666": 1247, "82644007": 1247, "09246104391805444": 1247, "36279071": 1247, "30161064": 1247, "2484799": 1247, "19095867": 1247, "16237276": 1247, "13911125": 1247, "12780075": 1247, "12544222": 1247, "11718686": 1247, "12136835": 1247, "11837248": 1247, "12196111": 1247, "12127243": 1247, "12714399": 1247, "121469": 1247, "12636774": 1247, "12568368": 1247, "12529812": 1247, "13047645": 1247, "12941498": 1247, "13028479": 1247, "12950152": 1247, "13214559": 1247, "13703346": 1247, "13802471": 1247, "13345267": 1247, "13726805": 1247, "13487522": 1247, "13450501": 1247, "13951205": 1247, "14203114": 1247, "14143575": 1247, "13531704": 1247, "13557297": 1247, "13556914": 1247, "13666068": 1247, "13540744": 1247, "14145944": 1247, "14279928": 1247, "13822604": 1247, "14193758": 1247, "13887647": 1247, "14073416": 1247, "13959887": 1247, "14259464": 1247, "14216232": 1247, "14713721": 1247, "14205005": 1247, "14046243": 1247, "14771324": 1247, "14297933": 1247, "14214369": 1247, "14378104": 1247, "109119864685762": 1247, "98531213": 1247, "91123546": 1247, "94754453": 1247, "92717859": 1247, "92242316": 1247, "95287909": 1247, "92477266": 1247, "92511115": 1247, "95809013": 1247, "93476667": 1247, "94955365": 1247, "94920487": 1247, "93034679": 1247, "95285811": 1247, "93205066": 1247, "94868883": 1247, "93788963": 1247, "94364911": 1247, "93710963": 1247, "94210618": 1247, "96209178": 1247, "93310596": 1247, "96895262": 1247, "94518157": 1247, "95295191": 1247, "93313142": 1247, "93405116": 1247, "95356331": 1247, "94557525": 1247, "95123666": 1247, "9397376": 1247, "94528431": 1247, "94698763": 1247, "96069676": 1247, "95914107": 1247, "95262626": 1247, "95051096": 1247, "929552": 1247, "93727957": 1247, "92652508": 1247, "96162485": 1247, "94524348": 1247, "92878712": 1247, "92922577": 1247, "95214297": 1247, "95807564": 1247, "95623037": 1247, "95059179": 1247, "94546294": 1247, "94579291": 1247, "94372633": 1247, "9617165": 1247, "9415482": 1247, "94118213": 1247, "933252": 1247, "234564571206278": 1247, "179": 1247, "370143914727": 1247, "explanatori": 1247, "cryptic": 1247, "sigma_mean": 1247, "1bac": 1247, "translate_object": 1247, "step_map": 1247, "ordereddict": 1247, "rcparam": [1247, 1248], "prop_cycl": [1247, 1248], "by_kei": [1247, 1248], "add_gridspec": 1247, "ax1": [1247, 1252], "add_subplot": [1247, 1249, 1252, 1256], "ax2": [1247, 1252], "ax3": [1247, 1252], "elif": [1247, 1252], "barh": 1247, "zorder": 1247, "vline": 1247, "set_titl": [1247, 1248, 1250], "gca": [1247, 1252], "get_legend_handles_label": 1247, "by_label": 1247, "loc": [1247, 1248, 1249, 1251, 1252, 1256], "tight_layout": [1247, 1250, 1252], "did": [1247, 1248, 1250], "biophysical_parameter_nam": [1247, 1248], "ina": [1247, 1248], "ik": [1247, 1248], "ihcn": [1247, 1248], "set_size_inch": 1247, "orang": [1247, 1253], "i_": 1247, "int_x": 1247, "short": 1247, "burst_trail_video": [1247, 1248], "8211": [1247, 1248, 1251, 1253], "although": [1247, 1255], "button": [1247, 1255], "cycl": 1247, "faster": [1247, 1249], "mre": 1247, "burst_trail_video_3d": [1247, 1248], "cmv": [1247, 1248, 1251, 1253], "aren": 1247, "burst_trail_ca_current_video": [1247, 1248], "ca_lvast_video_3d": [1247, 1248], "rdbu": 1247, "2e": 1247, "comparment": 1248, "pro": 1248, "bdm": 1248, "getting_started_dir": [1248, 1249, 1250, 1251, 1253, 1255], "gbb14e30d": 1248, "250365": 1248, "drop": [1248, 1252, 1253, 1256], "sk_v3": 1248, "thick": [1248, 1249, 1255], "explain": [1248, 1252], "333": 1248, "sort_index": [1248, 1252], "00000": 1248, "00050": 1248, "05000": 1248, "00500": 1248, "00100": 1248, "20000": 1248, "01000": 1248, "04000": 1248, "00003": 1248, "00010": 1248, "00002": 1248, "00005": 1248, "33300": 1248, "hay_setup": 1248, "params_modify_funs_after_cell_gener": 1248, "set_up_db_for_moea": 1248, "morphology_id": 1248, "shutil": [1248, 1249, 1251, 1253], "sep": [1248, 1255], "morphology_path": [1248, 1249], "89_c2": 1248, "0x2b6ac67a19a0": 1248, "rw_exploration_exampl": 1248, "bfit_start_run": 1248, "preivoiu": 1248, "247": 1248, "723719": 1248, "247603": 1248, "249": 1248, "664128": 1248, "86503410206352": 1248, "573007": 1248, "243": 1248, "919564": 1248, "995773": 1248, "537994": 1248, "246": 1248, "651239": 1248, "158216": 1248, "546677": 1248, "18474967506085127": 1248, "963050": 1248, "244": 1248, "294466": 1248, "793552": 1248, "348300": 1248, "131673": 1248, "331860": 1248, "880194": 1248, "247658": 1248, "329374": 1248, "915740": 1248, "48873193409531": 1248, "497746": 1248, "242": 1248, "681292": 1248, "466243": 1248, "452332": 1248, "397994": 1248, "223281": 1248, "805852": 1248, "099842": 1248, "330868": 1248, "873099": 1248, "422501": 1248, "208826": 1248, "675405": 1248, "flatlin": 1248, "howver": 1248, "exhibit": 1248, "objectives_std": 1248, "empirical_data": 1248, "730": 1248, "5400": 1248, "2700": 1248, "0100": 1248, "3300": 1248, "obvious": 1248, "again": [1248, 1250, 1251, 1252, 1256], "got": [1248, 1255], "diff": [1248, 1252], "vert": 1248, "set_xscal": 1248, "bac_bifurcation_charg": 1248, "n_suggest": 1248, "136941": 1248, "004712": 1248, "483947": 1248, "002268": 1248, "694969": 1248, "022993": 1248, "000006": 1248, "000664": 1248, "000443": 1248, "327926": 1248, "125072": 1248, "008035": 1248, "008034": 1248, "076292": 1248, "558079": 1248, "090741": 1248, "004497": 1248, "461630": 1248, "002050": 1248, "91": [1248, 1252], "323819": 1248, "023132": 1248, "000022": 1248, "000668": 1248, "000445": 1248, "171266": 1248, "347116": 1248, "146069": 1248, "032371": 1248, "008043": 1248, "078511": 1248, "624398": 1248, "140835": 1248, "004243": 1248, "280": 1248, "558319": 1248, "002085": 1248, "416916": 1248, "023266": 1248, "000044": 1248, "000671": 1248, "171614": 1248, "367618": 1248, "149355": 1248, "063454": 1248, "008050": 1248, "075175": 1248, "791949": 1248, "040827": 1248, "004158": 1248, "350880": 1248, "002013": 1248, "92": [1248, 1252], "144582": 1248, "022963": 1248, "000073": 1248, "000444": 1248, "172023": 1248, "342807": 1248, "116513": 1248, "108821": 1248, "007992": 1248, "075548": 1248, "811305": 1248, "865605": 1248, "003981": 1248, "282": 1248, "074662": 1248, "001969": 1248, "770400": 1248, "022873": 1248, "000095": 1248, "000665": 1248, "000447": 1248, "171751": 1248, "301322": 1248, "043190": 1248, "147240": 1248, "007872": 1248, "082982": 1248, "670060": 1248, "399": [1248, 1252], "proven": 1248, "broadli": 1248, "biophysical_parameter_rang": 1248, "doesn": 1248, "mere": 1248, "restart": [1248, 1249], "pick": 1248, "proc": 1248, "kill": 1248, "send": [1248, 1251], "explored_model": 1248, "mn": 1248, "mx": 1248, "normalized_startpoint": 1248, "normalized_explored_model": 1248, "calc": 1248, "startpoint": 1248, "melt": 1248, "var_nam": 1248, "value_nam": 1248, "sn": [1248, 1252, 1253, 1255, 1256], "boxplot": 1248, "whi": 1248, "showcap": 1248, "iterrow": 1248, "f_": 1248, "bac_respons": 1248, "soma_voltag": 1248, "dend_voltag": 1248, "plot_trac": 1248, "highlight_id": 1248, "titl": [1248, 1249, 1252, 1255], "silver": 1248, "set_ylabel": [1248, 1250, 1252, 1256], "set_xlim": [1248, 1252], "random_model": 1248, "randint": 1248, "subplot": [1248, 1250], "broad": 1248, "fhwich": 1248, "intrins": 1248, "network_model": [1249, 1250, 1251], "gebc00ec75": [1249, 1250], "100207": 1249, "extern": 1249, "resourc": 1249, "neuromorph": 1249, "bc": [1249, 1254], "anatomy_dir": 1249, "86_l5_cdk20041214_nr3l5b_dend_pc_neuron_transform_registered_c2center_scaled_diamet": 1249, "86_l5_cdk20041214_nr3l5b_dend_pc_neuron_transform_registered_c2cent": 1249, "swc": 1249, "example_embedding_86_c2_cent": 1249, "presynaptic_somata_soma_loc": 1249, "path_to_hoc": 1249, "path_to_scaled_hoc": 1249, "axo": 1249, "hood": 1249, "hr": 1249, "sake": 1249, "path_to_anatomical_model": 1249, "dir_util": 1249, "copy_tre": 1249, "bgmeulem": [1249, 1250], "thank": 1249, "delayed_map_singlecell_input": 1249, "bundl": [1249, 1255], "somata": 1249, "skiprow": 1249, "l45peak_d1": [1249, 1250], "626": 1249, "213": [1249, 1255], "344": 1249, "270": 1249, "l45peak": [1249, 1250, 1251], "834": [1249, 1255], "905": 1249, "013": 1249, "762": 1249, "233": 1249, "114": 1249, "434": 1249, "423": 1249, "010": 1249, "156": [1249, 1251], "002": 1249, "765": [1249, 1251], "145": [1249, 1252], "499": 1249, "241": 1249, "157": [1249, 1252], "19699": [1249, 1251], "l34_d3": [1249, 1250], "292": 1249, "485": 1249, "718": 1249, "024": 1249, "122": 1249, "828": 1249, "19700": [1249, 1251], "293": 1249, "525": [1249, 1251], "608": 1249, "190": 1249, "240": [1249, 1251], "19701": [1249, 1251], "586": 1249, "649": 1249, "160": 1249, "437": 1249, "98": 1249, "395": [1249, 1252], "19702": [1249, 1251], "275": 1249, "697": 1249, "189": 1249, "550": 1249, "319": 1249, "19703": [1249, 1251], "296": 1249, "588": 1249, "751": 1249, "494": 1249, "253": [1249, 1251], "711": 1249, "19704": [1249, 1251], "ggplot": 1249, "set_facecolor": 1249, "get_facecolor": 1249, "view_init": 1249, "scatter": [1249, 1252], "bbox_to_anchor": [1249, 1252], "frameon": 1249, "ncol": 1249, "recogniz": 1249, "synas": 1249, "con_file_path": [1249, 1250], "syn_file_path": [1249, 1250], "distil": 1249, "reli": 1249, "u": [1250, 1251], "characterist": 1250, "synasps": 1250, "syn_fil": 1250, "102453": 1250, "ongoing_template_param_nam": 1250, "ongoing_activity_celltype_template_exc_conductances_fit": 1250, "ongoing_template_param": 1250, "l4sp": [1250, 1251, 1253], "l4ss": [1250, 1251, 1253], "l6ccinv": [1250, 1251, 1253], "l1": [1250, 1251, 1253], "l23tran": [1250, 1251], "l45sym": [1250, 1251], "l56tran": [1250, 1251], "symlocal1": [1250, 1251], "symlocal2": [1250, 1251], "symlocal3": [1250, 1251], "symlocal4": [1250, 1251], "symlocal5": [1250, 1251], "symlocal6": [1250, 1251], "chanc": 1250, "arc": [1250, 1254], "evokedprefix": 1250, "excitatory_psth": 1250, "psth_upstat": 1250, "inhibitory_psth": 1250, "active_timing_normalized_pw_1": 1250, "0_suw_0": 1250, "l2_3x3_psth_upstat": 1250, "l34_3x3_psth_upstat": 1250, "l4py_3x3_psth_upst": 1250, "l4sp_3x3_psth_upstat": 1250, "l4ss_3x3_psth_upstat": 1250, "l5st_3x3_psth_upstat": 1250, "l5tt_3x3_psth_upstat": 1250, "l6cc_3x3_psth_upstat": 1250, "l6ccinv_3x3_psth_upst": 1250, "l6ct_3x3_psth_upstat": 1250, "example_psth_l6cc": 1250, "l6cc_b1": 1250, "l6cc_b2": 1250, "l6cc_b3": 1250, "l6cc_c1": 1250, "l6cc_c2": 1250, "l6cc_c3": 1250, "l6cc_d1": 1250, "l6cc_d2": 1250, "l6cc_d3": 1250, "0072": 1250, "0148": 1250, "0681": 1250, "0377": 1250, "011": 1250, "0186": 1250, "0757": 1250, "0491": 1250, "0041": 1250, "col": 1250, "sharei": 1250, "sharex": 1250, "barrel_ind": 1250, "ax_row_ind": 1250, "ax_col_ind": 1250, "p_": 1250, "c0": 1250, "suptitl": [1250, 1252], "nto": 1250, "engin": 1250, "respond": [1250, 1256], "subtl": 1250, "create_evoked_network_paramet": 1250, "cell_number_file_nam": 1250, "out_file_nam": 1250, "c2_stim": 1250, "surround": 1250, "network_param_c2": 1250, "l2_alpha": 1250, "l2_b1": 1250, "l2_b2": 1250, "l2_b3": 1250, "l2_b4": 1250, "l2_beta": 1250, "l2_c1": 1250, "l2_c2": 1250, "l2_c3": 1250, "l2_c4": 1250, "l2_d1": 1250, "l2_d2": 1250, "l2_d3": 1250, "l2_d4": 1250, "l2_e1": 1250, "l2_e2": 1250, "l2_gamma": 1250, "l34_a1": 1250, "l34_a2": 1250, "l34_a3": 1250, "l34_a4": 1250, "l34_alpha": 1250, "l34_b1": 1250, "l34_b2": 1250, "l34_b3": 1250, "l34_b4": 1250, "l34_beta": 1250, "l34_c1": 1250, "l34_c2": 1250, "l34_c3": 1250, "l34_c4": 1250, "l34_d1": 1250, "l34_d2": 1250, "l34_delta": 1250, "l34_e1": 1250, "l34_e2": 1250, "l34_e3": 1250, "l34_gamma": 1250, "l4py_a1": 1250, "l4py_a2": 1250, "l4py_a3": 1250, "l4py_a4": 1250, "l4py_alpha": 1250, "l4py_b1": 1250, "l4py_b2": 1250, "l4py_b3": 1250, "l4py_b4": 1250, "l4py_c1": 1250, "l4py_c2": 1250, "l4py_c3": 1250, "l4py_c4": 1250, "l4py_d1": 1250, "l4py_d2": 1250, "l4py_d3": 1250, "l4py_gamma": 1250, "l4sp_b1": 1250, "l4sp_b2": 1250, "l4sp_b3": 1250, "l4sp_beta": 1250, "l4sp_c1": 1250, "l4sp_c2": 1250, "l4sp_c3": 1250, "l4sp_c4": 1250, "l4sp_d1": 1250, "l4sp_d2": 1250, "l4sp_d3": 1250, "l4sp_delta": 1250, "l4ss_a1": 1250, "l4ss_b3": 1250, "l4ss_c1": 1250, "l4ss_c2": 1250, "l4ss_c3": 1250, "l4ss_d1": 1250, "l4ss_d2": 1250, "l4ss_d3": 1250, "l4ss_e1": 1250, "l5st_a1": 1250, "l5st_a2": 1250, "l5st_a3": 1250, "l5st_alpha": 1250, "l5st_b1": 1250, "l5st_b2": 1250, "l5st_b3": 1250, "l5st_b4": 1250, "l5st_beta": 1250, "l5st_c1": 1250, "l5st_c2": 1250, "l5st_c3": 1250, "l5st_c4": 1250, "l5st_d1": 1250, "l5st_d2": 1250, "l5st_d3": 1250, "l5st_delta": 1250, "l5st_e1": 1250, "l5st_gamma": 1250, "l5tt_a1": 1250, "l5tt_a3": 1250, "l5tt_a4": 1250, "l5tt_b1": 1250, "l5tt_b2": 1250, "l5tt_b3": 1250, "l5tt_b4": 1250, "l5tt_beta": 1250, "l5tt_c1": 1250, "l5tt_c3": 1250, "l5tt_c4": 1250, "l5tt_d2": 1250, "l5tt_d3": 1250, "l6cc_a1": 1250, "l6cc_a2": 1250, "l6cc_a4": 1250, "l6cc_alpha": 1250, "l6cc_b4": 1250, "l6cc_beta": 1250, "l6cc_c4": 1250, "l6cc_d4": 1250, "l6cc_delta": 1250, "l6cc_e1": 1250, "l6cc_e2": 1250, "l6cc_e3": 1250, "l6cc_e4": 1250, "l6cc_gamma": 1250, "l6ccinv_a1": 1250, "l6ccinv_a2": 1250, "l6ccinv_a3": 1250, "l6ccinv_a4": 1250, "l6ccinv_alpha": 1250, "l6ccinv_b1": 1250, "l6ccinv_b2": 1250, "l6ccinv_b3": 1250, "l6ccinv_b4": 1250, "l6ccinv_beta": 1250, "l6ccinv_c1": 1250, "l6ccinv_c2": 1250, "l6ccinv_c3": 1250, "l6ccinv_c4": 1250, "l6ccinv_d1": 1250, "l6ccinv_d2": 1250, "l6ccinv_d3": 1250, "l6ccinv_d4": 1250, "l6ccinv_e1": 1250, "l6ccinv_e2": 1250, "l6ccinv_e3": 1250, "l6ccinv_e4": 1250, "l6ccinv_gamma": 1250, "l6ct_alpha": 1250, "l6ct_b1": 1250, "l6ct_b2": 1250, "l6ct_b3": 1250, "l6ct_b4": 1250, "l6ct_beta": 1250, "l6ct_c1": 1250, "l6ct_c2": 1250, "l6ct_c3": 1250, "l6ct_d1": 1250, "l6ct_d2": 1250, "l6ct_d3": 1250, "l6ct_e3": 1250, "l6ct_gamma": 1250, "vpm_a3": 1250, "vpm_b1": 1250, "vpm_b2": 1250, "vpm_c1": 1250, "vpm_c3": 1250, "vpm_d1": [1250, 1251], "vpm_d2": 1250, "vpm_gamma": [1250, 1251], "l1_b1": [1250, 1251], "l1_b2": [1250, 1251], "l1_b3": [1250, 1251], "l1_beta": 1250, "l1_c1": [1250, 1251], "l1_c2": 1250, "l1_c3": 1250, "l1_d1": 1250, "l1_d2": 1250, "l1_d3": 1250, "l1_e2": 1250, "l23trans_b1": 1250, "l23trans_b2": 1250, "l23trans_b3": 1250, "l23trans_c1": 1250, "l23trans_c2": 1250, "l23trans_c3": 1250, "l23trans_d1": 1250, "l23trans_d2": 1250, "l45peak_a2": 1250, "l45peak_a4": 1250, "l45peak_b1": 1250, "l45peak_b2": 1250, "l45peak_b3": 1250, "l45peak_b4": 1250, "l45peak_c1": 1250, "l45peak_c2": 1250, "l45peak_c3": 1250, "l45peak_d2": 1250, "l45peak_delta": 1250, "l45peak_gamma": 1250, "l45sym_a3": 1250, "l45sym_b1": 1250, "l45sym_b2": 1250, "l45sym_b3": 1250, "l45sym_c1": 1250, "l45sym_c2": 1250, "l45sym_c3": 1250, "l45sym_d1": 1250, "l45sym_d2": 1250, "l45sym_e1": 1250, "l56trans_a2": 1250, "l56trans_a3": 1250, "l56trans_a4": 1250, "l56trans_b1": 1250, "l56trans_b2": 1250, "l56trans_b3": 1250, "l56trans_b4": 1250, "l56trans_beta": 1250, "l56trans_c1": 1250, "l56trans_c2": 1250, "l56trans_c3": 1250, "l56trans_d1": 1250, "l56trans_d2": 1250, "l56trans_d3": 1250, "l56trans_e1": 1250, "l56trans_gamma": 1250, "symlocal1_b1": 1250, "symlocal1_c1": 1250, "symlocal1_c2": 1250, "symlocal1_c3": 1250, "symlocal1_d2": 1250, "symlocal2_b1": 1250, "symlocal2_b2": 1250, "symlocal2_c2": 1250, "symlocal2_d2": 1250, "symlocal3_b2": 1250, "symlocal3_b3": 1250, "symlocal3_c1": 1250, "symlocal3_c2": 1250, "symlocal3_c3": 1250, "symlocal3_d1": 1250, "symlocal3_d2": 1250, "symlocal4_a1": 1250, "symlocal4_a3": 1250, "symlocal4_a4": 1250, "symlocal4_alpha": 1250, "symlocal4_b1": 1250, "symlocal4_b2": 1250, "symlocal4_b3": 1250, "symlocal4_b4": 1250, "symlocal4_c1": 1250, "symlocal4_c2": 1250, "symlocal4_c3": 1250, "symlocal4_d1": 1250, "symlocal4_d2": 1250, "symlocal4_d3": 1250, "symlocal4_e1": 1250, "symlocal4_gamma": 1250, "symlocal5_b3": 1250, "symlocal5_c2": 1250, "symlocal5_d1": 1250, "symlocal5_d2": 1250, "symlocal6_b2": 1250, "surround_column_map": 1250, "activity_gridplot": 1250, "ct": 1250, "deflected_whisk": 1250, "surround_column": 1250, "n_row": 1250, "n_column": 1250, "xaxi": 1250, "set_label_posit": 1250, "facecolor": 1250, "edgecolor": 1250, "supylabel": 1250, "nwhen": 1250, "simlat": 1251, "cell_parameter_fil": 1251, "50493": 1251, "mimic": [1251, 1253], "network_fil": 1251, "dir_prefix": [1251, 1253], "stim_": 1251, "tcp": [1251, 1252, 1253, 1255], "206": [1251, 1253], "dashboard": [1251, 1252, 1253, 1255], "38787": [1251, 1253], "tb": [1251, 1252, 1253, 1255], "extrem": 1251, "db_init_simrun_gener": [1251, 1253], "simulationtrail": 1251, "sim_trail_index": 1251, "soma_dist": 1251, "section_pt_id": 1251, "dendrite_label": 1251, "npartit": 1251, "stim_b1": 1251, "20250327": 1251, "1823_seed4095671765_pid36080": 1251, "int64": 1251, "float64": 1251, "stim_b2": 1251, "1823_seed1559350411_pid36745": 1251, "stim_d3": 1251, "1823_seed622584983_pid36112": 1251, "1441": 1251, "802898": 1251, "99": 1251, "623881": 1251, "1366": 1251, "422297": 1251, "78": 1251, "943241": 1251, "clumn": 1251, "some_index": 1251, "queri": 1251, "1227": 1251, "108477": 1251, "137": [1251, 1252], "176301": 1251, "1484": 1251, "417691": 1251, "279": 1251, "390388": 1251, "699450": 1251, "68": 1251, "796248": 1251, "169047": 1251, "53": 1251, "605914": 1251, "259": 1251, "144935": 1251, "254": 1251, "299": 1251, "458583": 1251, "063845": 1251, "107": 1251, "026858": 1251, "193010": 1251, "153": 1251, "286": 1251, "024718": 1251, "3435": 1251, "groupb": 1251, "unexpect": 1251, "f8": 1251, "630698": 1251, "1397": 1251, "626394": 1251, "276": 1251, "866549": 1251, "174": 1251, "283450": 1251, "1161": 1251, "161267": 1251, "661303": 1251, "903436": 1251, "201": 1251, "920454": 1251, "234": 1251, "639963": 1251, "095730": 1251, "891": 1251, "155617": 1251, "361": 1251, "240906": 1251, "410": 1251, "789081": 1251, "753": 1251, "778724": 1251, "218": 1251, "974242": 1251, "154": 1251, "413647": 1251, "266": 1251, "467875": 1251, "498": 1251, "396412": 1251, "786": 1251, "884596": 1251, "322": 1251, "750214": 1251, "227": 1251, "546271": 1251, "676": 1251, "986399": 1251, "easi": 1251, "simrun_simtrial_to_cell_object": 1251, "d3_stim_anim": 1251, "remak": 1251, "uncom": [1251, 1252], "d3_stim_animation_3d": 1251, "rmtree": 1251, "cell_popul": 1251, "cell_population_color": 1251, "set3": 1251, "enumer": [1251, 1252, 1255, 1256], "tediou": 1251, "paraview": 1251, "synapse_activation_vtk": 1251, "0x2b0fa5391a30": 1251, "apical_proximal_distal_rec_sites_id_000_sec_038_seg_032_x_0": 1251, "929_somadist_920": 1251, "7_": [1251, 1252], "cell_acativ": 1251, "Their": 1251, "soma_location_pdf": 1251, "presynaptic_somata": 1251, "134": [1251, 1252], "2679": 1251, "303": 1251, "660": 1251, "2123": 1251, "presynaptic_somata_l1": 1251, "03819": 1251, "601": 1251, "873": 1251, "582": 1251, "2783": 1251, "587": 1251, "8605": 1251, "258": 1251, "4359": 1251, "594": 1251, "6266": 1251, "162": 1251, "8093": 1251, "512": 1251, "555": 1251, "7564": 1251, "187": 1251, "7814": 1251, "681": 1251, "4604": 1251, "2359": 1251, "1226": 1251, "9478": 1251, "presynaptic_somata_vpm": 1251, "2350": 1251, "1421": 1251, "2307": 1251, "96": [1251, 1252], "1438": 1251, "380": 1251, "614": 1251, "2395": 1251, "1340": 1251, "2343": 1251, "1303": 1251, "341": 1251, "987": 1251, "cmv_unalign": 1251, "cell_d3_stim": 1251, "cell_id": 1251, "enorm": 1252, "reveal": [1252, 1255], "cerebr": 1252, "recept": 1252, "qv7jif": 1252, "repositori": 1252, "pythonpath": 1252, "sy": [1252, 1256], "ecosystem": 1252, "functool": 1252, "quickstart": 1252, "178": 1252, "28786": 1252, "28787": 1252, "1f": 1252, "model_": 1252, "__binned_synapse_activations_spatiotemporal_ei__": 1252, "arr_0": 1252, "81000": 1252, "saexc": 1252, "sainh": 1252, "saexc_mean": 1252, "sainh_mean": 1252, "401": 1252, "navi": 1252, "ylabel": 1252, "xlabel": 1252, "0x2b97bd46b910": 1252, "1i": 1252, "__spike_times_mcm__": 1252, "initialis": 1252, "discard": 1252, "artefact": 1252, "0x2b448b48f050": 1252, "4000": 1252, "6000": 1252, "0x2b448b557b90": 1252, "rm_dict": 1252, "compos": 1252, "w_": 1252, "sum_i": 1252, "w_z": 1252, "y_i": 1252, "g_i": 1252, "paper": 1252, "awar": 1252, "mdb_list": 1252, "binned_synapse_activ": 1252, "few": 1252, "uncompress": 1252, "260": 1252, "timepoint_of_max_respons": 1252, "261": 1252, "dataextractor_spiketim": 1252, "dataextractor_spikeininterv": 1252, "dataextractor_isi": 1252, "crop": 1252, "0x2b3c506b9e10": 1252, "saspatiotemporalraisedcosin": 1252, "lv": [1252, 1256], "isi50_": 1252, "result_df": 1252, "y_true": 1252, "roc": 1252, "auc": 1252, "subsplit": 1252, "7_0": 1252, "992066": 1252, "959447821583": 1252, "127607023899": 1252, "0997403028": 1252, "993329": 1252, "94194310094": 1252, "53524909301": 1252, "72658190132": 1252, "992040": 1252, "21385300474": 1252, "511869924346": 1252, "29909420539": 1252, "989921": 1252, "990491": 1252, "989427": 1252, "991523": 1252, "992149": 1252, "991154": 1252, "984188": 1252, "985860": 1252, "983728": 1252, "7_1": 1252, "992268": 1252, "617738981647": 1252, "44972179139": 1252, "15160990483": 1252, "991068": 1252, "917824891731": 1252, "87739540229": 1252, "20091202048": 1252, "990466": 1252, "37342377281": 1252, "06038573381": 1252, "254391539931": 1252, "990166": 1252, "989424": 1252, "987997": 1252, "991684": 1252, "990862": 1252, "989854": 1252, "985018": 1252, "982940": 1252, "981275": 1252, "7_2": 1252, "992971": 1252, "17808668604": 1252, "90042159759": 1252, "4544114625": 1252, "992882": 1252, "397515253276": 1252, "95891392491": 1252, "561910247": 1252, "992944": 1252, "67019871925": 1252, "8916096642": 1252, "52633336423": 1252, "990368": 1252, "990534": 1252, "990600": 1252, "991989": 1252, "992090": 1252, "992083": 1252, "985961": 1252, "985813": 1252, "985702": 1252, "unconstrain": 1252, "index_best_model": 1252, "argmin": 1252, "spatiotemporal_filt": 1252, "get_kernel_dict": 1252, "s_exc": 1252, "99999994": 1252, "83999312": 1252, "67933828": 1252, "54754567": 1252, "42797816": 1252, "32122907": 1252, "23403572": 1252, "16860136": 1252, "12514773": 1252, "09235044": 1252, "06582323": 1252, "04554006": 1252, "03117438": 1252, "02222843": 1252, "01811939": 1252, "01823592": 1252, "02197397": 1252, "0273118": 1252, "03221476": 1252, "03664161": 1252, "04057404": 1252, "04400725": 1252, "04694676": 1252, "04940576": 1252, "05140304": 1252, "05296133": 1252, "05410602": 1252, "05486407": 1252, "05526331": 1252, "05533172": 1252, "float32": 1252, "s_inh": 1252, "93388784e": 1252, "80935025e": 1252, "25943398e": 1252, "73791099e": 1252, "47634768e": 1252, "55127957e": 1252, "60600004e": 1252, "68410510e": 1252, "18851073e": 1252, "21100441e": 1252, "06311373e": 1252, "78291751e": 1252, "40423021e": 1252, "95610572e": 1252, "46290970e": 1252, "94468531e": 1252, "41763236e": 1252, "90312413e": 1252, "42002122e": 1252, "97337605e": 1252, "56642124e": 1252, "20097343e": 1252, "77735205e": 1252, "03": 1252, "96547779e": 1252, "56593728e": 1252, "56562449e": 1252, "21633774e": 1252, "30666094e": 1252, "21877987e": 1252, "81043258e": 1252, "t_exc": 1252, "02400237": 1252, "02032194": 1252, "01662141": 1252, "01290308": 1252, "00916938": 1252, "00542588": 1252, "00174317": 1252, "00184482": 1252, "0053307": 1252, "00870685": 1252, "01196511": 1252, "01509703": 1252, "01809369": 1252, "02094587": 1252, "02364372": 1252, "02617702": 1252, "02853503": 1252, "0307065": 1252, "03267968": 1252, "0344422": 1252, "03598117": 1252, "03728301": 1252, "03837968": 1252, "03944859": 1252, "04050721": 1252, "04155323": 1252, "04258426": 1252, "04359765": 1252, "04459048": 1252, "04555977": 1252, "04650225": 1252, "04741433": 1252, "04829218": 1252, "04913172": 1252, "04992854": 1252, "05067915": 1252, "05138324": 1252, "05203624": 1252, "05263265": 1252, "05316664": 1252, "05363193": 1252, "05403322": 1252, "05440999": 1252, "05476375": 1252, "0550912": 1252, "05543467": 1252, "05603194": 1252, "05693725": 1252, "05817533": 1252, "05977213": 1252, "06172585": 1252, "06401034": 1252, "06664608": 1252, "06978153": 1252, "07385685": 1252, "07898357": 1252, "085251": 1252, "09283666": 1252, "10192585": 1252, "11262625": 1252, "12500095": 1252, "13914779": 1252, "15533496": 1252, "17417821": 1252, "19665515": 1252, "22482018": 1252, "25910693": 1252, "29907584": 1252, "34764871": 1252, "40801415": 1252, "48474893": 1252, "58128369": 1252, "69691992": 1252, "82134211": 1252, "9336347": 1252, "97017372": 1252, "79743534": 1252, "46252084": 1252, "02363155": 1252, "t_inh": 1252, "04599673": 1252, "04736574": 1252, "04880098": 1252, "05030387": 1252, "05187581": 1252, "05352015": 1252, "05528356": 1252, "05718811": 1252, "05923788": 1252, "06143703": 1252, "06378973": 1252, "06630028": 1252, "06897295": 1252, "07181212": 1252, "07482215": 1252, "07800741": 1252, "08137235": 1252, "08492143": 1252, "08865899": 1252, "09258938": 1252, "09671696": 1252, "10104594": 1252, "10560232": 1252, "11048119": 1252, "11570197": 1252, "12127499": 1252, "12721042": 1252, "13351859": 1252, "14020956": 1252, "14729342": 1252, "15477996": 1252, "16267864": 1252, "17099871": 1252, "17974874": 1252, "18893673": 1252, "19859833": 1252, "20884515": 1252, "21970053": 1252, "23117824": 1252, "24329092": 1252, "2560496": 1252, "269458": 1252, "28349999": 1252, "29817542": 1252, "31348261": 1252, "3294391": 1252, "34615639": 1252, "3636474": 1252, "38190308": 1252, "40090674": 1252, "42065942": 1252, "44117498": 1252, "46241164": 1252, "48448306": 1252, "50787866": 1252, "53262049": 1252, "55867487": 1252, "58596104": 1252, "61436367": 1252, "64381152": 1252, "6744687": 1252, "70618039": 1252, "73851043": 1252, "77058583": 1252, "80224133": 1252, "83385348": 1252, "8649801": 1252, "89593261": 1252, "92658406": 1252, "956218": 1252, "98191792": 1252, "9982118": 1252, "00000012": 1252, "98073751": 1252, "92507899": 1252, "81327784": 1252, "63900936": 1252, "38829231": 1252, "06644553": 1252, "14063495": 1252, "calculate_wni_valu": 1252, "sa_fil": 1252, "kernel_dict": 1252, "220": 1252, "271": 1252, "n_cell": 1252, "wni_df": 1252, "asarrai": 1252, "sainh_cumul": 1252, "saexc_cumul": 1252, "saexc_timebin": 1252, "sainh_timebin": 1252, "saexc_window": 1252, "sainh_window": 1252, "__": 1252, "to_csv": 1252, "precalculated_wni_values__model_1__c2": 1252, "precalculated_wni_valu": 1252, "mkdir": 1252, "25gb": 1252, "adjust": 1252, "workers_per_nod": 1252, "itertool": 1252, "scheduler_info": 1252, "group_bin": 1252, "helper_df": 1252, "min_item": 1252, "codereview": 1252, "12753": 1252, "12759": 1252, "total_item": 1252, "rows_to_group": 1252, "datapoint": 1252, "last_bins": 1252, "new_group": 1252, "last_bin": 1252, "sublist": 1252, "signchang": 1252, "ab": 1252, "linear_interpolation_between_pair": 1252, "variable_stepsize_nonlinear": 1252, "wni_valu": 1252, "spike_befor": 1252, "lookup_series_steps": 1252, "pdf2": 1252, "cut": [1252, 1255], "include_lowest": 1252, "spike_prob": 1252, "n_item": 1252, "b_pdf": 1252, "bin_start": 1252, "sort_valu": 1252, "bin_group": 1252, "new_df": 1252, "x_point": 1252, "y_point": 1252, "lut": 1252, "rm_inference_timepoint": 1252, "spike_times_df": 1252, "spike_times_mcm": 1252, "precalcul": 1252, "precalculated_wni_values__model_1__": 1252, "tdf": 1252, "rp": 1252, "rfruengel": 1252, "anaconda2_isf": 1252, "lib": [1252, 1253, 1255], "python2": 1252, "__main__": 1252, "settingwithcopywarn": 1252, "row_index": 1252, "col_index": 1252, "caveat": 1252, "pydata": 1252, "versu": 1252, "0x2b3c4fe4ce90": 1252, "fetch_isi_wni_data": 1252, "ago": 1252, "wni_path": 1252, "spike_df": 1252, "no_spike_df": 1252, "spike_isi": 1252, "spike_wni": 1252, "no_spike_isi": 1252, "no_spike_wni": 1252, "get_isi_boundary_95": 1252, "to_drop": 1252, "y_min": 1252, "isi_boundari": 1252, "132": 1252, "isi_penalti": 1252, "plot_isi_cloud": 1252, "raster": 1252, "set_ylim": [1252, 1256], "0x2b3c5e309690": 1252, "136": 1252, "isi_penalty_simul": 1252, "0x2b3c5da9d3d0": 1252, "142": 1252, "__reduced_model_paramet": 1252, "txt": 1252, "set_xtick": 1252, "set_xticklabel": 1252, "somadist": [1252, 1256], "astyp": 1252, "ax4": 1252, "despin": [1252, 1256], "__init__": [1252, 1253, 1256], "spatial_bin_s": 1252, "return_wni": 1252, "full_trac": 1252, "wni_boundari": 1252, "spatial_bin": 1252, "min_index": 1252, "last_spike_interv": 1252, "spiking_prob": 1252, "144": 1252, "146": 1252, "147": 1252, "148": 1252, "390": 1252, "391": 1252, "392": 1252, "393": 1252, "394": 1252, "396": 1252, "397": 1252, "398": 1252, "1970": 1252, "1971": 1252, "1972": 1252, "1973": 1252, "1974": 1252, "1975": 1252, "1976": 1252, "1977": 1252, "1978": 1252, "1979": 1252, "1980": 1252, "1981": 1252, "1982": 1252, "1983": 1252, "1985": 1252, "1986": 1252, "1987": 1252, "1988": 1252, "1989": 1252, "1990": 1252, "1991": 1252, "1992": 1252, "1993": 1252, "1996": 1252, "1997": 1252, "1999": 1252, "152": 1252, "reformat": 1252, "st_reformat": 1252, "0x2b3c9ed9c510": 1252, "39666": 1253, "sca": 1253, "single_cell_analyz": 1253, "synapse_activation_binning_dask": 1253, "rm_get_kernel": 1253, "env": [1253, 1255], "python3": [1253, 1255], "autocomplet": 1253, "quickli": 1253, "questionmark": 1253, "syn_activation_format": 1253, "spike_times_format": 1253, "mod": 1253, "8786": 1253, "8787": 1253, "bokeh": 1253, "nthread": 1253, "100e15": 1253, "dask_client": 1253, "intro_to_isf": 1253, "explan": 1253, "example_cell_parameter_fil": 1253, "example_network_parameter_fil": 1253, "stim_c2": 1253, "socket": [1253, 1256], "broken": [1253, 1256], "transit": [1253, 1255, 1256], "expir": [1253, 1256], "simrun_simtrail_to_cell_object": 1253, "unique_syn_typ": 1253, "dodgerblu": 1253, "palegreen": 1253, "lime": 1253, "yellow": 1253, "indigo": 1253, "violet": 1253, "magenta": [1253, 1255], "c2_stim_animation_3d": 1253, "mm": 1254, "million": 1254, "billion": 1254, "canon": 1254, "thought": 1254, "primari": 1254, "processig": 1254, "somatosens": 1254, "somatotop": 1254, "allign": 1254, "columnar": 1254, "apex": [1254, 1255], "upper": [1254, 1255, 1256], "influenc": 1254, "influenti": 1254, "geting_start": 1255, "perpendicular": 1255, "diffract": 1255, "light": 1255, "microscop": 1255, "dendrite_thick": 1255, "rayburst": 1255, "current_dir": 1255, "data_dir": 1255, "am_folder_path": 1255, "am_fil": 1255, "tif_folder_path": 1255, "image_fil": 1255, "hoc_file_path": 1255, "500_gp_wr639_cell_1547_sp5c_checked_r": 1255, "output_folder_path": 1255, "bijective_points_path": 1255, "am2_transformed_landmark": 1255, "image_path": 1255, "tif": 1255, "downsampl": 1255, "img": 1255, "cut_x": 1255, "cut_i": 1255, "small_imag": 1255, "reshap": 1255, "downsample_factor": 1255, "stack": 1255, "downsampled_imag": 1255, "matshow": 1255, "greys_r": 1255, "axesimag": 1255, "0x2b860341bf40": 1255, "skimag": 1255, "graph_object": 1255, "get_image_stack_anim": 1255, "z_coordin": 1255, "slide": 1255, "mri": 1255, "volum": 1255, "emilia": 1255, "petrisor": 1255, "mathinpython": 1255, "empet": 1255, "vol": 1255, "imread": 1255, "nb_frame": 1255, "surfacecolor": 1255, "flipud": 1255, "add_trac": 1255, "colorbar": 1255, "ticklen": 1255, "frame_arg": 1255, "fromcurr": 1255, "eas": 1255, "slider": 1255, "layout": 1255, "update_layout": 1255, "scene": 1255, "zaxi": 1255, "autorang": 1255, "aspectratio": 1255, "updatemenu": 1255, "9654": 1255, "symbol": 1255, "9724": 1255, "paus": 1255, "cut_height": 1255, "sxx": 1255, "xx": 1255, "fig_slid": 1255, "wistar": 1255, "write_html": 1255, "auto_open": 1255, "tab": 1255, "pio": 1255, "plotly_render": 1255, "entireti": 1255, "deproject": 1255, "filament": 1255, "editor": 1255, "fragment": 1255, "mip": 1255, "ambigu": 1255, "splice": 1255, "circl": 1255, "caption": 1255, "aforement": 1255, "challeng": 1255, "nearest": 1255, "brightest": 1255, "referen": 1255, "bright": 1255, "profil": 1255, "thicnkess": 1255, "extractthicknesspipelin": 1255, "set_output_path": 1255, "set_am_paths_by_fold": 1255, "set_tif_paths_by_fold": 1255, "set_hoc_fil": 1255, "set_am_to_hoc_transformation_by_landmarkascii": 1255, "set_client_for_parallel": 1255, "202": 1255, "s36_final_downsampled_dendrites_done_zscale_40_aligned_ascii": 1255, "s31_final_done_alison_zscale_40": 1255, "s32_final_done_alison_zscale_40": 1255, "s12_final_done_zscale_40": 1255, "s35_final_downsampled_dendrites_done_zscale_40_aligned_ascii": 1255, "s14_final_done_alison_zscale_40": 1255, "s26_final_done_alison_zscale_40": 1255, "s22_final_done_alison_zscale_40": 1255, "s25_final_done_alison_zscale_40": 1255, "s17_final_done_alison_zscale_40": 1255, "s18_final_done_alison_zscale_40": 1255, "s34_final_downsampled_dendrites_done_zscale_40_ascii": 1255, "s35_final_downsampled_dendrites_done_zscale_40_ascii": 1255, "s21_final_done_alison_zscale_40": 1255, "s27_final_done_alison_zscale_40": 1255, "s30_final_done_alison_zscale_40": 1255, "s29_final_done_alison_zscale_40": 1255, "s16_final_done_alison_zscale_40": 1255, "s20_final_done_alison_zscale_40": 1255, "s11_final_done_zscale_40": 1255, "s23_final_done_alison_zscale_40": 1255, "s34_final_downsampled_dendrites_done_zscale_40_aligned_ascii": 1255, "s28_final_done_alison_zscale_40": 1255, "s33_final_done_alison_zscale_40": 1255, "s15_final_done_alison_zscale_40": 1255, "s36_final_downsampled_dendrites_done_zscale_40_ascii": 1255, "s19_final_done_alison_zscale_40": 1255, "s24_final_done_alison_zscale_40": 1255, "s13_final_done_alison_zscale_40": 1255, "traceback": 1255, "197": 1255, "196": 1255, "_run1": 1255, "198": 1255, "_run2": 1255, "199": 1255, "211": 1255, "212": 1255, "214": 1255, "215": 1255, "save_data": 1255, "4277": 1255, "return_when": 1255, "4262": 1255, "4263": 1255, "4264": 1255, "4274": 1255, "4275": 1255, "4276": 1255, "default_cli": 1255, "sync": 1255, "_wait": 1255, "4278": 1255, "832": 1255, "asynchron": 1255, "callback_timeout": 1255, "830": 1255, "831": 1255, "833": 1255, "337": 1255, "335": 1255, "336": 1255, "is_set": 1255, "338": 1255, "339": 1255, "typ": 1255, "558": 1255, "556": 1255, "_flag": 1255, "557": 1255, "_cond": 1255, "559": 1255, "306": 1255, "304": 1255, "305": 1255, "gotit": 1255, "waiter": 1255, "307": 1255, "308": 1255, "lazili": 1255, "eat": 1255, "get_all_data_output_t": 1255, "all_slic": 1255, "default_threshold": 1255, "slice_object": 1255, "all_data": 1255, "slice_thicknesses_object": 1255, "all_data_kei": 1255, "from_dict": 1255, "nonetyp": 1255, "sensibl": 1255, "get_z": 1255, "slice_thick": 1255, "z_slice": 1255, "slice_n": 1255, "point_depth": 1255, "max_z": 1255, "point_z": 1255, "px": 1255, "get_fig": 1255, "scatterplot": 1255, "scatter_3d": 1255, "x_slice": 1255, "y_slice": 1255, "min_thickness_0": 1255, "tolist": 1255, "tight": 1255, "margin": 1255, "update_trac": 1255, "becom": 1255, "artifact": 1255, "had": 1255, "signific": 1255, "nonzero": 1255, "clearli": 1255, "shear": 1255, "misalign": 1255, "p2": 1255, "am_analysi": 1255, "output_align": 1255, "df2": 1255, "fig2": 1255, "rectangular": 1256, "cpu": 1256, "741": 1256, "93": 1256, "750": 1256, "wall": 1256, "836": 1256, "set_styl": 1256, "tick": 1256, "3000": 1256, "620": 1256, "resembl": 1256, "sec_dist_dict": 1256, "get_section_at_dist": 1256, "dummi": 1256, "closest_sec": 1256, "5m": 1256, "amper": 1256, "iclamp2": 1256, "imax": 1256, "tau0": 1256}, "objects": {"": [[2, 0, 0, 1, "Interface", ""], [162, 0, 0, 1, "biophysics_fitting", ""], [380, 0, 0, 1, "data_base", ""], [603, 0, 0, 1, "simrun", ""], [837, 0, 0, 1, "single_cell_parser", ""], [974, 0, 0, 1, "singlecell_input_mapper", ""], [1118, 0, 0, 1, "spike_analysis", ""], [1206, 0, 0, 1, "visualize", ""]], "Interface": [[0, 1, 1, 0, "_is_running_on_dask_worker", ""], [1, 1, 1, 0, "get_client", "Gets the distributed.client object if dask has been setup"], [3, 1, 1, 0, "print_module_versions", "Print the version of each module in ISF."]], "biophysics_fitting": [[9, 0, 0, 1, "L5tt_parameter_setup", ""], [19, 0, 0, 1, "combiner", ""], [20, 1, 1, 0, "connected_to_dend_beyond", "Check if a given section is connected to dendrites that reach beyon beyond_dist."], [48, 0, 0, 1, "ephys", ""], [58, 0, 0, 1, "evaluator", ""], [86, 0, 0, 1, "exploration_from_seedpoint", ""], [91, 1, 1, 0, "get_branching_depth", "Given a Cell object and a section number, this method returns the branching depth (i.e. branching order) of that section. It counts the amount of sections that have children beyond some distance beyond_dist inbetween the soma and the given section sec."], [92, 1, 1, 0, "get_branching_depth_series", "Find the branching depth of the inner sections of a Cell."], [93, 1, 1, 0, "get_first_order_bifurcation_sections", "Find all sections that are both inner sections, and are of branching order 1."], [94, 1, 1, 0, "get_inner_sec_dist_list", "Find all sections that are connected to dendrites that reach beyond a certain distance. Useful for filtering out outer terminating dendrites."], [95, 1, 1, 0, "get_main_bifurcation_section", "Find the main bifurcation of a cell. This is the unique inner section whose branching depth is 1. In some morphologies, this section is unique, and no other sections are inner sections with branching depth 1. This is True for e.g. pyramidal cells with an apical dendrite."], [154, 0, 0, 1, "hay", ""], [165, 0, 0, 1, "model_selection", ""], [175, 0, 0, 1, "optimizer", ""], [181, 0, 0, 1, "parameters", ""], [186, 0, 0, 1, "setup_stim", ""], [209, 0, 0, 1, "simulator", ""], [221, 0, 0, 1, "utils", ""]], "biophysics_fitting.L5tt_parameter_setup": [[4, 1, 1, 0, "check_unset_range_mechanisms", ""], [5, 1, 1, 0, "get_L5tt_template", "Get a template cell parameter dictionary for a L5PT cell."], [6, 1, 1, 0, "get_L5tt_template_v2", "Get a template cell parameter dictionary for a L5PT cell."], [7, 1, 1, 0, "hay_param_to_scp_neuron_param", "Convert a Hay parameter name to a SCP neuron parameter name."], [8, 1, 1, 0, "hay_params_to_scp_neuron_params", "Convert a list of Hay parameter names to a list of SCP neuron parameter names."], [10, 1, 1, 0, "set_ephys", "Updates cell_param file."], [11, 1, 1, 0, "set_hot_zone", "Insert Ca_LVAst and Ca_HVA channels along the apical dendrite between min\\_ and max\\_ distance from the soma."], [12, 1, 1, 0, "set_many_param", "Updates cell_param given a dict of params in the dot naming convention."], [13, 1, 1, 0, "set_morphology", "Add the morphology to a cell parameter object."], [14, 1, 1, 0, "set_param", "Updates cell_param given a dict of params in the dot naming convention."]], "biophysics_fitting.combiner": [[15, 2, 1, 0, "Combiner", "This class can be used to combine features (usually) computed by an Evaluator object."], [17, 2, 1, 0, "Combiner_Setup", "Setup class for the Combiner class. Keeps track of feature combinations and their names."]], "biophysics_fitting.combiner.Combiner": [[16, 3, 1, 0, "combine", "Combines features that are computed by an Evaluator class."], [15, 4, 1, 0, "setup", "A Combiner_Setup object that keeps track of the feature combinations."]], "biophysics_fitting.combiner.Combiner_Setup": [[18, 3, 1, 0, "append", "Appends feature names and combinations to the Combiner_Setup object."]], "biophysics_fitting.ephys": [[21, 1, 1, 0, "AHP_depth_abs", "Calculates the absolute afterhyperpolarization (AHP) depth for a given voltage trace."], [22, 1, 1, 0, "AHP_depth_abs_check_2AP", "Determines whether there are at least two action potentials (APs) in the voltage trace v within the time range t that cross the threshold thresh."], [23, 1, 1, 0, "AP_height", "Computes the amplitude of each action potential (AP) in a voltage trace."], [24, 1, 1, 0, "AP_height_check_1AP", "Determines if an action potential (AP) is present in a voltage trace by checking if the voltage crosses a given threshold."], [25, 1, 1, 0, "AP_width", "Calculates the action potential (AP) width given the time and voltage arrays and a threshold value."], [26, 1, 1, 0, "BAC_ISI", "Computes the Inter-Spike Interval (ISI) of a voltage trace for a BAC stimulus."], [27, 1, 1, 0, "BAC_ISI_check_2_or_3_APs", "Check if there are 2 or 3 action potentials (APs) in a given voltage trace for a BAC stimulus."], [28, 1, 1, 0, "BAC_ISI_check_repolarization", "Checks if the membrane potential has repolarized to a certain value after a stimulus for a BAC stimulus."], [29, 1, 1, 0, "BAC_caSpike_height", "Returns the height of the calcium spike after tstim."], [30, 1, 1, 0, "BAC_caSpike_height_check_1_Ca_AP", "Checks if there is exactly one calcium spike in the dendritic voltage trace."], [31, 1, 1, 0, "BAC_caSpike_height_check_Ca_spikes_after_Na_spike", "Checks if a calcium spike occurs after the nth sodium spike."], [32, 1, 1, 0, "BAC_caSpike_height_check_gt2_Na_spikes", "Checks if the number of spikes in the voltage trace is greater than or equal to 2."], [33, 1, 1, 0, "BAC_caSpike_width", "Calculates the width of a calcium spike action potential."], [34, 1, 1, 0, "BPAPatt", "Computes the amplitude of the backpropagating action potential (bAP) at the dendrite."], [35, 1, 1, 0, "BPAPatt_check_1_AP", "Checks if there is exactly one action potential in the somatic voltage trace."], [36, 1, 1, 0, "BPAPatt_check_relative_height", "Computes the ratio of the backpropagating action potential (bAP) amplitude at the soma and dendrite and returns True if the ratio is greater than 1, False otherwise."], [37, 1, 1, 0, "STEP_adaptation_index", "Calculate the adaptation index for a step current stimulus."], [38, 1, 1, 0, "STEP_check_2_ISIs", "Check if there are more than 2 ISIs in the trace."], [39, 1, 1, 0, "STEP_coef_var", "Computes the coefficient of variation (CV) of the Inter-Spike Interval (ISI) of a voltage trace for a step stimulus."], [40, 1, 1, 0, "STEP_fast_ahp_depth", "Computes the average depth of the fast afterhyperpolarization (fAHP) of a voltage trace for a step stimulus."], [41, 1, 1, 0, "STEP_initial_ISI", "Computes the Inter-Spike Interval (ISI) for the first two spikes of a voltage trace for a step stimulus."], [42, 1, 1, 0, "STEP_mean_frequency", "Computes the mean frequency of action potentials in a voltage trace for a step stimulus."], [43, 1, 1, 0, "STEP_slow_ahp_depth", "Computes the average depth of the slow afterhyperpolarization (sAHP) of a voltage trace for a step stimulus."], [44, 1, 1, 0, "STEP_slow_ahp_time", "Calculates the time of the slow afterhyperpolarization (sAHP) of a voltage trace for a step stimulus."], [45, 1, 1, 0, "STEP_time_to_first_spike", "Computes the time to first spike (TTFS) of a voltage trace for a step stimulus."], [46, 1, 1, 0, "find_crossing", "Original NEURON doc: Function that giving a threshold returns a list of two vectors The first is the crossing up of that threshold The second is the crossing down of that threshold"], [47, 1, 1, 0, "find_crossing_old", "Original NEURON doc: Function that giving a threshold returns a list of two vectors The first is the crossing up of that threshold The second is the crossing down of that threshold"], [49, 1, 1, 0, "spike_count", "Counts the number of spikes in a voltage trace."], [50, 1, 1, 0, "trace_check", "Check the properties of a voltage trace:"], [51, 1, 1, 0, "trace_check_err", "Returns a basic trace error that penalizes traces with low variance. Useful for an evolutionary algorithm, when the voltage trace is not spiking yet, and spike-related error functions cannot be applied yet. This tells the algorithm to reward variance in a non-spiking voltage trace -- at least something is happening."], [52, 1, 1, 0, "trace_check_max_prestim_dendrite_depo", "Check whether anywhere in the dendritic, there is a spike before stimulus onset"], [53, 1, 1, 0, "voltage_base", "Calculates the mean voltage between 0.5 * stim_delay and 0.75 * stim_delay."], [54, 1, 1, 0, "voltage_base2", "Fetch the voltage at a given time point t0 for a specific recording site ID."]], "biophysics_fitting.evaluator": [[55, 2, 1, 0, "Evaluator", "Extract features from voltage traces."], [57, 2, 1, 0, "Evaluator_Setup", "Setup for an Evaluator object"]], "biophysics_fitting.evaluator.Evaluator": [[56, 3, 1, 0, "evaluate", "Extracts features from a simulation result computed by biophysics_fitting.simulator.Simulator.run()"], [55, 4, 1, 0, "setup", "A Evaluator_Setup object that keeps track of the evaluation functions."]], "biophysics_fitting.evaluator.Evaluator_Setup": [[57, 4, 1, 0, "evaluate_funs", "A list of functions to be applied to the voltage traces. Each element of the list is a list of three elements: the name of the input voltage trace, the function to be applied to the voltage trace, and the name of the output feature."], [57, 4, 1, 0, "finalize_funs", "A list of functions to be applied to the output of the evaluation functions. The output of the last function in this list is the output of the evaluate() method."], [57, 4, 1, 0, "pre_funs", "A list of functions to be applied to the input dictionary before the evaluation functions are applied."]], "biophysics_fitting.exploration_from_seedpoint": [[68, 0, 0, 1, "RW", ""], [78, 0, 0, 1, "RW_analysis", ""], [85, 1, 1, 0, "evaluation_function_incremental_helper", "Helper function for the evaluation function. As soon as a single stimulus shows that a biophysical model does not match the objectives, it is not necessary to evaluate the other stimuli. This method runs the evaluation functions one by one and exits prematurely as soon as an objective is above the desired cutoff defined in cutoffs."], [90, 0, 0, 1, "utils", ""]], "biophysics_fitting.exploration_from_seedpoint.RW": [[59, 2, 1, 0, "RW", "Class to perform RW exploration from a seedpoint."]], "biophysics_fitting.exploration_from_seedpoint.RW.RW": [[59, 4, 1, 0, "MAIN_DIRECTORY", "output directory in which results are stored."], [60, 3, 1, 0, "_clean_the_pickles", "Remove the pickle files that correspond to the intermediate results of a iteration."], [61, 3, 1, 0, "_concatenate_and_clean", "Concatenate the intermediate .pickle results and save as one parquet file."], [62, 3, 1, 0, "_load_pickle_or_parquet", "Load the results of a iteration from a pickle or parquet file."], [63, 3, 1, 0, "_normalize_aim_params", "Normalize aim parameters to be between 0 and 1."], [64, 3, 1, 0, "_normalize_params", "Normalize parameters to be between 0 and 1."], [65, 3, 1, 0, "_unnormalize_params", "Unnormalize parameters to be between min and max."], [59, 4, 1, 0, "aim_params", "this param will make the exploration algorithm propose only new points such that a set of parameters aims certain values during exploration. Default: {}"], [66, 3, 1, 0, "assess_aim_params_reached", "Check whether the aim parameters have been reached."], [59, 4, 1, 0, "checkpoint_by_time", "time interval in minutes for checkpointing for using time-based checkpointing. If both checkpoint_every and checkpoint_by_time are set, checkpointing will be done by time."], [59, 4, 1, 0, "checkpoint_every", "save the results every n iterations"], [59, 4, 1, 0, "concat_every_n_save", "number of checkpoints after which the pickle files are concatenated and cleaned"], [59, 4, 1, 0, "df_seeds", "individual seed points as rows and the parameters as columns"], [59, 4, 1, 0, "evaluation_function", "Function use to evaluate a vector of biphysical parameters. Must take one argument (a parameter vector) and return a tuple of  (inside, evaluation):"], [59, 4, 1, 0, "max_step_size", "maximum step size for the random walk"], [59, 4, 1, 0, "min_step_size", "minimum step size for the random walk"], [59, 4, 1, 0, "mode", "Random walk mode. Options: (None, 'expand'). default: None 'expand': only propose new points that move further away from seedpoint"], [59, 4, 1, 0, "n_iterations", "number of iterations to run the random walk"], [59, 4, 1, 0, "normalized_aim_params", "normalized aim parameters"], [59, 4, 1, 0, "param_ranges", "parameters as rows and has a min_ and max_ column denoting range of values this parameter may take"], [59, 4, 1, 0, "params_to_explore", "list of parameters that should be explored. If None, all parameters are explored."], [67, 3, 1, 0, "run_RW", "Run random walk exploration from a seed point."], [59, 4, 1, 0, "stop_n_inside_with_aim_params", "number of successful models / set of parameters inside space with aim_params to find before stopping exploration"]], "biophysics_fitting.exploration_from_seedpoint.RW_analysis": [[69, 2, 1, 0, "Load", "Class for efficiently loading exploration results"], [72, 1, 1, 0, "augment_ddf_with_PCA_space", "Augment a dask dataframe with the first two principal components of the hz current space."], [73, 1, 1, 0, "get_depolarization_index", "Compute the relative difference in depolarization contribution of Ca_LVA and Ca_HVA during the BAC stimulus."], [74, 1, 1, 0, "get_hyperpolarization_index", "Compute the relative difference in hyperpolarization contribution of Im and SK during the BAC stimulus."], [75, 1, 1, 0, "get_index", "Compute the depolarization or hyperpolarization index."], [76, 1, 1, 0, "get_inside_fraction", "Print the fraction of models that are inside the objective space."], [77, 1, 1, 0, "get_param_range_evolution_from_ddf", "Compute the range of parameters explored by a RW exploration, as a fraction of the total parameter range."], [79, 1, 1, 0, "normalize", "Normalize a pd.DataFrame according to the values of specified parameters."], [80, 1, 1, 0, "pandas_binby", "Bin a pandas dataframe by two columns."], [81, 1, 1, 0, "read_all", "Read the results of all directories contained within some base directory, independent of which seepdoint or particle."], [82, 1, 1, 0, "read_parameters", "Read the biophysical parameters that were explored during a RW exploration. To read the full results, use read_pickle() instead. See: RW for more info."], [83, 1, 1, 0, "read_pickle", "Read the results of a single particle of a RW exploration."], [84, 1, 1, 0, "robust_read_pickle", "Read a pickled dataframe. If it cannot be read, still return a dataframe, containing an error as content. Useful for when you don't want your code to error during some large-scale analysis."]], "biophysics_fitting.exploration_from_seedpoint.RW_analysis.Load": [[70, 3, 1, 0, "get_df", "Get the exploration results as a pandas dataframe."], [71, 3, 1, 0, "get_futures", "Get the futures of the delayed computations."]], "biophysics_fitting.exploration_from_seedpoint.utils": [[87, 1, 1, 0, "convert_all_check_columns_bool_to_float", "Convert all boolean values to float in a pandas dataframe."], [88, 1, 1, 0, "evaluation_function_incremental_helper", "Evaluate a model shows one stimulus at a time."], [89, 1, 1, 0, "get_vector_norm", "Calculate the norm of a vector v."]], "biophysics_fitting.hay": [[100, 0, 0, 1, "default_setup", ""], [151, 0, 0, 1, "evaluation", ""], [161, 0, 0, 1, "specification", ""]], "biophysics_fitting.hay.default_setup": [[96, 1, 1, 0, "get_Combiner", "Get a set up Combiner object for the Hay protocol."], [97, 1, 1, 0, "get_Evaluator", "Get a Evaluator object for the Hay protocol."], [98, 1, 1, 0, "get_Simulator", "Get a set up Simulator object for the Hay protocol."], [99, 1, 1, 0, "get_fixed_params_example", "Get an example of cell-specific fixed params."], [101, 1, 1, 0, "interpolate_vt", "Interpolate a voltage trace so that is has fixed time interval"], [102, 1, 1, 0, "map_truefalse_to_str", "Convert True/False to 'True'/'False' in a dictionary"], [103, 1, 1, 0, "record_BAC", "Extract the voltage traces from the soma and an apical dendritic location."], [104, 1, 1, 0, "record_Step", "Extract the voltage trace from the soma."], [105, 1, 1, 0, "record_bAP", "Extract the voltage traces from the soma and two apical dendritic locations."]], "biophysics_fitting.hay.evaluation": [[106, 2, 1, 0, "BAC", "Evaluate the BAC stimulus protocol."], [115, 2, 1, 0, "StepOne", "Evaluate Step current one."], [116, 2, 1, 0, "StepThree", "Evaluate Step current three."], [117, 2, 1, 0, "StepTwo", "Evaluate Step current two."], [118, 2, 1, 0, "_Step", "Template class for evaluating step current injections."], [132, 2, 1, 0, "bAP", "Evaluate the bAP stimulus protocol."], [141, 1, 1, 0, "get_evaluate_BAC", "Get the evaluation function for the BAC stimulus protocol."], [142, 1, 1, 0, "get_evaluate_StepOne", "Get the evaluation function for the StepOne stimulus protocol."], [143, 1, 1, 0, "get_evaluate_StepThree", "Get the evaluation function for the StepTwo stimulus protocol."], [144, 1, 1, 0, "get_evaluate_StepTwo", "Get the evaluation function for the StepTwo stimulus protocol."], [145, 1, 1, 0, "get_evaluate_bAP", "Get the evaluation function for the bAP stimulus protocol."], [146, 1, 1, 0, "hay_evaluate_BAC", "Evaluate the BAC stimulus protocol."], [147, 1, 1, 0, "hay_evaluate_StepOne", "Evaluate the StepOne stimulus protocol."], [148, 1, 1, 0, "hay_evaluate_StepThree", "Evaluate the StepTwo stimulus protocol."], [149, 1, 1, 0, "hay_evaluate_StepTwo", "Evaluate the StepTwo stimulus protocol."], [150, 1, 1, 0, "hay_evaluate_bAP", "Evaluate the bAP stimulus protocol."], [152, 1, 1, 0, "nan_if_error", "Wrapper method that returns nan if an error occurs."], [153, 1, 1, 0, "normalize", "Normalize a raw value."]], "biophysics_fitting.hay.evaluation.BAC": [[107, 3, 1, 0, "BAC_APheight", "Get the height of the first action potential in the somatic voltage trace."], [108, 3, 1, 0, "BAC_ISI", "Get the interspike interval in the somatic voltage trace."], [109, 3, 1, 0, "BAC_ahpdepth", "Get the afterhyperpolarization depth in the somatic voltage trace."], [110, 3, 1, 0, "BAC_caSpike_height", "Get the height of the calcium spike in the dendritic voltage trace."], [111, 3, 1, 0, "BAC_caSpike_width", "Get the width of the calcium spike in the dendritic voltage trace."], [112, 3, 1, 0, "BAC_spikecount", "Get the number of spikes in the somatic voltage trace."], [106, 4, 1, 0, "ca_max_after_nth_somatic_spike", "The number of somatic spikes after which the calcium spike maximum should occur. Defaults to 2."], [113, 3, 1, 0, "check", "Check for problems in the voltage trace."], [106, 4, 1, 0, "definitions", "The empirical means and standard deviations for the evaluation metrics. Defaults to:"], [114, 3, 1, 0, "get", "Get the full evaluation of the voltage traces for BAC firing."], [106, 4, 1, 0, "hot_zone_thresh", "The threshold for APs in the dendritic voltage trace. Defaults to -55 mV."], [106, 4, 1, 0, "prefix", "The prefix for the evaluation metric checks. Defaults to an empty string."], [106, 4, 1, 0, "punish", "The punishment value in units of \\sigma. Used as a baseline if the voltage trace cannot be evaluated on a metric (e.g. if it does not contain an AP). Defaults to 250."], [106, 4, 1, 0, "punish_last_spike_after_deadline", "Whether to punish if the last spike is after the deadline. Defaults to True"], [106, 4, 1, 0, "punish_minspikenum", "The minimum number of spikes required for this stimulus protocol."], [106, 4, 1, 0, "punish_returning_to_rest_tolerance", "The tolerance for returning to rest (mV). Defaults to 2 mV."], [106, 4, 1, 0, "repolarization", "The target repolarization voltage after the stimulus. See BAC_ISI_check_repolarization(). Defaults to -55 mV."], [106, 4, 1, 0, "soma_thresh", "The threshold for APs in the somatic voltage trace. Defaults to -30 mV."], [106, 4, 1, 0, "stim_duration", "The duration of the stimulus (ms). Defaults to 45 ms."], [106, 4, 1, 0, "stim_onset", "The onset of the stimulus (ms). Defaults to 295 ms."]], "biophysics_fitting.hay.evaluation._Step": [[119, 3, 1, 0, "AHP_depth_abs", "Get the afterhyperpolarization depth in the somatic voltage trace."], [120, 3, 1, 0, "AI", "Get the adaptation index of the somatic voltage trace."], [121, 3, 1, 0, "APh", "Get the AP heights fo all APs in the somatic voltage trace."], [122, 3, 1, 0, "APw", "Get the AP widths of all APs in the somatic voltage trace."], [123, 3, 1, 0, "DI", "Get the ISI of the first two spikes in the somatic voltage trace."], [124, 3, 1, 0, "ISIcv", "Get the coefficient of variation of the interspike interval in the somatic voltage trace."], [125, 3, 1, 0, "TTFS", "Get the time to first spike in the somatic voltage trace."], [126, 3, 1, 0, "check", "Check for problems in the voltage trace."], [118, 4, 1, 0, "definitions", "The empirical means and standard deviations for the evaluation metrics. These are overridden by each child class."], [127, 3, 1, 0, "fAHPd", "Get the fast afterhyperpolarization depth in the somatic voltage trace."], [128, 3, 1, 0, "get", "Get the full evaluation of the voltage traces for the step current injection."], [129, 3, 1, 0, "mf", "Get the mean frequency of the somatic voltage trace."], [118, 4, 1, 0, "name", "The name of the stimulus protocol. Defaults to 'StepTemplate'."], [118, 4, 1, 0, "prefix", "The prefix for the evaluation metric checks. Defaults to an empty string."], [118, 4, 1, 0, "punish", "The punishment value in units of \\sigma. Used as a baseline if the voltage trace cannot be evaluated on a metric (e.g. if it does not contain an AP). Defaults to 250."], [118, 4, 1, 0, "punish_last_spike_after_deadline", "Whether to punish if the last spike is after the deadline. Defaults to True"], [118, 4, 1, 0, "punish_minspikenum", "The minimum number of spikes required for this stimulus protocol."], [118, 4, 1, 0, "punish_returning_to_rest_tolerance", "The tolerance for returning to rest (mV). Defaults to 2 mV."], [130, 3, 1, 0, "sAHPd", "Get the slow afterhyperpolarization depth in the somatic voltage trace."], [131, 3, 1, 0, "sAHPt", "Get the slow afterhyperpolarization time in the somatic voltage trace."], [118, 4, 1, 0, "soma_thresh", "The threshold for APs in the somatic voltage trace. Defaults to -30 mV."], [118, 4, 1, 0, "step_index", "The index of the step stimulus protocol. Defaults to 0. Options are: [1, 2, 3]."], [118, 4, 1, 0, "stim_duration", "The duration of the stimulus (ms). Defaults to 2000 ms."], [118, 4, 1, 0, "stim_onset", "The onset of the stimulus (ms). Defaults to 700 ms."]], "biophysics_fitting.hay.evaluation.bAP": [[133, 3, 1, 0, "_bAP_att", "Get the backpropagating action potential attenuation."], [134, 3, 1, 0, "bAP_APheight", "Get the height of the first action potential in the somatic voltage trace."], [135, 3, 1, 0, "bAP_APwidth", "Get the width of the first action potential in the somatic voltage trace."], [136, 3, 1, 0, "bAP_att2", "Get the backpropagating action potential attenuation between the soma and first dendritic pipette location."], [137, 3, 1, 0, "bAP_att3", "Get the backpropagating action potential attenuation between the soma and second dendritic pipette location."], [138, 3, 1, 0, "bAP_spikecount", "Get the number of spikes in the somatic voltage trace."], [132, 4, 1, 0, "bAP_thresh", "The threshold for the backpropagating action potential. Defaults to +2 mV."], [139, 3, 1, 0, "check", "Check for problems in the voltage trace."], [132, 4, 1, 0, "definitions", "The empirical means and standard deviations for the evaluation metrics. Defaults to:"], [140, 3, 1, 0, "get", "Get the full evaluation of the voltage traces for bAP firing."], [132, 4, 1, 0, "punish", "The punishment value in units of \\sigma. Used as a baseline if the voltage trace cannot be evaluated on a metric (e.g. if it does not contain an AP). Defaults to 250 \\sigma."], [132, 4, 1, 0, "punish_last_spike_after_deadline", "Whether to punish if the last spike is after the deadline. Defaults to True"], [132, 4, 1, 0, "punish_minspikenum", "The minimum number of spikes required for this stimulus protocol."], [132, 4, 1, 0, "punish_returning_to_rest_tolerance", "The tolerance for returning to rest (mV). Defaults to 2 mV."], [132, 4, 1, 0, "soma_thresh", "The threshold for APs in the somatic voltage trace. Defaults to -30 mV."], [132, 4, 1, 0, "stim_duration", "The duration of the stimulus (ms). Defaults to 5 ms."], [132, 4, 1, 0, "stim_onset", "The onset of the stimulus (ms). Defaults to 295 ms."]], "biophysics_fitting.hay.specification": [[155, 1, 1, 0, "get_feasible_model_objectives", "Get the objectives of a feasible model."], [156, 1, 1, 0, "get_feasible_model_params", "Get a set of feasible model parameters."], [157, 1, 1, 0, "get_hay_objective_names", "Get the names of the objectives used in Hay_Hill_Schuermann_Markram_Segev_2011."], [158, 1, 1, 0, "get_hay_param_names", "Get the names of the parameters used in Hay_Hill_Schuermann_Markram_Segev_2011."], [159, 1, 1, 0, "get_hay_params_pdf", "Get the parameter boundaries used in Hay_Hill_Schuermann_Markram_Segev_2011."], [160, 1, 1, 0, "get_hay_problem_description", "Get the problem description used in Hay_Hill_Schuermann_Markram_Segev_2011."]], "biophysics_fitting.model_selection": [[163, 1, 1, 0, "get_model_pdf_from_db", "Get a DataFrame with all models from the database."], [164, 1, 1, 0, "get_pdf_selected", "Select models based on cutoffs from a DataFrame."]], "biophysics_fitting.optimizer": [[166, 1, 1, 0, "_evaluate_invalid_fitness", "Evaluate the individuals with an invalid fitness Returns the count of individuals with invalid fitness"], [167, 1, 1, 0, "_get_offspring", "return the offsprint, use toolbox.variate if possible"], [168, 1, 1, 0, "_record_stats", "Update the statistics with the new population"], [169, 1, 1, 0, "_update_history_and_hof", "Update the hall of fame with the generated individuals Note: History and Hall-of-Fame behave like dictionaries"], [170, 1, 1, 0, "eaAlphaMuPlusLambdaCheckpoint", "This is the (~\\alpha,\\mu~,~\\lambda) evolutionary algorithm"], [171, 1, 1, 0, "get_max_generation", "Returns the index of the next iteration in a database. If the database is empty, it returns -1."], [172, 1, 1, 0, "get_mymap", "Get a map function for evaluating the parameters."], [173, 1, 1, 0, "get_objective_function", "Get the objective function for the optimization."], [174, 1, 1, 0, "get_population_with_different_n_objectives", "Adapt the number of objectives of individuals"], [176, 1, 1, 0, "robust_int", "Robustly convert something to an integer."], [177, 1, 1, 0, "run", "This method is a class method of the BluePyOpt optimisations.DEAPOptimisation class. It is extended here such that a start population can be defined. Running actual optimization is done with the start_run(), which further extends this method."], [178, 1, 1, 0, "save_result", "Save the results of an optimization iteration in a database."], [179, 1, 1, 0, "setup_db_run", "Create a sub-database for each run of the optimization algorithm. db_setup contains a sub db for each run of the full optimization. This sub db is created here."], [180, 1, 1, 0, "start_run", "Start an optimization run as specified in db_setup."]], "biophysics_fitting.parameters": [[182, 1, 1, 0, "param_selector", "Select parameters from a Series with an Index like a.b.c, a.b.d."], [183, 1, 1, 0, "param_to_kwargs", "returns a function that can be called with params = [some_Series]. The content of Series is added to kwargs"], [184, 1, 1, 0, "set_fixed_params", "Add fixed_params to params."]], "biophysics_fitting.setup_stim": [[185, 1, 1, 0, "_append", "Append an item to a cell object."], [187, 1, 1, 0, "setup_BAC", "Setup a BAC (bAP-activated Ca2+-spike) stimulus for the cell."], [188, 1, 1, 0, "setup_StepOne", "Setup a step current stimulus at the soma:"], [189, 1, 1, 0, "setup_StepThree", "Setup a step current stimulus at the soma:"], [190, 1, 1, 0, "setup_StepTwo", "Setup a step current stimulus at the soma:"], [191, 1, 1, 0, "setup_apical_epsp_injection", "Setup an EPSP injection at a given distance from the soma."], [192, 1, 1, 0, "setup_bAP", "Setup a bAP (backpropagating action potential) stimulus for the cell."], [193, 1, 1, 0, "setup_soma_step", "Setup up a step current at the soma, or a given dist from the soma."]], "biophysics_fitting.simulator": [[194, 2, 1, 0, "Simulator", "This class can be used to transform a parameter vector into simulated voltage traces."], [197, 2, 1, 0, "Simulator_Setup", "Class for setting up cells with biophysical details."], [210, 1, 1, 0, "run_fun", "Default function to run a simulation."]], "biophysics_fitting.simulator.Simulator": [[195, 3, 1, 0, "get_simulated_cell", "Get the simulated cell."], [196, 3, 1, 0, "run", "Simulates all stimuli for a given parameter vector."], [194, 4, 1, 0, "setup", "A Simulator_Setup object that keeps track of the simulation setup."]], "biophysics_fitting.simulator.Simulator_Setup": [[198, 3, 1, 0, "_check_first_element_of_name_is_the_same", "Check if the first element of the names of two lists are the same."], [199, 3, 1, 0, "_check_not_none", "Convenience method to check if the output of some method is not None."], [197, 4, 1, 0, "cell_generator", "A function that generates a Cell object."], [197, 4, 1, 0, "cell_modify_funs", "List of functions that modify the cell object."], [197, 4, 1, 0, "cell_param_generator", "A function that generates a ParameterSet cell parameter object."], [197, 4, 1, 0, "cell_param_modify_funs", "list of functions that modify the cell parameters."], [200, 3, 1, 0, "check", "Check if the setup is correct."], [197, 4, 1, 0, "check_funs", "List of functions that check the setup. Useful for debugging."], [201, 3, 1, 0, "get", "Get the cell with set up biophysics and params."], [202, 3, 1, 0, "get_cell_params", "Get the cell parameters as an ParameterSet from the parameter vector."], [203, 3, 1, 0, "get_cell_params_with_default_sim_prams", "Get a neuron parameter object."], [204, 3, 1, 0, "get_params", "Get the modified biophysical parameters."], [205, 3, 1, 0, "get_stim_response_measure_fun", "Get the stimulus response measure function by stimulus name."], [206, 3, 1, 0, "get_stim_run_fun_by_stim", "Get the stimulus run function by stimulus name."], [207, 3, 1, 0, "get_stim_setup_fun_by_stim", "Get the stimulus setup function by stimulus name."], [208, 3, 1, 0, "get_stims", "Get the names of the stimuli."], [197, 4, 1, 0, "params_modify_funs", "List of functions that modify the biophysical parameter vector."], [197, 4, 1, 0, "stim_response_measure_funs", "List of functions that extract voltage traces from the cell."], [197, 4, 1, 0, "stim_run_funs", "List of functions that each run a simulation."], [197, 4, 1, 0, "stim_setup_funs", "List of functions that set up the stimulus."]], "biophysics_fitting.utils": [[211, 2, 1, 0, "Undemonize", "A class used to resolve AssertionError: daemonic processes are not allowed to have children"], [212, 2, 1, 0, "VariableThatDoesNotGetPickled", "A variable that does not get pickled."], [213, 1, 1, 0, "_get_apical_sec_and_i_at_distance", "Get the apical section and segment at a certain distance from the soma."], [214, 1, 1, 0, "augment_cell_with_detailed_labels", "Augment section labels to discriminate the tuft, oblique, trunk and basal dendrites."], [215, 1, 1, 0, "connected_to_structure_beyond", "Checks if a Cell section is connected to a structure at a soma distance larger than beyond_dist."], [216, 1, 1, 0, "execute_in_child_process", "Execute a function in a child process."], [217, 1, 1, 0, "execute_in_child_process_kept_alive", "Execute a function in a child process, keeping the process alive."], [218, 1, 1, 0, "get_inner_sec_dist_dict", "Get sections that connect to specific structures beyond a minimum distance."], [219, 1, 1, 0, "get_inner_section_at_distance", "Get sections that connect to specific structures at a particular distance."], [220, 1, 1, 0, "get_main_bifurcation_section", "Get the main bifurcation section of a cell"], [222, 1, 1, 0, "pool_helper", "Unserialize a function and its arguments, run it, and serialize the output."], [223, 1, 1, 0, "run_cloudpickled_remotely", "Unserialize a function and its arguments, run it, and serialize the output."], [224, 1, 1, 0, "tVec", "Convenience method to convert a py:attr:~single_cell_parser.cell.Cell.tVec to a numpy array."], [225, 1, 1, 0, "vmApical", "Fetch the membrane voltage of the apical dendrite at a certain distance from the soma."], [226, 1, 1, 0, "vmApical_position", "Fetch the exact location on the apical dendrite at a certain distance from the soma."], [227, 1, 1, 0, "vmMax", "Calculate the maximum voltage of a cell at any timepoint, at any dendrite."], [228, 1, 1, 0, "vmSoma", "Convenience method to extract the soma voltage trace from a cell"]], "data_base": [[229, 0, 0, 1, "IO", ""], [230, 0, 0, 1, "analyze", ""], [253, 0, 0, 1, "data_base", ""], [266, 0, 0, 1, "data_base_register", ""], [268, 0, 0, 1, "db_initializers", ""], [358, 0, 0, 1, "dbopen", ""], [375, 0, 0, 1, "distributed_lock", ""], [379, 0, 0, 1, "exceptions", ""], [517, 0, 0, 1, "isf_data_base", ""], [556, 0, 0, 1, "settings", ""], [573, 0, 0, 1, "utils", ""]], "data_base.analyze": [[231, 0, 0, 1, "spatiotemporal_binning", ""], [235, 0, 0, 1, "spike_detection", ""], [238, 1, 1, 0, "split_synapse_activation", "Augment a syn_activation_format dataframe with a boolean column for excitatory/inhibitory."], [239, 0, 0, 1, "temporal_binning", ""], [248, 0, 0, 1, "voltage_binning", ""]], "data_base.analyze.spatiotemporal_binning": [[232, 1, 1, 0, "universal", "Bin a pandas or dask DataFrame by both distance and time."], [233, 1, 1, 0, "universal_pd", "Bin a pandas DataFrame by both distance and time."]], "data_base.analyze.spike_detection": [[234, 1, 1, 0, "_helper", "Parse a voltage_traces_df_format and return a pandas.Series containing the spikes,"], [236, 1, 1, 0, "spike_detection", "Detect spikes in a dask voltage_traces_df_format."], [237, 1, 1, 0, "spike_in_interval", "Check whether each trial contains at least one spike within the specified interval"]], "data_base.analyze.temporal_binning": [[240, 1, 1, 0, "temporal_binning_dask", "Bin timevalues in a dask DataFrame."], [241, 1, 1, 0, "temporal_binning_pd", "Bin timevalues in a pandas DataFrame."], [242, 1, 1, 0, "universal", "Bin spike times for dask or pandas dataframes."]], "data_base.analyze.voltage_binning": [[243, 1, 1, 0, "calculate_vdensity_array", "Calculate the voltage density array."], [244, 1, 1, 0, "calculate_vdensity_array_dask", "Bin a voltage_traces_df_format in timebins across trials."], [245, 1, 1, 0, "calculate_vdensity_array_pd", "Bin a voltage_traces_df_format in timebins across trials."], [246, 1, 1, 0, "calculate_vdensity_array_pixelObject", "Calculate the voltage density array as a PixelObject."], [247, 1, 1, 0, "get_bins", "Construct bin edges from a sice and range."]], "data_base.data_base": [[249, 2, 1, 0, "DataBase", "Wrapper database class"], [250, 1, 1, 0, "_is_legacy_model_data_base", "Checks if a given path contains a ModelDataBase."], [251, 1, 1, 0, "_make_mdb_forwards_compatible", "Compatibility function to account for API changes from mdb to isf_db"], [252, 1, 1, 0, "get_db_by_unique_id", "Get a DataBase by its unique ID, as registered in the data base register."], [254, 1, 1, 0, "is_data_base", "Checks if a given path contains a DataBase."], [255, 1, 1, 0, "is_isf_data_base", "Checks if a given path contains a ISFDataBase."], [256, 1, 1, 0, "is_sub_data_base", "Check if a given key is a sub-database of the parent database."], [257, 1, 1, 0, "is_sub_isf_data_base", "Check if a given key is a sub-database of the parent database."], [258, 1, 1, 0, "is_sub_model_data_base", "Check if a given key is a sub-database of the parent database."]], "data_base.data_base_register": [[259, 2, 1, 0, "DataBaseRegister", "Two column registry mapping data bases to their locations."], [263, 1, 1, 0, "_get_db_register", "Get the database register."], [264, 1, 1, 0, "assimilate_remote_register", "Assimilate a remote register."], [265, 1, 1, 0, "deregister_db", "Deregister a database."], [267, 1, 1, 0, "register_db", "Register a database."]], "data_base.data_base_register.DataBaseRegister": [[260, 3, 1, 0, "add_db", "Add a database to the registry."], [261, 3, 1, 0, "keys", "Get all keys in the registry."], [259, 4, 1, 0, "registry", "The registry itself as an SQLite database."], [259, 4, 1, 0, "registry_basedir", "The location of the db registry"], [262, 3, 1, 0, "search_dbs", "Look for DataBase in all subfolders of the registry's directory and add them to the registry."]], "data_base.db_initializers": [[294, 0, 0, 1, "load_simrun_general", ""], [338, 0, 0, 1, "prepare_ANN_batches", ""], [345, 0, 0, 1, "synapse_activation_binning", ""]], "data_base.db_initializers.load_simrun_general": [[269, 1, 1, 0, "add_dendritic_spike_times", "Add dendritic spike times to the database."], [270, 1, 1, 0, "add_dendritic_voltage_traces", "Add dendritic voltage traces to the database."], [276, 0, 0, 1, "builders", ""], [277, 0, 0, 1, "data_parsing", ""], [287, 0, 0, 1, "file_handling", ""], [293, 0, 0, 1, "filepath_resolution", ""], [295, 1, 1, 0, "init", "Initialize a database with simulation data."], [296, 1, 1, 0, "load_initialized_cell_and_evokedNW_from_db", "Load and set up the cell and network from the database."], [300, 0, 0, 1, "metadata_utils", ""], [301, 1, 1, 0, "optimize", "Rewrite existing data with a new dumper."], [312, 0, 0, 1, "param_file_parser", ""], [316, 0, 0, 1, "reoptimize", ""], [320, 0, 0, 1, "utils", ""]], "data_base.db_initializers.load_simrun_general.builders": [[271, 1, 1, 0, "_build_core", "Parse the essential simulation results and add it to db."], [272, 1, 1, 0, "_build_dendritic_voltage_traces", "Load dendritic voltage traces and add them to the database under the key dendritic\\_recordings."], [273, 1, 1, 0, "_build_param_files", "Copy, transform and rename parameterfiles to a db."], [274, 1, 1, 0, "_build_synapse_activation", "Parse the syn_activation_format and spike_times_format data."], [275, 1, 1, 0, "_get_rec_site_managers", "Get the recording sites from the cell parameter files."]], "data_base.db_initializers.load_simrun_general.data_parsing": [[278, 1, 1, 0, "load_dendritic_voltage_traces", "Load the voltage traces from dendritic recording sites."], [279, 1, 1, 0, "load_dendritic_voltage_traces_helper", "Read the dendritic voltage traces of a single recording site across multiple simulation trials."], [280, 1, 1, 0, "read_voltage_traces_by_filenames", "Reads a list of multiple voltage trace files and parses it to a dask dataframe."], [281, 1, 1, 0, "read_voltage_traces_from_csv", "Reads a single voltage_traces_csv_format file as generated by the simrun package."], [282, 1, 1, 0, "read_voltage_traces_from_file", "Reads a single voltage traces file as generated by the simrun package."], [283, 1, 1, 0, "read_voltage_traces_from_files_pandas", "Reads a list of multiple voltage trace files and parses it to a single pandas dataframe."], [284, 1, 1, 0, "read_voltage_traces_from_npz", "Reads a single voltage_traces_npz_format file as generated by the simrun package."]], "data_base.db_initializers.load_simrun_general.file_handling": [[285, 1, 1, 0, "get_file", "Get the filename of the unique file in the current directory with the specified suffix."], [286, 1, 1, 0, "get_max_commas", "Get the maximum amount of delimiters across many files."], [288, 1, 1, 0, "make_filelist", "Generate a list of all files with suffix in the specified directory."]], "data_base.db_initializers.load_simrun_general.filepath_resolution": [[289, 1, 1, 0, "_convert_con_fns_to_reldb", ""], [290, 1, 1, 0, "_convert_netp_fns_to_reldb", "Convert all paths in a network_parameters_format file to point to a hash filename."], [291, 1, 1, 0, "_convert_neup_fns_to_reldb", "Convert all paths in a cell_parameters_format file to point to a hash filename."], [292, 1, 1, 0, "_convert_syn_fns_to_reldb", "Copy, rename and transform a single syn_file_format file."]], "data_base.db_initializers.load_simrun_general.metadata_utils": [[297, 1, 1, 0, "create_metadata", "Generate metadata out of a pd.Series containing the sim_trial_index."], [298, 1, 1, 0, "create_metadata_parallelization_helper", "Parallelize creating metadata across multiple simulation trials."], [299, 1, 1, 0, "get_voltage_traces_divisions_by_metadata", "Find the division indices based on the metadata."]], "data_base.db_initializers.load_simrun_general.param_file_parser": [[302, 1, 1, 0, "_copy_and_transform_con", "Copy, rename and transform a single con_file_format file."], [303, 1, 1, 0, "_copy_and_transform_network_param", "Convert all paths in a network_parameters_format file."], [304, 1, 1, 0, "_copy_and_transform_neuron_param", "Convert all paths in a cell_parameters_format file to point to a hash filename."], [305, 1, 1, 0, "_copy_and_transform_syn", "Copy, rename and transform a single syn_file_format file."], [306, 1, 1, 0, "_delayed_copy_transform_paramfiles_to_db", "Copy, transform and rename parameterfiles to a db."], [307, 1, 1, 0, "_generate_target_filenames", ""], [308, 1, 1, 0, "_get_unique_hoc_fns_from_neups", "Get the unique hoc files from a list of neuron parameter files."], [309, 1, 1, 0, "_get_unique_landmark_fns_from_neups", "Get the unique landmark files from a list of neuron parameter files."], [310, 1, 1, 0, "_get_unique_syncons_from_netps", "Get the unique synapse and connection files from a list of network parameter files."], [311, 1, 1, 0, "construct_param_filename_hashmap_df", "Generate a hashmap for the paths of cell_parameters_format and network_parameters_format files."], [313, 1, 1, 0, "load_param_files_from_db", "Load the cell_parameters_format and network_parameters_format files from the database."]], "data_base.db_initializers.load_simrun_general.reoptimize": [[314, 1, 1, 0, "_check_needs_reoptimization", "Check if a key needs re-optimization."], [315, 1, 1, 0, "_reoptimize_key", ""], [317, 1, 1, 0, "reoptimize_db", "Re-optimize a database with a new dumper."]], "data_base.db_initializers.load_simrun_general.utils": [[318, 1, 1, 0, "_get_dumper", "Infer the best dumper for a dataframe."], [319, 1, 1, 0, "_hash_file_content", ""]], "data_base.db_initializers.prepare_ANN_batches": [[321, 1, 1, 0, "augment_synapse_activation_df_with_branch_bin", "Augment a syn_activation_format dataframe with bin information."], [322, 1, 1, 0, "compute_AP_array", "One-hot encode spike times to a binned time vector."], [323, 1, 1, 0, "compute_ISI_array", "Calculate the time since the last spike in ms for each element in a spike time Array."], [324, 1, 1, 0, "compute_ISI_from_st", "Calculate the time since the last spike in ms for each element in a spike time pd.Series or pd.DataFrame."], [325, 1, 1, 0, "compute_ISI_from_st_list", "Construct a time-binned list of inter-spike intervals from a list of spike times."], [326, 1, 1, 0, "get_bin", "Find the bin index of a given value."], [327, 1, 1, 0, "get_bin_adjacency_map_in_section", "Create an adjacency map with bin-specific resolution for a given section."], [328, 1, 1, 0, "get_bin_soma_distances_in_section", "Get the distance to the soma for all bins in this section."], [329, 1, 1, 0, "get_binsize", "Calculate the bin size and number of bins closest to the desired bin size goal."], [330, 1, 1, 0, "get_max_depolarization_per_ms", "Subsample a voltage trace dask dataframe to 1ms bins based on the maximum depolarization."], [331, 1, 1, 0, "get_max_per_ms_on_pandas_dataframe", "Subsample a voltage trace pandas dataframe to 1ms bins based on the maximum depolarization."], [332, 1, 1, 0, "get_neighboring_spatial_bins", "Get all the neighboring bins from a bin_id."], [333, 1, 1, 0, "get_neuron_param_file", "Get the path to the cell_parameters_format file from a simrun-initialized database."], [334, 1, 1, 0, "get_section_distances_df", "Bin the morphology of a neuron from a cell_parameters_format file."], [335, 1, 1, 0, "get_spatial_bin_names", "Get the bin names from a dataframe describing the distance to soma of all sections."], [336, 1, 1, 0, "get_synapse_activation_array_weighted", "Create a 4D array of synapse activation times."], [337, 1, 1, 0, "get_time_groups", "Get the time groups for binning voltage traces."], [339, 1, 1, 0, "load_syn_weights", "Load synapse weights from a simrun-initialized database"], [340, 1, 1, 0, "run_delayeds_incrementally", "Convenience method to run a list of dask delayed objects incrementally."], [341, 1, 1, 0, "save_SA_batch", "Save a batch of synapse activation times to a file."], [342, 1, 1, 0, "spike_times_to_onehot", "One-hot encode spike times to a binned time vector."], [343, 1, 1, 0, "temporal_binning_augmented_sa", "Bin synapse activation times into temporal bins."]], "data_base.db_initializers.synapse_activation_binning": [[344, 1, 1, 0, "applyfun", "Bin the synapse activations using universal()."], [346, 1, 1, 0, "init", "Main pipeline to bin synapse activations from a syn_activation_format dataframe."], [347, 1, 1, 0, "merge_results_together", "Aggregate many dictionaries with the same keys."], [348, 1, 1, 0, "postfun", "Postprocess a column of the binned synapse activations."], [349, 1, 1, 0, "prefun", "Augment a syn_activation_format dataframe with additional columns."], [350, 1, 1, 0, "save_groupby", "Save the result of synapse_activation_postprocess_dask to a database."], [351, 1, 1, 0, "synapse_activation_postprocess_dask", "Calculates bins of synapse activation per trial from a dask dataframe."], [352, 1, 1, 0, "synapse_activation_postprocess_pandas", "Calculates bins of synapse activation per trial from a pandas dataframe."], [353, 1, 1, 0, "tree_reduction", "Recursively aggregate the results of a list of delayed objects."]], "data_base.dbopen": [[354, 1, 1, 0, "cache", "Cache the result of a function."], [355, 1, 1, 0, "create_modular_db_path", "Create a database path from a given path."], [356, 1, 1, 0, "create_reldb_path", "Create a relative database path"], [357, 2, 1, 0, "dbopen", "Context manager to open files in databases"], [359, 1, 1, 0, "resolve_db_path", "Resolve modular or relative database paths"], [360, 1, 1, 0, "resolve_modular_db_path", "Resolve the path of a database."], [361, 1, 1, 0, "resolve_netp_reldb_paths", "Convert all relative database paths in a network_parameters_format file to absolute paths."], [362, 1, 1, 0, "resolve_neup_reldb_paths", "Convert all relative database paths in a cell_parameters_format file to absolute paths."], [363, 1, 1, 0, "resolve_reldb_path", "Resolve a relative database path"]], "data_base.dbopen.dbopen": [[357, 4, 1, 0, "exit_hooks", "A list of functions to be called when the context manager is exited. Used to close .tar files"], [357, 4, 1, 0, "mode", "The mode in which the file is opened."], [357, 4, 1, 0, "path", "The path to the file."]], "data_base.distributed_lock": [[364, 2, 1, 0, "InterProcessLockNoWritePermission", "Check if the target file or directory has write access, and only lock it if so."], [367, 1, 1, 0, "_get_locking_config", "Get the locking configuration from the environment variable ISF\\_DISTRIBUTED\\_LOCK\\_CONFIG."], [368, 1, 1, 0, "_get_locking_server_client_from_config", ""], [369, 1, 1, 0, "get_lock", "Fetch the correct lock, depending on global locking server configuration."], [370, 1, 1, 0, "get_locking_client", "Get the locking client"], [371, 1, 1, 0, "get_locking_server", "Get the locking server"], [372, 1, 1, 0, "get_locking_server_client", "Get the file locking client object, depending on the file locking configuration."], [373, 1, 1, 0, "get_read_lock", "Fetch the correct read lock, depending on global locking server configuration."], [374, 1, 1, 0, "get_write_lock", "Fetch the correct write lock, depending on global locking server configuration."], [376, 1, 1, 0, "update_config", "Update the global configuration variables with the provided configuration."]], "data_base.distributed_lock.InterProcessLockNoWritePermission": [[365, 3, 1, 0, "acquire", "Acquire the lock on a path if the user has write permissions."], [364, 4, 1, 0, "lock", "The lock object if the user has write permissions, None otherwise."], [366, 3, 1, 0, "release", "Release the lock on a path if it was acquired."]], "data_base.exceptions": [[377, 2, 1, 0, "DataBaseException", "Typical data_base errors"], [378, 2, 1, 0, "ISFDataBaseException", "Typical isf_data_base errors"]], "data_base.isf_data_base": [[516, 0, 0, 1, "IO", ""], [554, 0, 0, 1, "isf_data_base", ""]], "data_base.isf_data_base.IO": [[411, 0, 0, 1, "LoaderDumper", ""], [514, 0, 0, 1, "dask_wrappers", ""]], "data_base.isf_data_base.IO.LoaderDumper": [[385, 0, 0, 1, "cell", ""], [394, 0, 0, 1, "dask_to_categorized_msgpack", ""], [399, 0, 0, 1, "dask_to_msgpack", ""], [405, 0, 0, 1, "dask_to_parquet", ""], [408, 1, 1, 0, "generic_to_specific_databases_module_name", "Convert a relative module path to an absolute one."], [409, 1, 1, 0, "get_dumper_string_by_dumper_module", "Convert a dumper submodule to a string."], [410, 1, 1, 0, "get_dumper_string_by_savedir", "Get the dumper string from a filepath."], [420, 0, 0, 1, "just_create_folder", ""], [425, 0, 0, 1, "just_create_isf_db", ""], [426, 1, 1, 0, "load", "Standard interface to load data."], [431, 0, 0, 1, "numpy_to_msgpack", ""], [436, 0, 0, 1, "numpy_to_npy", ""], [441, 0, 0, 1, "numpy_to_npz", ""], [446, 0, 0, 1, "numpy_to_zarr", ""], [451, 0, 0, 1, "pandas_to_msgpack", ""], [456, 0, 0, 1, "pandas_to_parquet", ""], [461, 0, 0, 1, "pandas_to_pickle", ""], [463, 0, 0, 1, "parent_classes", ""], [468, 0, 0, 1, "reduced_lda_model", ""], [488, 0, 0, 1, "shared_numpy_store", ""], [497, 0, 0, 1, "to_cloudpickle", ""], [502, 0, 0, 1, "to_msgpack", ""], [507, 0, 0, 1, "to_pickle", ""], [510, 0, 0, 1, "utils", ""]], "data_base.isf_data_base.IO.LoaderDumper.cell": [[381, 2, 1, 0, "Loader", "Loader for Cell objects"], [383, 1, 1, 0, "check", "Checks whether obj can be saved with this dumper"], [384, 1, 1, 0, "dump", "Dumps a Cell object to a directory"]], "data_base.isf_data_base.IO.LoaderDumper.cell.Loader": [[382, 3, 1, 0, "get", "Loads a Cell object from a directory"]], "data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack": [[386, 2, 1, 0, "Loader", "Base class for child Loader classes"], [388, 1, 1, 0, "bundle_delayeds", "bundeling delayeds provided a huge speedup. this issue was adressed here: https://github.com/dask/dask/issues/1884"], [389, 1, 1, 0, "category_to_str", "careful: changes pdf!"], [390, 1, 1, 0, "check", "checks wherther obj can be saved with this dumper"], [391, 1, 1, 0, "dump", "Save an object to a file in a DataBase in the pandas-msgpack format. Has been deprecated since 2023-09-01. Please use another dumper. This is only still available for testing purposes in support of backwards compatibility."], [392, 1, 1, 0, "get_numpy_dtype_as_str", "Get a string representation of the numpy dtype of an object. If the object is of type string, simply return 'str'."], [393, 1, 1, 0, "get_writer_function", "returns function, that stores pandas dataframe"], [395, 1, 1, 0, "my_dask_writer", "Very simple method to store a dask dataframe to a bunch of files. There was a lot of frustration with the respective dask method, which has some weired hard-to-reproduce issues, e.g. it sometimes takes all the ram (512GB!) or takes a very long time to \"optimize\" / merge the graph."], [396, 1, 1, 0, "read_object_meta", ""], [397, 1, 1, 0, "str_to_category", "careful: changes pdf!"]], "data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.Loader": [[387, 3, 1, 0, "get", ""]], "data_base.isf_data_base.IO.LoaderDumper.dask_to_msgpack": [[398, 1, 1, 0, "dump", ""]], "data_base.isf_data_base.IO.LoaderDumper.dask_to_parquet": [[400, 2, 1, 0, "Loader", "Load a dask dataframe from a parquet file"], [402, 1, 1, 0, "check", "Check whether the object can be saved with this dumper"], [403, 1, 1, 0, "check_df_suitable_for_pq", ""], [404, 1, 1, 0, "dump", "Save a dask dataframe to one or more parquet files."], [406, 1, 1, 0, "load_helper", "Load a single partition of a dask dataframe from a parquet file"], [407, 1, 1, 0, "save_helper", "Save a single partition of a dask dataframe to a parquet file"]], "data_base.isf_data_base.IO.LoaderDumper.dask_to_parquet.Loader": [[401, 3, 1, 0, "get", "Load a dask dataframe from one or more parquet files."]], "data_base.isf_data_base.IO.LoaderDumper.just_create_folder": [[412, 2, 1, 0, "Loader", "Load a ManagedFolder object from a folder path"], [414, 2, 1, 0, "ManagedFolder", "Wrapper class for a folder path"], [418, 1, 1, 0, "check", "Check whether the object can be saved with this dumper"], [419, 1, 1, 0, "dump", "Create a folder"]], "data_base.isf_data_base.IO.LoaderDumper.just_create_folder.Loader": [[413, 3, 1, 0, "get", "Get a ManagedFolder object from a folder path"]], "data_base.isf_data_base.IO.LoaderDumper.just_create_folder.ManagedFolder": [[415, 3, 1, 0, "get_file", "Get the files that end with the specified suffix."], [416, 3, 1, 0, "join", "Get a subfolder of the current folder"], [417, 3, 1, 0, "listdir", "List the files in the folder"]], "data_base.isf_data_base.IO.LoaderDumper.just_create_isf_db": [[421, 2, 1, 0, "Loader", "Loader for ISFDataBase objects"], [423, 1, 1, 0, "check", "Check whether the object can be saved with this dumper"], [424, 1, 1, 0, "dump", "Create a ISFDataBase object in the specified savedir"]], "data_base.isf_data_base.IO.LoaderDumper.just_create_isf_db.Loader": [[422, 3, 1, 0, "get", "Load the database from the specified folder."]], "data_base.isf_data_base.IO.LoaderDumper.numpy_to_msgpack": [[427, 2, 1, 0, "Loader", "Base class for child Loader classes"], [429, 1, 1, 0, "check", "checks wherther obj can be saved with this dumper"], [430, 1, 1, 0, "dump", ""]], "data_base.isf_data_base.IO.LoaderDumper.numpy_to_msgpack.Loader": [[428, 3, 1, 0, "get", ""]], "data_base.isf_data_base.IO.LoaderDumper.numpy_to_npy": [[432, 2, 1, 0, "Loader", "Loader for npy numpy arrays"], [434, 1, 1, 0, "check", "Check whether the object can be saved with this dumper"], [435, 1, 1, 0, "dump", "Save the numpy array in the specified directory"]], "data_base.isf_data_base.IO.LoaderDumper.numpy_to_npy.Loader": [[433, 3, 1, 0, "get", "Load the numpy array from the specified folder"]], "data_base.isf_data_base.IO.LoaderDumper.numpy_to_npz": [[437, 2, 1, 0, "Loader", "Loader for npz numpy arrays"], [439, 1, 1, 0, "check", "Check whether the object can be saved with this dumper"], [440, 1, 1, 0, "dump", "Write an object to a .npz file."]], "data_base.isf_data_base.IO.LoaderDumper.numpy_to_npz.Loader": [[438, 3, 1, 0, "get", "Read in an object in .npz format."]], "data_base.isf_data_base.IO.LoaderDumper.numpy_to_zarr": [[442, 2, 1, 0, "Loader", "Loader for zarr objects"], [444, 1, 1, 0, "check", "Check whether the object can be saved with this dumper"], [445, 1, 1, 0, "dump", "Write out an object in .zarr format."]], "data_base.isf_data_base.IO.LoaderDumper.numpy_to_zarr.Loader": [[443, 3, 1, 0, "get", "Read in an object in .zarr format."]], "data_base.isf_data_base.IO.LoaderDumper.pandas_to_msgpack": [[447, 2, 1, 0, "Loader", "Base class for child Loader classes"], [449, 1, 1, 0, "check", "checks wherther obj can be saved with this dumper"], [450, 1, 1, 0, "dump", "rows_per_file: automatically splits dataframe, such that rows_per_file rows of the df are saved in each file. This helps with large dataframes which otherwise would hit the 1GB limit of msgpack."]], "data_base.isf_data_base.IO.LoaderDumper.pandas_to_msgpack.Loader": [[448, 3, 1, 0, "get", ""]], "data_base.isf_data_base.IO.LoaderDumper.pandas_to_parquet": [[452, 2, 1, 0, "Loader", "Load for parquet files to pandas DataFrames"], [454, 1, 1, 0, "check", "Check whether the object can be saved with this dumper"], [455, 1, 1, 0, "dump", "Save the pandas DataFrame in the specified directory."]], "data_base.isf_data_base.IO.LoaderDumper.pandas_to_parquet.Loader": [[453, 3, 1, 0, "get", "Load the pandas DataFrame from the specified folder"], [452, 4, 1, 0, "meta", "Meta information to be saved with the object."]], "data_base.isf_data_base.IO.LoaderDumper.pandas_to_pickle": [[457, 2, 1, 0, "Loader", "Loader for pickle files to pandas DataFrames"], [459, 1, 1, 0, "check", "Check whether the object can be saved with this dumper"], [460, 1, 1, 0, "dump", "Save the pandas DataFrame to a .pickle file in the specified directory"]], "data_base.isf_data_base.IO.LoaderDumper.pandas_to_pickle.Loader": [[458, 3, 1, 0, "get", "Load the pandas DataFrame from the specified folder"]], "data_base.isf_data_base.IO.LoaderDumper.parent_classes": [[462, 2, 1, 0, "Loader", "Base class for child Loader classes"]], "data_base.isf_data_base.IO.LoaderDumper.reduced_lda_model": [[464, 2, 1, 0, "Loader", "Loader for ReducedLdaModel objects"], [466, 1, 1, 0, "check", "Check whether the object can be saved with this dumper"], [467, 1, 1, 0, "dump", "Save the reduced model in the specified directory as a DataBase."]], "data_base.isf_data_base.IO.LoaderDumper.reduced_lda_model.Loader": [[465, 3, 1, 0, "get", "Load the reduced model from the specified folder"]], "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store": [[469, 2, 1, 0, "Loader", "Loader for SharedNumpyStore objects."], [471, 2, 1, 0, "SharedNumpyStore", "Store numpy arrays on disk and share them between processes."], [483, 2, 1, 0, "Uninterruptible", "Context manager to create an uninterruptible section of code."], [484, 1, 1, 0, "_check_filesize_matches_shape", "Check whether the file size matches the expected size based on the shape and dtype."], [485, 1, 1, 0, "_get_offset_and_size_in_bytes", "Get the offset and size in bytes for a given start\\_row and end\\_row."], [486, 1, 1, 0, "check", "Check whether the object can be saved with this dumper."], [487, 1, 1, 0, "dump", "Dump the shared numpy store in the specified directory."], [489, 1, 1, 0, "memmap_from_disk", "Memory map a numpy array on disk."], [490, 1, 1, 0, "shared_array_from_disk", "Loads a numpy array from disk and puts it into shared memory"], [491, 1, 1, 0, "shared_array_from_numpy", "Takes an array in memory and puts it into shared memory"], [492, 1, 1, 0, "shared_array_from_shared_mem_name", "Loads an existing shared array by its name"]], "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.Loader": [[470, 3, 1, 0, "get", "Load the shared numpy store from the specified folder."]], "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.SharedNumpyStore": [[471, 4, 1, 0, "_files", "A dictionary mapping array names to filepaths in shared memory."], [472, 3, 1, 0, "_get_fname", "Get the filename of an array."], [473, 3, 1, 0, "_get_fname_from_metadata", "Get the filename from metadata."], [474, 3, 1, 0, "_get_metadata_from_fname", "Get metadata from a filename that follows the convention of NumpyStore."], [475, 3, 1, 0, "_get_metadata_from_name", "Get metadata from a name that follows the convention of NumpyStore."], [471, 4, 1, 0, "_pending_renames", "A dictionary containing all pending renames for files."], [471, 4, 1, 0, "_shared_memory_buffers", "A dictionary containing all already loaded buffers and arrays."], [471, 4, 1, 0, "_suffix", "A unique suffix for the working directory."], [476, 3, 1, 0, "append_save", "Appends the given numpy array arr to an existing array with the specified name."], [477, 3, 1, 0, "close", "Close all shared memory objects and remove them from the dictionary."], [478, 3, 1, 0, "flush", "Rename all files according to the new names in _pending_renames."], [479, 3, 1, 0, "get_expected_file_length", "Get the expected length in bytes of a file given its metadata (shape and dtype)."], [480, 3, 1, 0, "load", "Load an array from shared memory."], [481, 3, 1, 0, "save", "Save a numpy array to disk at the working_dir of this instance of NumpyStore."], [482, 3, 1, 0, "update", "Update the list of files in the working directory."], [471, 4, 1, 0, "working_dir", "The path of the working directory to store numpy arrays."]], "data_base.isf_data_base.IO.LoaderDumper.to_cloudpickle": [[493, 2, 1, 0, "Loader", "Loader for cloudpickle objects"], [495, 1, 1, 0, "check", "Check whether the object can be saved with this dumper"], [496, 1, 1, 0, "dump", "Save the object in the specified directory"]], "data_base.isf_data_base.IO.LoaderDumper.to_cloudpickle.Loader": [[494, 3, 1, 0, "get", "Load the object from the specified folder"]], "data_base.isf_data_base.IO.LoaderDumper.to_msgpack": [[498, 2, 1, 0, "Loader", "Base class for child Loader classes"], [500, 1, 1, 0, "check", "checks wherther obj can be saved with this dumper"], [501, 1, 1, 0, "dump", ""]], "data_base.isf_data_base.IO.LoaderDumper.to_msgpack.Loader": [[499, 3, 1, 0, "get", ""]], "data_base.isf_data_base.IO.LoaderDumper.to_pickle": [[503, 2, 1, 0, "Loader", "Loader for pickle objects"], [505, 1, 1, 0, "check", "Check whether the object can be saved with this dumper"], [506, 1, 1, 0, "dump", "Save the object in the specified directory"]], "data_base.isf_data_base.IO.LoaderDumper.to_pickle.Loader": [[504, 3, 1, 0, "get", "Load the object from the specified folder"]], "data_base.isf_data_base.IO.LoaderDumper.utils": [[508, 1, 1, 0, "get_meta_filename", "Get the filename of the meta file in the savedir."], [509, 1, 1, 0, "get_numpy_dtype_as_str", "Get a string representation of the numpy dtype of an object."], [511, 1, 1, 0, "read_object_meta", "Get the metadata associated with a saved object."], [512, 1, 1, 0, "save_object_meta", "Construct a meta object to help out dask or parquet later on."], [513, 1, 1, 0, "set_object_meta", "Reset the dtypes of the columns and index of an object to the original dtypes."]], "data_base.isf_data_base.IO.dask_wrappers": [[515, 1, 1, 0, "read_csvs", "Read dask dataframes from csv files."]], "data_base.isf_data_base.isf_data_base": [[518, 2, 1, 0, "ISFDataBase", "Main database class."], [548, 2, 1, 0, "LoaderWrapper", "This is a pointer to data, which is stored elsewhere."], [549, 2, 1, 0, "MetadataAccessor", "Access the metadata of some database key."], [551, 1, 1, 0, "_check_working_dir_clean_for_build", "Check if a directory is suitable to build a new database."], [552, 1, 1, 0, "get_dumper_from_folder", "Given a folder (i.e. database key), return the dumper that was used to save the data in that folder/key."], [553, 1, 1, 0, "get_isfdb_by_unique_id", "Get an ISFDataBase object by its unique ID."], [555, 1, 1, 0, "make_all_str", "Convert all items in a (nested) dictionary to string."]], "data_base.isf_data_base.isf_data_base.ISFDataBase": [[518, 4, 1, 0, "_basedir", "pathlib.Path object of basedir, to use internally."], [519, 3, 1, 0, "_check_key_format", "Checks if a key is valid for setting data."], [520, 3, 1, 0, "_check_writing_privilege", "Check if we have permission to write to a key."], [521, 3, 1, 0, "_convert_key_to_path", "Infer the file path from a database key."], [518, 4, 1, 0, "_db_state_fn", "The path to the database state file. Contains information on:"], [522, 3, 1, 0, "_detect_dumper_string_of_existing_key", "Get the dumper of an existing key as a string (not module)."], [523, 3, 1, 0, "_find_dumper", "Finds a suitable dumper of a given item."], [518, 4, 1, 0, "_forbidden_keys", "A list of keys that are not allowed to be used: [\"Loader.json\", \"metadata.db.lock\", \"sqlitedict.db.lock\", \"db_state.json\"]"], [524, 3, 1, 0, "_get_str", "Fetches a string representation for this db in a tree structure."], [525, 3, 1, 0, "_infer_missing_metadata", "Checks whether metadata is missing, and tries to estimate it."], [526, 3, 1, 0, "_initialize", "Initialize the database."], [527, 3, 1, 0, "_is_initialized", "Check if the current database is initialized."], [528, 3, 1, 0, "_register_this_database", "Register this database with the database register."], [518, 4, 1, 0, "_registeredDumpers", "A list of all registered dumpers. Dumpers are data-type and file-type specific modules to write out data. See: LoaderDumper"], [518, 4, 1, 0, "_registered_to_path", "The path that this database has been registered to on the current filesystem."], [529, 3, 1, 0, "_set_unique_id", "Sets a unique ID for the DataBase as class attribute."], [530, 3, 1, 0, "_subkeys", "Returns all keys of a database, including their subdatabase keys."], [518, 4, 1, 0, "_suppress_errors", "If True, errors will be suppressed and raised as warnings instead. Use with caution."], [518, 4, 1, 0, "_unique_id", "A unique identifier for this database."], [531, 3, 1, 0, "_write_metadata", "Writes the metadata of this database."], [518, 4, 1, 0, "basedir", "The directory in which the database will be created, or read from."], [532, 3, 1, 0, "check_if_key_exists", "Check if a key exists in the database."], [533, 3, 1, 0, "create_managed_folder", "Create a folder in the db directory."], [534, 3, 1, 0, "create_shared_numpy_store", "Create a shared numpy store in the db directory."], [535, 3, 1, 0, "create_sub_db", "Creates a database within a database."], [536, 3, 1, 0, "get", "Get data from the database."], [537, 3, 1, 0, "get_id", "Get the unique ID of this database."], [538, 3, 1, 0, "get_mkdtemp", "Create a temporary directory in the data_base"], [539, 3, 1, 0, "keys", "Get the keys of the database."], [540, 3, 1, 0, "ls", "Prints out the content of the database in a tree structure."], [541, 3, 1, 0, "maybe_calculate", "Get or calculate a value in the database."], [518, 4, 1, 0, "metadata", "A dictionary containing metadata for the database. See also: MetadataAccessor."], [518, 4, 1, 0, "nocreate", "If True, a new database will not be created if it does not exist."], [518, 4, 1, 0, "parent_db", "The parent database, if this is a sub-database. Default: None."], [542, 3, 1, 0, "read_db_state", "Sets the state of the database according to db_state.json"], [518, 4, 1, 0, "readonly", "If True, the database will be read-only."], [543, 3, 1, 0, "register_dumper", "Register a dumper with this database, so it can be used to save data."], [544, 3, 1, 0, "remove", "Deletes the database."], [545, 3, 1, 0, "rename", "Rename a key in the database."], [546, 3, 1, 0, "save_db_state", "Saves the data which defines the state of this database to db_state.json"], [547, 3, 1, 0, "set", "Main method to save data in a DataBase."]], "data_base.isf_data_base.isf_data_base.MetadataAccessor": [[550, 3, 1, 0, "keys", "Return the keys of the db"]], "data_base.utils": [[557, 2, 1, 0, "DelayedKeyboardInterrupt", "Context manager that allows to delay a KeyboardInterrupt such that it also works in subthreads."], [559, 2, 1, 0, "bcolors", "List of colors for terminal output in bash."], [560, 1, 1, 0, "cache", "Decorator to cache the result of a function"], [561, 1, 1, 0, "calc_recursive_filetree", "Fetches the contents of an db and formats them as a string representing a tree structure"], [562, 1, 1, 0, "chunkIt", "Splits seq in num lists, with approximately equal size."], [563, 1, 1, 0, "colorize_key", "Colorizes a key based on its type."], [564, 1, 1, 0, "colorize_str", "Colorize a string with a terminal color."], [565, 1, 1, 0, "convertible_to_int", "Returns True if x can be converted to an integer, False otherwise"], [566, 1, 1, 0, "delete_in_background", "Starts a background process that deletes a key"], [567, 1, 1, 0, "df_colnames_to_str", "Convert the column names and index names of a dataframe to string."], [568, 1, 1, 0, "fancy_dict_compare", "Compare two dictionaries recursively to find non-matching elements"], [569, 1, 1, 0, "first_line_to_key", "Convert a list of StringIO objects to a dictionary."], [570, 1, 1, 0, "flatten", "Flatten a nested list"], [571, 1, 1, 0, "get_file_or_folder_that_endswith", "Get the file or folder in a directory that ends with a certain string"], [572, 1, 1, 0, "get_file_or_folder_that_startswith", "Get the file or folder in a directory that starts with a certain string"], [574, 1, 1, 0, "is_db", "Check if a path is a DataBase."], [575, 2, 1, 0, "mkdtemp", "Context manager for creating temporary directories"], [576, 1, 1, 0, "myrepartition", "Repartition a dask dataframe without generating more tasks."], [577, 1, 1, 0, "pandas_to_array", "Convert a pandas dataframe, in which information is stored linearly to a 2D presentation."], [578, 1, 1, 0, "pooled_std", "Calculates the pooled standard deviation out of samples."], [579, 1, 1, 0, "rename_for_deletion", "Renames some key to indicate it's in the process of being deleted."], [580, 1, 1, 0, "select", "Selects rows from a dataframe based on the values of the columns"], [581, 2, 1, 0, "silence_stdout", "Silence stdout"], [582, 1, 1, 0, "skit", "Splits kwargs up to supply different functions with the right subset."], [583, 1, 1, 0, "split_file_to_buffers", "Reads a file f and splits it wherever split_str is found."], [584, 1, 1, 0, "synchronous_ddf_concat", "Concatenate a pickles dask dataframe to a pandas dataframe."], [585, 1, 1, 0, "unique", "Get the unique elements of a list"], [586, 1, 1, 0, "wait_until_key_removed", "Wait until a key is removed from a database."]], "data_base.utils.DelayedKeyboardInterrupt": [[558, 3, 1, 0, "handler", "Handle KeyboardInterrupt signals and delay them"]], "data_base.utils.bcolors": [[559, 4, 1, 0, "BOLD", "Bold"], [559, 4, 1, 0, "ENDC", "End color (reset)"], [559, 4, 1, 0, "FAIL", "Fail color"], [559, 4, 1, 0, "HEADER", "Header color"], [559, 4, 1, 0, "OKBLUE", "Blue color"], [559, 4, 1, 0, "OKCYAN", "Cyan color"], [559, 4, 1, 0, "OKGREEN", "Green color"], [559, 4, 1, 0, "UNDERLINE", "Underline"], [559, 4, 1, 0, "WARNING", "Warning color"]], "simrun": [[597, 0, 0, 1, "PSP_with_cell_modification", ""], [600, 0, 0, 1, "generate_synapse_activations", ""], [602, 0, 0, 1, "get_cell_with_network", ""], [615, 0, 0, 1, "modular_reduced_model_inference", ""], [674, 0, 0, 1, "parameters_to_cell", ""], [677, 0, 0, 1, "rerun_db", ""], [686, 0, 0, 1, "robust_dask_delayed_execution", ""], [687, 0, 0, 1, "run_existing_synapse_activations", ""], [689, 0, 0, 1, "run_new_simulations", ""], [692, 0, 0, 1, "seed_manager", ""], [693, 0, 0, 1, "sim_trial_to_cell_object", ""], [719, 0, 0, 1, "synaptic_strength_fitting", ""], [732, 0, 0, 1, "utils", ""]], "simrun.PSP_with_cell_modification": [[587, 2, 1, 0, "PSP_with_current_injection", "Simulate EPSPs and IPSPs while the soma is voltage-clamped to a fixed membrane potential."], [596, 1, 1, 0, "combine_PSP_objects", "Combine two PSPs objects into one."]], "simrun.PSP_with_cell_modification.PSP_with_current_injection": [[588, 3, 1, 0, "_get_current_dependent_vt", "Run the current injection simulation"], [589, 3, 1, 0, "_objective_fun", "Callable to optimize."], [587, 4, 1, 0, "bounds", "Limits for the current injection optimization to clamp the membrane potential (in nA)."], [587, 4, 1, 0, "cell_modify_functions", "Dictionary of cell modification functions (see cell_modify_functions). The keys are the names of the functions, the values are the parameters of the functions."], [587, 4, 1, 0, "confile", "Path to the network connectivity (con_file_format) file."], [587, 4, 1, 0, "delay", "Delay before the current injection starts (in ms)."], [587, 4, 1, 0, "duration", "Duration of the current injection (in ms)."], [590, 3, 1, 0, "get", "Get the final PSPs object."], [591, 3, 1, 0, "get_neuron_param_with_current_injection", "Get a cell_parameters_format file with a current injection."], [592, 3, 1, 0, "get_psp_simulator", "Set up a PSPs object to simulate individual synapse PSPs."], [593, 3, 1, 0, "get_psp_simulator_exc_and_inh_combined", "Set up and combine excitatory and inhibitory PSP simulators."], [587, 4, 1, 0, "holding_current", "Current that needs to be injected to hold the somatic potential at target_vm."], [587, 4, 1, 0, "neuron_param", "Parameters of the neuron model."], [587, 4, 1, 0, "optimize_for_timepoint", "Timepoint for membrane voltage optimization (in ms). This usually coincides with the timepoint of a single synapse activation, after the membrane voltage has stabilized."], [594, 3, 1, 0, "optimize_holding_current", "Calculate the current that needs to be injected to hold the somatic potential at target_vm."], [595, 3, 1, 0, "plot_current_injection_voltage_trace", "Visualize the voltage trace during the current injection"], [587, 4, 1, 0, "tEnd", "End time of the simulation (in ms)."], [587, 4, 1, 0, "target_vm", "Membrane potential to clamp the soma to (in mV)."]], "simrun.generate_synapse_activations": [[598, 1, 1, 0, "_evoked_activity", "Calculate and write synapse activations and presynaptic spike times."], [599, 1, 1, 0, "generate_synapse_activations", "Generates nSweeps * nprocs synapse activation files and writes them to the folder dirPrefix/results/simName."]], "simrun.get_cell_with_network": [[601, 1, 1, 0, "get_cell_with_network", "Build a cell with realized synapses from a cell_parameters_format file and a network_parameters_format file."]], "simrun.modular_reduced_model_inference": [[614, 0, 0, 1, "data_extractor", ""], [633, 0, 0, 1, "reduced_model", ""], [642, 0, 0, 1, "solver", ""], [672, 0, 0, 1, "strategy", ""]], "simrun.modular_reduced_model_inference.data_extractor": [[604, 2, 1, 0, "DataExtractor_spatiotemporalSynapseActivation", "Extracts matrix of the shape (trial, time, space) from spatiotemporal synapse activation binning"], [612, 2, 1, 0, "_DataExtractor", "Simple base class for data extractors."]], "simrun.modular_reduced_model_inference.data_extractor.DataExtractor_spatiotemporalSynapseActivation": [[605, 3, 1, 0, "_get_spatial_bin_level", "Get the string index of the database key that relects the spatial dimension"], [606, 3, 1, 0, "_get_spatiotemporal_input", "returns spatiotemporal input in the following dimensions: (trial, time, space)"], [604, 4, 1, 0, "data", "dictionary with groups as keys and spatiotemporal inputpatterns as keys."], [607, 3, 1, 0, "get", "Get the spatiotemporal input patterns."], [608, 3, 1, 0, "get_groups", "Get all groups (other than spatial binning)"], [609, 3, 1, 0, "get_sorted_keys_by_group", "returns keys sorted such that the first key is the closest to the soma"], [610, 3, 1, 0, "get_spatial_binsize", "Get the spatial binsize"], [604, 4, 1, 0, "key", "key to access the data in the DataBase"], [611, 3, 1, 0, "setup", "Set up the data extractor."]], "simrun.modular_reduced_model_inference.data_extractor._DataExtractor": [[613, 3, 1, 0, "setup", "Setup necessary parameters, depending on which RM is passed"]], "simrun.modular_reduced_model_inference.reduced_model": [[616, 2, 1, 0, "DataSplitEvaluation", "Split data in training-test sets."], [622, 2, 1, 0, "DataView", "Convenience wrapper class to access data."], [624, 2, 1, 0, "Rm", "Reduced model class."], [632, 1, 1, 0, "get_n_workers_per_ip", "Convenience method to get a certain amount of workers per machine"]], "simrun.modular_reduced_model_inference.reduced_model.DataSplitEvaluation": [[616, 4, 1, 0, "Rm", "Reduced model. Set after running setup()"], [617, 3, 1, 0, "add_isi_dependent_random_split", "Split data based on the inter-spike interval."], [618, 3, 1, 0, "add_random_split", "Set the train-test split randomly."], [619, 3, 1, 0, "add_result", "Save the optimization result."], [620, 3, 1, 0, "compute_scores", "Compute the score of the optimization."], [621, 3, 1, 0, "get_splits", "Get the train-test splits."], [616, 4, 1, 0, "optimizer_results", "List of optimization results"], [616, 4, 1, 0, "optimizer_results_keys", "List of optimization results keys"], [616, 4, 1, 0, "scores", "List of scores"], [616, 4, 1, 0, "scores_keys", "List of scores"], [616, 4, 1, 0, "solvers", "List of solvers"], [616, 4, 1, 0, "splits", "Dictionary of splits"]], "simrun.modular_reduced_model_inference.reduced_model.DataView": [[622, 4, 1, 0, "Rm", "Reduced model. Set after running setup()"], [622, 4, 1, 0, "mapping_dict", "Mapping between requested keys and target keys. Used to redirect data fetching."], [623, 3, 1, 0, "setup", "Initialize from a reduced model."]], "simrun.modular_reduced_model_inference.reduced_model.Rm": [[624, 4, 1, 0, "Data", "Data view object"], [624, 4, 1, 0, "DataSplitEvaluation", "Data split evaluation object"], [625, 3, 1, 0, "_gather_results", "Fetch the solver results from the dask scheduler."], [626, 3, 1, 0, "add_data_extractor", "Add a data extractor to the reduced model."], [627, 3, 1, 0, "add_strategy", "Add a strategy to the reduced model."], [624, 4, 1, 0, "data_extractors", "Dictionary of _DataExtractor objects"], [624, 4, 1, 0, "db", "Path to the database"], [628, 3, 1, 0, "extract", "Extract data using the data extractor."], [629, 3, 1, 0, "get_n_trials", "Get the amount of trials."], [630, 3, 1, 0, "get_results", "Get the results of the optimization."], [624, 4, 1, 0, "n_trials", "Amount of trials"], [624, 4, 1, 0, "name", "Name of the reduced model"], [624, 4, 1, 0, "results_remote", "Flag that keeps track whether results are stored locally or on a remote scheduler."], [631, 3, 1, 0, "run", "Run one or more strategies on the data."], [624, 4, 1, 0, "selected_indices", "List/nested list of integer indices for selected simulation trials"], [624, 4, 1, 0, "strategies", "Dictionary of Strategy objects"], [624, 4, 1, 0, "tmax", "Maximum time for the simulation"], [624, 4, 1, 0, "tmin", "Minimum time for the simulation"], [624, 4, 1, 0, "width", "Width of the temporal kernel. This will be used as the domain e.g. the \\\\tau domain in RaisedCosineBasis"]], "simrun.modular_reduced_model_inference.solver": [[634, 2, 1, 0, "Solver_COBYLA", "A COBYLA solver strategy for reduced models."], [637, 2, 1, 0, "_Solver", "Solver base class"]], "simrun.modular_reduced_model_inference.solver.Solver_COBYLA": [[635, 3, 1, 0, "_optimize", "Static optimization method."], [636, 3, 1, 0, "_setup_optimizer", "Set up the optimization strategy."], [634, 4, 1, 0, "name", "name of the solver"], [634, 4, 1, 0, "optimize", "Optimization function: scipy.optimize.minimize() with method='COBYLA'. Optimization function need an objective function to minimize. These objecetive functions depend on the strategy."]], "simrun.modular_reduced_model_inference.solver._Solver": [[638, 3, 1, 0, "_setup_optimizer", "Set up the optimization strategy."], [637, 4, 1, 0, "name", "name of the solver"], [637, 4, 1, 0, "optimize", "The solver-specific optimization function."], [639, 3, 1, 0, "optimize_all_splits", "Optimize the cost function for all splits of the strategy."], [640, 3, 1, 0, "optimize_one_split", "Optimize the cost function for a single split."], [641, 3, 1, 0, "setup", "Setup the solver for a given strategy and optimizer."], [637, 4, 1, 0, "strategy", "The strategy object. This is set during setup()."]], "simrun.modular_reduced_model_inference.strategy": [[643, 2, 1, 0, "RaisedCosineBasis", "Set of raised cosine basis functions to use as a kernel for weighing synaptic activation patterns."], [650, 2, 1, 0, "Strategy_spatiotemporalRaisedCosine", "Spatiotemporal raised cosine strategy."], [659, 2, 1, 0, "_Strategy", "Strategy base class."], [669, 1, 1, 0, "clear_memory", "Remove all weak references"], [670, 1, 1, 0, "convert_to_numpy", "Convert a numpy to a cupy array"], [671, 1, 1, 0, "dereference", "Dereference a reference and fetch the referent."], [673, 1, 1, 0, "make_weakref", "Create a weak reference of a Python object."]], "simrun.modular_reduced_model_inference.strategy.RaisedCosineBasis": [[643, 4, 1, 0, "a", "The steepness of the raised cosine. Default is 2."], [643, 4, 1, 0, "backend", "The backend to use (cupy or numpy). Default is numpy."], [643, 4, 1, 0, "basis", "The list of basis functions."], [643, 4, 1, 0, "c", "The offset of the raised cosine. Default is 1."], [644, 3, 1, 0, "compute", "Compute the vector of raised cosine basis functions \\mathbf{f}."], [645, 3, 1, 0, "get", "Get the basis functions \\mathbf{f}."], [646, 3, 1, 0, "get_raised_cosine", "Calculate a single raised cosine basis function f_i over the domain t."], [647, 3, 1, 0, "get_superposition", "Get the weighed sum \\mathbf{w}(\\tau) of the basis functions f."], [643, 4, 1, 0, "phis", "The phases of the raised cosine. Default is np.arange(1, 11, 0.5)."], [643, 4, 1, 0, "reversed_", "Whether to reverse the basis functions. Default is False."], [648, 3, 1, 0, "visualize", "Visualize the basis functions \\mathbf{f}."], [649, 3, 1, 0, "visualize_w", "Visualize the superposition \\mathbf{w}(\\tau) of the basis functions \\mathbf{f}."], [643, 4, 1, 0, "width", "The width of the basis functions. Default is 80."]], "simrun.modular_reduced_model_inference.strategy.Strategy_spatiotemporalRaisedCosine": [[650, 4, 1, 0, "RaisedCosineBasis_spatial", "The spatial basis functions \\mathbf{g}(z)."], [650, 4, 1, 0, "RaisedCosineBasis_temporal", "The temporal basis functions \\mathbf{f}(t)."], [651, 3, 1, 0, "_convert_x_static", "Convert the input array \\mathbf{x} into a dictionary of basis vectors."], [650, 4, 1, 0, "_get_score", "The cost function to provide to the optimizer."], [652, 3, 1, 0, "_get_score_static", "Calculate the weighted net input WNI(t) for the given weights \\mathbf{x}."], [653, 3, 1, 0, "_get_x0", "Get an initial guess for the learnable weights  \\mathbf{x} and \\mathbf{y} of the basis functions \\mathbf{f}(\\tau) and \\mathbf{g}(z)."], [654, 3, 1, 0, "_setup", "Compute the strategy's basis vectors and set up the objective function."], [650, 4, 1, 0, "base_vectors_arrays_dict", "The basis vectors for each group. basis vectors are of shape (n_trials, N_{tau}, N_{z}) These basis vectors are used for the optimizer, and are already multiplied with the data. Do not confuse them with the basis vectors of RaisedCosineBasis_spatial and RaisedCosineBasis_temporal, as the latter are not multiplied with the synapse activaiton data."], [655, 3, 1, 0, "compute_basis", "Compute the basis vectors for the dataset."], [650, 4, 1, 0, "convert_x", "The conversion function to convert the 1D learnable weight vector \\mathbf{x} into a structured dictionary."], [656, 3, 1, 0, "get_color_by_group", "Map groups to a color."], [650, 4, 1, 0, "groups", "The list of groups. Usually simply ['EXC', 'INH']."], [650, 4, 1, 0, "len_t", "The length of the temporal domain i.e. the amount of temporal basis vectors."], [650, 4, 1, 0, "len_trials", "The number of trials."], [650, 4, 1, 0, "len_z", "The length of the spatial domain i.e. the amount of spatial basis vectors."], [657, 3, 1, 0, "normalize", "Normalize the kernel basis functions such that sum of all absolute values of all kernels is 1."], [658, 3, 1, 0, "visualize", "Plot the basis functions."]], "simrun.modular_reduced_model_inference.strategy._Strategy": [[660, 3, 1, 0, "_get_score", "Compute the score for the given parameters x."], [661, 3, 1, 0, "_get_x0", "Get an initial guess for the learnable weights of the basis functions \\mathbf{x}."], [662, 3, 1, 0, "_objective_function_static", "Compute the objective value for the given parameters x."], [663, 3, 1, 0, "_setup", "Strategy-specific setup."], [664, 3, 1, 0, "add_solver", "Add a solver to the strategy."], [665, 3, 1, 0, "get_score_static", "Convert the strategy-specific _get_score method to a static method."], [666, 3, 1, 0, "get_y_static", "Fetch the labels for the given split."], [667, 3, 1, 0, "set_split", "Set the split for this strategy."], [668, 3, 1, 0, "setup", "Setup the strategy with the given data."]], "simrun.parameters_to_cell": [[675, 1, 1, 0, "parameters_to_cell", "Rebuild and simulate a network-embedded cell."]], "simrun.rerun_db": [[676, 2, 1, 0, "Opaque", "Wrapper class to make objects opaqye to dask"], [678, 1, 1, 0, "rerun_db", "Recreate and resimulate a network-embedded neuron simulation from a simrun-initialized database."]], "simrun.robust_dask_delayed_execution": [[679, 2, 1, 0, "RobustDaskDelayedExecution", "Execute dask delayed objects in a robust way."], [684, 1, 1, 0, "_assert_value", "Assert that the value in the database is as expected."], [685, 1, 1, 0, "_wrapper", "Wrapper to robustly compute database values."]], "simrun.robust_dask_delayed_execution.RobustDaskDelayedExecution": [[680, 3, 1, 0, "add_delayed_to_db", "Add a delayed object to the database."], [679, 4, 1, 0, "db", "The database containing the ManagedFolder objects, which in turn contain the dask delayed objects."], [681, 3, 1, 0, "get_status", "Get the status on the computation of the delayed objects."], [682, 3, 1, 0, "reset_status", "Reset the status of the delayed objects to 'not_started'."], [683, 3, 1, 0, "run_db", "Run all delayed objects in the database."]], "simrun.run_existing_synapse_activations": [[688, 1, 1, 0, "run_existing_synapse_activations", "Recreate and resimulate a network-embedded neuron simulation from a list of syn_activation_format files."]], "simrun.run_new_simulations": [[690, 1, 1, 0, "run_new_simulations", "Create and simulate network-embedded neuron models."]], "simrun.seed_manager": [[691, 1, 1, 0, "get_seed", "Get a random seed."]], "simrun.sim_trial_to_cell_object": [[694, 1, 1, 0, "simtrial_to_cell_object", "Recreate and resimulate a single simulation trial from parameter files and return the cell object."], [695, 1, 1, 0, "trial_to_cell_object", "Recreate and resimulate a single simulation trial from parameter files and return the cell object."]], "simrun.synaptic_strength_fitting": [[696, 2, 1, 0, "PSPs", "Calculate PSP amlitudes of single synapses and fit synaptic strength"], [709, 1, 1, 0, "analyze_voltage_trace", "Calculate a voltage trace's extremum and time point thereof."], [710, 1, 1, 0, "calculate_optimal_g", "Calculate the optimal synaptic conductance such that the EPSP statistics match empirical data."], [711, 1, 1, 0, "ePSP_summary_statistics", "Calculate summary statistics of the PSP voltage and timing."], [712, 1, 1, 0, "generate_ex_network_param_from_network_embedding", "Generate a network parameter file for excitatory synapses from a con_file_format file."], [713, 1, 1, 0, "generate_inh_network_param_from_network_embedding", "Generate a network parameter file for inhibitory synapses from a con_file_format file."], [714, 1, 1, 0, "get_optimal_g", "Calculate the optimal synaptic conductance such that the EPSP matches empirical data."], [715, 1, 1, 0, "get_summary_statistics", "Calculate summary statistics of the EPSPs."], [716, 1, 1, 0, "get_tMax_vMax", "Calculate the maximum amplitude of an ePSP."], [717, 1, 1, 0, "get_tMax_vMax_baseline", "Calculate the ePSP amplitude."], [718, 1, 1, 0, "get_voltage_and_timing", "Calculate the maximum amplitude (and their timing) of an ePSP for all synapses."], [720, 1, 1, 0, "linear_fit", "Calculate a linear fit between the synaptic conductance and the EPSP."], [721, 1, 1, 0, "linear_fit_pdf", "Calculate linear fits between the synaptic conductance and the EPSP."], [722, 1, 1, 0, "merge_celltypes", "Concatenate the EPSPs of given celltypes."], [723, 1, 1, 0, "run_ex_synapse", "Simulate a single excitatory or inhibitory synapse"], [724, 1, 1, 0, "run_ex_synapses", "Simulate all EPSPs of a given celltype, one by one."], [725, 1, 1, 0, "set_ex_synapse_weight", "Set the synaptic strength of an excitatory single_cell_parser.synapse.Synapse."], [726, 1, 1, 0, "set_inh_synapse_weight", "Set the synaptic strength of an inhibitory single_cell_parser.synapse.Synapse."]], "simrun.synaptic_strength_fitting.PSPs": [[696, 4, 1, 0, "AMPA_component", "float"], [696, 4, 1, 0, "NMDA_component", "float"], [697, 3, 1, 0, "_get_cell_and_nw_map", "Get a network-embedded neuron model and its single_cell_parser.network.Networkmapper from parameter files."], [698, 3, 1, 0, "_setup_computation", "Construct delayed functions for running single-synapse simulations."], [696, 4, 1, 0, "confile", "Path to a con_file_format file."], [696, 4, 1, 0, "exc_inh", "Whether to fit excitatory or inhibitory synapses. Used to infer the deflection direction of the PSP (positive or negative). Options: ('exc', 'inh') Default: 'exc'"], [696, 4, 1, 0, "futures", "List of futures returned by the dask client, containing the future results of the synaptic strength fitting simulations."], [696, 4, 1, 0, "gExRange", "List of allowed synaptic strength values (in \\mu S)."], [699, 3, 1, 0, "get_merged_synapse_coordinates", "Get the coordinates of all synapses that contain a certain string in their name."], [700, 3, 1, 0, "get_optimal_g", "Calculate the optimal synaptic conductance such that the EPSP matches empirical data."], [701, 3, 1, 0, "get_summary_statistics", "Calculate summary statistics of the PSP voltage and timing."], [702, 3, 1, 0, "get_synapse_coordinates", "Get the coordinates of all synapses of a particular celltype."], [703, 3, 1, 0, "get_synapse_coordinates_with_psp_amplitude", "Get the synapse coordinates and the PSP amplitude for each synapse."], [704, 3, 1, 0, "get_voltage_and_timing", "Calculate a PSP's maximum voltage deflection and timing thereof."], [705, 3, 1, 0, "get_voltage_traces", "Gather the ePSP voltage traces for each synapse."], [696, 4, 1, 0, "mode", "Whether to activate each synapse one by one, or each cell one by one. A presynaptic cell may have multiple synaptic connections with the neuron model (i.e. the Cell). Options: ('cells', 'synapses') Default: 'cells'"], [696, 4, 1, 0, "network_param", "The network_parameters_format for either excitatory or inhibitory synapses to be fitted. The synapse type is defined by exc_inh."], [696, 4, 1, 0, "network_params_by_celltype", "List of network parameters for each cell type in the network."], [696, 4, 1, 0, "neuron_param", "The cell_parameters_format."], [706, 3, 1, 0, "plot_vt", "Plot the voltage traces of the PSPs."], [696, 4, 1, 0, "result", "List of results returned by the dask client, containing the results of the synaptic strength fitting simulations."], [707, 3, 1, 0, "run", "Run the single-cell simulations from the _delayeds."], [696, 4, 1, 0, "tEnd", "End time of the simulation."], [696, 4, 1, 0, "tStim", "Time of the synaptic activation. Should be large enough such that the membrane voltage has time to stabilize."], [696, 4, 1, 0, "vardt", "Whether to use the variable step size solver."], [708, 3, 1, 0, "visualize_psps", "Plot a histogram of the EPSP max voltage deflections for each celltype."]], "simrun.utils": [[727, 1, 1, 0, "chunkIt", "Split a sequence in multiple lists which have approximately equal size."], [728, 1, 1, 0, "get_cellnumbers_from_confile", "Get the amount of cells of each type from a confile."], [729, 1, 1, 0, "get_default_arguments", "Gets the keyword arguments with their default value from any function."], [730, 1, 1, 0, "get_fraction_of_landmarkAscii", "Sample landmarks (i.e. 3D points) from a landmarkAscii file."], [731, 1, 1, 0, "get_fraction_of_landmarkAscii_dir", "Sample landmarks from all landmarkAscii files in a directory."], [733, 1, 1, 0, "load_param_file_if_path_is_provided", "Convenience function to load a parameter file whether it is a string or a dictionary."], [734, 1, 1, 0, "select_cells_that_spike_in_interval", "Select cells whose synapses were active in a given time interval."], [735, 1, 1, 0, "set_default_arguments_if_not_set", "Set default arguments of an object if they are not set."], [736, 1, 1, 0, "silence_stdout", "Decorator function to silence a function's output."], [737, 1, 1, 0, "split_network_param_in_one_elem_dicts", "Split a network parameter dictionary into a list of dictionaries."], [738, 1, 1, 0, "tar_folder", "Compress a folder to .tar format."]], "single_cell_parser": [[739, 2, 1, 0, "Event", "Class to handle events in NEURON simulations."], [740, 0, 0, 1, "analyze", ""], [800, 0, 0, 1, "cell", ""], [810, 0, 0, 1, "cell_modify_functions", ""], [835, 0, 0, 1, "cell_parser", ""], [836, 1, 1, 0, "create_cell", "Creating NEURON cell models from cell parameters."], [838, 1, 1, 0, "init_neuron_run", "Default NEURON run with inital parameters according to parameter file."], [860, 0, 0, 1, "network", ""], [863, 0, 0, 1, "network_modify_functions", ""], [875, 0, 0, 1, "network_param_modify_functions", ""], [880, 0, 0, 1, "network_realizations", ""], [890, 0, 0, 1, "parameters", ""], [895, 0, 0, 1, "reader", ""], [913, 0, 0, 1, "scalar_field", ""], [914, 1, 1, 0, "sec_distance_to_soma", "Compute the path length from :sec(x=0) to soma"], [918, 0, 0, 1, "serialize_cell", ""], [927, 0, 0, 1, "sim_control", ""], [928, 1, 1, 0, "spines_update_network_paramfile", "Update a network_parameters_format file to point to a new syn_file_format file."], [929, 1, 1, 0, "spines_update_synapse_distribution_file", "Update the syn_file_format file to correctly point to spine heads as excitatory synapse locations."], [936, 0, 0, 1, "synapse", ""], [946, 0, 0, 1, "synapse_mapper", ""], [948, 0, 0, 1, "writer", ""]], "single_cell_parser.analyze": [[754, 0, 0, 1, "membrane_potential_analysis", ""], [764, 0, 0, 1, "synanalysis", ""]], "single_cell_parser.analyze.membrane_potential_analysis": [[741, 1, 1, 0, "PSTH_from_spike_times", "Calculates a PSTH from spike times."], [742, 2, 1, 0, "RecordingSite", "Dataclass for a recording site."], [743, 2, 1, 0, "RecordingSiteManager", "Parse AMIRA recording sites from a .landmarkAscii file."], [747, 2, 1, 0, "SpikeInit", "Analyze spike initiation."], [750, 1, 1, 0, "compute_mean_psp_amplitude", "Compute the mean amplitude of all PSPs across multiple voltage traces."], [751, 1, 1, 0, "compute_uPSP_amplitude", "Compute the amplitude of a uPSP."], [752, 1, 1, 0, "compute_vm_histogram", "Compute the histogram of membrane voltage traces."], [753, 1, 1, 0, "compute_vm_std_windows", "Compute the standard deviation of the voltage during different time windows."], [755, 1, 1, 0, "simple_spike_detection", "Detect spike times in a voltage trace."], [756, 1, 1, 0, "vm_mean", "Computes the mean voltage during a stimulation time window"], [757, 1, 1, 0, "vm_std", "Computes the standard deviation of the voltage during a stimulation time window"]], "single_cell_parser.analyze.membrane_potential_analysis.RecordingSite": [[742, 4, 1, 0, "label", "Identifier label."], [742, 4, 1, 0, "secID", "Section ID of the recording site."], [742, 4, 1, 0, "segID", "Segment ID of the recording site."], [742, 4, 1, 0, "vRecordings", "List of recorded voltage vectors. Parsed from the Cell."]], "single_cell_parser.analyze.membrane_potential_analysis.RecordingSiteManager": [[744, 3, 1, 0, "_read_landmark_file", "Read the AMIRA landmark file and return the landmarks."], [743, 4, 1, 0, "cell", "Cell object."], [743, 4, 1, 0, "recordingSites", "List of recording sites."], [745, 3, 1, 0, "set_up_recording_site", "Set up a RecordingSite from a location."], [746, 3, 1, 0, "update_recordings", "Add the Cell's recorded voltages to the recordingSites."]], "single_cell_parser.analyze.membrane_potential_analysis.SpikeInit": [[748, 3, 1, 0, "analyze_single_spike", "Calculate spike height, width (FWHM) and after hyperpolarization depth (AHP)."], [749, 3, 1, 0, "vm_steady_state", "Computes the \"steady-state\" voltage"]], "single_cell_parser.analyze.synanalysis": [[758, 1, 1, 0, "compute_distance_to_soma", "Computes the distance from a point to the soma."], [759, 1, 1, 0, "compute_syn_distance", "Computes the distance from a single synapse to the soma."], [760, 1, 1, 0, "compute_syn_distances", "Computes distances (to soma) of all synapses on the dendrite."], [761, 1, 1, 0, "compute_syn_distances_2Dprojected", "Computes the XY-projected distances (to soma) of all synapses on dendrite."], [762, 1, 1, 0, "compute_synapse_distances_times", "Save a single_cell_parser.cell.Cell object's synapse distances and activation times to a .csv file."], [763, 1, 1, 0, "get_dist", "Compute the Euclidean distance between two points."], [765, 1, 1, 0, "synapse_activation_times", "Parse the spike times from a list of spike counts and corresponding time points."]], "single_cell_parser.cell": [[766, 2, 1, 0, "Cell", "Cell object providing API to the NEURON hoc interface."], [778, 2, 1, 0, "PointCell", "Cell without morphological or electrophysiological features."], [786, 2, 1, 0, "PySection", "Wrapper around nrn.Section providing additional functionality for geometry and mechanisms."]], "single_cell_parser.cell.Cell": [[766, 4, 1, 0, "E", "Default resting membrane potential. Defaults to -70.0"], [767, 3, 1, 0, "add_synapse", "Add a Synapse to the cell object."], [766, 4, 1, 0, "branches", "maps the section ID (str) of the root section of each dendritic subtree to its corresponding section list (neuron.h.SectionList)."], [766, 4, 1, 0, "changeSynParamDict", "dictionary of network parameter sets with keys corresponding to time points. Allows automatic update of parameter sets according to their relative timing."], [768, 3, 1, 0, "distance_between_pts", "Computes the path length between two points."], [769, 3, 1, 0, "distance_to_soma", "Computes the path length between the soma and a specified point."], [770, 3, 1, 0, "get_range_var_conductances", "Get the conductances of each section, categorized by range variable and segment."], [771, 3, 1, 0, "get_section_adjacancy_map", "Generates a map that shows which sections are connected to which sections."], [772, 3, 1, 0, "get_synapse_activation_dataframe", "Get a syn_activation_format dataframe."], [766, 4, 1, 0, "hoc_path", "Path to the hoc file containing the cell morphology."], [766, 4, 1, 0, "id", "ID of the cell (often unused)."], [773, 3, 1, 0, "init_time_recording", "Initialize the NEURON time vector for recording."], [774, 3, 1, 0, "max_distance", "Computes maximum path length to soma of all branches with label label"], [766, 4, 1, 0, "neuron_param", "The cell_parameters_format."], [775, 3, 1, 0, "re_init_cell", "Re-initialize for next simulation run."], [776, 3, 1, 0, "record_range_var", "Record a range mechanism in all sections."], [777, 3, 1, 0, "remove_synapses", "Remove synapses from the cell object of type preType."], [766, 4, 1, 0, "section_adjacency_map", "maps each section (by ID) to its parent sections and children sections."], [766, 4, 1, 0, "sections", "List of PySection objects. First element is the soma. Each section contains recorded data (if any was recorded, e.g. membrane voltage): a 2D array where axis 0 is segment number, and axis 1 is time."], [766, 4, 1, 0, "soma", "The soma section of the cell."], [766, 4, 1, 0, "structures", "All sections, aggregated by label (e.g. Dendrite, ApicalDendrite, ApicalTuft, Myelin...). Keys are labels (str), values are lists of PySection objects."], [766, 4, 1, 0, "synapses", "a dictionary of lists of single_cell_parser.synapse.Synapse objects"], [766, 4, 1, 0, "tVec", "a hoc Vector recording time."], [766, 4, 1, 0, "tree", "NEURON SectionList containing all sections of the cell."]], "single_cell_parser.cell.PointCell": [[779, 3, 1, 0, "_add_synapse_pointer", "Add a reference to a synapse connected to this cell."], [780, 3, 1, 0, "_next_interval", "Calculate the next spike interval t for a simple spike train."], [781, 3, 1, 0, "append", "Append an additional spike time to the presynaptic cell."], [782, 3, 1, 0, "compute_spike_train_times", "Compute a simple spike train for the presynaptic cell."], [783, 3, 1, 0, "is_active", "Check if the point cell is active."], [784, 3, 1, 0, "play", "Activate point cell"], [778, 4, 1, 0, "playing", "flag indicating whether the VecStim spike source is playing"], [778, 4, 1, 0, "spikeTimes", "list of spike times. Default=None."], [778, 4, 1, 0, "spikeVec", "hoc Vector containing spike times"], [778, 4, 1, 0, "spikes", "VecStim object to use as a spike source in NetCon objects (see https://www.neuron.yale.edu/neuron/static/py_doc/modelspec/programmatic/network/netcon.html). These are initialized from spikeTimes."], [778, 4, 1, 0, "synapseList", "list of synapses connected to this cell."], [785, 3, 1, 0, "turn_off", "Turns off the spike source."]], "single_cell_parser.cell.PySection": [[787, 3, 1, 0, "_compute_bounds", "Computes the bounding box around the 3D coordinates."], [788, 3, 1, 0, "_compute_relative_pts", "Computes the relative position of 3D points along the section."], [789, 3, 1, 0, "_compute_seg_diameters", "Computes the diameter of each segment in this section."], [790, 3, 1, 0, "_compute_seg_pts", "Computes the 3D center points of each segment in this section."], [791, 3, 1, 0, "_compute_total_area", "Computes total area of all NEURON segments in this section"], [792, 3, 1, 0, "_get_seg_conductance", "Get the conductance of a segment."], [793, 3, 1, 0, "_init_range_var_recording", "Initialize recording of a range mechanism."], [794, 3, 1, 0, "_init_vm_recording", "Record the membrane voltage at every point in this section."], [795, 3, 1, 0, "_re_init_range_var_recording", "Re-initialize the range mechanism recordings."], [796, 3, 1, 0, "_re_init_vm_recording", "Reinitialize votage recordings"], [786, 4, 1, 0, "area", "total area of all NEURON segments in this section."], [786, 4, 1, 0, "bounds", "bounding box around 3D coordinates."], [786, 4, 1, 0, "diamList", "list of diameters at traced 3D coordinates."], [797, 3, 1, 0, "get_range_conductances", "Get the transmembrane conductance of each range variable separately."], [786, 4, 1, 0, "label", "label of the section (e.g. \"Soma\", \"Dendrite\", \"Myelin\")."], [786, 4, 1, 0, "label_detailed", "Detailed label of the section (e.g. \"oblique\", \"basal\", \"trunk\"). These are manually assigned or automatically generated by augment_cell_with_detailed_labels(). Used in scale_by_detailed_compartment()."], [786, 4, 1, 0, "nrOfPts", "number of traced 3D coordinates."], [786, 4, 1, 0, "parent", "reference to parent section."], [786, 4, 1, 0, "parentx", "connection point at parent section."], [786, 4, 1, 0, "pts", "list of traced 3D coordinates."], [786, 4, 1, 0, "recVList", "list of neuron Vectors recording voltage in each compartment."], [786, 4, 1, 0, "recordVars", "dict of range variables recorded."], [786, 4, 1, 0, "relPts", "list of relative position of 3D points along section."], [786, 4, 1, 0, "segDiams", "list of diameters of each segment. Used for visualization purposes only."], [786, 4, 1, 0, "segPts", "list of segment centers (x coordinate). Useful for looping akin to the hoc function for(x). Excluding 0 and 1."], [786, 4, 1, 0, "segx", "list of x values corresponding to center of each segment."], [798, 3, 1, 0, "set_3d_geometry", "Invokes NEURON 3D geometry setup."], [799, 3, 1, 0, "set_segments", "Set spatial discretization."]], "single_cell_parser.cell_modify_functions": [[802, 0, 0, 1, "BAC_injection", ""], [804, 0, 0, 1, "apical_current_injection", ""], [806, 0, 0, 1, "apical_epsp_injection", ""], [808, 0, 0, 1, "blender_recorder", ""], [809, 1, 1, 0, "get", "Get a cell modification function by their name."], [811, 0, 0, 1, "scale_apical", ""], [815, 0, 0, 1, "soma_current_injection", ""], [817, 0, 0, 1, "synaptic_input", ""]], "single_cell_parser.cell_modify_functions.BAC_injection": [[801, 1, 1, 0, "BAC_injection", "Injects the BAC stimulus Hay_Hill_Schuermann_Markram_Segev_2011 at a specified distance."]], "single_cell_parser.cell_modify_functions.apical_current_injection": [[803, 1, 1, 0, "apical_current_injection", "Inject a current at a given distance from the soma."]], "single_cell_parser.cell_modify_functions.apical_epsp_injection": [[805, 1, 1, 0, "apical_epsp_injection", "Injects an epsp-shaped current at a certain distance from the soma."]], "single_cell_parser.cell_modify_functions.blender_recorder": [[807, 1, 1, 0, "blender_recorder", ""]], "single_cell_parser.cell_modify_functions.scale_apical": [[812, 1, 1, 0, "scale_apical", "Scale the apical dendrite of a cell."], [813, 1, 1, 0, "scale_apical_dendrite", "Scales the apical dendrite of a cell."], [814, 1, 1, 0, "scale_by_detailed_compartment", "Scales subcellular compartments based on detailed\\_labels."]], "single_cell_parser.cell_modify_functions.soma_current_injection": [[816, 1, 1, 0, "soma_current_injection", "Inject a step current at the soma."]], "single_cell_parser.cell_modify_functions.synaptic_input": [[818, 1, 1, 0, "synaptic_input", "Add synaptic activations to the cell from a network."]], "single_cell_parser.cell_parser": [[819, 2, 1, 0, "CellParser", "Configure a Cell object from a NEURON hoc file."]], "single_cell_parser.cell_parser.CellParser": [[820, 3, 1, 0, "_add_spines", "Adds passive spines to the membrane."], [821, 3, 1, 0, "_add_spines_ar", "Adds passive spines to anomalously rectifying membrane Waters_Helmchen_2006."], [822, 3, 1, 0, "_create_ais", "Create axon hillock and AIS according to Mainen_Joerges_Huguenard_Sejnowski_1995"], [823, 3, 1, 0, "_create_ais_Hay2013", "Create axon hillock and AIS according to Hay_Schuermann_Markram_Segev_2013"], [824, 3, 1, 0, "_insert_ion_properties", "Inserts ion properties into all structures named as label"], [825, 3, 1, 0, "apply_cell_modify_functions", "Apply cell modify functions to the cell object."], [819, 4, 1, 0, "cell", "Cell object."], [819, 4, 1, 0, "cell_modify_functions_applied", "Whether or not cell modify functions have already been applied. See: apply_cell_modify_functions()"], [826, 3, 1, 0, "determine_nseg", "Determine the number of segments for each section according to the d-lambda rule."], [827, 3, 1, 0, "get_cell", "Returns cell if it is set up for simulations."], [819, 4, 1, 0, "hoc_path", "Path to hoc file"], [828, 3, 1, 0, "insert_hh_membrane", "Set up a Hodgkin-Huxley membrane with default values."], [829, 3, 1, 0, "insert_membrane_properties", "Inserts membrane properties into all structures named as label."], [830, 3, 1, 0, "insert_passive_membrane", "Set up a passive membrane with default values."], [831, 3, 1, 0, "insert_range_mechanisms", "Inserts range mechanisms into all structures named as label."], [819, 4, 1, 0, "membraneParams", "Membrane parameters"], [832, 3, 1, 0, "set_up_biophysics", "Initialize membrane properties."], [833, 3, 1, 0, "spatialgraph_to_cell", "Create a Cell object from an AMIRA spatial graph in hoc_file_format format."], [834, 3, 1, 0, "update_range_mechanisms", "Updates range mechanism updateMechName in all structures named as label."]], "single_cell_parser.network": [[839, 2, 1, 0, "NetworkMapper", "Map active presynaptic cells to a multi-compartmental neuron model."], [859, 1, 1, 0, "activate_functional_synapse", "Activate a single synapse."], [861, 1, 1, 0, "sample_times_from_rates", "Sample spike times from spike rates."]], "single_cell_parser.network.NetworkMapper": [[840, 3, 1, 0, "_activate_presyn_cells", "Create PointCell or SpikeTrain activation patters for each presynaptic cell."], [841, 3, 1, 0, "_apply_network_modify_functions", "Apply network modify functions to the network."], [842, 3, 1, 0, "_assign_anatomical_synapses", "Assigns synapses to postsynaptic cell from syn_file_format files."], [843, 3, 1, 0, "_assign_synapse_weights", "Assign synapse weights according to distribution specified in network parameters."], [844, 3, 1, 0, "_connect_functional_synapses", "Connects anatomical synapses to spike generators (PointCells)."], [845, 3, 1, 0, "_connect_spike_trains", "Connects synapses with spike generators."], [846, 3, 1, 0, "_create_functional_connectivity_map", "Connect functional anatomical synapses based on convergence."], [847, 3, 1, 0, "_create_pointcell_activities", "Create point cell spike times based on the network parameters distribution keyword."], [848, 3, 1, 0, "_create_presyn_cells", "Creates presynaptic cells."], [849, 3, 1, 0, "_create_spiketrain_activities", "Create spike train times based on the network parameters spiketrain keywords."], [850, 3, 1, 0, "_map_complete_anatomical_realization", "Connect synapses to active presynaptic cells."], [851, 3, 1, 0, "_map_functional_realization", "Connects anatomical synapses to spike generators (PointCells)."], [839, 4, 1, 0, "cells", "dictionary holding all presynaptic cells ordered by cell type."], [839, 4, 1, 0, "connected_cells", "dictionary holding indices of all active presynaptic cells ordered by cell type."], [852, 3, 1, 0, "create_functional_realization", "Create a new functional connectivity realization from an existing network parameter file based on convergence."], [853, 3, 1, 0, "create_network", "Set up a network from network parameters."], [854, 3, 1, 0, "create_saved_network", "Recreate a saved network embedding and activate it."], [855, 3, 1, 0, "create_saved_network2", "Recreate a saved network embedding and activate it."], [839, 4, 1, 0, "nwParam", "network parameter set (see network_parameters_format for more info)."], [839, 4, 1, 0, "postCell", "reference to postsynaptic (multi-compartment) cell model."], [856, 3, 1, 0, "re_init_network", "Reinitialize the network for a new simulation run."], [857, 3, 1, 0, "reconnect_network", "Re-generate activity and connectivity patterns for a network."], [858, 3, 1, 0, "reconnect_saved_synapses", "Set up a network from a saved syn_activation_format file."], [839, 4, 1, 0, "simParam", "simulation parameter set."]], "single_cell_parser.network_modify_functions": [[862, 1, 1, 0, "get", "Get the function with the given name."], [864, 0, 0, 1, "silence_synapses_by_somadist", ""], [866, 0, 0, 1, "silence_synapses_by_somadist_and_spike_source", ""]], "single_cell_parser.network_modify_functions.silence_synapses_by_somadist": [[865, 1, 1, 0, "silence_synapses_by_somadist", "Silence synapses at a certain soma distance."]], "single_cell_parser.network_modify_functions.silence_synapses_by_somadist_and_spike_source": [[867, 1, 1, 0, "silence_synapses_by_somadist_and_spike_source", "Silences synapse activation at a soma_dist_ranges, that are from presynaptic origins not listed in spike_sources."]], "single_cell_parser.network_param_modify_functions": [[868, 1, 1, 0, "_celltype_matches", "Check if the celltype name matches the celltypes and columns."], [869, 1, 1, 0, "_has_evoked", "Check if the celltype has evoked activity."], [870, 1, 1, 0, "change_evoked_INH_scaling", "Scales the response probability for inhibitory cells in the network_parameters_format."], [871, 1, 1, 0, "change_glutamate_syn_weights", "Changes the glutamate synapse weights in the network_parameters_format to the optimal values."], [872, 1, 1, 0, "change_ongoing_interval", "Scales the ongoing frequency with a factor."], [873, 1, 1, 0, "inactivate_evoked_activity_by_celltype_and_column", "Inactivates the evoked activity for the celltypes in the network_parameters_format."], [874, 1, 1, 0, "inactivate_evoked_and_ongoing_activity_by_celltype_and_column", "Inactivates both the evoked and ongoing activity for the celltypes in the network_parameters_format."], [876, 1, 1, 0, "multi_stimulus_trial", "Makes a network param file for repeatedly stimulating the same whisker during a single trial."], [877, 1, 1, 0, "set_stim_onset", "Changes the offset when pointcells get activated"]], "single_cell_parser.network_realizations": [[878, 1, 1, 0, "create_functional_network", "Create fixed functional connectivity based on convergence."], [879, 1, 1, 0, "create_synapse_realization", "Create a synapse realization from a network_parameters_format file."]], "single_cell_parser.parameters": [[881, 2, 1, 0, "ParameterSet", "_wrap(value)"], [888, 1, 1, 0, "_read_params_to_dict", ""], [889, 1, 1, 0, "build_parameters", "Read in a param_file_format file and return a ParameterSet object."], [891, 1, 1, 0, "load_NMODL_parameters", "Load NMODL mechanisms from paths in parameter file."], [892, 1, 1, 0, "resolve_parameter_paths", "Resolve relative database paths in the parameters."]], "single_cell_parser.parameters.ParameterSet": [[882, 3, 1, 0, "_resolve_path", ""], [883, 3, 1, 0, "_unwrap", ""], [884, 3, 1, 0, "_wrap", ""], [885, 3, 1, 0, "save", ""], [886, 3, 1, 0, "to_dict", ""], [887, 3, 1, 0, "update", "D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F. If E present and has a .keys() method, does:     for k in E: D[k] = E[k] If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v In either case, this is followed by: for k, v in F.items(): D[k] = v"]], "single_cell_parser.reader": [[893, 2, 1, 0, "_Edge", "Convenience class for NEURON segments."], [896, 1, 1, 0, "read_complete_synapse_activation_file", "Reads list of all functional synapses and their activation times."], [897, 1, 1, 0, "read_functional_realization_map", "Read in a con_file_format file and return a dictionary of functional connections."], [898, 1, 1, 0, "read_hoc_file", "Reads a hoc file and returns a list of Edge objects."], [899, 1, 1, 0, "read_landmark_file", "Read an AMIRA landmark file"], [900, 1, 1, 0, "read_pruned_synapse_realization", "Read in a syn_file_format and returns a dictionary of synapse locations and whether they are pruned or not."], [901, 1, 1, 0, "read_scalar_field", "Read AMIRA scalar fields."], [902, 1, 1, 0, "read_spike_times_file", "Reads all trials and spike times within these trials."], [903, 1, 1, 0, "read_synapse_activation_file", "Reads list of all functional synapses and their activation times."], [904, 1, 1, 0, "read_synapse_realization", "Read a syn_file_format file and returns a dictionary of synapse locations."], [905, 1, 1, 0, "read_synapse_weight_file", "Reads list of all anatomical synapses and their maximum conductance values."]], "single_cell_parser.reader._Edge": [[893, 4, 1, 0, "diameterList", "List of diameters at each point."], [893, 4, 1, 0, "edgePts", "List of points in the segment."], [893, 4, 1, 0, "hocLabel", "Hoc label of the segment (e.g. \"Soma\", \"Axon\" ...)."], [894, 3, 1, 0, "is_valid", "Check if this edge is valid."], [893, 4, 1, 0, "label", "label and ID of the segment (e.g. \"Dendrite_1_0_0\")."], [893, 4, 1, 0, "parentConnect", "How far along the parent section the connection is (i.e. the x-coordinate)."], [893, 4, 1, 0, "parentID", "label and ID of the parent segment."], [893, 4, 1, 0, "valid", "Flag indicating if the segment is valid."]], "single_cell_parser.scalar_field": [[906, 2, 1, 0, "ScalarField", "3D scalar fields based on numpy arrays"]], "single_cell_parser.scalar_field.ScalarField": [[906, 4, 1, 0, "boundingBox", "6-tuple of floats representing the bounding box of the scalar field. Format: (xmin, xmax, ymin, ymax, zmin, zmax)"], [906, 4, 1, 0, "extent", "6-tuple of integers representing the extent of the scalar field. Note that the extent always starts at 0: Format: (0, xmax - xmin, 0, ymax - ymin, 0, zmax - zmin)"], [907, 3, 1, 0, "get_mesh_coordinates", "Fetch the mesh index of the voxel containing the point xyz."], [908, 3, 1, 0, "get_scalar", "Fetch the scalar value of the voxel containing the point xyz."], [909, 3, 1, 0, "get_voxel_bounds", "Gets the bounding box of voxel given by indices i,j,k."], [910, 3, 1, 0, "get_voxel_center", "Fetch the center of the voxel given by indices i,j,k."], [911, 3, 1, 0, "is_in_bounds", "Check if point is within bounding box of mesh."], [906, 4, 1, 0, "mesh", "3D numpy array representing the scalar field."], [906, 4, 1, 0, "origin", "3-tuple of floats representing the origin of the scalar field."], [912, 3, 1, 0, "resize_mesh", "Resizes mesh to non-zero scalar data."], [906, 4, 1, 0, "spacing", "3-tuple of floats representing the spacing of the scalar field. If all values are equal, the scalar field has cubic voxels."]], "single_cell_parser.serialize_cell": [[915, 1, 1, 0, "cell_to_serializable_object", "Convert a Cell object to a dict, so that it can be serialized."], [916, 1, 1, 0, "convert_dict_of_hoc_arrays_to_dict_of_np_arrays", "Convert dictionary of hoc arrays to dictionary of list of lists"], [917, 1, 1, 0, "convert_hoc_array_to_np_array", "Convert hoc array to list of lists"], [919, 1, 1, 0, "load_cell_from_file", "Load a Cell object from a file in .pickle format."], [920, 1, 1, 0, "restore_cell_from_serializable_object", "Restore a Cell object from a serializable object."], [921, 1, 1, 0, "save_cell_to_file", "Save a Cell object to a file in .pickle format."]], "single_cell_parser.sim_control": [[922, 2, 1, 0, "SimControl", "Control a current clamp simulation."]], "single_cell_parser.sim_control.SimControl": [[922, 4, 1, 0, "T", "Temperature [C]. Default"], [922, 4, 1, 0, "cell", "The cell to simulate."], [922, 4, 1, 0, "dt", "Time step [ms]. Default: 0.001 [ms]"], [923, 3, 1, 0, "go", "Run the simulation."], [922, 4, 1, 0, "goAlready", "Simulation status"], [922, 4, 1, 0, "h", "NEURON interface"], [924, 3, 1, 0, "set_IClamp", "Initializes values for current clamp."], [925, 3, 1, 0, "set_recording", "Record the voltage trace."], [926, 3, 1, 0, "show", "Plot the voltage trace."], [922, 4, 1, 0, "simTime", "Simulation time [ms]. Default: 5 [ms]"]], "single_cell_parser.synapse": [[930, 2, 1, 0, "ExSyn", "Simple excitatory synapse."], [932, 2, 1, 0, "Synapse", "Synapse class for synaptic activations and NEURON API."]], "single_cell_parser.synapse.ExSyn": [[930, 4, 1, 0, "_active", "activation status"], [931, 3, 1, 0, "activate_hoc_syn", "Setup of all necessary hoc connections."], [930, 4, 1, 0, "netcon", "hoc NetCon object"], [930, 4, 1, 0, "syn", "hoc ExpSyn object"]], "single_cell_parser.synapse.Synapse": [[932, 4, 1, 0, "_active", "Activation status"], [933, 3, 1, 0, "activate_hoc_syn", "Setup of all necessary hoc connections."], [932, 4, 1, 0, "coordinates", "3D coordinates of synapse location"], [934, 3, 1, 0, "disconnect_hoc_synapse", "Disconnect the synapse from the neuron model."], [935, 3, 1, 0, "is_active", "Check if the synapse is active."], [932, 4, 1, 0, "netcons", "Stores NetCons"], [932, 4, 1, 0, "postCellType", "Postsynaptic cell type."], [932, 4, 1, 0, "preCell", "Reference to presynaptic PointCell"], [932, 4, 1, 0, "preCellType", "Type of the presynaptic PointCell"], [932, 4, 1, 0, "pruned", "Pruning status"], [932, 4, 1, 0, "ptID", "ID of attached point in cell.sections[self.secID].pts"], [932, 4, 1, 0, "receptors", "Stores hoc mechanisms"], [932, 4, 1, 0, "releaseSite", "Release site of presynaptic cell."], [932, 4, 1, 0, "secID", "ID of attached section in cell.sections"], [932, 4, 1, 0, "weight", "Synaptic weight"], [932, 4, 1, 0, "x", "Relative coordinate along attached section (from 0 to 1)"]], "single_cell_parser.synapse_mapper": [[937, 2, 1, 0, "SynapseMapper", "Assign synapses to a neuron morphology based on an existing synapse distribution."]], "single_cell_parser.synapse_mapper.SynapseMapper": [[938, 3, 1, 0, "_compute_path_length", "Compute the path length to soma from location x on section sec"], [939, 3, 1, 0, "_create_voxel_edge_map", "Fills dictionary voxelEdgeMap with indices of voxels pts within that voxel"], [940, 3, 1, 0, "_intersect_bboxes", "Check if two bounding boxes overlap"], [941, 3, 1, 0, "_pt_in_box", "Check if a point is within a bounding box"], [937, 4, 1, 0, "cell", "The cell to map synapses onto."], [942, 3, 1, 0, "create_synapses", "Map synapses onto a morphology based on a synapse distribution."], [937, 4, 1, 0, "isDensity", "Flag for distribution type: (1) density or (0) realization."], [943, 3, 1, 0, "map_pruned_synapse_realization", "Maps previously created synapse realization onto neuron morphology."], [944, 3, 1, 0, "map_synapse_model_distribution", "Maps modeled synapse distribution (e.g. normal, uniform, ...) onto dendritic tree."], [945, 3, 1, 0, "map_synapse_realization", "Maps previously created synapse realization onto neuron morphology."], [937, 4, 1, 0, "synDist", "The synapse distribution to map onto the cell."], [937, 4, 1, 0, "voxelEdgeMap", "Dictionary that maps voxel edges to (sectionID, pointID) pairs."]], "single_cell_parser.writer": [[947, 1, 1, 0, "generate_landmark_template", "Generate a template for a landmark file in Amira."], [949, 1, 1, 0, "value_to_color", "Map a value to a color."], [950, 1, 1, 0, "write_PSTH", "Write PSTH and time bins of PSTH,"], [951, 1, 1, 0, "write_all_traces", "Write out a list of voltage traces."], [952, 1, 1, 0, "write_cell_simulation", "Write Amira SpatialGraph files corresponding to time steps of entire simulation run."], [953, 1, 1, 0, "write_cell_synapse_locations", "Write a syn_file_format file."], [954, 1, 1, 0, "write_functional_map", "Write a functional map to an AMIRA file."], [955, 1, 1, 0, "write_functional_realization_map", "Write out a con_file_format file."], [956, 1, 1, 0, "write_landmark_file", "Write an AMIRA landmark file from 3D coordinates"], [957, 1, 1, 0, "write_landmarks_colorcoded_to_folder", "Write landmarks to a folder, colorcoded by their values."], [958, 1, 1, 0, "write_presynaptic_spike_times", "Write cell type, presynaptic cell ID and spike times of all connected presynaptic point cells."], [959, 1, 1, 0, "write_pruned_synapse_locations", "Write a syn_file_format file with a pruned flag."], [960, 1, 1, 0, "write_sim_results", "Write out a voltage trace file."], [961, 1, 1, 0, "write_spike_times_file", "Write trial numbers and all spike times in each trial (may be empty)."], [962, 1, 1, 0, "write_synapse_activation_file", "Write out a syn_activation_format file."], [963, 1, 1, 0, "write_synapse_weight_file", "Write out a synapse weight file."]], "singlecell_input_mapper": [[966, 0, 0, 1, "evoked_PSTH_from_spike_times", ""], [971, 0, 0, 1, "evoked_network_param_from_template", ""], [975, 0, 0, 1, "map_singlecell_inputs", ""], [978, 0, 0, 1, "ongoing_network_param_from_template", ""], [999, 0, 0, 1, "singlecell_input_mapper", ""]], "singlecell_input_mapper.evoked_PSTH_from_spike_times": [[964, 1, 1, 0, "create_average_celltype_PSTH_from_clusters", "Loads cluster recording files and writes out the average ongoing activity for a given cell type."], [965, 1, 1, 0, "create_evoked_PSTH", "Reads in spike times and creates a PSTH for evoked activity for each whisker."], [967, 1, 1, 0, "load_cluster_trials", "Reads in a cluster file and returns a dictionary with the spike times for each trial."], [968, 1, 1, 0, "load_spike_times", "Reads in .cluster files containing spike time recordings"], [969, 1, 1, 0, "scan_directory", "Recursively scans a directory for files with a specific suffix."]], "singlecell_input_mapper.evoked_network_param_from_template": [[970, 1, 1, 0, "create_network_parameter", "Generate and write out a network_parameters_format file defining the evoked activity of a passive whisker touch scenario."], [972, 1, 1, 0, "load_cell_number_file", "Load the cell number file."], [973, 1, 1, 0, "whisker_evoked_PSTH", "Fetch the PSTHs of each celltype in a barrel cortex column for evoked activity reflecting a passive whisker touch scenario. This method does not generate such data, but reads it in from existing files containing such empirical measurements, and parses it. These existing data files are set as global variables in this runfile. For other activity data, adapt these file names."]], "singlecell_input_mapper.map_singlecell_inputs": [[976, 1, 1, 0, "map_singlecell_inputs", "Map inputs to a single cell morphology."]], "singlecell_input_mapper.ongoing_network_param_from_template": [[977, 1, 1, 0, "create_network_parameter", "Create a template network_parameters_format file from a template parameter file and a cell number file."], [979, 1, 1, 0, "load_cell_number_file", "Load the cell number file."]], "singlecell_input_mapper.singlecell_input_mapper": [[996, 0, 0, 1, "cell", ""], [998, 0, 0, 1, "generate_nr_of_cells_spreadsheet", ""], [1016, 0, 0, 1, "network_embedding", ""], [1019, 0, 0, 1, "reader", ""], [1031, 0, 0, 1, "scalar_field", ""], [1048, 0, 0, 1, "synapse_mapper", ""], [1049, 0, 0, 1, "writer", ""]], "singlecell_input_mapper.singlecell_input_mapper.cell": [[980, 2, 1, 0, "Cell", "Cell object for mapping synapses onto a morphology."], [985, 2, 1, 0, "CellParser", "Extract cell morphology from an AMIRA hoc file."], [988, 2, 1, 0, "PointCell", "Cell object without morphological attributes."], [990, 2, 1, 0, "PySection2", "Convenience class around NEURON's Section class."], [995, 2, 1, 0, "Synapse", "Leightweight dataclass to store basic synapse information."]], "singlecell_input_mapper.singlecell_input_mapper.cell.Cell": [[981, 3, 1, 0, "add_synapse", "Add a Synapse to the cell."], [980, 4, 1, 0, "boundingBox", "Bounding box around the cell."], [982, 3, 1, 0, "distance_to_soma", "Calculate the path length to soma from location x on section sec"], [983, 3, 1, 0, "get_bounding_box", "Calculate the bounding box around the cell."], [980, 4, 1, 0, "id", "Unique identifier for the cell."], [984, 3, 1, 0, "remove_synapses", "Remove all synapses of type preType from the cell."], [980, 4, 1, 0, "sections", "List of all sections."], [980, 4, 1, 0, "soma", "The soma section."], [980, 4, 1, 0, "structures", "Dictionary mapping section labels (e.g. \"Soma\", \"Dendrite\" ...) to a list of corresponding sections."], [980, 4, 1, 0, "synapses", "Dictionary mapping presynaptic cell types to a list of Synapse objects."]], "singlecell_input_mapper.singlecell_input_mapper.cell.CellParser": [[985, 4, 1, 0, "cell", "Cell object."], [986, 3, 1, 0, "get_cell", "Returns cell if it is set up"], [985, 4, 1, 0, "hoc_fname", "File name of the hoc file."], [987, 3, 1, 0, "spatialgraph_to_cell", "Set up a cell object from an AMIRA hoc file."]], "singlecell_input_mapper.singlecell_input_mapper.cell.PointCell": [[989, 3, 1, 0, "_add_synapse_pointer", "Add a synapse to the cell."], [988, 4, 1, 0, "cellType", "Cell type."], [988, 4, 1, 0, "column", "Column ID."], [988, 4, 1, 0, "synapseList", "List of synapses."]], "singlecell_input_mapper.singlecell_input_mapper.cell.PySection2": [[990, 4, 1, 0, "L", "Length of the section."], [991, 3, 1, 0, "_compute_bounds", "Compute the bounding box of the section."], [992, 3, 1, 0, "_compute_length", "Calculate the length of the section."], [993, 3, 1, 0, "_compute_relative_pts", "Compute the relative position of 3D points along the section."], [990, 4, 1, 0, "bounds", "Bounding box around the section."], [990, 4, 1, 0, "diamList", "List of diameters at traced 3D coordinates."], [990, 4, 1, 0, "label", "Label of the section (e.g. \"Soma\", \"Dendrite\", \"ApicalDendrite\" ...)."], [990, 4, 1, 0, "name", "Name of the section."], [990, 4, 1, 0, "nrOfPts", "Number of traced 3D coordinates."], [990, 4, 1, 0, "parent", "Parent section."], [990, 4, 1, 0, "parentx", "Relative position along the parent section (0-1). Usually, sections are split up on branch points, making parentx equal to 1.0, but this is not always the case (e.g. when the section has a similar diameter beyond the branch point)."], [990, 4, 1, 0, "pts", "List of traced 3D coordinates."], [990, 4, 1, 0, "relPts", "List of relative position of 3D points along the section."], [994, 3, 1, 0, "set_3d_geometry", "Invokes NEURON hines2001neuron 3D geometry setup"]], "singlecell_input_mapper.singlecell_input_mapper.cell.Synapse": [[995, 4, 1, 0, "coordinates", "3D coordinates of the synapse location."], [995, 4, 1, 0, "postCellType", "Postsynaptic cell type."], [995, 4, 1, 0, "preCell", "Presynaptic cell."], [995, 4, 1, 0, "preCellType", "Presynaptic cell type."], [995, 4, 1, 0, "ptID", "Point ID on that section."], [995, 4, 1, 0, "secID", "Section ID."], [995, 4, 1, 0, "x", "Relative position along the section (0-1)."]], "singlecell_input_mapper.singlecell_input_mapper.generate_nr_of_cells_spreadsheet": [[997, 1, 1, 0, "con_file_to_NumberOfConnectedCells_sheet", "Convert a con_file_format file to a dataframe with the number of connected presynaptic cells for each celltype and column."]], "singlecell_input_mapper.singlecell_input_mapper.network_embedding": [[1000, 2, 1, 0, "NetworkMapper", "Connect presynaptic cells to a postsynaptic cell model."]], "singlecell_input_mapper.singlecell_input_mapper.network_embedding.NetworkMapper": [[1001, 3, 1, 0, "_compute_parameter_distribution", "Compute mean +- SD of parameters for population of anatomical realizations."], [1002, 3, 1, 0, "_compute_sample_distance", "Compute the distance of network realization samples to the population mean."], [1003, 3, 1, 0, "_compute_summary_tables", "Computes all summary data."], [1004, 3, 1, 0, "_create_anatomical_connectivity_map", "Connects anatomical synapses to PointCells."], [1005, 3, 1, 0, "_create_anatomical_realization", "Create a single anatomical realization of synapses."], [1006, 3, 1, 0, "_create_presyn_cells", "Creates presynaptic cells."], [1007, 3, 1, 0, "_generate_output_files", "Generates all summary files and writes output files."], [1008, 3, 1, 0, "_get_representative_sample", "Determine which sample of a population of anatomical realizations is the most representative."], [1009, 3, 1, 0, "_precompute_anatomical_area_celltype_synapse_densities", "Compute synapse densities of all presynaptic cell types in all anatomical_areas"], [1010, 3, 1, 0, "_test_population_convergence", "Test how many samples are needed to get a representative sample."], [1011, 3, 1, 0, "_write_landmark_files", "Write out landmark files for each synapse location."], [1012, 3, 1, 0, "_write_population_output_files", "Writes output files for precomputed summary files."], [1000, 4, 1, 0, "cells", "Presynaptic cells, ordered by anatomical area and cell type. This attribute is filled by _create_presyn_cells()."], [1000, 4, 1, 0, "connected_cells", "Indices of all active presynaptic cells, ordered by cell type."], [1013, 3, 1, 0, "create_network_embedding", "Create a single network realization from a bouton density field."], [1014, 3, 1, 0, "create_network_embedding_for_simulations", "Create multiple network realizations from a bouton density field."], [1015, 3, 1, 0, "create_network_embedding_from_synapse_densities", "Create a single network realization from pre-computed synapse densities."], [1000, 4, 1, 0, "postCell", "Reference to postsynaptic (multi-compartment) cell model."], [1000, 4, 1, 0, "postCellType", "Postsynaptic cell type."]], "singlecell_input_mapper.singlecell_input_mapper.reader": [[1017, 2, 1, 0, "_Edge", "Convenience class around NEURON's section objects."], [1020, 1, 1, 0, "read_celltype_numbers_spreadsheet", "Reads a spreadsheet with cell type numbers for each anatomical area."], [1021, 1, 1, 0, "read_connections_spreadsheet", "Reads a spreadsheet with connection probabilities between cell types"], [1022, 1, 1, 0, "read_hoc_file", "Reads a hoc file and returns a list of Edge objects."], [1023, 1, 1, 0, "read_scalar_field", "Read AMIRA scalar fields."]], "singlecell_input_mapper.singlecell_input_mapper.reader._Edge": [[1017, 4, 1, 0, "diameterList", "A list of diameters for each point in edgePts."], [1017, 4, 1, 0, "edgePts", "A list of points that define the segment."], [1017, 4, 1, 0, "hocLabel", "The label of the segment as defined in the hoc file."], [1018, 3, 1, 0, "is_valid", "Check if this edge is valid."], [1017, 4, 1, 0, "label", "The type of the segment (e.g. 'Soma', 'Dendrite', 'ApicalDendrite')"], [1017, 4, 1, 0, "parentConnect", "The parent segment."], [1017, 4, 1, 0, "parentID", "The ID of the parent segment."]], "singlecell_input_mapper.singlecell_input_mapper.scalar_field": [[1024, 2, 1, 0, "ScalarField", "3D scalar fields based on numpy arrays"]], "singlecell_input_mapper.singlecell_input_mapper.scalar_field.ScalarField": [[1024, 4, 1, 0, "boundingBox", "6-tuple of floats representing the bounding box of the scalar field. Format: (xmin, xmax, ymin, ymax, zmin, zmax)"], [1024, 4, 1, 0, "extent", "6-tuple of integers representing the extent of the scalar field. Note that the extent always starts at 0: Format: (0, xmax - xmin, 0, ymax - ymin, 0, zmax - zmin)"], [1025, 3, 1, 0, "get_mesh_coordinates", "Fetch the mesh index of the voxel containing the point xyz."], [1026, 3, 1, 0, "get_scalar", "Fetch the scalar value of the voxel containing the point xyz."], [1027, 3, 1, 0, "get_voxel_bounds", "Gets the bounding box of voxel given by indices i,j,k."], [1028, 3, 1, 0, "get_voxel_center", "Fetch the center of the voxel given by indices i,j,k."], [1029, 3, 1, 0, "is_in_bounds", "Check if point is within bounding box of mesh."], [1024, 4, 1, 0, "mesh", "3D numpy array representing the scalar field."], [1024, 4, 1, 0, "origin", "3-tuple of floats representing the origin of the scalar field."], [1030, 3, 1, 0, "resize_mesh", "Resizes mesh to non-zero scalar data."], [1024, 4, 1, 0, "spacing", "3-tuple of floats representing the spacing of the scalar field. If all values are equal, the scalar field has cubic voxels."]], "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper": [[1032, 2, 1, 0, "SynapseDensity", "Compute synapse density mesh from a PST density mesh."], [1042, 2, 1, 0, "SynapseMapper", "Assign synapses to neuron morphology from density meshes."]], "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.SynapseDensity": [[1033, 3, 1, 0, "_clip_u", "Liang-Barsky clipping algorithm liang1984new for line segments in 3D."], [1034, 3, 1, 0, "_compute_cell_density_grid", "Create an empty mesh for the postsynaptic neuron to match the mesh of the synapse distribution."], [1035, 3, 1, 0, "_compute_length_surface_area_density", "Fills the scalar fields lengthDensity and surfaceDensity to contain length and area per structure per voxel."], [1036, 3, 1, 0, "_get_truncated_cone_area", "Calculate the are of a truncated cone."], [1037, 3, 1, 0, "_interpolate_radius", "Interpolate the radius of a segment between two points."], [1038, 3, 1, 0, "_intersect_bboxes", "Check if two bounding boxes overlap"], [1039, 3, 1, 0, "_is_zero", "Check if a number is close to zero (tolerance of 1e-10)"], [1032, 4, 1, 0, "cellPST", "Nested dictionary containing the 3D length/surface area density of the postsynaptic neuron. See compute_cell_PST() for details."], [1040, 3, 1, 0, "compute_cell_PST", "Compute 3D length/surface area density of the postsynaptic targets in the mesh."], [1041, 3, 1, 0, "compute_synapse_density", "Compute the density of synapses of a given presynaptic celltype onto the postsynaptic neuron."]], "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.SynapseMapper": [[1043, 3, 1, 0, "_compute_path_length", "Calculate the path length betwen the soma and location x on section sec"], [1044, 3, 1, 0, "_create_voxel_edge_map", "Fills voxelEdgeMap with voxel indices, and the section and point indices that the voxel contains."], [1045, 3, 1, 0, "_intersect_bboxes", "Check if two bounding boxes overlap"], [1046, 3, 1, 0, "_pt_in_box", "Check if a point is inside a bounding box."], [1042, 4, 1, 0, "cell", "The postsynaptic neuron."], [1047, 3, 1, 0, "create_synapses", "Creates instantiation of synapses on cell from synapse distribution."], [1042, 4, 1, 0, "isDensity", "Set to True if synapse distribution is interpreted as an average density. Set to False if synapse distribution is interpreted as an actual realization, and values are whole numbers."], [1042, 4, 1, 0, "synDist", "Synapse distribution mesh. Can be either a density or a realization (i.e. whole number values per voxel)."], [1042, 4, 1, 0, "voxelEdgeMap", "Dictionary mapping synapse distribution mesh coordinates on list with pairs of indices that correspond to the edge and edgePt ID of all morphology points inside that voxel."]], "singlecell_input_mapper.singlecell_input_mapper.writer": [[1050, 1, 1, 0, "write_anatomical_realization_map", "Writes a con_file_format file containing a list of all functional connections."], [1051, 1, 1, 0, "write_cell_synapse_locations", "Write a syn_file_format file, containing all synapses and their corresponding cellID, sectionID and x."], [1052, 1, 1, 0, "write_landmark_file", "Write Amira landmark file"], [1053, 1, 1, 0, "write_population_and_sample_connectivity_summary", "Write out a summary of a single connectivity realization, as well as the summary of a population of connectivity realizations to a file."], [1054, 1, 1, 0, "write_population_connectivity_summary", "Write a summary of populations of connectivity realizations to a file."], [1055, 1, 1, 0, "write_sample_connectivity_summary", "Write a summary of a single connectivity realization to a file."], [1056, 1, 1, 0, "write_scalar_field", "Write a scalar field to an AmiraMesh file."]], "spike_analysis": [[1112, 0, 0, 1, "core", ""]], "spike_analysis.core": [[1057, 2, 1, 0, "ReaderLabView", "A class for reading LabView binary data files and accessing stimulus times and voltage traces."], [1061, 2, 1, 0, "ReaderSmr", "A class for reading smr-files and accessing stimulus times and voltage traces."], [1065, 2, 1, 0, "STAPlugin_ISIn", "SpikeTimeAnalysis (STA) plugin to compute the inter spike interval (ISI) to the next, second next, nth spike."], [1068, 2, 1, 0, "STAPlugin_TEMPLATE", "Base class for spike time analysis plugins."], [1071, 2, 1, 0, "STAPlugin_annotate_bursts_in_st", "SpikeTimeAnalysis (STA) plugin to annotate bursts in a spike times dataframe."], [1073, 2, 1, 0, "STAPlugin_bursts", "SpikeTimeAnalysis (STA) plugin to detect high frequency events (doublet, triplet, ...) that occur within a timewindow."], [1076, 2, 1, 0, "STAPlugin_extract_column_in_filtered_dataframe", "SpikeTimeAnalysis (STA) plugin to extract a column from a filtered dataframe."], [1078, 2, 1, 0, "STAPlugin_ongoing", "SpikeTimeAnalysis (STA) plugin to compute the ongoing activity."], [1080, 2, 1, 0, "STAPlugin_quantification_in_period", "SpikeTimeAnalysis (STA) plugin to quantify the activity in a period."], [1082, 2, 1, 0, "STAPlugin_response_latency_in_period", "SpikeTimeAnalysis (STA) plugin to compute the response latency in a period."], [1084, 2, 1, 0, "STAPlugin_response_probability_in_period", "SpikeTimeAnalysis (STA) plugin to compute the response probability in a period."], [1086, 2, 1, 0, "STAPlugin_spike_times_dataframe", "SpikeTimeAnalysis (STA) plugin to create a spike times dataframe."], [1088, 2, 1, 0, "SpikeDetectionCreastTrough", "Detects spikes by creast and trough amplitude."], [1099, 2, 1, 0, "SpikeTimesAnalysis", "Class for applying event_analysis routines on a spike times dataframe."], [1103, 1, 1, 0, "_sta_input_checker", "Checks if the input is valid."], [1104, 1, 1, 0, "filter_short_ISIs", "Filters out any events that occur in an interval shorter than tdelta."], [1105, 1, 1, 0, "filter_spike_times", "Filter spike times based on timepoints of detected creasts and troughs."], [1106, 1, 1, 0, "get_peaks_above", "Compute timepoints of maxima above a threshold."], [1107, 1, 1, 0, "get_period_label_by_time", "Classifies timepoint based on whether it falls within a period."], [1108, 1, 1, 0, "get_spike_times_from_row", "Returns a list containing all non-NaN elements in the given pandas Series."], [1109, 1, 1, 0, "get_st_from_spike_times_and_stim_times", "Computes spike times dataframe based on list of spike times and stimulus times."], [1110, 1, 1, 0, "get_upcross", "Finds the times and corresponding voltages of upcrossings of a given threshold."], [1111, 1, 1, 0, "highpass_filter", "Apply a highpass filter to the data."], [1113, 1, 1, 0, "load_reader", "Load a reader object from a dictionary."], [1114, 1, 1, 0, "read_labview_junk1_dat_files", "Read in LabView binary data files."], [1115, 1, 1, 0, "read_smr_file", "Reads a Spike2 file and returns its content as a neo.core.block.Block object."], [1116, 1, 1, 0, "stimulus_interval_filter", "Filters periodic stimuli such that only the first stimulus of each period is retained."], [1117, 1, 1, 0, "strip_st", "Get a DataFrame containing only spike times, without metadata."]], "spike_analysis.core.ReaderLabView": [[1057, 4, 1, 0, "apply_filter", "Whether to apply a highpass filter to the data."], [1058, 3, 1, 0, "get_serialize_dict", "Get a dictionary containing the attributes of the ReaderLabView object."], [1059, 3, 1, 0, "get_stim_times", "Get the times of the stimuli."], [1060, 3, 1, 0, "get_voltage_traces", "Get the time points and voltage values of the traces."], [1057, 4, 1, 0, "path", "The path to the smr-file."], [1057, 4, 1, 0, "sampling_rate", "The sampling rate of the data."], [1057, 4, 1, 0, "scale", "Scales the data with this value."], [1057, 4, 1, 0, "stim_times", "The times of the stimuli."], [1057, 4, 1, 0, "t", "The time points of the voltage traces."], [1057, 4, 1, 0, "t_end", "The end time of the voltage traces."], [1057, 4, 1, 0, "t_start", "The start time of the voltage traces."], [1057, 4, 1, 0, "v", "The voltage values of the traces."]], "spike_analysis.core.ReaderSmr": [[1061, 4, 1, 0, "analogsignal_id", "The ID of the analog signal to read."], [1062, 3, 1, 0, "get_serialize_dict", "Get a dictionary containing the attributes of the ReaderSmr object."], [1063, 3, 1, 0, "get_stim_times", "Get the times of the stimuli."], [1064, 3, 1, 0, "get_voltage_traces", "Get the time points and voltage values of the traces."], [1061, 4, 1, 0, "max_rel_time", "The maximum relative time to include in the voltage traces."], [1061, 4, 1, 0, "min_rel_time", "The minimum relative time to include in the voltage traces."], [1061, 4, 1, 0, "path", "The path to the smr-file."], [1061, 4, 1, 0, "stim_times", "The times of the stimuli."], [1061, 4, 1, 0, "stim_times_channel", "The name of the channel containing the stimulus times."], [1061, 4, 1, 0, "t", "The time points of the voltage traces."], [1061, 4, 1, 0, "t_end", "The end time of the voltage traces."], [1061, 4, 1, 0, "t_start", "The start time of the voltage traces."], [1061, 4, 1, 0, "v", "The voltage values of the traces."]], "spike_analysis.core.STAPlugin_ISIn": [[1066, 3, 1, 0, "event_analysis_ISIn", "Computes for each spike the inter spike interval (ISI) to the next, second next ... nth next spike."], [1065, 4, 1, 0, "max_n", "The maximum order of ISIs computed."], [1065, 4, 1, 0, "name", "The name of the plugin."], [1067, 3, 1, 0, "setup", "Sets up the analysis: Computes the inter spike interval (ISI) to the next, second next, nth spike."], [1065, 4, 1, 0, "source", "The DataBase key containing the spike times."]], "spike_analysis.core.STAPlugin_TEMPLATE": [[1068, 4, 1, 0, "_result", "The result of the analysis."], [1069, 3, 1, 0, "get_result", "Gets the result of the analysis."], [1070, 3, 1, 0, "setup", "Sets up the analysis."]], "spike_analysis.core.STAPlugin_annotate_bursts_in_st": [[1071, 4, 1, 0, "event_maxtimes", "Dictionary containing the maximum duration of each event type."], [1071, 4, 1, 0, "event_names", "Dictionary containing the names of the event types."], [1071, 4, 1, 0, "name", "The name of the plugin."], [1072, 3, 1, 0, "setup", "Sets up the analysis: annotates bursts in a spike times dataframe."], [1071, 4, 1, 0, "source", "The DataBase key containing the spike times. Defaults to 'spike_times'."]], "spike_analysis.core.STAPlugin_bursts": [[1074, 3, 1, 0, "event_analysis_bursts", "Detects high frequency events (doublet, triplet, ...) that occur within a timewindow."], [1073, 4, 1, 0, "event_maxtimes", "Dictionary containing the maximum duration of each event type."], [1073, 4, 1, 0, "event_names", "Dictionary containing the names of the event types."], [1073, 4, 1, 0, "name", "The name of the plugin."], [1075, 3, 1, 0, "setup", "Sets up the analysis: Detects high frequency events (doublet, triplet, ...) that occur within a timewindow."], [1073, 4, 1, 0, "source", "The DataBase key containing the spike times. Defaults to 'spike_times'."]], "spike_analysis.core.STAPlugin_extract_column_in_filtered_dataframe": [[1076, 4, 1, 0, "column_name", "The name of the column to extract."], [1076, 4, 1, 0, "name", "The name of the plugin."], [1076, 4, 1, 0, "select", "The selection criteria for the dataframe."], [1077, 3, 1, 0, "setup", "Sets up the analysis: extracts a column from a filtered dataframe."], [1076, 4, 1, 0, "source", "The DataBase key containing the dataframe."]], "spike_analysis.core.STAPlugin_ongoing": [[1078, 4, 1, 0, "mode", "The mode of the analysis. Can be 'frequency' or 'count'. Defaults to 'frequency'."], [1078, 4, 1, 0, "name", "The name of the plugin. Defaults to 'ongoing_activity'."], [1078, 4, 1, 0, "ongoing_sample_length", "The length of the ongoing sample in ms. Defaults to 90000."], [1079, 3, 1, 0, "setup", "Sets up the analysis: calculates the ongoing activity."], [1078, 4, 1, 0, "source", "The DataBase key containing the spike times. Defaults to 'spike_times'."]], "spike_analysis.core.STAPlugin_quantification_in_period": [[1080, 4, 1, 0, "mode", "The mode of the analysis. Can be 'frequency', 'count_per_trial', or 'count_total'."], [1080, 4, 1, 0, "name", "The name of the plugin. Defaults to 'frequency_in_period'."], [1080, 4, 1, 0, "period", "The period to analyze."], [1081, 3, 1, 0, "setup", "Sets up the analysis: quantifies the activity in a period."], [1080, 4, 1, 0, "source", "The DataBase key containing the spike times."], [1080, 4, 1, 0, "t_end", "The end time of the period."], [1080, 4, 1, 0, "t_start", "The start time of the period."]], "spike_analysis.core.STAPlugin_response_latency_in_period": [[1082, 4, 1, 0, "_by_trial", "The median response latency by trial."], [1082, 4, 1, 0, "name", "The name of the plugin. Defaults to 'frequency_in_period'."], [1083, 3, 1, 0, "setup", "Sets up the analysis: computes the response latency in a period."]], "spike_analysis.core.STAPlugin_response_probability_in_period": [[1084, 4, 1, 0, "_by_trial", "Whether there are any spikes in this trial."], [1084, 4, 1, 0, "name", "The name of the plugin. Defaults to 'frequency_in_period'."], [1085, 3, 1, 0, "setup", "Sets up the analysis: computes the response probability in a period."]], "spike_analysis.core.STAPlugin_spike_times_dataframe": [[1086, 4, 1, 0, "mode", "The mode of the analysis. Can be 'spike_times' or 'stim_times'."], [1086, 4, 1, 0, "name", "The name of the plugin."], [1086, 4, 1, 0, "offset", "The offset of the spike times."], [1087, 3, 1, 0, "setup", "Sets up the analysis: creates a spike times dataframe."], [1086, 4, 1, 0, "source", "The DataBase key containing the spike times."]], "spike_analysis.core.SpikeDetectionCreastTrough": [[1089, 3, 1, 0, "_extract_spike_times", "Extracts spike times from voltage traces."], [1090, 3, 1, 0, "_set_creast_trough", "Sets the creast and trough limits based on the given values."], [1088, 4, 1, 0, "_spike_times_creast", "spike times fullfilling creast criterion"], [1088, 4, 1, 0, "_spike_times_trough", "spike times fullfilling trough criterion"], [1091, 3, 1, 0, "get_creast_and_trough_ampltidues_by_bins", "Get the creast and trough amplitudes based on the histogram of the creasts and troughs."], [1092, 3, 1, 0, "get_default_events", "Returns a list of events to be displayed with the show_events() method."], [1093, 3, 1, 0, "get_serialize_dict", "Get a dictionary containing the attributes of the SpikeDetectionCreastTrough object."], [1088, 4, 1, 0, "lim_creast", "lim_creast used for spike detection (if \"minimum\" or \"zero\" was defined, this will be the numeric value used)"], [1088, 4, 1, 0, "lim_trough", "lim_trough used for spike detection (if \"minimum\" or \"zero\" was defined, this will be the numeric value used)"], [1094, 3, 1, 0, "load", "Loads a SpikeDetectionCreastTrough object from a JSON file."], [1095, 3, 1, 0, "plot_creast_trough_histogram", "skip-doc:"], [1096, 3, 1, 0, "run_analysis", "Runs the spike detection analysis."], [1097, 3, 1, 0, "save", "Saves the SpikeDetectionCreastTrough object to a JSON file."], [1098, 3, 1, 0, "show_events", "Shows voltage trace, thresholds and events."], [1088, 4, 1, 0, "spike_times", "all extracted spike times, fullfilling creast and trough criterion, filtered such thatthe minimal ISI is above tdelta."], [1088, 4, 1, 0, "st", "spike times dataframe, one row per trial"]], "spike_analysis.core.SpikeTimesAnalysis": [[1099, 4, 1, 0, "_db", "The database containing the spike times and the event analysis routines."], [1100, 3, 1, 0, "apply_extractor", "Applies an event analysis routine."], [1101, 3, 1, 0, "get", "Get a key from the database."], [1102, 3, 1, 0, "get_by_trial", "Get spike information by trial."], [1099, 4, 1, 0, "periods", "A dictionary containing period labels as keys and (period_start, period_end) as values."], [1099, 4, 1, 0, "spike_times_object", "The spike times object."]], "visualize": [[1120, 0, 0, 1, "_decorators", ""], [1125, 0, 0, 1, "_figure_array_converter", ""], [1160, 0, 0, 1, "cell_morphology_visualizer", ""], [1168, 0, 0, 1, "cell_to_ipython_animation", ""], [1177, 0, 0, 1, "current_visualizer", ""], [1202, 0, 0, 1, "dendrogram", ""], [1205, 0, 0, 1, "histogram", ""], [1207, 0, 0, 1, "manylines", ""], [1210, 1, 1, 0, "plot_hoc", "Plot a hoc file using matplotlib."], [1211, 0, 0, 1, "rasterplot", ""], [1215, 1, 1, 0, "svg2emf", "Converts svg to emf, which can be imported in Word using inkscape."], [1224, 0, 0, 1, "utils", ""], [1228, 0, 0, 1, "voltage_trace_visualizer", ""], [1233, 0, 0, 1, "vtk", ""]], "visualize._decorators": [[1119, 1, 1, 0, "dask_to_pandas", "Decorator that converts function arguments from dask to pandas."], [1121, 1, 1, 0, "pr", "Prints the types of the passed arguments."], [1122, 1, 1, 0, "subsequent_calls_per_line", "Call a function on each row of a dataframe separately."]], "visualize._figure_array_converter": [[1123, 2, 1, 0, "PixelObject", "Dataclass to hold pixel information from either a matplotlib.pyplot.Axes or a numpy array."], [1124, 1, 1, 0, "fig2np", "Converts fig-object to pixels as numpy arrays."], [1126, 1, 1, 0, "show_pixel_object", "Displays a PixelObject on an axis"]], "visualize._figure_array_converter.PixelObject": [[1123, 4, 1, 0, "array", "The pixel array of the plot."], [1123, 4, 1, 0, "extent", "The extent of the plot."]], "visualize.cell_morphology_visualizer": [[1127, 2, 1, 0, "CMVDataParser", "Parse data from a Cell object to a format that is easier to work with for visualization purposes."], [1146, 2, 1, 0, "CellMorphologyInteractiveVisualizer", "Plot an interactive 3D render of a cell morphology using Plotly and Dash."], [1151, 2, 1, 0, "CellMorphologyVisualizer", "Plot a cell morphology using matplotlib."], [1159, 1, 1, 0, "get_3d_plot_morphology", "Constructs a 3d matplotlib plot of a cell morphology, overlayed with some scalar data."]], "visualize.cell_morphology_visualizer.CMVDataParser": [[1128, 3, 1, 0, "_align_trunk_with_z_axis", "Calculates the polar angle between the trunk and z-axis (zenith). Anchors the soma to (0, 0, 0) and aligns the trunk to the z-axis."], [1129, 3, 1, 0, "_calc_ion_dynamics_timeseries", "Retrieves ion dynamics info along the whole cell body during a set of time points (specified in self.times_to_show). Fills the self.ion_dynamics attribute. Only does so when it has not been computed yet."], [1130, 3, 1, 0, "_calc_morphology", "Retrieve cell morphology from cell object."], [1131, 3, 1, 0, "_calc_scalar_data_from_keyword", "Returns a scalar data array based on some keyword (ion dynamics or membrane voltage)."], [1132, 3, 1, 0, "_calc_synapses_timeseries", "Retrieves the active synapses during a set of time points (specified in times_to_show). Fills the synapses_timeseries attribute."], [1133, 3, 1, 0, "_calc_voltage_timeseries", "Retrieves voltage data along the whole cell body during a set of time points (specified in self.times_to_show). Fills the voltage_timeseries attribute. Only does so when it has not been computed yet."], [1134, 3, 1, 0, "_data_per_section_to_data_per_point", "Unravel a list of lists of data per section to a flat list of data per point."], [1135, 3, 1, 0, "_get_color_per_section", "Given an array of scalar values of length n_points, bin them per section and assign a color according to scalar_mappable."], [1136, 3, 1, 0, "_get_ion_dynamics_at_timepoint", "Retrieves the ion dynamics along the whole cell morphology from cell object at a particular time point. Note that the array of data per section each time starts with the last point of its parent section."], [1137, 3, 1, 0, "_get_synapses_at_timepoint", "Retrieves the active synapses at a particular time point."], [1138, 3, 1, 0, "_get_timeseries_minmax", "Get the min and max values of a timeseries that is nested per section and timepoint. Timeseries have three axes: time, section_id, section_point. Each timeseries[time][section_id] shows values for all points in that section at that time. Getting minmax of nested lists can be annoying, hence this method."], [1139, 3, 1, 0, "_get_voltages_at_timepoint", "Retrieves the coltage along the whole cell morphology from cell object at a particular time point. Each voltage is defined per section in the morphology. Note that the array of data per section each time starts with the last point of its parent section."], [1140, 3, 1, 0, "_has_simulation_data", "Test if the cell object has been simulated by checking if it has voltage data at the soma."], [1141, 3, 1, 0, "_init_simulation_data", "Initializes the variables associated with simulation data. Does not fill these variables until they actually need to be calculated."], [1142, 3, 1, 0, "_keyword_is_scalar_data", "Check if a keyword is a scalar data type."], [1143, 3, 1, 0, "_update_times_to_show", "Checks if the specified time range equals the previously defined one. If not, updates the time range. If all arguments are None, does nothing. Useful for defining default time range"], [1127, 4, 1, 0, "background_color", "Background color of the visualization. Default is white."], [1127, 4, 1, 0, "cell", "Cell object"], [1127, 4, 1, 0, "cmap", "Colormap for the color scale."], [1127, 4, 1, 0, "dt", "Time interval of the simulation. Note that this is note the same as t_step, as not every time point is visualized by default."], [1127, 4, 1, 0, "ion_dynamics_timeseries", "Dictionary containing the ion dynamics during a timeseries (Similarly to voltage_timeseries). Each value is a list corresponding where each element corresponds 1 timepoint, containing per-point info on the ion channel state or ion concentration. None means it has no simulation data. Empty means it has simulation data that has not been initialized yet."], [1127, 4, 1, 0, "line_pairs", "Pairs of point indices that define a line, i.e. some cell segment."], [1127, 4, 1, 0, "morphology", "A pd.DataFrame containing point information, diameter and section ID without duplicated points for branchpoints for connections between sections."], [1127, 4, 1, 0, "n_sections", "Number of sections in the cell."], [1127, 4, 1, 0, "norm", "Normalization object for the color scale."], [1127, 4, 1, 0, "parents", "Maps sections to their parents. self.parents[10] returns the parent of section 10."], [1127, 4, 1, 0, "possible_scalars", "Accepted keywords for scalar data other than membrane voltage."], [1127, 4, 1, 0, "rotation_with_zaxis", "Rotation object that defines the transformation between the cell trunk and the z-axis."], [1127, 4, 1, 0, "scalar_mappable", "Scalar mappable object for the color scale."], [1144, 3, 1, 0, "scale_diameter", "Scale the diameter of the visualization with a scaling function. scale_func should transform an array to an array of equal length. To set a fixed diameter rather than scaling, pass lambda x: fixed_d"], [1127, 4, 1, 0, "sections", "An array of unique section indices."], [1145, 3, 1, 0, "set_cmap", "Update the colormap, vmin, and vmax of the visualization."], [1127, 4, 1, 0, "simulation_times", "Time points of the simulation."], [1127, 4, 1, 0, "soma", "Soma of the cell."], [1127, 4, 1, 0, "soma_center", "Center of the soma of the original cell object, unaligned with z-axis."], [1127, 4, 1, 0, "synapses_timeseries", "List containing the synapse activations during a timeseries (Similarly to voltage_timeseries). Each element corresponds to a time point. Each element is a dictionary where each key is the type of input population and the value is the list of active synapses for that type of population at that time point. The list contains the 3d coordinates where each active synapse is located. None means it has no simulation data. Empty list means it has simulation data that has not been initialized yet."], [1127, 4, 1, 0, "t_start", "Time point where we want to start visualizing. By default, this gets initialized to the start of the simulation."], [1127, 4, 1, 0, "t_step", "Time interval for visualization. Does not have to equal the simulation time interval. By default, the simulation is chopped to the specified t_begin and t_stop, and evenly divided in 10 timesteps."], [1127, 4, 1, 0, "t_stop", "Time point where the visualization of the simulation stops. By default, this gets initialized to the end of the simulation."], [1127, 4, 1, 0, "time_offset", "Time offset w.r.t. simulation start. Useful if '0 ms' is supposed to refer to stimulus time."], [1127, 4, 1, 0, "time_show_syn_activ", "Time in the simulation during which a synapse activation is shown during the visualization."], [1127, 4, 1, 0, "times_to_show", "An array of time points to visualize. Gets calculated from self.t_start, self.t_stop and self.t_step."], [1127, 4, 1, 0, "vmax", "Maximum value of the color scale."], [1127, 4, 1, 0, "vmin", "Minimum value of the color scale."], [1127, 4, 1, 0, "voltage_timeseries", "List containing the voltage of the cell during a timeseries. Each element corresponds to a time point. Each element of the list contains n elements, being n the number of points of the cell morphology. Hence, the value of each element is the voltage at each point of the cell morphology. None means it has no simulation data. Empty list means it has simulation data that has not been initialized yet."]], "visualize.cell_morphology_visualizer.CellMorphologyInteractiveVisualizer": [[1147, 3, 1, 0, "_get_interactive_cell", "Setup plotly for rendering in notebooks. Shows an interactive 3D render of the Cell with NO data overlayed."], [1148, 3, 1, 0, "_get_interactive_dash_app", "This is the main function to set up an interactive plot with scalar data overlayed. It fetches the scalar data of interest (usually membrane voltage, but others are possible; check with self.possible_scalars). It only fetches data for the time points specified in self.times_to_show, as only these timepoints will be plotted out."], [1146, 4, 1, 0, "background_color", "Background color of the plot. Defaults to \"#f0f0f0\""], [1146, 4, 1, 0, "dash_ip", "IP address to run dash server on."], [1149, 3, 1, 0, "interactive_app", "color (str | list) -- If you want some other color overlayed on the cell morphology. Options: \"voltage\", \"vm\", \"synapses\", \"synapse\", or a color string, or a nested list of colors for each section"], [1150, 3, 1, 0, "interactive_plot", "This method shows a plot with an interactive cell, overlayed with scalar data (if provided with the data argument)."], [1146, 4, 1, 0, "renderer", "Type of backend renderer to use for rendering the javascript/HTML VBox. Defaults to \"notebook_connected\". Available renderers are:"], [1146, 4, 1, 0, "show", "Whether to show the plot. Set to False for testing purposes. Default: True"]], "visualize.cell_morphology_visualizer.CellMorphologyVisualizer": [[1152, 3, 1, 0, "_write_png_timeseries", "Creates a list of images where a neuron morphology color-coded with voltage together with synapse activations are shown for a set of time points. These images will then be used for a time-series visualization (video/gif/animation) and in each image the neuron rotates a bit (3 degrees) over its axis."], [1153, 3, 1, 0, "animation", "Show an animation of the simulated neuron."], [1151, 4, 1, 0, "camera_position", "Camera angles and distance for matplotlib 3D visualizations. Possible keys: 'azim', 'dist', 'elev', 'roll' See also: https://matplotlib.org/stable/api/toolkits/mplot3d/view_angles.html"], [1151, 4, 1, 0, "dpi", "Image quality Default: 72"], [1151, 4, 1, 0, "highlight_arrow_kwargs", "Additional arguments for the arrow. See available kwargs on https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.patches.Arrow.html#matplotlib.patches.Arrow"], [1151, 4, 1, 0, "neuron_rotation", "Amount of degrees the azimuth increases per frame in a timeseries visualization."], [1154, 3, 1, 0, "plot", "Plot the cell morphology in 3D."], [1151, 4, 1, 0, "population_to_color_dict", "Dictionary to map synapse group names (str) to colors Must contain the same keys as self.cell.synapses.keys() after being passed through self.synapse_group_function default: {}"], [1151, 4, 1, 0, "show_synapses", "Whether or not to visualize the location of synapses onto the cell."], [1151, 4, 1, 0, "synapse_group_function", "Method to group synapse types. Must accept a name (str) as argument, and return a group name (str) as output. Default: lambda x: x"], [1151, 4, 1, 0, "synapse_legend", "whether the synapse activations legend should appear in the plot"], [1155, 3, 1, 0, "to_vtk", "Write out the cell morphology to a VTK file."], [1156, 3, 1, 0, "write_gif", "Creates a set of images where a neuron morphology color-coded with voltage together with synapse activations are shown for a set of time points. In each image the neuron rotates a bit (3 degrees) over its axis. These images are then put together into a gif. The parameters t_start, t_stop and t_step will define the times_to_show attribute"], [1157, 3, 1, 0, "write_video", "Write the individual frames of a neuron during a simulation and merge them into a video."], [1158, 3, 1, 0, "write_vtk_frames", "Write the cell morphology to a series of VTK files."]], "visualize.cell_to_ipython_animation": [[1161, 1, 1, 0, "_in_parallel_context", "Helper function to launch generation of images in parallel"], [1162, 1, 1, 0, "_load_base64", "Load a file and encode it in base64."], [1163, 1, 1, 0, "cell_to_animation", "Takes a cell object and creates a 2d animation plotting the range_vars vs soma distance over time."], [1164, 1, 1, 0, "cell_to_ipython_animation", "Wrapper function to display the animation in the IPython notebook"], [1165, 1, 1, 0, "display_animation", "Creates an IPython animation out of files specified in a globstring or a list of paths."], [1166, 1, 1, 0, "find_closest_index", "Finds the index of the value which is closest to the value specified in the arguments"], [1167, 1, 1, 0, "get_lines", "Get list of dictionaries of lines that can be displayed using the plot_lines() function"], [1169, 1, 1, 0, "init_fig", "Initialize figure for cell_to_animation()"], [1170, 1, 1, 0, "parallelMovieMaker", "Creates figures in parallel and returns animation object."], [1171, 1, 1, 0, "plot_lines_fun", "Generate plots out of lines"]], "visualize.current_visualizer": [[1172, 2, 1, 0, "CurrentAnalysis", "Plot the individual ion currents and the net current of a cell simulation."]], "visualize.current_visualizer.CurrentAnalysis": [[1173, 3, 1, 0, "_compute_current_arrays", "Compute the ionic currents of a section."], [1174, 3, 1, 0, "_get_current_by_rv", "Get the section current by the range variable name."], [1172, 4, 1, 0, "cell", "The cell object, or a dictionary containing equivalent simulation data."], [1172, 4, 1, 0, "colormap", "The colormap for the ion currents."], [1172, 4, 1, 0, "depolarizing_currents", "The depolarizing currents."], [1172, 4, 1, 0, "depolarizing_currents_normalized", "The normalized depolarizing currents."], [1172, 4, 1, 0, "depolarizing_currents_sum", "The sum of the depolarizing currents."], [1172, 4, 1, 0, "hyperpolarizing_currents", "The hyperpolarizing currents."], [1172, 4, 1, 0, "hyperpolarizing_currents_normalized", "The normalized hyperpolarizing currents."], [1172, 4, 1, 0, "hyperpolarizing_currents_sum", "The sum of the hyperpolarizing currents."], [1172, 4, 1, 0, "mode", "'cell' or 'dict'."], [1172, 4, 1, 0, "net_current", "The net current."], [1175, 3, 1, 0, "plot_areas", "Plot the ion currents and the net current of a cell simulation."], [1176, 3, 1, 0, "plot_lines", "Plot the ion currents and the net current of a cell simulation."], [1172, 4, 1, 0, "rangeVars", "The names of the ion currents to plot. Default is None, which plots all ion currents."], [1172, 4, 1, 0, "sec", "The section of the cell."], [1172, 4, 1, 0, "secID", "The index of the section."], [1172, 4, 1, 0, "seg", "The segment of the cell."], [1172, 4, 1, 0, "segID", "The index of the segment."], [1172, 4, 1, 0, "t", "The time vector."], [1172, 4, 1, 0, "voltage_trace", "The voltage trace."]], "visualize.dendrogram": [[1178, 2, 1, 0, "Dendrogram", "Plot a dendrogram of a Cell object."], [1182, 2, 1, 0, "DendrogramStatistics", "Plot dendrogram statistics."], [1184, 2, 1, 0, "_DendrogramDendriteStatistics", "Compute dendrite statistics from a dendrogram."], [1189, 2, 1, 0, "_DendrogramSection", "A class to represent a dendrogram section."], [1191, 2, 1, 0, "_DendrogramSynapseStatistics", "Compute synapse statistics for a Cell object."], [1200, 1, 1, 0, "_get_db_by_sec", "Get the _DendrogramSection object by its section ID."], [1201, 1, 1, 0, "_get_max_somadistance", "Get the coordinate of the point that is furthest away from the soma."]], "visualize.dendrogram.Dendrogram": [[1179, 3, 1, 0, "_plot_dendrogram", "Plot the dendogram on an axes object."], [1178, 4, 1, 0, "cell", "The cell object."], [1178, 4, 1, 0, "dendrogram_db", "A list of _DendrogramSection objects."], [1178, 4, 1, 0, "dendrogram_db_by_name", "A dictionary of dendrogram sections by name."], [1178, 4, 1, 0, "dendrogram_db_by_sec_id", "A dictionary of dendrogram sections by section ID."], [1180, 3, 1, 0, "get_parent_by_name", "Get the parent of a dendrogram section by its name."], [1178, 4, 1, 0, "main_bifur_dist", "The distance to the main bifurcation, in \\mu m."], [1181, 3, 1, 0, "plot", "Plot the dendrogram."]], "visualize.dendrogram.DendrogramStatistics": [[1182, 4, 1, 0, "dend_statistics", "The dendrite statistics object."], [1182, 4, 1, 0, "dendrogram", "The dendrogram object."], [1183, 3, 1, 0, "plot", "Plot the dendrogram statistics."], [1182, 4, 1, 0, "syn_statistics", "The synapse statistics object."]], "visualize.dendrogram._DendrogramDendriteStatistics": [[1185, 3, 1, 0, "_compute_dendrite_hist", "Compute the dendrite density histogram."], [1186, 3, 1, 0, "_get_amount_of_dendrite_in_bin", "Get the amount of dendritic length in a certain bin of soma distance."], [1187, 3, 1, 0, "_plot_dendrite_hist", "Base method for plotting a histogram of dendrite length on an matplotlib.axes.Axes object."], [1184, 4, 1, 0, "bins", "The bins of the dendrite density histogram."], [1184, 4, 1, 0, "colormap_synapses", "A dictionary mapping color to synapse types. The keys must match the synapse types in the dendrogram. Missing keys will be omitted from the visualization alltogether. Default: None (plot all synapses in black)."], [1184, 4, 1, 0, "dendrite_density", "The dendrite density histogram, i.e. the amount of dendritic length within a range of soma distance."], [1184, 4, 1, 0, "dendrogram_db", "A list of _DendrogramSection objects."], [1188, 3, 1, 0, "plot", "Plot the dendrite statistics."]], "visualize.dendrogram._DendrogramSection": [[1190, 3, 1, 0, "_add_synapse", "Add a synapse to a dendrogram section."], [1189, 4, 1, 0, "main_bifurcation", "Whether the section is the main bifurcation. Default is False."], [1189, 4, 1, 0, "name", "The name of the section."], [1189, 4, 1, 0, "sec", "The neuron section."], [1189, 4, 1, 0, "sec_id", "The section id of the section."], [1189, 4, 1, 0, "synapses", "A dictionary of synapses in the section."], [1189, 4, 1, 0, "x_dist_end", "The ending distance of the section in \\mu m."], [1189, 4, 1, 0, "x_dist_start", "The starting distance of the section in \\mu m."]], "visualize.dendrogram._DendrogramSynapseStatistics": [[1192, 3, 1, 0, "_add_synapses", "Add synapses to the dendrogram sections."], [1193, 3, 1, 0, "_compute_synapse_hist", "Compute the synapse density histogram."], [1194, 3, 1, 0, "_compute_synapse_statistics", "Compute the synapse statistics."], [1195, 3, 1, 0, "_plot_synapse_density_hist", "Plot the synapse density histogram on an matplotlib.axes.Axes object."], [1196, 3, 1, 0, "_plot_synapse_hist", "Plot the synapse histogram on an matplotlib.Axes object."], [1197, 3, 1, 0, "_plot_synapses_dendrogram_overlay", "Plot the synapses on the dendrogram."], [1191, 4, 1, 0, "bins", "The bins of the synapse density histogram."], [1191, 4, 1, 0, "cell", "The cell object."], [1191, 4, 1, 0, "colormap_synapses", "A dictionary mapping color to synapse types. The keys must match the synapse types in the dendrogram. Missing keys will be omitted from the visualization alltogether. Default: None (plot all synapses in black)."], [1191, 4, 1, 0, "dendrogram_db", "A list of _DendrogramSection objects."], [1198, 3, 1, 0, "get_number_of_synapses_in_bin", "Get the number of synapses in a certain bin of soma distance."], [1199, 3, 1, 0, "plot", "Plot the synapse statistics"], [1191, 4, 1, 0, "synapse_density", "The synapse density histogram, i.e. the amount of synapses within a range of soma distance."], [1191, 4, 1, 0, "synapse_density_apical", "The synapse density histogram for apical dendrites."], [1191, 4, 1, 0, "synapse_density_basal", "The synapse density histogram for basal dendrites."], [1191, 4, 1, 0, "synapse_statistics", "A dictionary of synapse statistics"]], "visualize.histogram": [[1203, 1, 1, 0, "histogram", "Efficiently plot a histogram from bins."], [1204, 1, 1, 0, "histogram2", "Plot a histogram from bins."]], "visualize.manylines": [[1208, 1, 1, 0, "manylines", "Parallelizes the plot of many lines"], [1209, 1, 1, 0, "manylines_helper", "Helper function which runs on a single core and can be called by map_partitions()"]], "visualize.rasterplot": [[1212, 1, 1, 0, "rasterplot", "Creates a rasterplot from spike times dataframe."], [1213, 1, 1, 0, "rasterplot2", "Plot a rasterplot from a spike times dataframe."], [1214, 1, 1, 0, "rasterplot2_pdf_grouped", "Plot a rasterplot per group fo a spike times dataframe."]], "visualize.utils": [[1216, 2, 1, 0, "Arrow3D", "Draw a 3D annotation arrow on a matplotlib 3D plot"], [1219, 1, 1, 0, "_arrow3D", "Add an 3d arrow to an Axes3D instance."], [1220, 1, 1, 0, "_load_base64", "Load a base64 file from a filename."], [1221, 1, 1, 0, "display_animation_from_images", "Creates an IPython animation out of files specified in a globstring or a list of paths."], [1222, 1, 1, 0, "draw_arrow", "Highlight a morphology section with an Arrow3D."], [1223, 1, 1, 0, "find_files_and_order_them", "Find files in a list of directories or a directory and order them."], [1225, 1, 1, 0, "value_to_color", "Map a value to a color."], [1226, 1, 1, 0, "write_gif_from_images", "Creates a gif from a set of images, and saves it to out_path."], [1227, 1, 1, 0, "write_video_from_images", "Creates a video from a set of images."]], "visualize.utils.Arrow3D": [[1216, 4, 1, 0, "_dxdydz", "the dx, dy, dz coordinate difference of the arrow, i.e. where it points to relative to its origin."], [1216, 4, 1, 0, "_xyz", "the x, y, z coordinates of the arrow"], [1217, 3, 1, 0, "do_3d_projection", "Project the arrow onto the Axes3D object."], [1218, 3, 1, 0, "draw", "Draw the arrow."]], "visualize.voltage_trace_visualizer": [[1229, 1, 1, 0, "plot_vt", "Plot voltage traces from simulation results."], [1230, 1, 1, 0, "visualize_vt", "Visualize voltage traces from the Hay stimulus protocols."]], "visualize.vtk": [[1231, 1, 1, 0, "convert_amira_lattice_to_vtk", "Convert an AMIRA lattice file to vtk structured points."], [1232, 1, 1, 0, "convert_amira_surf_to_vtk", "Given the path to an amira .surf file, this method converts it to a .vtk surface file."], [1234, 1, 1, 0, "save_cells_landmark_files_vtk", "Save synapse activations as vtk point cloud files for each timepoint."], [1235, 1, 1, 0, "write_vtk_pointcloud_file", "Write out 3D point data as a VTK point cloud."], [1236, 1, 1, 0, "write_vtk_skeleton_file", "Write out a .vtk file for a neuron morphology."]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"]}, "titleterms": {"_is_running_on_dask_work": 0, "get_client": 1, "interfac": 2, "function": [2, 9, 48, 78, 86, 90, 100, 151, 161, 162, 165, 175, 181, 186, 209, 221, 230, 231, 235, 239, 248, 253, 266, 277, 287, 294, 300, 312, 316, 338, 345, 358, 375, 385, 394, 399, 405, 411, 420, 425, 431, 436, 441, 446, 451, 456, 461, 468, 488, 497, 502, 507, 510, 514, 554, 573, 597, 600, 602, 633, 672, 674, 677, 687, 689, 692, 693, 719, 732, 754, 764, 802, 804, 806, 808, 810, 811, 815, 817, 837, 860, 863, 864, 866, 875, 880, 890, 895, 918, 948, 966, 971, 975, 978, 998, 1019, 1049, 1112, 1120, 1125, 1160, 1168, 1205, 1206, 1207, 1211, 1224, 1228, 1233, 1252], "print_module_vers": 3, "check_unset_range_mechan": 4, "get_l5tt_templ": 5, "get_l5tt_template_v2": 6, "hay_param_to_scp_neuron_param": 7, "see": [7, 10, 78, 96, 97, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 132, 133, 134, 135, 136, 137, 138, 218, 219, 225, 230, 231, 232, 234, 242, 244, 245, 266, 273, 280, 281, 282, 283, 284, 290, 291, 294, 296, 298, 323, 324, 325, 335, 339, 343, 344, 346, 348, 349, 350, 351, 352, 364, 369, 372, 381, 384, 399, 401, 404, 405, 436, 441, 446, 451, 455, 456, 461, 487, 489, 507, 517, 534, 543, 557, 562, 563, 564, 570, 581, 582, 583, 587, 599, 600, 601, 620, 626, 627, 628, 630, 631, 634, 639, 671, 674, 677, 678, 688, 689, 693, 694, 700, 703, 710, 712, 713, 714, 715, 724, 727, 730, 731, 742, 747, 762, 764, 766, 801, 803, 805, 810, 816, 819, 820, 826, 837, 839, 852, 856, 860, 893, 898, 932, 934, 935, 936, 937, 974, 980, 985, 995, 1000, 1017, 1022, 1032, 1057, 1061, 1065, 1067, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1090, 1096, 1098, 1111, 1124, 1151, 1162, 1230], "also": [7, 10, 78, 96, 97, 98, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 132, 133, 134, 135, 136, 137, 138, 218, 219, 225, 230, 231, 232, 234, 242, 244, 245, 266, 273, 280, 281, 282, 283, 284, 290, 291, 294, 296, 298, 323, 324, 325, 335, 339, 343, 344, 346, 348, 349, 350, 351, 352, 364, 369, 372, 381, 384, 399, 401, 404, 405, 436, 441, 446, 451, 455, 456, 461, 487, 489, 507, 517, 534, 543, 557, 562, 563, 564, 570, 581, 582, 583, 587, 599, 600, 601, 620, 626, 627, 628, 630, 631, 634, 639, 671, 674, 677, 678, 688, 689, 693, 694, 700, 703, 710, 712, 713, 714, 715, 724, 727, 730, 731, 742, 747, 762, 764, 766, 801, 803, 805, 810, 816, 819, 820, 826, 837, 839, 852, 856, 860, 893, 898, 932, 934, 935, 936, 937, 974, 980, 985, 995, 1000, 1017, 1022, 1032, 1057, 1061, 1065, 1067, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1090, 1096, 1098, 1111, 1124, 1151, 1162, 1230], "hay_params_to_scp_neuron_param": 8, "l5tt_parameter_setup": 9, "set_ephi": 10, "set_hot_zon": 11, "note": [11, 39, 40, 43, 44, 45, 47, 55, 73, 92, 156, 160, 175, 177, 194, 214, 353, 487, 488, 544, 643, 785, 822, 823, 826, 1032, 1151, 1161, 1162, 1163, 1164, 1165, 1168, 1170, 1227], "set_many_param": 12, "set_morphologi": 13, "set_param": 14, "combin": [15, 16, 19, 1250], "combiner_setup": [17, 18], "append": [18, 781], "class": [19, 58, 68, 78, 151, 209, 221, 253, 266, 358, 375, 385, 394, 405, 420, 425, 431, 436, 441, 446, 451, 456, 461, 463, 468, 488, 497, 502, 507, 554, 573, 597, 614, 633, 642, 672, 677, 686, 719, 754, 800, 835, 837, 860, 890, 913, 927, 936, 946, 996, 1016, 1031, 1048, 1112, 1125, 1160, 1177, 1202, 1224], "connected_to_dend_beyond": 20, "ahp_depth_ab": [21, 119], "ahp_depth_abs_check_2ap": 22, "ap_height": 23, "ap_height_check_1ap": 24, "ap_width": 25, "bac_isi": [26, 108], "bac_isi_check_2_or_3_ap": 27, "bac_isi_check_repolar": 28, "bac_caspike_height": [29, 110], "bac_caspike_height_check_1_ca_ap": 30, "bac_caspike_height_check_ca_spikes_after_na_spik": 31, "bac_caspike_height_check_gt2_na_spik": 32, "bac_caspike_width": [33, 111], "bpapatt": 34, "bpapatt_check_1_ap": 35, "bpapatt_check_relative_height": 36, "step_adaptation_index": 37, "step_check_2_isi": 38, "step_coef_var": 39, "step_fast_ahp_depth": 40, "step_initial_isi": 41, "step_mean_frequ": 42, "step_slow_ahp_depth": 43, "step_slow_ahp_tim": 44, "attent": [44, 273, 294, 303, 304, 330, 331, 337, 356, 363, 541, 650, 652, 655, 657, 658, 662, 671, 673, 690, 797, 814, 852, 859, 952, 966, 971, 975, 1155, 1165, 1195, 1221, 1241], "step_time_to_first_spik": 45, "find_cross": 46, "find_crossing_old": 47, "ephi": 48, "spike_count": 49, "trace_check": 50, "trace_check_err": 51, "trace_check_max_prestim_dendrite_depo": 52, "voltage_bas": 53, "voltage_base2": 54, "evalu": [55, 56, 58, 151, 1247], "evaluator_setup": 57, "rw": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "_clean_the_pickl": 60, "_concatenate_and_clean": 61, "_load_pickle_or_parquet": 62, "_normalize_aim_param": 63, "_normalize_param": 64, "_unnormalize_param": 65, "assess_aim_params_reach": 66, "run_rw": 67, "load": [69, 70, 71, 426, 480, 1094, 1252], "get_df": 70, "get_futur": 71, "augment_ddf_with_pca_spac": 72, "get_depolarization_index": 73, "get_hyperpolarization_index": 74, "get_index": 75, "get_inside_fract": 76, "get_param_range_evolution_from_ddf": 77, "rw_analysi": 78, "normal": [79, 153, 657], "pandas_binbi": 80, "read_al": 81, "read_paramet": 82, "read_pickl": 83, "robust_read_pickl": 84, "evaluation_function_incremental_help": [85, 88], "exploration_from_seedpoint": 86, "modul": [86, 154, 162, 230, 268, 294, 380, 411, 516, 517, 603, 615, 740, 810, 837, 863, 974, 999, 1118, 1206], "convert_all_check_columns_bool_to_float": 87, "get_vector_norm": 89, "util": [90, 221, 320, 510, 573, 732, 1224], "get_branching_depth": 91, "get_branching_depth_seri": 92, "get_first_order_bifurcation_sect": 93, "get_inner_sec_dist_list": 94, "get_main_bifurcation_sect": [95, 220], "get_combin": 96, "get_evalu": 97, "get_simul": 98, "get_fixed_params_exampl": 99, "default_setup": 100, "interpolate_vt": 101, "map_truefalse_to_str": 102, "record_bac": 103, "record_step": 104, "record_bap": 105, "bac": [106, 107, 108, 109, 110, 111, 112, 113, 114, 1246], "bac_apheight": 107, "bac_ahpdepth": 109, "bac_spikecount": 112, "check": [113, 126, 139, 200, 383, 390, 402, 418, 423, 429, 434, 439, 444, 449, 454, 459, 466, 486, 495, 500, 505], "get": [114, 128, 140, 201, 382, 387, 401, 413, 422, 428, 433, 438, 443, 448, 453, 458, 465, 470, 494, 499, 504, 536, 590, 607, 645, 809, 862, 1101], "stepon": 115, "stepthre": 116, "steptwo": 117, "_step": [118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131], "ai": 120, "aph": 121, "apw": 122, "di": 123, "isicv": 124, "ttf": 125, "fahpd": 127, "mf": 129, "sahpd": 130, "sahpt": 131, "bap": [132, 133, 134, 135, 136, 137, 138, 139, 140, 1246], "_bap_att": 133, "bap_apheight": 134, "bap_apwidth": 135, "bap_att2": 136, "bap_att3": 137, "bap_spikecount": 138, "get_evaluate_bac": 141, "get_evaluate_stepon": 142, "get_evaluate_stepthre": 143, "get_evaluate_steptwo": 144, "get_evaluate_bap": 145, "hay_evaluate_bac": 146, "hay_evaluate_stepon": 147, "hay_evaluate_stepthre": 148, "hay_evaluate_steptwo": 149, "hay_evaluate_bap": 150, "nan_if_error": 152, "hai": 154, "get_feasible_model_object": 155, "get_feasible_model_param": 156, "get_hay_objective_nam": 157, "get_hay_param_nam": 158, "get_hay_params_pdf": 159, "get_hay_problem_descript": 160, "specif": 161, "biophysics_fit": 162, "get_model_pdf_from_db": 163, "get_pdf_select": 164, "model_select": 165, "_evaluate_invalid_fit": 166, "_get_offspr": 167, "_record_stat": 168, "_update_history_and_hof": 169, "eaalphamupluslambdacheckpoint": 170, "get_max_gener": 171, "get_mymap": 172, "get_objective_funct": 173, "get_population_with_different_n_object": 174, "optim": [175, 301, 1248], "robust_int": 176, "run": [177, 196, 631, 707, 1246, 1248, 1253], "save_result": 178, "setup_db_run": 179, "start_run": 180, "paramet": [181, 890, 1241, 1246, 1248, 1250], "param_selector": 182, "param_to_kwarg": 183, "set_fixed_param": 184, "_append": 185, "setup_stim": 186, "setup_bac": 187, "setup_stepon": 188, "setup_stepthre": 189, "setup_steptwo": 190, "setup_apical_epsp_inject": 191, "setup_bap": 192, "setup_soma_step": 193, "simul": [194, 195, 196, 209, 1246, 1251, 1252, 1253], "get_simulated_cel": 195, "simulator_setup": [197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "_check_first_element_of_name_is_the_sam": 198, "_check_not_non": 199, "get_cell_param": 202, "get_cell_params_with_default_sim_pram": 203, "get_param": 204, "get_stim_response_measure_fun": 205, "get_stim_run_fun_by_stim": 206, "get_stim_setup_fun_by_stim": 207, "get_stim": 208, "run_fun": 210, "undemon": 211, "warn": [211, 245, 471, 481, 483, 531, 907, 908, 909, 910, 997, 1013, 1014, 1015, 1025, 1026, 1027, 1028, 1050], "variablethatdoesnotgetpickl": 212, "_get_apical_sec_and_i_at_dist": 213, "augment_cell_with_detailed_label": 214, "connected_to_structure_beyond": 215, "execute_in_child_process": 216, "execute_in_child_process_kept_al": 217, "get_inner_sec_dist_dict": 218, "get_inner_section_at_dist": 219, "pool_help": 222, "run_cloudpickled_remot": 223, "tvec": 224, "vmapic": 225, "vmapical_posit": 226, "vmmax": 227, "vmsoma": 228, "io": [229, 516], "analyz": [230, 740, 1251], "spatiotemporal_bin": 231, "univers": [232, 242], "universal_pd": 233, "_helper": 234, "spike_detect": [235, 236], "spike_in_interv": 237, "split_synapse_activ": 238, "temporal_bin": 239, "temporal_binning_dask": 240, "temporal_binning_pd": 241, "calculate_vdensity_arrai": 243, "calculate_vdensity_array_dask": 244, "calculate_vdensity_array_pd": 245, "calculate_vdensity_array_pixelobject": 246, "get_bin": [247, 326], "voltage_bin": 248, "databas": [249, 468, 1248], "_is_legacy_model_data_bas": 250, "_make_mdb_forwards_compat": 251, "get_db_by_unique_id": 252, "data_bas": [253, 380], "is_data_bas": 254, "is_isf_data_bas": 255, "is_sub_data_bas": 256, "is_sub_isf_data_bas": 257, "is_sub_model_data_bas": 258, "databaseregist": [259, 260, 261, 262], "add_db": 260, "kei": [261, 468, 539, 550, 831], "search_db": 262, "_get_db_regist": 263, "assimilate_remote_regist": 264, "deregister_db": 265, "data_base_regist": 266, "register_db": 267, "db_initi": 268, "add_dendritic_spike_tim": 269, "add_dendritic_voltage_trac": 270, "_build_cor": 271, "_build_dendritic_voltage_trac": 272, "_build_param_fil": 273, "_build_synapse_activ": 274, "_get_rec_site_manag": 275, "builder": 276, "data_pars": 277, "load_dendritic_voltage_trac": 278, "load_dendritic_voltage_traces_help": 279, "read_voltage_traces_by_filenam": 280, "read_voltage_traces_from_csv": 281, "read_voltage_traces_from_fil": 282, "import": 282, "read_voltage_traces_from_files_panda": 283, "read_voltage_traces_from_npz": 284, "get_fil": [285, 415], "get_max_comma": 286, "file_handl": 287, "make_filelist": 288, "_convert_con_fns_to_reldb": 289, "_convert_netp_fns_to_reldb": 290, "_convert_neup_fns_to_reldb": 291, "_convert_syn_fns_to_reldb": 292, "filepath_resolut": 293, "load_simrun_gener": 294, "init": [295, 346], "load_initialized_cell_and_evokednw_from_db": 296, "create_metadata": 297, "create_metadata_parallelization_help": 298, "get_voltage_traces_divisions_by_metadata": 299, "metadata_util": 300, "_copy_and_transform_con": 302, "_copy_and_transform_network_param": 303, "_copy_and_transform_neuron_param": 304, "_copy_and_transform_syn": 305, "_delayed_copy_transform_paramfiles_to_db": 306, "_generate_target_filenam": 307, "_get_unique_hoc_fns_from_neup": 308, "_get_unique_landmark_fns_from_neup": 309, "_get_unique_syncons_from_netp": 310, "construct_param_filename_hashmap_df": 311, "param_file_pars": 312, "load_param_files_from_db": 313, "_check_needs_reoptim": 314, "_reoptimize_kei": 315, "reoptim": 316, "reoptimize_db": 317, "_get_dump": 318, "_hash_file_cont": 319, "augment_synapse_activation_df_with_branch_bin": 321, "compute_ap_arrai": 322, "compute_isi_arrai": 323, "compute_isi_from_st": 324, "compute_isi_from_st_list": 325, "get_bin_adjacency_map_in_sect": 327, "get_bin_soma_distances_in_sect": 328, "get_bins": 329, "get_max_depolarization_per_m": 330, "get_max_per_ms_on_pandas_datafram": 331, "get_neighboring_spatial_bin": 332, "get_neuron_param_fil": 333, "get_section_distances_df": 334, "get_spatial_bin_nam": 335, "get_synapse_activation_array_weight": 336, "get_time_group": 337, "prepare_ann_batch": 338, "load_syn_weight": 339, "run_delayeds_increment": 340, "save_sa_batch": 341, "spike_times_to_onehot": 342, "temporal_binning_augmented_sa": 343, "applyfun": 344, "synapse_activation_bin": 345, "merge_results_togeth": 347, "postfun": 348, "prefun": 349, "save_groupbi": 350, "synapse_activation_postprocess_dask": 351, "synapse_activation_postprocess_panda": 352, "tree_reduct": 353, "cach": [354, 560], "create_modular_db_path": 355, "create_reldb_path": 356, "dbopen": [357, 358], "resolve_db_path": 359, "resolve_modular_db_path": 360, "resolve_netp_reldb_path": 361, "resolve_neup_reldb_path": 362, "resolve_reldb_path": 363, "interprocesslocknowritepermiss": [364, 365, 366], "acquir": 365, "releas": 366, "_get_locking_config": 367, "_get_locking_server_client_from_config": 368, "get_lock": 369, "get_locking_cli": 370, "get_locking_serv": 371, "get_locking_server_cli": 372, "get_read_lock": 373, "get_write_lock": 374, "distributed_lock": 375, "update_config": 376, "databaseexcept": 377, "isfdatabaseexcept": 378, "except": 379, "loader": [381, 382, 386, 387, 400, 401, 412, 413, 421, 422, 427, 428, 432, 433, 437, 438, 442, 443, 447, 448, 452, 453, 457, 458, 462, 464, 465, 469, 470, 493, 494, 498, 499, 503, 504], "dump": [384, 391, 398, 404, 419, 424, 430, 435, 440, 445, 450, 455, 460, 467, 487, 496, 501, 506], "cell": [385, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 800, 980, 981, 982, 983, 984, 996, 1241, 1249, 1251, 1256], "bundle_delai": 388, "category_to_str": 389, "get_numpy_dtype_as_str": [392, 509], "get_writer_funct": 393, "dask_to_categorized_msgpack": 394, "my_dask_writ": 395, "read_object_meta": [396, 511], "str_to_categori": 397, "dask_to_msgpack": 399, "check_df_suitable_for_pq": 403, "dask_to_parquet": 405, "load_help": 406, "save_help": 407, "generic_to_specific_databases_module_nam": 408, "get_dumper_string_by_dumper_modul": 409, "get_dumper_string_by_savedir": 410, "loaderdump": 411, "managedfold": [414, 415, 416, 417], "join": 416, "listdir": 417, "just_create_fold": 420, "just_create_isf_db": 425, "numpy_to_msgpack": 431, "numpy_to_npi": 436, "numpy_to_npz": 441, "numpy_to_zarr": 446, "pandas_to_msgpack": 451, "pandas_to_parquet": 456, "pandas_to_pickl": 461, "parent_class": 463, "reduced_lda_model": 468, "sharednumpystor": [471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "_get_fnam": 472, "_get_fname_from_metadata": 473, "_get_metadata_from_fnam": 474, "_get_metadata_from_nam": 475, "append_sav": 476, "close": 477, "flush": 478, "get_expected_file_length": 479, "save": [481, 518, 885, 1097], "updat": [482, 887], "uninterrupt": 483, "_check_filesize_matches_shap": 484, "_get_offset_and_size_in_byt": 485, "shared_numpy_stor": 488, "memmap_from_disk": 489, "shared_array_from_disk": 490, "shared_array_from_numpi": 491, "shared_array_from_shared_mem_nam": 492, "to_cloudpickl": 497, "to_msgpack": 502, "to_pickl": 507, "get_meta_filenam": 508, "save_object_meta": 512, "set_object_meta": 513, "dask_wrapp": 514, "read_csv": 515, "isf_data_bas": [517, 554], "isfdatabas": [518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547], "metadata": 518, "associ": 518, "element": 518, "_check_key_format": 519, "_check_writing_privileg": 520, "_convert_key_to_path": 521, "_detect_dumper_string_of_existing_kei": 522, "_find_dump": 523, "_get_str": 524, "_infer_missing_metadata": 525, "_initi": 526, "_is_initi": 527, "_register_this_databas": 528, "_set_unique_id": 529, "_subkei": 530, "_write_metadata": 531, "check_if_key_exist": 532, "create_managed_fold": 533, "create_shared_numpy_stor": 534, "create_sub_db": 535, "get_id": 537, "get_mkdtemp": 538, "l": 540, "maybe_calcul": 541, "read_db_stat": 542, "register_dump": 543, "remov": 544, "renam": 545, "save_db_st": 546, "set": [547, 556], "loaderwrapp": 548, "metadataaccessor": [549, 550], "_check_working_dir_clean_for_build": 551, "get_dumper_from_fold": 552, "get_isfdb_by_unique_id": 553, "make_all_str": 555, "delayedkeyboardinterrupt": [557, 558], "handler": 558, "bcolor": 559, "calc_recursive_filetre": 561, "chunkit": [562, 727], "colorize_kei": 563, "colorize_str": 564, "convertible_to_int": 565, "delete_in_background": 566, "df_colnames_to_str": 567, "fancy_dict_compar": 568, "first_line_to_kei": 569, "flatten": 570, "get_file_or_folder_that_endswith": 571, "get_file_or_folder_that_startswith": 572, "is_db": 574, "mkdtemp": 575, "myrepartit": 576, "pandas_to_arrai": 577, "pooled_std": 578, "rename_for_delet": 579, "select": 580, "silence_stdout": [581, 736], "skit": 582, "split_file_to_buff": 583, "synchronous_ddf_concat": 584, "uniqu": 585, "wait_until_key_remov": 586, "psp_with_current_inject": [587, 588, 589, 590, 591, 592, 593, 594, 595], "_get_current_dependent_vt": 588, "_objective_fun": 589, "get_neuron_param_with_current_inject": 591, "get_psp_simul": 592, "get_psp_simulator_exc_and_inh_combin": 593, "optimize_holding_curr": 594, "plot_current_injection_voltage_trac": 595, "combine_psp_object": 596, "psp_with_cell_modif": 597, "_evoked_act": 598, "generate_synapse_activ": [599, 600], "hint": 600, "get_cell_with_network": [601, 602], "simrun": [603, 1241], "dataextractor_spatiotemporalsynapseactiv": [604, 605, 606, 607, 608, 609, 610, 611], "_get_spatial_bin_level": 605, "_get_spatiotemporal_input": 606, "get_group": 608, "get_sorted_keys_by_group": 609, "get_spatial_bins": 610, "setup": [611, 613, 623, 641, 668, 1067, 1070, 1072, 1075, 1077, 1079, 1081, 1083, 1085, 1087, 1248], "_dataextractor": [612, 613], "data_extractor": 614, "modular_reduced_model_infer": 615, "datasplitevalu": [616, 617, 618, 619, 620, 621], "add_isi_dependent_random_split": 617, "add_random_split": 618, "add_result": 619, "compute_scor": 620, "get_split": 621, "dataview": [622, 623], "rm": [624, 625, 626, 627, 628, 629, 630, 631], "_gather_result": 625, "add_data_extractor": 626, "add_strategi": 627, "extract": 628, "get_n_trial": 629, "get_result": [630, 1069], "get_n_workers_per_ip": 632, "reduced_model": 633, "solver_cobyla": [634, 635, 636], "_optim": 635, "_setup_optim": [636, 638], "_solver": [637, 638, 639, 640, 641], "optimize_all_split": 639, "optimize_one_split": 640, "solver": 642, "raisedcosinebasi": [643, 644, 645, 646, 647, 648, 649], "comput": [644, 1249], "get_raised_cosin": 646, "get_superposit": 647, "visual": [648, 658, 1206, 1247, 1249, 1251, 1252, 1253], "visualize_w": 649, "strategy_spatiotemporalraisedcosin": [650, 651, 652, 653, 654, 655, 656, 657, 658], "_convert_x_stat": 651, "_get_score_stat": 652, "_get_x0": [653, 661], "_setup": [654, 663], "compute_basi": 655, "get_color_by_group": 656, "_strategi": [659, 660, 661, 662, 663, 664, 665, 666, 667, 668], "_get_scor": 660, "_objective_function_stat": 662, "add_solv": 664, "get_score_stat": 665, "get_y_stat": 666, "set_split": 667, "clear_memori": 669, "convert_to_numpi": 670, "derefer": 671, "strategi": 672, "make_weakref": 673, "parameters_to_cel": [674, 675], "opaqu": 676, "rerun_db": [677, 678], "robustdaskdelayedexecut": [679, 680, 681, 682, 683], "add_delayed_to_db": 680, "get_statu": 681, "reset_statu": 682, "run_db": 683, "_assert_valu": 684, "_wrapper": 685, "robust_dask_delayed_execut": 686, "run_existing_synapse_activ": [687, 688], "run_new_simul": [689, 690], "get_se": 691, "seed_manag": 692, "sim_trial_to_cell_object": 693, "simtrial_to_cell_object": 694, "trial_to_cell_object": 695, "psp": [696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708], "_get_cell_and_nw_map": 697, "_setup_comput": 698, "get_merged_synapse_coordin": 699, "get_optimal_g": [700, 714], "get_summary_statist": [701, 715], "get_synapse_coordin": 702, "get_synapse_coordinates_with_psp_amplitud": 703, "get_voltage_and_tim": [704, 718], "get_voltage_trac": [705, 1060, 1064], "plot_vt": [706, 1229], "visualize_psp": 708, "analyze_voltage_trac": 709, "calculate_optimal_g": 710, "epsp_summary_statist": 711, "generate_ex_network_param_from_network_embed": 712, "generate_inh_network_param_from_network_embed": 713, "get_tmax_vmax": 716, "get_tmax_vmax_baselin": 717, "synaptic_strength_fit": 719, "linear_fit": 720, "linear_fit_pdf": 721, "merge_celltyp": 722, "run_ex_synaps": [723, 724], "set_ex_synapse_weight": 725, "set_inh_synapse_weight": 726, "get_cellnumbers_from_confil": 728, "get_default_argu": 729, "get_fraction_of_landmarkascii": 730, "get_fraction_of_landmarkascii_dir": 731, "load_param_file_if_path_is_provid": 733, "select_cells_that_spike_in_interv": 734, "set_default_arguments_if_not_set": 735, "split_network_param_in_one_elem_dict": 737, "tar_fold": 738, "event": 739, "psth_from_spike_tim": 741, "recordingsit": 742, "recordingsitemanag": [743, 744, 745, 746], "_read_landmark_fil": 744, "set_up_recording_sit": 745, "update_record": 746, "spikeinit": [747, 748, 749], "analyze_single_spik": 748, "vm_steady_st": 749, "compute_mean_psp_amplitud": 750, "compute_upsp_amplitud": 751, "compute_vm_histogram": 752, "compute_vm_std_window": 753, "membrane_potential_analysi": 754, "simple_spike_detect": 755, "vm_mean": 756, "vm_std": 757, "compute_distance_to_soma": 758, "compute_syn_dist": [759, 760], "compute_syn_distances_2dproject": 761, "compute_synapse_distances_tim": 762, "get_dist": 763, "synanalysi": 764, "synapse_activation_tim": 765, "add_synaps": [767, 981], "distance_between_pt": 768, "distance_to_soma": [769, 982], "get_range_var_conduct": 770, "get_section_adjacancy_map": 771, "get_synapse_activation_datafram": 772, "init_time_record": 773, "max_dist": 774, "re_init_cel": 775, "record_range_var": 776, "remove_synaps": [777, 984], "pointcel": [778, 779, 780, 781, 782, 783, 784, 785, 988, 989], "_add_synapse_point": [779, 989], "_next_interv": 780, "compute_spike_train_tim": 782, "is_act": [783, 935], "plai": 784, "turn_off": 785, "pysect": [786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799], "_compute_bound": [787, 991], "_compute_relative_pt": [788, 993], "_compute_seg_diamet": 789, "_compute_seg_pt": 790, "_compute_total_area": 791, "_get_seg_conduct": 792, "_init_range_var_record": 793, "_init_vm_record": 794, "_re_init_range_var_record": 795, "_re_init_vm_record": 796, "get_range_conduct": 797, "set_3d_geometri": [798, 994], "set_seg": 799, "bac_inject": [801, 802], "apical_current_inject": [803, 804], "apical_epsp_inject": [805, 806], "blender_record": [807, 808], "cell_modify_funct": 810, "scale_ap": [811, 812], "scale_apical_dendrit": 813, "scale_by_detailed_compart": 814, "soma_current_inject": [815, 816], "synaptic_input": [817, 818], "cellpars": [819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 985, 986, 987], "_add_spin": 820, "_add_spines_ar": 821, "_create_ai": 822, "_create_ais_hay2013": 823, "_insert_ion_properti": 824, "apply_cell_modify_funct": 825, "determine_nseg": 826, "get_cel": [827, 986], "insert_hh_membran": 828, "insert_membrane_properti": 829, "insert_passive_membran": 830, "insert_range_mechan": 831, "possibl": 831, "spatial": 831, "keyword": 831, "mech": 831, "addit": 831, "each": 831, "requir": 831, "correspond": 831, "math": 831, "equat": 831, "set_up_biophys": 832, "spatialgraph_to_cel": [833, 987], "update_range_mechan": 834, "cell_pars": 835, "create_cel": 836, "single_cell_pars": 837, "init_neuron_run": 838, "networkmapp": [839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015], "_activate_presyn_cel": 840, "_apply_network_modify_funct": 841, "_assign_anatomical_synaps": 842, "_assign_synapse_weight": 843, "_connect_functional_synaps": 844, "_connect_spike_train": 845, "_create_functional_connectivity_map": 846, "_create_pointcell_act": 847, "spike": [847, 1241], "time": [847, 1241], "distribut": 847, "_create_presyn_cel": [848, 1006], "_create_spiketrain_act": 849, "_map_complete_anatomical_r": 850, "_map_functional_r": 851, "create_functional_r": 852, "create_network": 853, "create_saved_network": 854, "create_saved_network2": 855, "re_init_network": 856, "reconnect_network": 857, "reconnect_saved_synaps": 858, "activate_functional_synaps": 859, "network": [860, 1241, 1245, 1249, 1250], "read": 860, "exist": 860, "realiz": 860, "creat": 860, "new": 860, "sample_times_from_r": 861, "network_modify_funct": 863, "silence_synapses_by_somadist": [864, 865], "silence_synapses_by_somadist_and_spike_sourc": [866, 867], "_celltype_match": 868, "_has_evok": 869, "change_evoked_inh_sc": 870, "change_glutamate_syn_weight": 871, "change_ongoing_interv": 872, "inactivate_evoked_activity_by_celltype_and_column": 873, "inactivate_evoked_and_ongoing_activity_by_celltype_and_column": 874, "network_param_modify_funct": 875, "multi_stimulus_tri": 876, "set_stim_onset": 877, "create_functional_network": 878, "create_synapse_r": 879, "network_r": 880, "parameterset": [881, 882, 883, 884, 885, 886, 887], "_resolve_path": 882, "_unwrap": 883, "_wrap": 884, "to_dict": 886, "_read_params_to_dict": 888, "build_paramet": 889, "load_nmodl_paramet": 891, "resolve_parameter_path": 892, "_edg": [893, 894, 1017, 1018], "is_valid": [894, 1018], "reader": [895, 1019], "read_complete_synapse_activation_fil": 896, "read_functional_realization_map": 897, "read_hoc_fil": [898, 1022], "read_landmark_fil": 899, "read_pruned_synapse_r": 900, "read_scalar_field": [901, 1023], "read_spike_times_fil": 902, "read_synapse_activation_fil": 903, "read_synapse_r": 904, "read_synapse_weight_fil": 905, "scalarfield": [906, 907, 908, 909, 910, 911, 912, 1024, 1025, 1026, 1027, 1028, 1029, 1030], "get_mesh_coordin": [907, 1025], "get_scalar": [908, 1026], "get_voxel_bound": [909, 1027], "get_voxel_cent": [910, 1028], "is_in_bound": [911, 1029], "resize_mesh": [912, 1030], "scalar_field": [913, 1031], "sec_distance_to_soma": 914, "cell_to_serializable_object": 915, "convert_dict_of_hoc_arrays_to_dict_of_np_arrai": 916, "convert_hoc_array_to_np_arrai": 917, "serialize_cel": 918, "load_cell_from_fil": 919, "restore_cell_from_serializable_object": 920, "save_cell_to_fil": 921, "simcontrol": [922, 923, 924, 925, 926], "go": 923, "set_iclamp": 924, "set_record": 925, "show": 926, "sim_control": 927, "spines_update_network_paramfil": 928, "spines_update_synapse_distribution_fil": 929, "exsyn": [930, 931], "activate_hoc_syn": [931, 933], "synaps": [932, 933, 934, 935, 936, 995, 1241, 1249, 1251, 1252], "disconnect_hoc_synaps": 934, "synapsemapp": [937, 938, 939, 940, 941, 942, 943, 944, 945, 1042, 1043, 1044, 1045, 1046, 1047], "_compute_path_length": [938, 1043], "_create_voxel_edge_map": [939, 1044], "_intersect_bbox": [940, 1038, 1045], "_pt_in_box": [941, 1046], "create_synaps": [942, 1047], "map_pruned_synapse_r": 943, "map_synapse_model_distribut": 944, "map_synapse_r": 945, "synapse_mapp": [946, 1048], "generate_landmark_templ": 947, "writer": [948, 1049], "value_to_color": [949, 1225], "write_psth": 950, "write_all_trac": 951, "write_cell_simul": 952, "write_cell_synapse_loc": [953, 1051], "write_functional_map": 954, "write_functional_realization_map": 955, "write_landmark_fil": [956, 1052], "write_landmarks_colorcoded_to_fold": 957, "write_presynaptic_spike_tim": 958, "write_pruned_synapse_loc": 959, "write_sim_result": 960, "write_spike_times_fil": 961, "write_synapse_activation_fil": 962, "write_synapse_weight_fil": 963, "create_average_celltype_psth_from_clust": 964, "create_evoked_psth": 965, "evoked_psth_from_spike_tim": 966, "load_cluster_tri": 967, "load_spike_tim": 968, "scan_directori": 969, "create_network_paramet": [970, 977], "evoked_network_param_from_templ": 971, "load_cell_number_fil": [972, 979], "whisker_evoked_psth": 973, "singlecell_input_mapp": [974, 999], "connect": 974, "activ": [974, 1241, 1250, 1251, 1252], "map_singlecell_input": [975, 976], "ongoing_network_param_from_templ": 978, "get_bounding_box": 983, "pysection2": [990, 991, 992, 993, 994], "_compute_length": 992, "con_file_to_numberofconnectedcells_sheet": 997, "generate_nr_of_cells_spreadsheet": 998, "_compute_parameter_distribut": 1001, "_compute_sample_dist": 1002, "_compute_summary_t": 1003, "_create_anatomical_connectivity_map": 1004, "_create_anatomical_r": 1005, "_generate_output_fil": 1007, "_get_representative_sampl": 1008, "_precompute_anatomical_area_celltype_synapse_dens": 1009, "_test_population_converg": 1010, "_write_landmark_fil": 1011, "_write_population_output_fil": 1012, "create_network_embed": 1013, "create_network_embedding_for_simul": 1014, "create_network_embedding_from_synapse_dens": 1015, "network_embed": 1016, "read_celltype_numbers_spreadsheet": 1020, "read_connections_spreadsheet": 1021, "synapsedens": [1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "_clip_u": 1033, "_compute_cell_density_grid": 1034, "_compute_length_surface_area_dens": 1035, "_get_truncated_cone_area": 1036, "_interpolate_radiu": 1037, "_is_zero": 1039, "compute_cell_pst": 1040, "todo": 1040, "compute_synapse_dens": 1041, "write_anatomical_realization_map": 1050, "write_population_and_sample_connectivity_summari": 1053, "write_population_connectivity_summari": 1054, "write_sample_connectivity_summari": 1055, "write_scalar_field": 1056, "readerlabview": [1057, 1058, 1059, 1060], "get_serialize_dict": [1058, 1062, 1093], "get_stim_tim": [1059, 1063], "readersmr": [1061, 1062, 1063, 1064], "staplugin_isin": [1065, 1066, 1067], "event_analysis_isin": 1066, "staplugin_templ": [1068, 1069, 1070], "staplugin_annotate_bursts_in_st": [1071, 1072], "staplugin_burst": [1073, 1074, 1075], "event_analysis_burst": 1074, "staplugin_extract_column_in_filtered_datafram": [1076, 1077], "staplugin_ongo": [1078, 1079], "staplugin_quantification_in_period": [1080, 1081], "staplugin_response_latency_in_period": [1082, 1083], "staplugin_response_probability_in_period": [1084, 1085], "staplugin_spike_times_datafram": [1086, 1087], "spikedetectioncreasttrough": [1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098], "_extract_spike_tim": 1089, "_set_creast_trough": 1090, "get_creast_and_trough_ampltidues_by_bin": 1091, "get_default_ev": 1092, "plot_creast_trough_histogram": 1095, "run_analysi": 1096, "show_ev": 1098, "spiketimesanalysi": [1099, 1100, 1101, 1102], "apply_extractor": 1100, "get_by_tri": 1102, "_sta_input_check": 1103, "filter_short_isi": 1104, "filter_spike_tim": 1105, "get_peaks_abov": 1106, "get_period_label_by_tim": 1107, "get_spike_times_from_row": 1108, "get_st_from_spike_times_and_stim_tim": 1109, "get_upcross": 1110, "highpass_filt": 1111, "core": 1112, "load_read": 1113, "read_labview_junk1_dat_fil": 1114, "read_smr_fil": 1115, "stimulus_interval_filt": 1116, "strip_st": 1117, "spike_analysi": 1118, "dask_to_panda": 1119, "_decor": 1120, "pr": 1121, "subsequent_calls_per_lin": 1122, "pixelobject": 1123, "fig2np": 1124, "_figure_array_convert": 1125, "show_pixel_object": 1126, "cmvdatapars": [1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145], "_align_trunk_with_z_axi": 1128, "_calc_ion_dynamics_timeseri": 1129, "_calc_morphologi": 1130, "_calc_scalar_data_from_keyword": 1131, "_calc_synapses_timeseri": 1132, "_calc_voltage_timeseri": 1133, "_data_per_section_to_data_per_point": 1134, "_get_color_per_sect": 1135, "_get_ion_dynamics_at_timepoint": 1136, "_get_synapses_at_timepoint": 1137, "_get_timeseries_minmax": 1138, "_get_voltages_at_timepoint": 1139, "_has_simulation_data": 1140, "_init_simulation_data": 1141, "_keyword_is_scalar_data": 1142, "_update_times_to_show": 1143, "scale_diamet": 1144, "set_cmap": 1145, "cellmorphologyinteractivevisu": [1146, 1147, 1148, 1149, 1150], "_get_interactive_cel": 1147, "_get_interactive_dash_app": 1148, "interactive_app": 1149, "interactive_plot": 1150, "cellmorphologyvisu": [1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158], "_write_png_timeseri": 1152, "anim": [1153, 1247, 1251], "plot": [1154, 1181, 1183, 1188, 1199, 1249], "to_vtk": 1155, "write_gif": 1156, "write_video": 1157, "write_vtk_fram": 1158, "get_3d_plot_morphologi": 1159, "cell_morphology_visu": 1160, "_in_parallel_context": 1161, "_load_base64": [1162, 1220], "cell_to_anim": 1163, "cell_to_ipython_anim": [1164, 1168], "display_anim": 1165, "find_closest_index": 1166, "get_lin": 1167, "init_fig": 1169, "parallelmoviemak": 1170, "plot_lines_fun": 1171, "currentanalysi": [1172, 1173, 1174, 1175, 1176], "_compute_current_arrai": 1173, "_get_current_by_rv": 1174, "plot_area": 1175, "plot_lin": 1176, "current_visu": 1177, "dendrogram": [1178, 1179, 1180, 1181, 1202], "_plot_dendrogram": 1179, "get_parent_by_nam": 1180, "dendrogramstatist": [1182, 1183], "_dendrogramdendritestatist": [1184, 1185, 1186, 1187, 1188], "_compute_dendrite_hist": 1185, "_get_amount_of_dendrite_in_bin": 1186, "_plot_dendrite_hist": 1187, "_dendrogramsect": [1189, 1190], "_add_synaps": [1190, 1192], "_dendrogramsynapsestatist": [1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199], "_compute_synapse_hist": 1193, "_compute_synapse_statist": 1194, "_plot_synapse_density_hist": 1195, "_plot_synapse_hist": 1196, "_plot_synapses_dendrogram_overlai": 1197, "get_number_of_synapses_in_bin": 1198, "_get_db_by_sec": 1200, "_get_max_somadist": 1201, "histogram": [1203, 1205], "histogram2": 1204, "manylin": [1207, 1208], "manylines_help": 1209, "plot_hoc": 1210, "rasterplot": [1211, 1212], "rasterplot2": 1213, "rasterplot2_pdf_group": 1214, "svg2emf": 1215, "arrow3d": [1216, 1217, 1218], "do_3d_project": 1217, "draw": 1218, "_arrow3d": 1219, "display_animation_from_imag": 1221, "draw_arrow": 1222, "find_files_and_order_them": 1223, "exampl": [1223, 1253], "directori": 1223, "content": 1223, "write_gif_from_imag": 1226, "write_video_from_imag": 1227, "voltage_trace_visu": 1228, "visualize_vt": 1230, "convert_amira_lattice_to_vtk": 1231, "convert_amira_surf_to_vtk": 1232, "vtk": 1233, "save_cells_landmark_files_vtk": 1234, "write_vtk_pointcloud_fil": 1235, "write_vtk_skeleton_fil": 1236, "bibliographi": 1237, "The": [1238, 1246, 1247, 1254], "In": [1238, 1253], "silico": [1238, 1253], "framework": [1238, 1253], "isf": [1238, 1242, 1246, 1247, 1253], "api": [1239, 1256], "refer": [1239, 1249], "file": [1241, 1250], "data": [1241, 1252, 1253, 1255], "format": [1241, 1249], "syn": 1241, "con": 1241, "param": 1241, "receptor": 1241, "datafram": 1241, "raw": 1241, "output": [1241, 1249], "singl": 1241, "trial": 1241, "pars": [1241, 1253], "all": [1241, 1246], "presynapt": [1241, 1251], "voltag": [1241, 1247, 1251], "trace": 1241, "csv": 1241, "vm_all_trac": 1241, "npz": 1241, "hoc": 1241, "mod": 1241, "am": 1241, "instal": 1242, "usag": 1242, "test": 1242, "configur": [1242, 1253], "tutori": 1245, "introduct": 1245, "1": [1245, 1255], "neuron": [1245, 1249, 1256], "model": [1245, 1246, 1247, 1248, 1249, 1251, 1252], "2": [1245, 1255], "3": 1245, "multiscal": 1245, "4": 1245, "analyt": [1245, 1251], "tractabl": 1245, "reduc": [1245, 1252], "biophys": [1246, 1247, 1248], "detail": [1246, 1247, 1248], "multi": [1246, 1247, 1248, 1251, 1252], "compartment": [1246, 1247, 1248], "us": 1246, "equip": 1246, "morphologi": [1246, 1249, 1255], "stimulu": 1246, "protocol": 1246, "recap": [1246, 1247, 1248, 1249, 1250], "membran": [1247, 1251], "ion": 1247, "current": [1247, 1256], "gener": [1248, 1249, 1252], "algorithm": 1248, "empir": 1248, "limit": 1248, "inspect": [1248, 1249, 1250], "result": [1248, 1249, 1251], "explor": 1248, "from": [1248, 1253], "seedpoint": 1248, "random": 1248, "walk": 1248, "embed": 1249, "regist": 1249, "desir": 1249, "frame": 1249, "calcul": [1249, 1252], "posit": 1249, "yourself": 1249, "copi": 1249, "pre": [1249, 1252], "parallel": 1249, "anatom": 1249, "per": 1249, "type": 1249, "column": 1249, "compat": 1249, "other": 1249, "dens": 1249, "connectom": 1249, "character": 1250, "ongo": 1250, "evok": 1250, "scale": [1251, 1252, 1254], "synapt": 1251, "2d": 1251, "3d": 1251, "linear": 1252, "glm": 1252, "bin": 1252, "visualis": 1252, "mcm": 1252, "respons": 1252, "infer": 1252, "raisedcosin": 1252, "basi": 1252, "spatiotempor": 1252, "filter": 1252, "wni": 1252, "valu": 1252, "nonlinear": 1252, "isi": 1252, "depend": 1252, "penalti": 1252, "welcom": 1253, "packag": 1253, "thi": 1253, "repositori": 1253, "you": 1253, "most": 1253, "like": 1253, "directli": 1253, "interact": 1253, "how": 1253, "should": 1253, "i": 1253, "dask": 1253, "parameterfil": 1253, "barrel": 1254, "cortex": 1254, "l5pt": 1254, "apic": [1254, 1256], "dendrit": [1254, 1256], "reconstruct": 1255, "imag": 1255, "slice": 1255, "morpholog": 1255, "skeleton": 1255, "inject": 1256, "soma": 1256, "step": 1256, "pair": 1256}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "nbsphinx": 4, "sphinxcontrib.bibtex": 9, "sphinx": 58}, "alltitles": {"_is_running_on_dask_worker": [[0, "is-running-on-dask-worker"]], "get_client": [[1, "get-client"]], "Interface": [[2, "interface"]], "Functions": [[2, "functions"], [9, "functions"], [48, "functions"], [78, "functions"], [86, "functions"], [90, "functions"], [100, "functions"], [151, "functions"], [161, "functions"], [162, "functions"], [165, "functions"], [175, "functions"], [181, "functions"], [186, "functions"], [209, "functions"], [221, "functions"], [230, "functions"], [231, "functions"], [235, "functions"], [239, "functions"], [248, "functions"], [253, "functions"], [266, "functions"], [277, "functions"], [287, "functions"], [294, "functions"], [300, "functions"], [312, "functions"], [316, "functions"], [338, "functions"], [345, "functions"], [358, "functions"], [375, "functions"], [385, "functions"], [394, "functions"], [399, "functions"], [405, "functions"], [411, "functions"], [420, "functions"], [425, "functions"], [431, "functions"], [436, "functions"], [441, "functions"], [446, "functions"], [451, "functions"], [456, "functions"], [461, "functions"], [468, "functions"], [488, "functions"], [497, "functions"], [502, "functions"], [507, "functions"], [510, "functions"], [514, "functions"], [554, "functions"], [573, "functions"], [597, "functions"], [600, "functions"], [602, "functions"], [633, "functions"], [672, "functions"], [674, "functions"], [677, "functions"], [687, "functions"], [689, "functions"], [692, "functions"], [693, "functions"], [719, "functions"], [732, "functions"], [754, "functions"], [764, "functions"], [802, "functions"], [804, "functions"], [806, "functions"], [808, "functions"], [810, "functions"], [811, "functions"], [815, "functions"], [817, "functions"], [837, "functions"], [860, "functions"], [863, "functions"], [864, "functions"], [866, "functions"], [875, "functions"], [880, "functions"], [890, "functions"], [895, "functions"], [918, "functions"], [948, "functions"], [966, "functions"], [971, "functions"], [975, "functions"], [978, "functions"], [998, "functions"], [1019, "functions"], [1049, "functions"], [1112, "functions"], [1120, "functions"], [1125, "functions"], [1160, "functions"], [1168, "functions"], [1205, "functions"], [1206, "functions"], [1207, "functions"], [1211, "functions"], [1224, "functions"], [1228, "functions"], [1233, "functions"]], "print_module_versions": [[3, "print-module-versions"]], "check_unset_range_mechanisms": [[4, "check-unset-range-mechanisms"]], "get_L5tt_template": [[5, "get-l5tt-template"]], "get_L5tt_template_v2": [[6, "get-l5tt-template-v2"]], "hay_param_to_scp_neuron_param": [[7, "hay-param-to-scp-neuron-param"]], "See also": [[7, null], [10, null], [78, null], [96, null], [97, null], [98, null], [103, null], [104, null], [105, null], [106, null], [107, null], [108, null], [109, null], [110, null], [111, null], [115, null], [116, null], [117, null], [118, null], [119, null], [120, null], [121, null], [122, null], [123, null], [124, null], [125, null], [127, null], [129, null], [130, null], [132, null], [133, null], [134, null], [135, null], [136, null], [137, null], [138, null], [218, null], [219, null], [225, null], [230, null], [231, null], [232, null], [234, null], [242, null], [244, null], [245, null], [266, null], [273, null], [280, null], [281, null], [282, null], [283, null], [284, null], [290, null], [291, null], [294, null], [296, null], [298, null], [323, null], [324, null], [325, null], [335, null], [339, null], [343, null], [344, null], [346, null], [346, null], [348, null], [349, null], [350, null], [351, null], [352, null], [364, null], [369, null], [372, null], [381, null], [384, null], [399, null], [401, null], [404, null], [404, null], [405, null], [436, null], [441, null], [446, null], [451, null], [455, null], [456, null], [461, null], [487, null], [489, null], [507, null], [517, null], [534, null], [543, null], [557, null], [562, null], [563, null], [564, null], [570, null], [581, null], [582, null], [583, null], [587, null], [599, null], [600, null], [601, null], [620, null], [626, null], [627, null], [628, null], [630, null], [631, null], [634, null], [639, null], [671, null], [674, null], [677, null], [677, null], [678, null], [688, null], [689, null], [693, null], [694, null], [694, null], [700, null], [703, null], [710, null], [712, null], [713, null], [714, null], [715, null], [724, null], [727, null], [730, null], [731, null], [742, null], [747, null], [762, null], [764, null], [766, null], [801, null], [803, null], [805, null], [810, null], [816, null], [819, null], [820, null], [826, null], [837, null], [839, null], [852, null], [856, null], [860, null], [893, null], [893, null], [898, null], [932, null], [934, null], [935, null], [936, null], [937, null], [974, null], [980, null], [985, null], [995, null], [1000, null], [1017, null], [1022, null], [1032, null], [1057, null], [1061, null], [1065, null], [1067, null], [1071, null], [1072, null], [1073, null], [1075, null], [1076, null], [1076, null], [1077, null], [1078, null], [1079, null], [1081, null], [1082, null], [1083, null], [1084, null], [1085, null], [1086, null], [1087, null], [1090, null], [1096, null], [1098, null], [1111, null], [1124, null], [1151, null], [1162, null], [1230, null]], "hay_params_to_scp_neuron_params": [[8, "hay-params-to-scp-neuron-params"]], "L5tt_parameter_setup": [[9, "l5tt-parameter-setup"]], "set_ephys": [[10, "set-ephys"]], "set_hot_zone": [[11, "set-hot-zone"]], "Note": [[11, null], [39, null], [40, null], [43, null], [44, null], [45, null], [47, null], [55, null], [73, null], [92, null], [156, null], [160, null], [175, null], [177, null], [194, null], [214, null], [353, null], [487, null], [488, null], [544, null], [643, null], [785, null], [822, null], [823, null], [826, null], [1032, null], [1151, null], [1161, null], [1162, null], [1163, null], [1164, null], [1165, null], [1168, null], [1170, null], [1227, null]], "set_many_param": [[12, "set-many-param"]], "set_morphology": [[13, "set-morphology"]], "set_param": [[14, "set-param"]], "Combiner": [[15, "combiner"]], "Combiner.combine": [[16, "combiner-combine"]], "Combiner_Setup": [[17, "combiner-setup"]], "Combiner_Setup.append": [[18, "combiner-setup-append"]], "combiner": [[19, "combiner"]], "Classes": [[19, "classes"], [58, "classes"], [68, "classes"], [78, "classes"], [151, "classes"], [209, "classes"], [221, "classes"], [253, "classes"], [266, "classes"], [358, "classes"], [375, "classes"], [385, "classes"], [394, "classes"], [405, "classes"], [420, "classes"], [425, "classes"], [431, "classes"], [436, "classes"], [441, "classes"], [446, "classes"], [451, "classes"], [456, "classes"], [461, "classes"], [463, "classes"], [468, "classes"], [488, "classes"], [497, "classes"], [502, "classes"], [507, "classes"], [554, "classes"], [573, "classes"], [597, "classes"], [614, "classes"], [633, "classes"], [642, "classes"], [672, "classes"], [677, "classes"], [686, "classes"], [719, "classes"], [754, "classes"], [800, "classes"], [835, "classes"], [837, "classes"], [860, "classes"], [890, "classes"], [913, "classes"], [927, "classes"], [936, "classes"], [946, "classes"], [996, "classes"], [1016, "classes"], [1031, "classes"], [1048, "classes"], [1112, "classes"], [1125, "classes"], [1160, "classes"], [1177, "classes"], [1202, "classes"], [1224, "classes"]], "connected_to_dend_beyond": [[20, "connected-to-dend-beyond"]], "AHP_depth_abs": [[21, "ahp-depth-abs"]], "AHP_depth_abs_check_2AP": [[22, "ahp-depth-abs-check-2ap"]], "AP_height": [[23, "ap-height"]], "AP_height_check_1AP": [[24, "ap-height-check-1ap"]], "AP_width": [[25, "ap-width"]], "BAC_ISI": [[26, "bac-isi"]], "BAC_ISI_check_2_or_3_APs": [[27, "bac-isi-check-2-or-3-aps"]], "BAC_ISI_check_repolarization": [[28, "bac-isi-check-repolarization"]], "BAC_caSpike_height": [[29, "bac-caspike-height"]], "BAC_caSpike_height_check_1_Ca_AP": [[30, "bac-caspike-height-check-1-ca-ap"]], "BAC_caSpike_height_check_Ca_spikes_after_Na_spike": [[31, "bac-caspike-height-check-ca-spikes-after-na-spike"]], "BAC_caSpike_height_check_gt2_Na_spikes": [[32, "bac-caspike-height-check-gt2-na-spikes"]], "BAC_caSpike_width": [[33, "bac-caspike-width"]], "BPAPatt": [[34, "bpapatt"]], "BPAPatt_check_1_AP": [[35, "bpapatt-check-1-ap"]], "BPAPatt_check_relative_height": [[36, "bpapatt-check-relative-height"]], "STEP_adaptation_index": [[37, "step-adaptation-index"]], "STEP_check_2_ISIs": [[38, "step-check-2-isis"]], "STEP_coef_var": [[39, "step-coef-var"]], "STEP_fast_ahp_depth": [[40, "step-fast-ahp-depth"]], "STEP_initial_ISI": [[41, "step-initial-isi"]], "STEP_mean_frequency": [[42, "step-mean-frequency"]], "STEP_slow_ahp_depth": [[43, "step-slow-ahp-depth"]], "STEP_slow_ahp_time": [[44, "step-slow-ahp-time"]], "Attention": [[44, null], [273, null], [294, null], [303, null], [304, null], [330, null], [331, null], [337, null], [356, null], [363, null], [541, null], [650, null], [652, null], [655, null], [657, null], [658, null], [662, null], [671, null], [673, null], [690, null], [797, null], [814, null], [852, null], [852, null], [859, null], [952, null], [952, null], [966, null], [971, null], [975, null], [975, null], [1155, null], [1165, null], [1195, null], [1221, null], [1241, null], [1241, null]], "STEP_time_to_first_spike": [[45, "step-time-to-first-spike"]], "find_crossing": [[46, "find-crossing"]], "find_crossing_old": [[47, "find-crossing-old"]], "ephys": [[48, "ephys"]], "spike_count": [[49, "spike-count"]], "trace_check": [[50, "trace-check"]], "trace_check_err": [[51, "trace-check-err"]], "trace_check_max_prestim_dendrite_depo": [[52, "trace-check-max-prestim-dendrite-depo"]], "voltage_base": [[53, "voltage-base"]], "voltage_base2": [[54, "voltage-base2"]], "Evaluator": [[55, "evaluator"]], "Evaluator.evaluate": [[56, "evaluator-evaluate"]], "Evaluator_Setup": [[57, "evaluator-setup"]], "evaluator": [[58, "evaluator"]], "RW": [[59, "rw"], [68, "rw"]], "RW._clean_the_pickles": [[60, "rw-clean-the-pickles"]], "RW._concatenate_and_clean": [[61, "rw-concatenate-and-clean"]], "RW._load_pickle_or_parquet": [[62, "rw-load-pickle-or-parquet"]], "RW._normalize_aim_params": [[63, "rw-normalize-aim-params"]], "RW._normalize_params": [[64, "rw-normalize-params"]], "RW._unnormalize_params": [[65, "rw-unnormalize-params"]], "RW.assess_aim_params_reached": [[66, "rw-assess-aim-params-reached"]], "RW.run_RW": [[67, "rw-run-rw"]], "Load": [[69, "load"]], "Load.get_df": [[70, "load-get-df"]], "Load.get_futures": [[71, "load-get-futures"]], "augment_ddf_with_PCA_space": [[72, "augment-ddf-with-pca-space"]], "get_depolarization_index": [[73, "get-depolarization-index"]], "get_hyperpolarization_index": [[74, "get-hyperpolarization-index"]], "get_index": [[75, "get-index"]], "get_inside_fraction": [[76, "get-inside-fraction"]], "get_param_range_evolution_from_ddf": [[77, "get-param-range-evolution-from-ddf"]], "RW_analysis": [[78, "rw-analysis"]], "normalize": [[79, "normalize"], [153, "normalize"]], "pandas_binby": [[80, "pandas-binby"]], "read_all": [[81, "read-all"]], "read_parameters": [[82, "read-parameters"]], "read_pickle": [[83, "read-pickle"]], "robust_read_pickle": [[84, "robust-read-pickle"]], "evaluation_function_incremental_helper": [[85, "evaluation-function-incremental-helper"], [88, "evaluation-function-incremental-helper"]], "exploration_from_seedpoint": [[86, "exploration-from-seedpoint"]], "Modules": [[86, "modules"], [154, "modules"], [162, "modules"], [230, "modules"], [268, "modules"], [294, "modules"], [380, "modules"], [411, "modules"], [516, "modules"], [517, "modules"], [603, "modules"], [615, "modules"], [740, "modules"], [810, "modules"], [837, "modules"], [863, "modules"], [974, "modules"], [999, "modules"], [1118, "modules"], [1206, "modules"]], "convert_all_check_columns_bool_to_float": [[87, "convert-all-check-columns-bool-to-float"]], "get_vector_norm": [[89, "get-vector-norm"]], "utils": [[90, "utils"], [221, "utils"], [320, "utils"], [510, "utils"], [573, "utils"], [732, "utils"], [1224, "utils"]], "get_branching_depth": [[91, "get-branching-depth"]], "get_branching_depth_series": [[92, "get-branching-depth-series"]], "get_first_order_bifurcation_sections": [[93, "get-first-order-bifurcation-sections"]], "get_inner_sec_dist_list": [[94, "get-inner-sec-dist-list"]], "get_main_bifurcation_section": [[95, "get-main-bifurcation-section"], [220, "get-main-bifurcation-section"]], "get_Combiner": [[96, "get-combiner"]], "get_Evaluator": [[97, "get-evaluator"]], "get_Simulator": [[98, "get-simulator"]], "get_fixed_params_example": [[99, "get-fixed-params-example"]], "default_setup": [[100, "default-setup"]], "interpolate_vt": [[101, "interpolate-vt"]], "map_truefalse_to_str": [[102, "map-truefalse-to-str"]], "record_BAC": [[103, "record-bac"]], "record_Step": [[104, "record-step"]], "record_bAP": [[105, "record-bap"]], "BAC": [[106, "bac"]], "BAC.BAC_APheight": [[107, "bac-bac-apheight"]], "BAC.BAC_ISI": [[108, "bac-bac-isi"]], "BAC.BAC_ahpdepth": [[109, "bac-bac-ahpdepth"]], "BAC.BAC_caSpike_height": [[110, "bac-bac-caspike-height"]], "BAC.BAC_caSpike_width": [[111, "bac-bac-caspike-width"]], "BAC.BAC_spikecount": [[112, "bac-bac-spikecount"]], "BAC.check": [[113, "bac-check"]], "BAC.get": [[114, "bac-get"]], "StepOne": [[115, "stepone"]], "StepThree": [[116, "stepthree"]], "StepTwo": [[117, "steptwo"]], "_Step": [[118, "step"]], "_Step.AHP_depth_abs": [[119, "step-ahp-depth-abs"]], "_Step.AI": [[120, "step-ai"]], "_Step.APh": [[121, "step-aph"]], "_Step.APw": [[122, "step-apw"]], "_Step.DI": [[123, "step-di"]], "_Step.ISIcv": [[124, "step-isicv"]], "_Step.TTFS": [[125, "step-ttfs"]], "_Step.check": [[126, "step-check"]], "_Step.fAHPd": [[127, "step-fahpd"]], "_Step.get": [[128, "step-get"]], "_Step.mf": [[129, "step-mf"]], "_Step.sAHPd": [[130, "step-sahpd"]], "_Step.sAHPt": [[131, "step-sahpt"]], "bAP": [[132, "bap"]], "bAP._bAP_att": [[133, "bap-bap-att"]], "bAP.bAP_APheight": [[134, "bap-bap-apheight"]], "bAP.bAP_APwidth": [[135, "bap-bap-apwidth"]], "bAP.bAP_att2": [[136, "bap-bap-att2"]], "bAP.bAP_att3": [[137, "bap-bap-att3"]], "bAP.bAP_spikecount": [[138, "bap-bap-spikecount"]], "bAP.check": [[139, "bap-check"]], "bAP.get": [[140, "bap-get"]], "get_evaluate_BAC": [[141, "get-evaluate-bac"]], "get_evaluate_StepOne": [[142, "get-evaluate-stepone"]], "get_evaluate_StepThree": [[143, "get-evaluate-stepthree"]], "get_evaluate_StepTwo": [[144, "get-evaluate-steptwo"]], "get_evaluate_bAP": [[145, "get-evaluate-bap"]], "hay_evaluate_BAC": [[146, "hay-evaluate-bac"]], "hay_evaluate_StepOne": [[147, "hay-evaluate-stepone"]], "hay_evaluate_StepThree": [[148, "hay-evaluate-stepthree"]], "hay_evaluate_StepTwo": [[149, "hay-evaluate-steptwo"]], "hay_evaluate_bAP": [[150, "hay-evaluate-bap"]], "evaluation": [[151, "evaluation"]], "nan_if_error": [[152, "nan-if-error"]], "hay": [[154, "hay"]], "get_feasible_model_objectives": [[155, "get-feasible-model-objectives"]], "get_feasible_model_params": [[156, "get-feasible-model-params"]], "get_hay_objective_names": [[157, "get-hay-objective-names"]], "get_hay_param_names": [[158, "get-hay-param-names"]], "get_hay_params_pdf": [[159, "get-hay-params-pdf"]], "get_hay_problem_description": [[160, "get-hay-problem-description"]], "specification": [[161, "specification"]], "biophysics_fitting": [[162, "biophysics-fitting"]], "get_model_pdf_from_db": [[163, "get-model-pdf-from-db"]], "get_pdf_selected": [[164, "get-pdf-selected"]], "model_selection": [[165, "model-selection"]], "_evaluate_invalid_fitness": [[166, "evaluate-invalid-fitness"]], "_get_offspring": [[167, "get-offspring"]], "_record_stats": [[168, "record-stats"]], "_update_history_and_hof": [[169, "update-history-and-hof"]], "eaAlphaMuPlusLambdaCheckpoint": [[170, "eaalphamupluslambdacheckpoint"]], "get_max_generation": [[171, "get-max-generation"]], "get_mymap": [[172, "get-mymap"]], "get_objective_function": [[173, "get-objective-function"]], "get_population_with_different_n_objectives": [[174, "get-population-with-different-n-objectives"]], "optimizer": [[175, "optimizer"]], "robust_int": [[176, "robust-int"]], "run": [[177, "run"]], "save_result": [[178, "save-result"]], "setup_db_run": [[179, "setup-db-run"]], "start_run": [[180, "start-run"]], "parameters": [[181, "parameters"], [890, "parameters"]], "param_selector": [[182, "param-selector"]], "param_to_kwargs": [[183, "param-to-kwargs"]], "set_fixed_params": [[184, "set-fixed-params"]], "_append": [[185, "append"]], "setup_stim": [[186, "setup-stim"]], "setup_BAC": [[187, "setup-bac"]], "setup_StepOne": [[188, "setup-stepone"]], "setup_StepThree": [[189, "setup-stepthree"]], "setup_StepTwo": [[190, "setup-steptwo"]], "setup_apical_epsp_injection": [[191, "setup-apical-epsp-injection"]], "setup_bAP": [[192, "setup-bap"]], "setup_soma_step": [[193, "setup-soma-step"]], "Simulator": [[194, "simulator"]], "Simulator.get_simulated_cell": [[195, "simulator-get-simulated-cell"]], "Simulator.run": [[196, "simulator-run"]], "Simulator_Setup": [[197, "simulator-setup"]], "Simulator_Setup._check_first_element_of_name_is_the_same": [[198, "simulator-setup-check-first-element-of-name-is-the-same"]], "Simulator_Setup._check_not_none": [[199, "simulator-setup-check-not-none"]], "Simulator_Setup.check": [[200, "simulator-setup-check"]], "Simulator_Setup.get": [[201, "simulator-setup-get"]], "Simulator_Setup.get_cell_params": [[202, "simulator-setup-get-cell-params"]], "Simulator_Setup.get_cell_params_with_default_sim_prams": [[203, "simulator-setup-get-cell-params-with-default-sim-prams"]], "Simulator_Setup.get_params": [[204, "simulator-setup-get-params"]], "Simulator_Setup.get_stim_response_measure_fun": [[205, "simulator-setup-get-stim-response-measure-fun"]], "Simulator_Setup.get_stim_run_fun_by_stim": [[206, "simulator-setup-get-stim-run-fun-by-stim"]], "Simulator_Setup.get_stim_setup_fun_by_stim": [[207, "simulator-setup-get-stim-setup-fun-by-stim"]], "Simulator_Setup.get_stims": [[208, "simulator-setup-get-stims"]], "simulator": [[209, "simulator"]], "run_fun": [[210, "run-fun"]], "Undemonize": [[211, "undemonize"]], "Warning": [[211, null], [245, null], [471, null], [481, null], [483, null], [531, null], [907, null], [908, null], [909, null], [910, null], [997, null], [1013, null], [1013, null], [1014, null], [1014, null], [1015, null], [1015, null], [1025, null], [1026, null], [1027, null], [1028, null], [1050, null]], "VariableThatDoesNotGetPickled": [[212, "variablethatdoesnotgetpickled"]], "_get_apical_sec_and_i_at_distance": [[213, "get-apical-sec-and-i-at-distance"]], "augment_cell_with_detailed_labels": [[214, "augment-cell-with-detailed-labels"]], "connected_to_structure_beyond": [[215, "connected-to-structure-beyond"]], "execute_in_child_process": [[216, "execute-in-child-process"]], "execute_in_child_process_kept_alive": [[217, "execute-in-child-process-kept-alive"]], "get_inner_sec_dist_dict": [[218, "get-inner-sec-dist-dict"]], "get_inner_section_at_distance": [[219, "get-inner-section-at-distance"]], "pool_helper": [[222, "pool-helper"]], "run_cloudpickled_remotely": [[223, "run-cloudpickled-remotely"]], "tVec": [[224, "tvec"]], "vmApical": [[225, "vmapical"]], "vmApical_position": [[226, "vmapical-position"]], "vmMax": [[227, "vmmax"]], "vmSoma": [[228, "vmsoma"]], "IO": [[229, "io"], [516, "io"]], "analyze": [[230, "analyze"], [740, "analyze"]], "spatiotemporal_binning": [[231, "spatiotemporal-binning"]], "universal": [[232, "universal"], [242, "universal"]], "universal_pd": [[233, "universal-pd"]], "_helper": [[234, "helper"]], "spike_detection": [[235, "spike-detection"], [236, "spike-detection"]], "spike_in_interval": [[237, "spike-in-interval"]], "split_synapse_activation": [[238, "split-synapse-activation"]], "temporal_binning": [[239, "temporal-binning"]], "temporal_binning_dask": [[240, "temporal-binning-dask"]], "temporal_binning_pd": [[241, "temporal-binning-pd"]], "calculate_vdensity_array": [[243, "calculate-vdensity-array"]], "calculate_vdensity_array_dask": [[244, "calculate-vdensity-array-dask"]], "calculate_vdensity_array_pd": [[245, "calculate-vdensity-array-pd"]], "calculate_vdensity_array_pixelObject": [[246, "calculate-vdensity-array-pixelobject"]], "get_bins": [[247, "get-bins"]], "voltage_binning": [[248, "voltage-binning"]], "DataBase": [[249, "database"]], "_is_legacy_model_data_base": [[250, "is-legacy-model-data-base"]], "_make_mdb_forwards_compatible": [[251, "make-mdb-forwards-compatible"]], "get_db_by_unique_id": [[252, "get-db-by-unique-id"]], "data_base": [[253, "data-base"], [380, "data-base"]], "is_data_base": [[254, "is-data-base"]], "is_isf_data_base": [[255, "is-isf-data-base"]], "is_sub_data_base": [[256, "is-sub-data-base"]], "is_sub_isf_data_base": [[257, "is-sub-isf-data-base"]], "is_sub_model_data_base": [[258, "is-sub-model-data-base"]], "DataBaseRegister": [[259, "databaseregister"]], "DataBaseRegister.add_db": [[260, "databaseregister-add-db"]], "DataBaseRegister.keys": [[261, "databaseregister-keys"]], "DataBaseRegister.search_dbs": [[262, "databaseregister-search-dbs"]], "_get_db_register": [[263, "get-db-register"]], "assimilate_remote_register": [[264, "assimilate-remote-register"]], "deregister_db": [[265, "deregister-db"]], "data_base_register": [[266, "data-base-register"]], "register_db": [[267, "register-db"]], "db_initializers": [[268, "db-initializers"]], "add_dendritic_spike_times": [[269, "add-dendritic-spike-times"]], "add_dendritic_voltage_traces": [[270, "add-dendritic-voltage-traces"]], "_build_core": [[271, "build-core"]], "_build_dendritic_voltage_traces": [[272, "build-dendritic-voltage-traces"]], "_build_param_files": [[273, "build-param-files"]], "_build_synapse_activation": [[274, "build-synapse-activation"]], "_get_rec_site_managers": [[275, "get-rec-site-managers"]], "builders": [[276, "builders"]], "data_parsing": [[277, "data-parsing"]], "load_dendritic_voltage_traces": [[278, "load-dendritic-voltage-traces"]], "load_dendritic_voltage_traces_helper": [[279, "load-dendritic-voltage-traces-helper"]], "read_voltage_traces_by_filenames": [[280, "read-voltage-traces-by-filenames"]], "read_voltage_traces_from_csv": [[281, "read-voltage-traces-from-csv"]], "read_voltage_traces_from_file": [[282, "read-voltage-traces-from-file"]], "Important": [[282, null]], "read_voltage_traces_from_files_pandas": [[283, "read-voltage-traces-from-files-pandas"]], "read_voltage_traces_from_npz": [[284, "read-voltage-traces-from-npz"]], "get_file": [[285, "get-file"]], "get_max_commas": [[286, "get-max-commas"]], "file_handling": [[287, "file-handling"]], "make_filelist": [[288, "make-filelist"]], "_convert_con_fns_to_reldb": [[289, "convert-con-fns-to-reldb"]], "_convert_netp_fns_to_reldb": [[290, "convert-netp-fns-to-reldb"]], "_convert_neup_fns_to_reldb": [[291, "convert-neup-fns-to-reldb"]], "_convert_syn_fns_to_reldb": [[292, "convert-syn-fns-to-reldb"]], "filepath_resolution": [[293, "filepath-resolution"]], "load_simrun_general": [[294, "load-simrun-general"]], "init": [[295, "init"], [346, "init"]], "load_initialized_cell_and_evokedNW_from_db": [[296, "load-initialized-cell-and-evokednw-from-db"]], "create_metadata": [[297, "create-metadata"]], "create_metadata_parallelization_helper": [[298, "create-metadata-parallelization-helper"]], "get_voltage_traces_divisions_by_metadata": [[299, "get-voltage-traces-divisions-by-metadata"]], "metadata_utils": [[300, "metadata-utils"]], "optimize": [[301, "optimize"]], "_copy_and_transform_con": [[302, "copy-and-transform-con"]], "_copy_and_transform_network_param": [[303, "copy-and-transform-network-param"]], "_copy_and_transform_neuron_param": [[304, "copy-and-transform-neuron-param"]], "_copy_and_transform_syn": [[305, "copy-and-transform-syn"]], "_delayed_copy_transform_paramfiles_to_db": [[306, "delayed-copy-transform-paramfiles-to-db"]], "_generate_target_filenames": [[307, "generate-target-filenames"]], "_get_unique_hoc_fns_from_neups": [[308, "get-unique-hoc-fns-from-neups"]], "_get_unique_landmark_fns_from_neups": [[309, "get-unique-landmark-fns-from-neups"]], "_get_unique_syncons_from_netps": [[310, "get-unique-syncons-from-netps"]], "construct_param_filename_hashmap_df": [[311, "construct-param-filename-hashmap-df"]], "param_file_parser": [[312, "param-file-parser"]], "load_param_files_from_db": [[313, "load-param-files-from-db"]], "_check_needs_reoptimization": [[314, "check-needs-reoptimization"]], "_reoptimize_key": [[315, "reoptimize-key"]], "reoptimize": [[316, "reoptimize"]], "reoptimize_db": [[317, "reoptimize-db"]], "_get_dumper": [[318, "get-dumper"]], "_hash_file_content": [[319, "hash-file-content"]], "augment_synapse_activation_df_with_branch_bin": [[321, "augment-synapse-activation-df-with-branch-bin"]], "compute_AP_array": [[322, "compute-ap-array"]], "compute_ISI_array": [[323, "compute-isi-array"]], "compute_ISI_from_st": [[324, "compute-isi-from-st"]], "compute_ISI_from_st_list": [[325, "compute-isi-from-st-list"]], "get_bin": [[326, "get-bin"]], "get_bin_adjacency_map_in_section": [[327, "get-bin-adjacency-map-in-section"]], "get_bin_soma_distances_in_section": [[328, "get-bin-soma-distances-in-section"]], "get_binsize": [[329, "get-binsize"]], "get_max_depolarization_per_ms": [[330, "get-max-depolarization-per-ms"]], "get_max_per_ms_on_pandas_dataframe": [[331, "get-max-per-ms-on-pandas-dataframe"]], "get_neighboring_spatial_bins": [[332, "get-neighboring-spatial-bins"]], "get_neuron_param_file": [[333, "get-neuron-param-file"]], "get_section_distances_df": [[334, "get-section-distances-df"]], "get_spatial_bin_names": [[335, "get-spatial-bin-names"]], "get_synapse_activation_array_weighted": [[336, "get-synapse-activation-array-weighted"]], "get_time_groups": [[337, "get-time-groups"]], "prepare_ANN_batches": [[338, "prepare-ann-batches"]], "load_syn_weights": [[339, "load-syn-weights"]], "run_delayeds_incrementally": [[340, "run-delayeds-incrementally"]], "save_SA_batch": [[341, "save-sa-batch"]], "spike_times_to_onehot": [[342, "spike-times-to-onehot"]], "temporal_binning_augmented_sa": [[343, "temporal-binning-augmented-sa"]], "applyfun": [[344, "applyfun"]], "synapse_activation_binning": [[345, "synapse-activation-binning"]], "merge_results_together": [[347, "merge-results-together"]], "postfun": [[348, "postfun"]], "prefun": [[349, "prefun"]], "save_groupby": [[350, "save-groupby"]], "synapse_activation_postprocess_dask": [[351, "synapse-activation-postprocess-dask"]], "synapse_activation_postprocess_pandas": [[352, "synapse-activation-postprocess-pandas"]], "tree_reduction": [[353, "tree-reduction"]], "cache": [[354, "cache"], [560, "cache"]], "create_modular_db_path": [[355, "create-modular-db-path"]], "create_reldb_path": [[356, "create-reldb-path"]], "dbopen": [[357, "dbopen"], [358, "dbopen"]], "resolve_db_path": [[359, "resolve-db-path"]], "resolve_modular_db_path": [[360, "resolve-modular-db-path"]], "resolve_netp_reldb_paths": [[361, "resolve-netp-reldb-paths"]], "resolve_neup_reldb_paths": [[362, "resolve-neup-reldb-paths"]], "resolve_reldb_path": [[363, "resolve-reldb-path"]], "InterProcessLockNoWritePermission": [[364, "interprocesslocknowritepermission"]], "InterProcessLockNoWritePermission.acquire": [[365, "interprocesslocknowritepermission-acquire"]], "InterProcessLockNoWritePermission.release": [[366, "interprocesslocknowritepermission-release"]], "_get_locking_config": [[367, "get-locking-config"]], "_get_locking_server_client_from_config": [[368, "get-locking-server-client-from-config"]], "get_lock": [[369, "get-lock"]], "get_locking_client": [[370, "get-locking-client"]], "get_locking_server": [[371, "get-locking-server"]], "get_locking_server_client": [[372, "get-locking-server-client"]], "get_read_lock": [[373, "get-read-lock"]], "get_write_lock": [[374, "get-write-lock"]], "distributed_lock": [[375, "distributed-lock"]], "update_config": [[376, "update-config"]], "DataBaseException": [[377, "databaseexception"]], "ISFDataBaseException": [[378, "isfdatabaseexception"]], "exceptions": [[379, "exceptions"]], "Exceptions": [[379, "id1"]], "Loader": [[381, "loader"], [386, "loader"], [400, "loader"], [412, "loader"], [421, "loader"], [427, "loader"], [432, "loader"], [437, "loader"], [442, "loader"], [447, "loader"], [452, "loader"], [457, "loader"], [462, "loader"], [464, "loader"], [469, "loader"], [493, "loader"], [498, "loader"], [503, "loader"]], "Loader.get": [[382, "loader-get"], [387, "loader-get"], [401, "loader-get"], [413, "loader-get"], [422, "loader-get"], [428, "loader-get"], [433, "loader-get"], [438, "loader-get"], [443, "loader-get"], [448, "loader-get"], [453, "loader-get"], [458, "loader-get"], [465, "loader-get"], [470, "loader-get"], [494, "loader-get"], [499, "loader-get"], [504, "loader-get"]], "check": [[383, "check"], [390, "check"], [402, "check"], [418, "check"], [423, "check"], [429, "check"], [434, "check"], [439, "check"], [444, "check"], [449, "check"], [454, "check"], [459, "check"], [466, "check"], [486, "check"], [495, "check"], [500, "check"], [505, "check"]], "dump": [[384, "dump"], [391, "dump"], [398, "dump"], [404, "dump"], [419, "dump"], [424, "dump"], [430, "dump"], [435, "dump"], [440, "dump"], [445, "dump"], [450, "dump"], [455, "dump"], [460, "dump"], [467, "dump"], [487, "dump"], [496, "dump"], [501, "dump"], [506, "dump"]], "cell": [[385, "cell"], [800, "cell"], [996, "cell"]], "bundle_delayeds": [[388, "bundle-delayeds"]], "category_to_str": [[389, "category-to-str"]], "get_numpy_dtype_as_str": [[392, "get-numpy-dtype-as-str"], [509, "get-numpy-dtype-as-str"]], "get_writer_function": [[393, "get-writer-function"]], "dask_to_categorized_msgpack": [[394, "dask-to-categorized-msgpack"]], "my_dask_writer": [[395, "my-dask-writer"]], "read_object_meta": [[396, "read-object-meta"], [511, "read-object-meta"]], "str_to_category": [[397, "str-to-category"]], "dask_to_msgpack": [[399, "dask-to-msgpack"]], "check_df_suitable_for_pq": [[403, "check-df-suitable-for-pq"]], "dask_to_parquet": [[405, "dask-to-parquet"]], "load_helper": [[406, "load-helper"]], "save_helper": [[407, "save-helper"]], "generic_to_specific_databases_module_name": [[408, "generic-to-specific-databases-module-name"]], "get_dumper_string_by_dumper_module": [[409, "get-dumper-string-by-dumper-module"]], "get_dumper_string_by_savedir": [[410, "get-dumper-string-by-savedir"]], "LoaderDumper": [[411, "loaderdumper"]], "ManagedFolder": [[414, "managedfolder"]], "ManagedFolder.get_file": [[415, "managedfolder-get-file"]], "ManagedFolder.join": [[416, "managedfolder-join"]], "ManagedFolder.listdir": [[417, "managedfolder-listdir"]], "just_create_folder": [[420, "just-create-folder"]], "just_create_isf_db": [[425, "just-create-isf-db"]], "load": [[426, "load"]], "numpy_to_msgpack": [[431, "numpy-to-msgpack"]], "numpy_to_npy": [[436, "numpy-to-npy"]], "numpy_to_npz": [[441, "numpy-to-npz"]], "numpy_to_zarr": [[446, "numpy-to-zarr"]], "pandas_to_msgpack": [[451, "pandas-to-msgpack"]], "pandas_to_parquet": [[456, "pandas-to-parquet"]], "pandas_to_pickle": [[461, "pandas-to-pickle"]], "parent_classes": [[463, "parent-classes"]], "reduced_lda_model": [[468, "reduced-lda-model"]], "Database keys": [[468, "id1"]], "SharedNumpyStore": [[471, "sharednumpystore"]], "SharedNumpyStore._get_fname": [[472, "sharednumpystore-get-fname"]], "SharedNumpyStore._get_fname_from_metadata": [[473, "sharednumpystore-get-fname-from-metadata"]], "SharedNumpyStore._get_metadata_from_fname": [[474, "sharednumpystore-get-metadata-from-fname"]], "SharedNumpyStore._get_metadata_from_name": [[475, "sharednumpystore-get-metadata-from-name"]], "SharedNumpyStore.append_save": [[476, "sharednumpystore-append-save"]], "SharedNumpyStore.close": [[477, "sharednumpystore-close"]], "SharedNumpyStore.flush": [[478, "sharednumpystore-flush"]], "SharedNumpyStore.get_expected_file_length": [[479, "sharednumpystore-get-expected-file-length"]], "SharedNumpyStore.load": [[480, "sharednumpystore-load"]], "SharedNumpyStore.save": [[481, "sharednumpystore-save"]], "SharedNumpyStore.update": [[482, "sharednumpystore-update"]], "Uninterruptible": [[483, "uninterruptible"]], "_check_filesize_matches_shape": [[484, "check-filesize-matches-shape"]], "_get_offset_and_size_in_bytes": [[485, "get-offset-and-size-in-bytes"]], "shared_numpy_store": [[488, "shared-numpy-store"]], "memmap_from_disk": [[489, "memmap-from-disk"]], "shared_array_from_disk": [[490, "shared-array-from-disk"]], "shared_array_from_numpy": [[491, "shared-array-from-numpy"]], "shared_array_from_shared_mem_name": [[492, "shared-array-from-shared-mem-name"]], "to_cloudpickle": [[497, "to-cloudpickle"]], "to_msgpack": [[502, "to-msgpack"]], "to_pickle": [[507, "to-pickle"]], "get_meta_filename": [[508, "get-meta-filename"]], "save_object_meta": [[512, "save-object-meta"]], "set_object_meta": [[513, "set-object-meta"]], "dask_wrappers": [[514, "dask-wrappers"]], "read_csvs": [[515, "read-csvs"]], "isf_data_base": [[517, "isf-data-base"], [554, "isf-data-base"]], "ISFDataBase": [[518, "isfdatabase"]], "Metadata Associated with Saved Elements": [[518, "id1"]], "ISFDataBase._check_key_format": [[519, "isfdatabase-check-key-format"]], "ISFDataBase._check_writing_privilege": [[520, "isfdatabase-check-writing-privilege"]], "ISFDataBase._convert_key_to_path": [[521, "isfdatabase-convert-key-to-path"]], "ISFDataBase._detect_dumper_string_of_existing_key": [[522, "isfdatabase-detect-dumper-string-of-existing-key"]], "ISFDataBase._find_dumper": [[523, "isfdatabase-find-dumper"]], "ISFDataBase._get_str": [[524, "isfdatabase-get-str"]], "ISFDataBase._infer_missing_metadata": [[525, "isfdatabase-infer-missing-metadata"]], "ISFDataBase._initialize": [[526, "isfdatabase-initialize"]], "ISFDataBase._is_initialized": [[527, "isfdatabase-is-initialized"]], "ISFDataBase._register_this_database": [[528, "isfdatabase-register-this-database"]], "ISFDataBase._set_unique_id": [[529, "isfdatabase-set-unique-id"]], "ISFDataBase._subkeys": [[530, "isfdatabase-subkeys"]], "ISFDataBase._write_metadata": [[531, "isfdatabase-write-metadata"]], "ISFDataBase.check_if_key_exists": [[532, "isfdatabase-check-if-key-exists"]], "ISFDataBase.create_managed_folder": [[533, "isfdatabase-create-managed-folder"]], "ISFDataBase.create_shared_numpy_store": [[534, "isfdatabase-create-shared-numpy-store"]], "ISFDataBase.create_sub_db": [[535, "isfdatabase-create-sub-db"]], "ISFDataBase.get": [[536, "isfdatabase-get"]], "ISFDataBase.get_id": [[537, "isfdatabase-get-id"]], "ISFDataBase.get_mkdtemp": [[538, "isfdatabase-get-mkdtemp"]], "ISFDataBase.keys": [[539, "isfdatabase-keys"]], "ISFDataBase.ls": [[540, "isfdatabase-ls"]], "ISFDataBase.maybe_calculate": [[541, "isfdatabase-maybe-calculate"]], "ISFDataBase.read_db_state": [[542, "isfdatabase-read-db-state"]], "ISFDataBase.register_dumper": [[543, "isfdatabase-register-dumper"]], "ISFDataBase.remove": [[544, "isfdatabase-remove"]], "ISFDataBase.rename": [[545, "isfdatabase-rename"]], "ISFDataBase.save_db_state": [[546, "isfdatabase-save-db-state"]], "ISFDataBase.set": [[547, "isfdatabase-set"]], "LoaderWrapper": [[548, "loaderwrapper"]], "MetadataAccessor": [[549, "metadataaccessor"]], "MetadataAccessor.keys": [[550, "metadataaccessor-keys"]], "_check_working_dir_clean_for_build": [[551, "check-working-dir-clean-for-build"]], "get_dumper_from_folder": [[552, "get-dumper-from-folder"]], "get_isfdb_by_unique_id": [[553, "get-isfdb-by-unique-id"]], "make_all_str": [[555, "make-all-str"]], "settings": [[556, "settings"]], "DelayedKeyboardInterrupt": [[557, "delayedkeyboardinterrupt"]], "DelayedKeyboardInterrupt.handler": [[558, "delayedkeyboardinterrupt-handler"]], "bcolors": [[559, "bcolors"]], "calc_recursive_filetree": [[561, "calc-recursive-filetree"]], "chunkIt": [[562, "chunkit"], [727, "chunkit"]], "colorize_key": [[563, "colorize-key"]], "colorize_str": [[564, "colorize-str"]], "convertible_to_int": [[565, "convertible-to-int"]], "delete_in_background": [[566, "delete-in-background"]], "df_colnames_to_str": [[567, "df-colnames-to-str"]], "fancy_dict_compare": [[568, "fancy-dict-compare"]], "first_line_to_key": [[569, "first-line-to-key"]], "flatten": [[570, "flatten"]], "get_file_or_folder_that_endswith": [[571, "get-file-or-folder-that-endswith"]], "get_file_or_folder_that_startswith": [[572, "get-file-or-folder-that-startswith"]], "is_db": [[574, "is-db"]], "mkdtemp": [[575, "mkdtemp"]], "myrepartition": [[576, "myrepartition"]], "pandas_to_array": [[577, "pandas-to-array"]], "pooled_std": [[578, "pooled-std"]], "rename_for_deletion": [[579, "rename-for-deletion"]], "select": [[580, "select"]], "silence_stdout": [[581, "silence-stdout"], [736, "silence-stdout"]], "skit": [[582, "skit"]], "split_file_to_buffers": [[583, "split-file-to-buffers"]], "synchronous_ddf_concat": [[584, "synchronous-ddf-concat"]], "unique": [[585, "unique"]], "wait_until_key_removed": [[586, "wait-until-key-removed"]], "PSP_with_current_injection": [[587, "psp-with-current-injection"]], "PSP_with_current_injection._get_current_dependent_vt": [[588, "psp-with-current-injection-get-current-dependent-vt"]], "PSP_with_current_injection._objective_fun": [[589, "psp-with-current-injection-objective-fun"]], "PSP_with_current_injection.get": [[590, "psp-with-current-injection-get"]], "PSP_with_current_injection.get_neuron_param_with_current_injection": [[591, "psp-with-current-injection-get-neuron-param-with-current-injection"]], "PSP_with_current_injection.get_psp_simulator": [[592, "psp-with-current-injection-get-psp-simulator"]], "PSP_with_current_injection.get_psp_simulator_exc_and_inh_combined": [[593, "psp-with-current-injection-get-psp-simulator-exc-and-inh-combined"]], "PSP_with_current_injection.optimize_holding_current": [[594, "psp-with-current-injection-optimize-holding-current"]], "PSP_with_current_injection.plot_current_injection_voltage_trace": [[595, "psp-with-current-injection-plot-current-injection-voltage-trace"]], "combine_PSP_objects": [[596, "combine-psp-objects"]], "PSP_with_cell_modification": [[597, "psp-with-cell-modification"]], "_evoked_activity": [[598, "evoked-activity"]], "generate_synapse_activations": [[599, "generate-synapse-activations"], [600, "generate-synapse-activations"]], "Hint": [[600, null]], "get_cell_with_network": [[601, "get-cell-with-network"], [602, "get-cell-with-network"]], "simrun": [[603, "simrun"]], "DataExtractor_spatiotemporalSynapseActivation": [[604, "dataextractor-spatiotemporalsynapseactivation"]], "DataExtractor_spatiotemporalSynapseActivation._get_spatial_bin_level": [[605, "dataextractor-spatiotemporalsynapseactivation-get-spatial-bin-level"]], "DataExtractor_spatiotemporalSynapseActivation._get_spatiotemporal_input": [[606, "dataextractor-spatiotemporalsynapseactivation-get-spatiotemporal-input"]], "DataExtractor_spatiotemporalSynapseActivation.get": [[607, "dataextractor-spatiotemporalsynapseactivation-get"]], "DataExtractor_spatiotemporalSynapseActivation.get_groups": [[608, "dataextractor-spatiotemporalsynapseactivation-get-groups"]], "DataExtractor_spatiotemporalSynapseActivation.get_sorted_keys_by_group": [[609, "dataextractor-spatiotemporalsynapseactivation-get-sorted-keys-by-group"]], "DataExtractor_spatiotemporalSynapseActivation.get_spatial_binsize": [[610, "dataextractor-spatiotemporalsynapseactivation-get-spatial-binsize"]], "DataExtractor_spatiotemporalSynapseActivation.setup": [[611, "dataextractor-spatiotemporalsynapseactivation-setup"]], "_DataExtractor": [[612, "dataextractor"]], "_DataExtractor.setup": [[613, "dataextractor-setup"]], "data_extractor": [[614, "data-extractor"]], "modular_reduced_model_inference": [[615, "modular-reduced-model-inference"]], "DataSplitEvaluation": [[616, "datasplitevaluation"]], "DataSplitEvaluation.add_isi_dependent_random_split": [[617, "datasplitevaluation-add-isi-dependent-random-split"]], "DataSplitEvaluation.add_random_split": [[618, "datasplitevaluation-add-random-split"]], "DataSplitEvaluation.add_result": [[619, "datasplitevaluation-add-result"]], "DataSplitEvaluation.compute_scores": [[620, "datasplitevaluation-compute-scores"]], "DataSplitEvaluation.get_splits": [[621, "datasplitevaluation-get-splits"]], "DataView": [[622, "dataview"]], "DataView.setup": [[623, "dataview-setup"]], "Rm": [[624, "rm"]], "Rm._gather_results": [[625, "rm-gather-results"]], "Rm.add_data_extractor": [[626, "rm-add-data-extractor"]], "Rm.add_strategy": [[627, "rm-add-strategy"]], "Rm.extract": [[628, "rm-extract"]], "Rm.get_n_trials": [[629, "rm-get-n-trials"]], "Rm.get_results": [[630, "rm-get-results"]], "Rm.run": [[631, "rm-run"]], "get_n_workers_per_ip": [[632, "get-n-workers-per-ip"]], "reduced_model": [[633, "reduced-model"]], "Solver_COBYLA": [[634, "solver-cobyla"]], "Solver_COBYLA._optimize": [[635, "solver-cobyla-optimize"]], "Solver_COBYLA._setup_optimizer": [[636, "solver-cobyla-setup-optimizer"]], "_Solver": [[637, "solver"]], "_Solver._setup_optimizer": [[638, "solver-setup-optimizer"]], "_Solver.optimize_all_splits": [[639, "solver-optimize-all-splits"]], "_Solver.optimize_one_split": [[640, "solver-optimize-one-split"]], "_Solver.setup": [[641, "solver-setup"]], "solver": [[642, "solver"]], "RaisedCosineBasis": [[643, "raisedcosinebasis"]], "RaisedCosineBasis.compute": [[644, "raisedcosinebasis-compute"]], "RaisedCosineBasis.get": [[645, "raisedcosinebasis-get"]], "RaisedCosineBasis.get_raised_cosine": [[646, "raisedcosinebasis-get-raised-cosine"]], "RaisedCosineBasis.get_superposition": [[647, "raisedcosinebasis-get-superposition"]], "RaisedCosineBasis.visualize": [[648, "raisedcosinebasis-visualize"]], "RaisedCosineBasis.visualize_w": [[649, "raisedcosinebasis-visualize-w"]], "Strategy_spatiotemporalRaisedCosine": [[650, "strategy-spatiotemporalraisedcosine"]], "Strategy_spatiotemporalRaisedCosine._convert_x_static": [[651, "strategy-spatiotemporalraisedcosine-convert-x-static"]], "Strategy_spatiotemporalRaisedCosine._get_score_static": [[652, "strategy-spatiotemporalraisedcosine-get-score-static"]], "Strategy_spatiotemporalRaisedCosine._get_x0": [[653, "strategy-spatiotemporalraisedcosine-get-x0"]], "Strategy_spatiotemporalRaisedCosine._setup": [[654, "strategy-spatiotemporalraisedcosine-setup"]], "Strategy_spatiotemporalRaisedCosine.compute_basis": [[655, "strategy-spatiotemporalraisedcosine-compute-basis"]], "Strategy_spatiotemporalRaisedCosine.get_color_by_group": [[656, "strategy-spatiotemporalraisedcosine-get-color-by-group"]], "Strategy_spatiotemporalRaisedCosine.normalize": [[657, "strategy-spatiotemporalraisedcosine-normalize"]], "Strategy_spatiotemporalRaisedCosine.visualize": [[658, "strategy-spatiotemporalraisedcosine-visualize"]], "_Strategy": [[659, "strategy"]], "_Strategy._get_score": [[660, "strategy-get-score"]], "_Strategy._get_x0": [[661, "strategy-get-x0"]], "_Strategy._objective_function_static": [[662, "strategy-objective-function-static"]], "_Strategy._setup": [[663, "strategy-setup"]], "_Strategy.add_solver": [[664, "strategy-add-solver"]], "_Strategy.get_score_static": [[665, "strategy-get-score-static"]], "_Strategy.get_y_static": [[666, "strategy-get-y-static"]], "_Strategy.set_split": [[667, "strategy-set-split"]], "_Strategy.setup": [[668, "strategy-setup"]], "clear_memory": [[669, "clear-memory"]], "convert_to_numpy": [[670, "convert-to-numpy"]], "dereference": [[671, "dereference"]], "strategy": [[672, "strategy"]], "make_weakref": [[673, "make-weakref"]], "parameters_to_cell": [[674, "parameters-to-cell"], [675, "parameters-to-cell"]], "Opaque": [[676, "opaque"]], "rerun_db": [[677, "rerun-db"], [678, "rerun-db"]], "RobustDaskDelayedExecution": [[679, "robustdaskdelayedexecution"]], "RobustDaskDelayedExecution.add_delayed_to_db": [[680, "robustdaskdelayedexecution-add-delayed-to-db"]], "RobustDaskDelayedExecution.get_status": [[681, "robustdaskdelayedexecution-get-status"]], "RobustDaskDelayedExecution.reset_status": [[682, "robustdaskdelayedexecution-reset-status"]], "RobustDaskDelayedExecution.run_db": [[683, "robustdaskdelayedexecution-run-db"]], "_assert_value": [[684, "assert-value"]], "_wrapper": [[685, "wrapper"]], "robust_dask_delayed_execution": [[686, "robust-dask-delayed-execution"]], "run_existing_synapse_activations": [[687, "run-existing-synapse-activations"], [688, "run-existing-synapse-activations"]], "run_new_simulations": [[689, "run-new-simulations"], [690, "run-new-simulations"]], "get_seed": [[691, "get-seed"]], "seed_manager": [[692, "seed-manager"]], "sim_trial_to_cell_object": [[693, "sim-trial-to-cell-object"]], "simtrial_to_cell_object": [[694, "simtrial-to-cell-object"]], "trial_to_cell_object": [[695, "trial-to-cell-object"]], "PSPs": [[696, "psps"]], "PSPs._get_cell_and_nw_map": [[697, "psps-get-cell-and-nw-map"]], "PSPs._setup_computation": [[698, "psps-setup-computation"]], "PSPs.get_merged_synapse_coordinates": [[699, "psps-get-merged-synapse-coordinates"]], "PSPs.get_optimal_g": [[700, "psps-get-optimal-g"]], "PSPs.get_summary_statistics": [[701, "psps-get-summary-statistics"]], "PSPs.get_synapse_coordinates": [[702, "psps-get-synapse-coordinates"]], "PSPs.get_synapse_coordinates_with_psp_amplitude": [[703, "psps-get-synapse-coordinates-with-psp-amplitude"]], "PSPs.get_voltage_and_timing": [[704, "psps-get-voltage-and-timing"]], "PSPs.get_voltage_traces": [[705, "psps-get-voltage-traces"]], "PSPs.plot_vt": [[706, "psps-plot-vt"]], "PSPs.run": [[707, "psps-run"]], "PSPs.visualize_psps": [[708, "psps-visualize-psps"]], "analyze_voltage_trace": [[709, "analyze-voltage-trace"]], "calculate_optimal_g": [[710, "calculate-optimal-g"]], "ePSP_summary_statistics": [[711, "epsp-summary-statistics"]], "generate_ex_network_param_from_network_embedding": [[712, "generate-ex-network-param-from-network-embedding"]], "generate_inh_network_param_from_network_embedding": [[713, "generate-inh-network-param-from-network-embedding"]], "get_optimal_g": [[714, "get-optimal-g"]], "get_summary_statistics": [[715, "get-summary-statistics"]], "get_tMax_vMax": [[716, "get-tmax-vmax"]], "get_tMax_vMax_baseline": [[717, "get-tmax-vmax-baseline"]], "get_voltage_and_timing": [[718, "get-voltage-and-timing"]], "synaptic_strength_fitting": [[719, "synaptic-strength-fitting"]], "linear_fit": [[720, "linear-fit"]], "linear_fit_pdf": [[721, "linear-fit-pdf"]], "merge_celltypes": [[722, "merge-celltypes"]], "run_ex_synapse": [[723, "run-ex-synapse"]], "run_ex_synapses": [[724, "run-ex-synapses"]], "set_ex_synapse_weight": [[725, "set-ex-synapse-weight"]], "set_inh_synapse_weight": [[726, "set-inh-synapse-weight"]], "get_cellnumbers_from_confile": [[728, "get-cellnumbers-from-confile"]], "get_default_arguments": [[729, "get-default-arguments"]], "get_fraction_of_landmarkAscii": [[730, "get-fraction-of-landmarkascii"]], "get_fraction_of_landmarkAscii_dir": [[731, "get-fraction-of-landmarkascii-dir"]], "load_param_file_if_path_is_provided": [[733, "load-param-file-if-path-is-provided"]], "select_cells_that_spike_in_interval": [[734, "select-cells-that-spike-in-interval"]], "set_default_arguments_if_not_set": [[735, "set-default-arguments-if-not-set"]], "split_network_param_in_one_elem_dicts": [[737, "split-network-param-in-one-elem-dicts"]], "tar_folder": [[738, "tar-folder"]], "Event": [[739, "event"]], "PSTH_from_spike_times": [[741, "psth-from-spike-times"]], "RecordingSite": [[742, "recordingsite"]], "RecordingSiteManager": [[743, "recordingsitemanager"]], "RecordingSiteManager._read_landmark_file": [[744, "recordingsitemanager-read-landmark-file"]], "RecordingSiteManager.set_up_recording_site": [[745, "recordingsitemanager-set-up-recording-site"]], "RecordingSiteManager.update_recordings": [[746, "recordingsitemanager-update-recordings"]], "SpikeInit": [[747, "spikeinit"]], "SpikeInit.analyze_single_spike": [[748, "spikeinit-analyze-single-spike"]], "SpikeInit.vm_steady_state": [[749, "spikeinit-vm-steady-state"]], "compute_mean_psp_amplitude": [[750, "compute-mean-psp-amplitude"]], "compute_uPSP_amplitude": [[751, "compute-upsp-amplitude"]], "compute_vm_histogram": [[752, "compute-vm-histogram"]], "compute_vm_std_windows": [[753, "compute-vm-std-windows"]], "membrane_potential_analysis": [[754, "membrane-potential-analysis"]], "simple_spike_detection": [[755, "simple-spike-detection"]], "vm_mean": [[756, "vm-mean"]], "vm_std": [[757, "vm-std"]], "compute_distance_to_soma": [[758, "compute-distance-to-soma"]], "compute_syn_distance": [[759, "compute-syn-distance"]], "compute_syn_distances": [[760, "compute-syn-distances"]], "compute_syn_distances_2Dprojected": [[761, "compute-syn-distances-2dprojected"]], "compute_synapse_distances_times": [[762, "compute-synapse-distances-times"]], "get_dist": [[763, "get-dist"]], "synanalysis": [[764, "synanalysis"]], "synapse_activation_times": [[765, "synapse-activation-times"]], "Cell": [[766, "cell"], [980, "cell"]], "Cell.add_synapse": [[767, "cell-add-synapse"], [981, "cell-add-synapse"]], "Cell.distance_between_pts": [[768, "cell-distance-between-pts"]], "Cell.distance_to_soma": [[769, "cell-distance-to-soma"], [982, "cell-distance-to-soma"]], "Cell.get_range_var_conductances": [[770, "cell-get-range-var-conductances"]], "Cell.get_section_adjacancy_map": [[771, "cell-get-section-adjacancy-map"]], "Cell.get_synapse_activation_dataframe": [[772, "cell-get-synapse-activation-dataframe"]], "Cell.init_time_recording": [[773, "cell-init-time-recording"]], "Cell.max_distance": [[774, "cell-max-distance"]], "Cell.re_init_cell": [[775, "cell-re-init-cell"]], "Cell.record_range_var": [[776, "cell-record-range-var"]], "Cell.remove_synapses": [[777, "cell-remove-synapses"], [984, "cell-remove-synapses"]], "PointCell": [[778, "pointcell"], [988, "pointcell"]], "PointCell._add_synapse_pointer": [[779, "pointcell-add-synapse-pointer"], [989, "pointcell-add-synapse-pointer"]], "PointCell._next_interval": [[780, "pointcell-next-interval"]], "PointCell.append": [[781, "pointcell-append"]], "PointCell.compute_spike_train_times": [[782, "pointcell-compute-spike-train-times"]], "PointCell.is_active": [[783, "pointcell-is-active"]], "PointCell.play": [[784, "pointcell-play"]], "PointCell.turn_off": [[785, "pointcell-turn-off"]], "PySection": [[786, "pysection"]], "PySection._compute_bounds": [[787, "pysection-compute-bounds"]], "PySection._compute_relative_pts": [[788, "pysection-compute-relative-pts"]], "PySection._compute_seg_diameters": [[789, "pysection-compute-seg-diameters"]], "PySection._compute_seg_pts": [[790, "pysection-compute-seg-pts"]], "PySection._compute_total_area": [[791, "pysection-compute-total-area"]], "PySection._get_seg_conductance": [[792, "pysection-get-seg-conductance"]], "PySection._init_range_var_recording": [[793, "pysection-init-range-var-recording"]], "PySection._init_vm_recording": [[794, "pysection-init-vm-recording"]], "PySection._re_init_range_var_recording": [[795, "pysection-re-init-range-var-recording"]], "PySection._re_init_vm_recording": [[796, "pysection-re-init-vm-recording"]], "PySection.get_range_conductances": [[797, "pysection-get-range-conductances"]], "PySection.set_3d_geometry": [[798, "pysection-set-3d-geometry"]], "PySection.set_segments": [[799, "pysection-set-segments"]], "BAC_injection": [[801, "bac-injection"], [802, "bac-injection"]], "apical_current_injection": [[803, "apical-current-injection"], [804, "apical-current-injection"]], "apical_epsp_injection": [[805, "apical-epsp-injection"], [806, "apical-epsp-injection"]], "blender_recorder": [[807, "blender-recorder"], [808, "blender-recorder"]], "get": [[809, "get"], [862, "get"]], "cell_modify_functions": [[810, "cell-modify-functions"]], "scale_apical": [[811, "scale-apical"], [812, "scale-apical"]], "scale_apical_dendrite": [[813, "scale-apical-dendrite"]], "scale_by_detailed_compartment": [[814, "scale-by-detailed-compartment"]], "soma_current_injection": [[815, "soma-current-injection"], [816, "soma-current-injection"]], "synaptic_input": [[817, "synaptic-input"], [818, "synaptic-input"]], "CellParser": [[819, "cellparser"], [985, "cellparser"]], "CellParser._add_spines": [[820, "cellparser-add-spines"]], "CellParser._add_spines_ar": [[821, "cellparser-add-spines-ar"]], "CellParser._create_ais": [[822, "cellparser-create-ais"]], "CellParser._create_ais_Hay2013": [[823, "cellparser-create-ais-hay2013"]], "CellParser._insert_ion_properties": [[824, "cellparser-insert-ion-properties"]], "CellParser.apply_cell_modify_functions": [[825, "cellparser-apply-cell-modify-functions"]], "CellParser.determine_nseg": [[826, "cellparser-determine-nseg"]], "CellParser.get_cell": [[827, "cellparser-get-cell"], [986, "cellparser-get-cell"]], "CellParser.insert_hh_membrane": [[828, "cellparser-insert-hh-membrane"]], "CellParser.insert_membrane_properties": [[829, "cellparser-insert-membrane-properties"]], "CellParser.insert_passive_membrane": [[830, "cellparser-insert-passive-membrane"]], "CellParser.insert_range_mechanisms": [[831, "cellparser-insert-range-mechanisms"]], "Possible spatial keywords of mech, the additional keys each spatial key requires, and the corresponding math equations.": [[831, "id1"]], "CellParser.set_up_biophysics": [[832, "cellparser-set-up-biophysics"]], "CellParser.spatialgraph_to_cell": [[833, "cellparser-spatialgraph-to-cell"], [987, "cellparser-spatialgraph-to-cell"]], "CellParser.update_range_mechanisms": [[834, "cellparser-update-range-mechanisms"]], "cell_parser": [[835, "cell-parser"]], "create_cell": [[836, "create-cell"]], "single_cell_parser": [[837, "single-cell-parser"]], "init_neuron_run": [[838, "init-neuron-run"]], "NetworkMapper": [[839, "networkmapper"], [1000, "networkmapper"]], "NetworkMapper._activate_presyn_cells": [[840, "networkmapper-activate-presyn-cells"]], "NetworkMapper._apply_network_modify_functions": [[841, "networkmapper-apply-network-modify-functions"]], "NetworkMapper._assign_anatomical_synapses": [[842, "networkmapper-assign-anatomical-synapses"]], "NetworkMapper._assign_synapse_weights": [[843, "networkmapper-assign-synapse-weights"]], "NetworkMapper._connect_functional_synapses": [[844, "networkmapper-connect-functional-synapses"]], "NetworkMapper._connect_spike_trains": [[845, "networkmapper-connect-spike-trains"]], "NetworkMapper._create_functional_connectivity_map": [[846, "networkmapper-create-functional-connectivity-map"]], "NetworkMapper._create_pointcell_activities": [[847, "networkmapper-create-pointcell-activities"]], "Spike Time Distributions": [[847, "id1"]], "NetworkMapper._create_presyn_cells": [[848, "networkmapper-create-presyn-cells"], [1006, "networkmapper-create-presyn-cells"]], "NetworkMapper._create_spiketrain_activities": [[849, "networkmapper-create-spiketrain-activities"]], "NetworkMapper._map_complete_anatomical_realization": [[850, "networkmapper-map-complete-anatomical-realization"]], "NetworkMapper._map_functional_realization": [[851, "networkmapper-map-functional-realization"]], "NetworkMapper.create_functional_realization": [[852, "networkmapper-create-functional-realization"]], "NetworkMapper.create_network": [[853, "networkmapper-create-network"]], "NetworkMapper.create_saved_network": [[854, "networkmapper-create-saved-network"]], "NetworkMapper.create_saved_network2": [[855, "networkmapper-create-saved-network2"]], "NetworkMapper.re_init_network": [[856, "networkmapper-re-init-network"]], "NetworkMapper.reconnect_network": [[857, "networkmapper-reconnect-network"]], "NetworkMapper.reconnect_saved_synapses": [[858, "networkmapper-reconnect-saved-synapses"]], "activate_functional_synapse": [[859, "activate-functional-synapse"]], "network": [[860, "network"]], "Reading existing network realizations": [[860, "reading-existing-network-realizations"]], "Creating new network realizations": [[860, "creating-new-network-realizations"]], "sample_times_from_rates": [[861, "sample-times-from-rates"]], "network_modify_functions": [[863, "network-modify-functions"]], "silence_synapses_by_somadist": [[864, "silence-synapses-by-somadist"], [865, "silence-synapses-by-somadist"]], "silence_synapses_by_somadist_and_spike_source": [[866, "silence-synapses-by-somadist-and-spike-source"], [867, "silence-synapses-by-somadist-and-spike-source"]], "_celltype_matches": [[868, "celltype-matches"]], "_has_evoked": [[869, "has-evoked"]], "change_evoked_INH_scaling": [[870, "change-evoked-inh-scaling"]], "change_glutamate_syn_weights": [[871, "change-glutamate-syn-weights"]], "change_ongoing_interval": [[872, "change-ongoing-interval"]], "inactivate_evoked_activity_by_celltype_and_column": [[873, "inactivate-evoked-activity-by-celltype-and-column"]], "inactivate_evoked_and_ongoing_activity_by_celltype_and_column": [[874, "inactivate-evoked-and-ongoing-activity-by-celltype-and-column"]], "network_param_modify_functions": [[875, "network-param-modify-functions"]], "multi_stimulus_trial": [[876, "multi-stimulus-trial"]], "set_stim_onset": [[877, "set-stim-onset"]], "create_functional_network": [[878, "create-functional-network"]], "create_synapse_realization": [[879, "create-synapse-realization"]], "network_realizations": [[880, "network-realizations"]], "ParameterSet": [[881, "parameterset"]], "ParameterSet._resolve_path": [[882, "parameterset-resolve-path"]], "ParameterSet._unwrap": [[883, "parameterset-unwrap"]], "ParameterSet._wrap": [[884, "parameterset-wrap"]], "ParameterSet.save": [[885, "parameterset-save"]], "ParameterSet.to_dict": [[886, "parameterset-to-dict"]], "ParameterSet.update": [[887, "parameterset-update"]], "_read_params_to_dict": [[888, "read-params-to-dict"]], "build_parameters": [[889, "build-parameters"]], "load_NMODL_parameters": [[891, "load-nmodl-parameters"]], "resolve_parameter_paths": [[892, "resolve-parameter-paths"]], "_Edge": [[893, "edge"], [1017, "edge"]], "_Edge.is_valid": [[894, "edge-is-valid"], [1018, "edge-is-valid"]], "reader": [[895, "reader"], [1019, "reader"]], "read_complete_synapse_activation_file": [[896, "read-complete-synapse-activation-file"]], "read_functional_realization_map": [[897, "read-functional-realization-map"]], "read_hoc_file": [[898, "read-hoc-file"], [1022, "read-hoc-file"]], "read_landmark_file": [[899, "read-landmark-file"]], "read_pruned_synapse_realization": [[900, "read-pruned-synapse-realization"]], "read_scalar_field": [[901, "read-scalar-field"], [1023, "read-scalar-field"]], "read_spike_times_file": [[902, "read-spike-times-file"]], "read_synapse_activation_file": [[903, "read-synapse-activation-file"]], "read_synapse_realization": [[904, "read-synapse-realization"]], "read_synapse_weight_file": [[905, "read-synapse-weight-file"]], "ScalarField": [[906, "scalarfield"], [1024, "scalarfield"]], "ScalarField.get_mesh_coordinates": [[907, "scalarfield-get-mesh-coordinates"], [1025, "scalarfield-get-mesh-coordinates"]], "ScalarField.get_scalar": [[908, "scalarfield-get-scalar"], [1026, "scalarfield-get-scalar"]], "ScalarField.get_voxel_bounds": [[909, "scalarfield-get-voxel-bounds"], [1027, "scalarfield-get-voxel-bounds"]], "ScalarField.get_voxel_center": [[910, "scalarfield-get-voxel-center"], [1028, "scalarfield-get-voxel-center"]], "ScalarField.is_in_bounds": [[911, "scalarfield-is-in-bounds"], [1029, "scalarfield-is-in-bounds"]], "ScalarField.resize_mesh": [[912, "scalarfield-resize-mesh"], [1030, "scalarfield-resize-mesh"]], "scalar_field": [[913, "scalar-field"], [1031, "scalar-field"]], "sec_distance_to_soma": [[914, "sec-distance-to-soma"]], "cell_to_serializable_object": [[915, "cell-to-serializable-object"]], "convert_dict_of_hoc_arrays_to_dict_of_np_arrays": [[916, "convert-dict-of-hoc-arrays-to-dict-of-np-arrays"]], "convert_hoc_array_to_np_array": [[917, "convert-hoc-array-to-np-array"]], "serialize_cell": [[918, "serialize-cell"]], "load_cell_from_file": [[919, "load-cell-from-file"]], "restore_cell_from_serializable_object": [[920, "restore-cell-from-serializable-object"]], "save_cell_to_file": [[921, "save-cell-to-file"]], "SimControl": [[922, "simcontrol"]], "SimControl.go": [[923, "simcontrol-go"]], "SimControl.set_IClamp": [[924, "simcontrol-set-iclamp"]], "SimControl.set_recording": [[925, "simcontrol-set-recording"]], "SimControl.show": [[926, "simcontrol-show"]], "sim_control": [[927, "sim-control"]], "spines_update_network_paramfile": [[928, "spines-update-network-paramfile"]], "spines_update_synapse_distribution_file": [[929, "spines-update-synapse-distribution-file"]], "ExSyn": [[930, "exsyn"]], "ExSyn.activate_hoc_syn": [[931, "exsyn-activate-hoc-syn"]], "Synapse": [[932, "synapse"], [995, "synapse"]], "Synapse.activate_hoc_syn": [[933, "synapse-activate-hoc-syn"]], "Synapse.disconnect_hoc_synapse": [[934, "synapse-disconnect-hoc-synapse"]], "Synapse.is_active": [[935, "synapse-is-active"]], "synapse": [[936, "synapse"]], "SynapseMapper": [[937, "synapsemapper"], [1042, "synapsemapper"]], "SynapseMapper._compute_path_length": [[938, "synapsemapper-compute-path-length"], [1043, "synapsemapper-compute-path-length"]], "SynapseMapper._create_voxel_edge_map": [[939, "synapsemapper-create-voxel-edge-map"], [1044, "synapsemapper-create-voxel-edge-map"]], "SynapseMapper._intersect_bboxes": [[940, "synapsemapper-intersect-bboxes"], [1045, "synapsemapper-intersect-bboxes"]], "SynapseMapper._pt_in_box": [[941, "synapsemapper-pt-in-box"], [1046, "synapsemapper-pt-in-box"]], "SynapseMapper.create_synapses": [[942, "synapsemapper-create-synapses"], [1047, "synapsemapper-create-synapses"]], "SynapseMapper.map_pruned_synapse_realization": [[943, "synapsemapper-map-pruned-synapse-realization"]], "SynapseMapper.map_synapse_model_distribution": [[944, "synapsemapper-map-synapse-model-distribution"]], "SynapseMapper.map_synapse_realization": [[945, "synapsemapper-map-synapse-realization"]], "synapse_mapper": [[946, "synapse-mapper"], [1048, "synapse-mapper"]], "generate_landmark_template": [[947, "generate-landmark-template"]], "writer": [[948, "writer"], [1049, "writer"]], "value_to_color": [[949, "value-to-color"], [1225, "value-to-color"]], "write_PSTH": [[950, "write-psth"]], "write_all_traces": [[951, "write-all-traces"]], "write_cell_simulation": [[952, "write-cell-simulation"]], "write_cell_synapse_locations": [[953, "write-cell-synapse-locations"], [1051, "write-cell-synapse-locations"]], "write_functional_map": [[954, "write-functional-map"]], "write_functional_realization_map": [[955, "write-functional-realization-map"]], "write_landmark_file": [[956, "write-landmark-file"], [1052, "write-landmark-file"]], "write_landmarks_colorcoded_to_folder": [[957, "write-landmarks-colorcoded-to-folder"]], "write_presynaptic_spike_times": [[958, "write-presynaptic-spike-times"]], "write_pruned_synapse_locations": [[959, "write-pruned-synapse-locations"]], "write_sim_results": [[960, "write-sim-results"]], "write_spike_times_file": [[961, "write-spike-times-file"]], "write_synapse_activation_file": [[962, "write-synapse-activation-file"]], "write_synapse_weight_file": [[963, "write-synapse-weight-file"]], "create_average_celltype_PSTH_from_clusters": [[964, "create-average-celltype-psth-from-clusters"]], "create_evoked_PSTH": [[965, "create-evoked-psth"]], "evoked_PSTH_from_spike_times": [[966, "evoked-psth-from-spike-times"]], "load_cluster_trials": [[967, "load-cluster-trials"]], "load_spike_times": [[968, "load-spike-times"]], "scan_directory": [[969, "scan-directory"]], "create_network_parameter": [[970, "create-network-parameter"], [977, "create-network-parameter"]], "evoked_network_param_from_template": [[971, "evoked-network-param-from-template"]], "load_cell_number_file": [[972, "load-cell-number-file"], [979, "load-cell-number-file"]], "whisker_evoked_PSTH": [[973, "whisker-evoked-psth"]], "singlecell_input_mapper": [[974, "singlecell-input-mapper"], [999, "singlecell-input-mapper"]], "Connectivity": [[974, "connectivity"]], "Activity": [[974, "activity"]], "map_singlecell_inputs": [[975, "map-singlecell-inputs"], [976, "map-singlecell-inputs"]], "ongoing_network_param_from_template": [[978, "ongoing-network-param-from-template"]], "Cell.get_bounding_box": [[983, "cell-get-bounding-box"]], "PySection2": [[990, "pysection2"]], "PySection2._compute_bounds": [[991, "pysection2-compute-bounds"]], "PySection2._compute_length": [[992, "pysection2-compute-length"]], "PySection2._compute_relative_pts": [[993, "pysection2-compute-relative-pts"]], "PySection2.set_3d_geometry": [[994, "pysection2-set-3d-geometry"]], "con_file_to_NumberOfConnectedCells_sheet": [[997, "con-file-to-numberofconnectedcells-sheet"]], "generate_nr_of_cells_spreadsheet": [[998, "generate-nr-of-cells-spreadsheet"]], "NetworkMapper._compute_parameter_distribution": [[1001, "networkmapper-compute-parameter-distribution"]], "NetworkMapper._compute_sample_distance": [[1002, "networkmapper-compute-sample-distance"]], "NetworkMapper._compute_summary_tables": [[1003, "networkmapper-compute-summary-tables"]], "NetworkMapper._create_anatomical_connectivity_map": [[1004, "networkmapper-create-anatomical-connectivity-map"]], "NetworkMapper._create_anatomical_realization": [[1005, "networkmapper-create-anatomical-realization"]], "NetworkMapper._generate_output_files": [[1007, "networkmapper-generate-output-files"]], "NetworkMapper._get_representative_sample": [[1008, "networkmapper-get-representative-sample"]], "NetworkMapper._precompute_anatomical_area_celltype_synapse_densities": [[1009, "networkmapper-precompute-anatomical-area-celltype-synapse-densities"]], "NetworkMapper._test_population_convergence": [[1010, "networkmapper-test-population-convergence"]], "NetworkMapper._write_landmark_files": [[1011, "networkmapper-write-landmark-files"]], "NetworkMapper._write_population_output_files": [[1012, "networkmapper-write-population-output-files"]], "NetworkMapper.create_network_embedding": [[1013, "networkmapper-create-network-embedding"]], "NetworkMapper.create_network_embedding_for_simulations": [[1014, "networkmapper-create-network-embedding-for-simulations"]], "NetworkMapper.create_network_embedding_from_synapse_densities": [[1015, "networkmapper-create-network-embedding-from-synapse-densities"]], "network_embedding": [[1016, "network-embedding"]], "read_celltype_numbers_spreadsheet": [[1020, "read-celltype-numbers-spreadsheet"]], "read_connections_spreadsheet": [[1021, "read-connections-spreadsheet"]], "SynapseDensity": [[1032, "synapsedensity"]], "SynapseDensity._clip_u": [[1033, "synapsedensity-clip-u"]], "SynapseDensity._compute_cell_density_grid": [[1034, "synapsedensity-compute-cell-density-grid"]], "SynapseDensity._compute_length_surface_area_density": [[1035, "synapsedensity-compute-length-surface-area-density"]], "SynapseDensity._get_truncated_cone_area": [[1036, "synapsedensity-get-truncated-cone-area"]], "SynapseDensity._interpolate_radius": [[1037, "synapsedensity-interpolate-radius"]], "SynapseDensity._intersect_bboxes": [[1038, "synapsedensity-intersect-bboxes"]], "SynapseDensity._is_zero": [[1039, "synapsedensity-is-zero"]], "SynapseDensity.compute_cell_PST": [[1040, "synapsedensity-compute-cell-pst"]], "Todo": [[1040, "id1"]], "SynapseDensity.compute_synapse_density": [[1041, "synapsedensity-compute-synapse-density"]], "write_anatomical_realization_map": [[1050, "write-anatomical-realization-map"]], "write_population_and_sample_connectivity_summary": [[1053, "write-population-and-sample-connectivity-summary"]], "write_population_connectivity_summary": [[1054, "write-population-connectivity-summary"]], "write_sample_connectivity_summary": [[1055, "write-sample-connectivity-summary"]], "write_scalar_field": [[1056, "write-scalar-field"]], "ReaderLabView": [[1057, "readerlabview"]], "ReaderLabView.get_serialize_dict": [[1058, "readerlabview-get-serialize-dict"]], "ReaderLabView.get_stim_times": [[1059, "readerlabview-get-stim-times"]], "ReaderLabView.get_voltage_traces": [[1060, "readerlabview-get-voltage-traces"]], "ReaderSmr": [[1061, "readersmr"]], "ReaderSmr.get_serialize_dict": [[1062, "readersmr-get-serialize-dict"]], "ReaderSmr.get_stim_times": [[1063, "readersmr-get-stim-times"]], "ReaderSmr.get_voltage_traces": [[1064, "readersmr-get-voltage-traces"]], "STAPlugin_ISIn": [[1065, "staplugin-isin"]], "STAPlugin_ISIn.event_analysis_ISIn": [[1066, "staplugin-isin-event-analysis-isin"]], "STAPlugin_ISIn.setup": [[1067, "staplugin-isin-setup"]], "STAPlugin_TEMPLATE": [[1068, "staplugin-template"]], "STAPlugin_TEMPLATE.get_result": [[1069, "staplugin-template-get-result"]], "STAPlugin_TEMPLATE.setup": [[1070, "staplugin-template-setup"]], "STAPlugin_annotate_bursts_in_st": [[1071, "staplugin-annotate-bursts-in-st"]], "STAPlugin_annotate_bursts_in_st.setup": [[1072, "staplugin-annotate-bursts-in-st-setup"]], "STAPlugin_bursts": [[1073, "staplugin-bursts"]], "STAPlugin_bursts.event_analysis_bursts": [[1074, "staplugin-bursts-event-analysis-bursts"]], "STAPlugin_bursts.setup": [[1075, "staplugin-bursts-setup"]], "STAPlugin_extract_column_in_filtered_dataframe": [[1076, "staplugin-extract-column-in-filtered-dataframe"]], "STAPlugin_extract_column_in_filtered_dataframe.setup": [[1077, "staplugin-extract-column-in-filtered-dataframe-setup"]], "STAPlugin_ongoing": [[1078, "staplugin-ongoing"]], "STAPlugin_ongoing.setup": [[1079, "staplugin-ongoing-setup"]], "STAPlugin_quantification_in_period": [[1080, "staplugin-quantification-in-period"]], "STAPlugin_quantification_in_period.setup": [[1081, "staplugin-quantification-in-period-setup"]], "STAPlugin_response_latency_in_period": [[1082, "staplugin-response-latency-in-period"]], "STAPlugin_response_latency_in_period.setup": [[1083, "staplugin-response-latency-in-period-setup"]], "STAPlugin_response_probability_in_period": [[1084, "staplugin-response-probability-in-period"]], "STAPlugin_response_probability_in_period.setup": [[1085, "staplugin-response-probability-in-period-setup"]], "STAPlugin_spike_times_dataframe": [[1086, "staplugin-spike-times-dataframe"]], "STAPlugin_spike_times_dataframe.setup": [[1087, "staplugin-spike-times-dataframe-setup"]], "SpikeDetectionCreastTrough": [[1088, "spikedetectioncreasttrough"]], "SpikeDetectionCreastTrough._extract_spike_times": [[1089, "spikedetectioncreasttrough-extract-spike-times"]], "SpikeDetectionCreastTrough._set_creast_trough": [[1090, "spikedetectioncreasttrough-set-creast-trough"]], "SpikeDetectionCreastTrough.get_creast_and_trough_ampltidues_by_bins": [[1091, "spikedetectioncreasttrough-get-creast-and-trough-ampltidues-by-bins"]], "SpikeDetectionCreastTrough.get_default_events": [[1092, "spikedetectioncreasttrough-get-default-events"]], "SpikeDetectionCreastTrough.get_serialize_dict": [[1093, "spikedetectioncreasttrough-get-serialize-dict"]], "SpikeDetectionCreastTrough.load": [[1094, "spikedetectioncreasttrough-load"]], "SpikeDetectionCreastTrough.plot_creast_trough_histogram": [[1095, "spikedetectioncreasttrough-plot-creast-trough-histogram"]], "SpikeDetectionCreastTrough.run_analysis": [[1096, "spikedetectioncreasttrough-run-analysis"]], "SpikeDetectionCreastTrough.save": [[1097, "spikedetectioncreasttrough-save"]], "SpikeDetectionCreastTrough.show_events": [[1098, "spikedetectioncreasttrough-show-events"]], "SpikeTimesAnalysis": [[1099, "spiketimesanalysis"]], "SpikeTimesAnalysis.apply_extractor": [[1100, "spiketimesanalysis-apply-extractor"]], "SpikeTimesAnalysis.get": [[1101, "spiketimesanalysis-get"]], "SpikeTimesAnalysis.get_by_trial": [[1102, "spiketimesanalysis-get-by-trial"]], "_sta_input_checker": [[1103, "sta-input-checker"]], "filter_short_ISIs": [[1104, "filter-short-isis"]], "filter_spike_times": [[1105, "filter-spike-times"]], "get_peaks_above": [[1106, "get-peaks-above"]], "get_period_label_by_time": [[1107, "get-period-label-by-time"]], "get_spike_times_from_row": [[1108, "get-spike-times-from-row"]], "get_st_from_spike_times_and_stim_times": [[1109, "get-st-from-spike-times-and-stim-times"]], "get_upcross": [[1110, "get-upcross"]], "highpass_filter": [[1111, "highpass-filter"]], "core": [[1112, "core"]], "load_reader": [[1113, "load-reader"]], "read_labview_junk1_dat_files": [[1114, "read-labview-junk1-dat-files"]], "read_smr_file": [[1115, "read-smr-file"]], "stimulus_interval_filter": [[1116, "stimulus-interval-filter"]], "strip_st": [[1117, "strip-st"]], "spike_analysis": [[1118, "spike-analysis"]], "dask_to_pandas": [[1119, "dask-to-pandas"]], "_decorators": [[1120, "decorators"]], "pr": [[1121, "pr"]], "subsequent_calls_per_line": [[1122, "subsequent-calls-per-line"]], "PixelObject": [[1123, "pixelobject"]], "fig2np": [[1124, "fig2np"]], "_figure_array_converter": [[1125, "figure-array-converter"]], "show_pixel_object": [[1126, "show-pixel-object"]], "CMVDataParser": [[1127, "cmvdataparser"]], "CMVDataParser._align_trunk_with_z_axis": [[1128, "cmvdataparser-align-trunk-with-z-axis"]], "CMVDataParser._calc_ion_dynamics_timeseries": [[1129, "cmvdataparser-calc-ion-dynamics-timeseries"]], "CMVDataParser._calc_morphology": [[1130, "cmvdataparser-calc-morphology"]], "CMVDataParser._calc_scalar_data_from_keyword": [[1131, "cmvdataparser-calc-scalar-data-from-keyword"]], "CMVDataParser._calc_synapses_timeseries": [[1132, "cmvdataparser-calc-synapses-timeseries"]], "CMVDataParser._calc_voltage_timeseries": [[1133, "cmvdataparser-calc-voltage-timeseries"]], "CMVDataParser._data_per_section_to_data_per_point": [[1134, "cmvdataparser-data-per-section-to-data-per-point"]], "CMVDataParser._get_color_per_section": [[1135, "cmvdataparser-get-color-per-section"]], "CMVDataParser._get_ion_dynamics_at_timepoint": [[1136, "cmvdataparser-get-ion-dynamics-at-timepoint"]], "CMVDataParser._get_synapses_at_timepoint": [[1137, "cmvdataparser-get-synapses-at-timepoint"]], "CMVDataParser._get_timeseries_minmax": [[1138, "cmvdataparser-get-timeseries-minmax"]], "CMVDataParser._get_voltages_at_timepoint": [[1139, "cmvdataparser-get-voltages-at-timepoint"]], "CMVDataParser._has_simulation_data": [[1140, "cmvdataparser-has-simulation-data"]], "CMVDataParser._init_simulation_data": [[1141, "cmvdataparser-init-simulation-data"]], "CMVDataParser._keyword_is_scalar_data": [[1142, "cmvdataparser-keyword-is-scalar-data"]], "CMVDataParser._update_times_to_show": [[1143, "cmvdataparser-update-times-to-show"]], "CMVDataParser.scale_diameter": [[1144, "cmvdataparser-scale-diameter"]], "CMVDataParser.set_cmap": [[1145, "cmvdataparser-set-cmap"]], "CellMorphologyInteractiveVisualizer": [[1146, "cellmorphologyinteractivevisualizer"]], "CellMorphologyInteractiveVisualizer._get_interactive_cell": [[1147, "cellmorphologyinteractivevisualizer-get-interactive-cell"]], "CellMorphologyInteractiveVisualizer._get_interactive_dash_app": [[1148, "cellmorphologyinteractivevisualizer-get-interactive-dash-app"]], "CellMorphologyInteractiveVisualizer.interactive_app": [[1149, "cellmorphologyinteractivevisualizer-interactive-app"]], "CellMorphologyInteractiveVisualizer.interactive_plot": [[1150, "cellmorphologyinteractivevisualizer-interactive-plot"]], "CellMorphologyVisualizer": [[1151, "cellmorphologyvisualizer"]], "CellMorphologyVisualizer._write_png_timeseries": [[1152, "cellmorphologyvisualizer-write-png-timeseries"]], "CellMorphologyVisualizer.animation": [[1153, "cellmorphologyvisualizer-animation"]], "CellMorphologyVisualizer.plot": [[1154, "cellmorphologyvisualizer-plot"]], "CellMorphologyVisualizer.to_vtk": [[1155, "cellmorphologyvisualizer-to-vtk"]], "CellMorphologyVisualizer.write_gif": [[1156, "cellmorphologyvisualizer-write-gif"]], "CellMorphologyVisualizer.write_video": [[1157, "cellmorphologyvisualizer-write-video"]], "CellMorphologyVisualizer.write_vtk_frames": [[1158, "cellmorphologyvisualizer-write-vtk-frames"]], "get_3d_plot_morphology": [[1159, "get-3d-plot-morphology"]], "cell_morphology_visualizer": [[1160, "cell-morphology-visualizer"]], "_in_parallel_context": [[1161, "in-parallel-context"]], "_load_base64": [[1162, "load-base64"], [1220, "load-base64"]], "cell_to_animation": [[1163, "cell-to-animation"]], "cell_to_ipython_animation": [[1164, "cell-to-ipython-animation"], [1168, "cell-to-ipython-animation"]], "display_animation": [[1165, "display-animation"]], "find_closest_index": [[1166, "find-closest-index"]], "get_lines": [[1167, "get-lines"]], "init_fig": [[1169, "init-fig"]], "parallelMovieMaker": [[1170, "parallelmoviemaker"]], "plot_lines_fun": [[1171, "plot-lines-fun"]], "CurrentAnalysis": [[1172, "currentanalysis"]], "CurrentAnalysis._compute_current_arrays": [[1173, "currentanalysis-compute-current-arrays"]], "CurrentAnalysis._get_current_by_rv": [[1174, "currentanalysis-get-current-by-rv"]], "CurrentAnalysis.plot_areas": [[1175, "currentanalysis-plot-areas"]], "CurrentAnalysis.plot_lines": [[1176, "currentanalysis-plot-lines"]], "current_visualizer": [[1177, "current-visualizer"]], "Dendrogram": [[1178, "dendrogram"]], "Dendrogram._plot_dendrogram": [[1179, "dendrogram-plot-dendrogram"]], "Dendrogram.get_parent_by_name": [[1180, "dendrogram-get-parent-by-name"]], "Dendrogram.plot": [[1181, "dendrogram-plot"]], "DendrogramStatistics": [[1182, "dendrogramstatistics"]], "DendrogramStatistics.plot": [[1183, "dendrogramstatistics-plot"]], "_DendrogramDendriteStatistics": [[1184, "dendrogramdendritestatistics"]], "_DendrogramDendriteStatistics._compute_dendrite_hist": [[1185, "dendrogramdendritestatistics-compute-dendrite-hist"]], "_DendrogramDendriteStatistics._get_amount_of_dendrite_in_bin": [[1186, "dendrogramdendritestatistics-get-amount-of-dendrite-in-bin"]], "_DendrogramDendriteStatistics._plot_dendrite_hist": [[1187, "dendrogramdendritestatistics-plot-dendrite-hist"]], "_DendrogramDendriteStatistics.plot": [[1188, "dendrogramdendritestatistics-plot"]], "_DendrogramSection": [[1189, "dendrogramsection"]], "_DendrogramSection._add_synapse": [[1190, "dendrogramsection-add-synapse"]], "_DendrogramSynapseStatistics": [[1191, "dendrogramsynapsestatistics"]], "_DendrogramSynapseStatistics._add_synapses": [[1192, "dendrogramsynapsestatistics-add-synapses"]], "_DendrogramSynapseStatistics._compute_synapse_hist": [[1193, "dendrogramsynapsestatistics-compute-synapse-hist"]], "_DendrogramSynapseStatistics._compute_synapse_statistics": [[1194, "dendrogramsynapsestatistics-compute-synapse-statistics"]], "_DendrogramSynapseStatistics._plot_synapse_density_hist": [[1195, "dendrogramsynapsestatistics-plot-synapse-density-hist"]], "_DendrogramSynapseStatistics._plot_synapse_hist": [[1196, "dendrogramsynapsestatistics-plot-synapse-hist"]], "_DendrogramSynapseStatistics._plot_synapses_dendrogram_overlay": [[1197, "dendrogramsynapsestatistics-plot-synapses-dendrogram-overlay"]], "_DendrogramSynapseStatistics.get_number_of_synapses_in_bin": [[1198, "dendrogramsynapsestatistics-get-number-of-synapses-in-bin"]], "_DendrogramSynapseStatistics.plot": [[1199, "dendrogramsynapsestatistics-plot"]], "_get_db_by_sec": [[1200, "get-db-by-sec"]], "_get_max_somadistance": [[1201, "get-max-somadistance"]], "dendrogram": [[1202, "dendrogram"]], "histogram": [[1203, "histogram"], [1205, "histogram"]], "histogram2": [[1204, "histogram2"]], "visualize": [[1206, "visualize"]], "manylines": [[1207, "manylines"], [1208, "manylines"]], "manylines_helper": [[1209, "manylines-helper"]], "plot_hoc": [[1210, "plot-hoc"]], "rasterplot": [[1211, "rasterplot"], [1212, "rasterplot"]], "rasterplot2": [[1213, "rasterplot2"]], "rasterplot2_pdf_grouped": [[1214, "rasterplot2-pdf-grouped"]], "svg2emf": [[1215, "svg2emf"]], "Arrow3D": [[1216, "arrow3d"]], "Arrow3D.do_3d_projection": [[1217, "arrow3d-do-3d-projection"]], "Arrow3D.draw": [[1218, "arrow3d-draw"]], "_arrow3D": [[1219, "arrow3d"]], "display_animation_from_images": [[1221, "display-animation-from-images"]], "draw_arrow": [[1222, "draw-arrow"]], "find_files_and_order_them": [[1223, "find-files-and-order-them"]], "Example of directory contents": [[1223, "id1"]], "write_gif_from_images": [[1226, "write-gif-from-images"]], "write_video_from_images": [[1227, "write-video-from-images"]], "voltage_trace_visualizer": [[1228, "voltage-trace-visualizer"]], "plot_vt": [[1229, "plot-vt"]], "visualize_vt": [[1230, "visualize-vt"]], "convert_amira_lattice_to_vtk": [[1231, "convert-amira-lattice-to-vtk"]], "convert_amira_surf_to_vtk": [[1232, "convert-amira-surf-to-vtk"]], "vtk": [[1233, "vtk"]], "save_cells_landmark_files_vtk": [[1234, "save-cells-landmark-files-vtk"]], "write_vtk_pointcloud_file": [[1235, "write-vtk-pointcloud-file"]], "write_vtk_skeleton_file": [[1236, "write-vtk-skeleton-file"]], "Bibliography": [[1237, "bibliography"]], "The In Silico Framework (ISF)": [[1238, "the-in-silico-framework-isf"]], "API reference": [[1239, "api-reference"]], "File & data formats": [[1241, "file-data-formats"]], ".syn": [[1241, "syn"]], ".con": [[1241, "con"]], ".param": [[1241, "param"]], "Cell parameters": [[1241, "cell-parameters"]], "Network parameters": [[1241, "network-parameters"]], "Network Parameters": [[1241, "id6"]], "Synapse parameters": [[1241, "id7"]], "Receptor parameters": [[1241, "id8"]], "Activity data": [[1241, "activity-data"]], "Dataframes": [[1241, "dataframes"]], "Synapse activation": [[1241, "synapse-activation"]], "Raw simrun output": [[1241, "raw-simrun-output"], [1241, "id1"]], "Synapse activations (single trial)": [[1241, "id9"]], "Parsed dataframe": [[1241, "parsed-dataframe"], [1241, "id2"]], "Synapse activations (all trials)": [[1241, "id10"]], "Presynaptic spike times": [[1241, "presynaptic-spike-times"]], "Presynaptic spike times (single trial)": [[1241, "id11"]], "Presynaptic spike times (all trials)": [[1241, "id12"]], "Voltage traces": [[1241, "voltage-traces"]], "Voltage trace .csv": [[1241, "voltage-trace-csv"]], "vm_all_traces.csv": [[1241, "id13"]], "Voltage trace .npz": [[1241, "voltage-trace-npz"]], "Voltage trace dataframe": [[1241, "voltage-trace-dataframe"]], "voltage trace dataframe": [[1241, "id14"]], ".hoc": [[1241, "hoc"]], ".mod": [[1241, "mod"]], ".am": [[1241, "am"]], "Installation": [[1242, "installation"]], "Usage": [[1242, "usage"]], "Test ISF": [[1242, "test-isf"]], "Configuration": [[1242, "configuration"]], "Tutorials": [[1245, "tutorials"]], "Introduction": [[1245, null]], "1. Neuron models": [[1245, null]], "2. Network models": [[1245, null]], "3. Multiscale models": [[1245, null]], "4. Analytically tractable reduced models": [[1245, null]], "Simulating biophysically detailed multi-compartmental models using ISF": [[1246, "Simulating-biophysically-detailed-multi-compartmental-models-using-ISF"]], "Equipping a morphology with biophysical parameters": [[1246, "Equipping-a-morphology-with-biophysical-parameters"]], "The ISF Simulator": [[1246, "The-ISF-Simulator"]], "Biophysical parameters": [[1246, "Biophysical-parameters"]], "The Simulator": [[1246, "The-Simulator"]], "The bAP stimulus": [[1246, "The-bAP-stimulus"]], "The BAC stimulus protocol": [[1246, "The-BAC-stimulus-protocol"]], "Running all stimulus protocols": [[1246, "Running-all-stimulus-protocols"]], "Recap": [[1246, "Recap"], [1247, "Recap"], [1248, "Recap"], [1249, "Recap"], [1250, "Recap"]], "Evaluating biophysically detailed multi-compartmental models": [[1247, "Evaluating-biophysically-detailed-multi-compartmental-models"]], "The ISF Evaluator": [[1247, "The-ISF-Evaluator"]], "Visualization": [[1247, "Visualization"], [1249, "Visualization"], [1251, "Visualization"]], "Animating the membrane voltage": [[1247, "Animating-the-membrane-voltage"]], "Animating ion currents": [[1247, "Animating-ion-currents"]], "Generating biophysically detailed multi-compartmental models": [[1248, "Generating-biophysically-detailed-multi-compartmental-models"]], "Optimization Algorithm": [[1248, "Optimization-Algorithm"]], "Empirical limits for biophysical parameters": [[1248, "Empirical-limits-for-biophysical-parameters"]], "Database setup": [[1248, "Database-setup"]], "Run the optimization algorithm": [[1248, "Run-the-optimization-algorithm"]], "Inspecting the optimizer results": [[1248, "Inspecting-the-optimizer-results"]], "Exploration from seedpoint": [[1248, "Exploration-from-seedpoint"]], "Setup the random walk exploration": [[1248, "Setup-the-random-walk-exploration"]], "Run the exploration algorithm": [[1248, "Run-the-exploration-algorithm"]], "Inspecting the exploration results": [[1248, "Inspecting-the-exploration-results"]], "Embedding a neuron model in a network model": [[1249, "Embedding-a-neuron-model-in-a-network-model"]], "Registering the cell morphology in the desired reference frame": [[1249, "Registering-the-cell-morphology-in-the-desired-reference-frame"]], "Calculating synapse positions on the neuron morphology": [[1249, "Calculating-synapse-positions-on-the-neuron-morphology"]], "Computing it yourself": [[1249, "Computing-it-yourself"]], "Copying a pre-computed result": [[1249, "Copying-a-pre-computed-result"]], "Parallelizing the generation of anatomical models": [[1249, "Parallelizing-the-generation-of-anatomical-models"]], "Inspecting the network model": [[1249, "Inspecting-the-network-model"]], "Plot per cell type": [[1249, "Plot-per-cell-type"]], "Plot per column": [[1249, "Plot-per-column"]], "Inspecting the output format": [[1249, "Inspecting-the-output-format"]], "Compatibility with other dense connectome models.": [[1249, "Compatibility-with-other-dense-connectome-models."]], "Network activity": [[1250, "Network-activity"]], "Characterizing ongoing activity": [[1250, "Characterizing-ongoing-activity"]], "Characterizing evoked activity": [[1250, "Characterizing-evoked-activity"]], "Combining ongoing and evoked activity into a network parameter file": [[1250, "Combining-ongoing-and-evoked-activity-into-a-network-parameter-file"]], "Inspecting the network activity": [[1250, "Inspecting-the-network-activity"]], "Multi-scale modeling": [[1251, "Multi-scale-modeling"]], "Simulating synaptic activity": [[1251, "Simulating-synaptic-activity"]], "Analyzing the results": [[1251, "Analyzing-the-results"]], "Analytics": [[1251, "Analytics"]], "2D animation of membrane voltage": [[1251, "2D-animation-of-membrane-voltage"]], "3D animation of the membrane voltage and synapse activations": [[1251, "3D-animation-of-the-membrane-voltage-and-synapse-activations"]], "3D visualization of the membrane voltage and presynaptic cell activations": [[1251, "3D-visualization-of-the-membrane-voltage-and-presynaptic-cell-activations"]], "Generalized Linear Models (GLM)": [[1252, "Generalized-Linear-Models-(GLM)"]], "Load multi-scale model simulation data": [[1252, "Load-multi-scale-model-simulation-data"]], "Load pre-binned synapse activations": [[1252, "Load-pre-binned-synapse-activations"]], "Visualise MCM responses": [[1252, "Visualise-MCM-responses"]], "Reduced model inference": [[1252, "Reduced-model-inference"]], "RaisedCosine basis functions": [[1252, "RaisedCosine-basis-functions"]], "Spatiotemporal filter inference": [[1252, "Spatiotemporal-filter-inference"]], "Visualize spatiotemporal filters": [[1252, "Visualize-spatiotemporal-filters"]], "Calculate WNI values with spatiotemporal filters": [[1252, "Calculate-WNI-values-with-spatiotemporal-filters"]], "Nonlinearity": [[1252, "Nonlinearity"]], "ISI-dependent penalty": [[1252, "ISI-dependent-penalty"]], "Reduced model simulations": [[1252, "Reduced-model-simulations"]], "Welcome to the In Silico Framework (ISF)": [[1253, "Welcome-to-the-In-Silico-Framework-(ISF)"]], "Packages in ISF": [[1253, "Packages-in-ISF"]], "Packages in this repository you will most likely directly interact with": [[1253, "Packages-in-this-repository-you-will-most-likely-directly-interact-with"]], "How should I interact with these packages?": [[1253, "How-should-I-interact-with-these-packages?"]], "Configuring ISF": [[1253, "Configuring-ISF"]], "Dask": [[1253, "Dask"]], "Example simulation": [[1253, "Example-simulation"]], "Running a simulation from parameterfiles": [[1253, "Running-a-simulation-from-parameterfiles"]], "Parsing simulation data": [[1253, "Parsing-simulation-data"]], "Visualizing the simulation": [[1253, "Visualizing-the-simulation"]], "Barrel Cortex": [[1254, "Barrel-Cortex"]], "The L5PT": [[1254, "The-L5PT"]], "Scaling the apical dendrite": [[1254, "Scaling-the-apical-dendrite"]], "Morphology reconstruction": [[1255, "Morphology-reconstruction"]], "Image data": [[1255, "Image-data"]], "Imaged slices to morphological reconstruction": [[1255, "Imaged-slices-to-morphological-reconstruction"]], "1. Image slice to skeleton": [[1255, "1.-Image-slice-to-skeleton"]], "2. Skeleton to morphology reconstruction": [[1255, "2.-Skeleton-to-morphology-reconstruction"]], "Cell and NEURON API": [[1256, "Cell-and-NEURON-API"]], "Current injection at the soma": [[1256, "Current-injection-at-the-soma"]], "Step currents at the soma": [[1256, "Step-currents-at-the-soma"]], "Pair injection at the soma and apical dendrite": [[1256, "Pair-injection-at-the-soma-and-apical-dendrite"]]}, "indexentries": {"interface._is_running_on_dask_worker()": [[0, "Interface._is_running_on_dask_worker"]], "built-in function": [[0, "Interface._is_running_on_dask_worker"], [1, "Interface.get_client"], [3, "Interface.print_module_versions"], [4, "biophysics_fitting.L5tt_parameter_setup.check_unset_range_mechanisms"], [5, "biophysics_fitting.L5tt_parameter_setup.get_L5tt_template"], [6, "biophysics_fitting.L5tt_parameter_setup.get_L5tt_template_v2"], [7, "biophysics_fitting.L5tt_parameter_setup.hay_param_to_scp_neuron_param"], [8, "biophysics_fitting.L5tt_parameter_setup.hay_params_to_scp_neuron_params"], [10, "biophysics_fitting.L5tt_parameter_setup.set_ephys"], [11, "biophysics_fitting.L5tt_parameter_setup.set_hot_zone"], [12, "biophysics_fitting.L5tt_parameter_setup.set_many_param"], [13, "biophysics_fitting.L5tt_parameter_setup.set_morphology"], [14, "biophysics_fitting.L5tt_parameter_setup.set_param"], [20, "biophysics_fitting.connected_to_dend_beyond"], [21, "biophysics_fitting.ephys.AHP_depth_abs"], [22, "biophysics_fitting.ephys.AHP_depth_abs_check_2AP"], [23, "biophysics_fitting.ephys.AP_height"], [24, "biophysics_fitting.ephys.AP_height_check_1AP"], [25, "biophysics_fitting.ephys.AP_width"], [26, "biophysics_fitting.ephys.BAC_ISI"], [27, "biophysics_fitting.ephys.BAC_ISI_check_2_or_3_APs"], [28, "biophysics_fitting.ephys.BAC_ISI_check_repolarization"], [29, "biophysics_fitting.ephys.BAC_caSpike_height"], [30, "biophysics_fitting.ephys.BAC_caSpike_height_check_1_Ca_AP"], [31, "biophysics_fitting.ephys.BAC_caSpike_height_check_Ca_spikes_after_Na_spike"], [32, "biophysics_fitting.ephys.BAC_caSpike_height_check_gt2_Na_spikes"], [33, "biophysics_fitting.ephys.BAC_caSpike_width"], [34, "biophysics_fitting.ephys.BPAPatt"], [35, "biophysics_fitting.ephys.BPAPatt_check_1_AP"], [36, "biophysics_fitting.ephys.BPAPatt_check_relative_height"], [37, "biophysics_fitting.ephys.STEP_adaptation_index"], [38, "biophysics_fitting.ephys.STEP_check_2_ISIs"], [39, "biophysics_fitting.ephys.STEP_coef_var"], [40, "biophysics_fitting.ephys.STEP_fast_ahp_depth"], [41, "biophysics_fitting.ephys.STEP_initial_ISI"], [42, "biophysics_fitting.ephys.STEP_mean_frequency"], [43, "biophysics_fitting.ephys.STEP_slow_ahp_depth"], [44, "biophysics_fitting.ephys.STEP_slow_ahp_time"], [45, "biophysics_fitting.ephys.STEP_time_to_first_spike"], [46, "biophysics_fitting.ephys.find_crossing"], [47, "biophysics_fitting.ephys.find_crossing_old"], [49, "biophysics_fitting.ephys.spike_count"], [50, "biophysics_fitting.ephys.trace_check"], [51, "biophysics_fitting.ephys.trace_check_err"], [52, "biophysics_fitting.ephys.trace_check_max_prestim_dendrite_depo"], [53, "biophysics_fitting.ephys.voltage_base"], [54, "biophysics_fitting.ephys.voltage_base2"], [72, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.augment_ddf_with_PCA_space"], [73, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.get_depolarization_index"], [74, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.get_hyperpolarization_index"], [75, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.get_index"], [76, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.get_inside_fraction"], [77, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.get_param_range_evolution_from_ddf"], [79, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.normalize"], [80, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.pandas_binby"], [81, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.read_all"], [82, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.read_parameters"], [83, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.read_pickle"], [84, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.robust_read_pickle"], [85, "biophysics_fitting.exploration_from_seedpoint.evaluation_function_incremental_helper"], [87, "biophysics_fitting.exploration_from_seedpoint.utils.convert_all_check_columns_bool_to_float"], [88, "biophysics_fitting.exploration_from_seedpoint.utils.evaluation_function_incremental_helper"], [89, "biophysics_fitting.exploration_from_seedpoint.utils.get_vector_norm"], [91, "biophysics_fitting.get_branching_depth"], [92, "biophysics_fitting.get_branching_depth_series"], [93, "biophysics_fitting.get_first_order_bifurcation_sections"], [94, "biophysics_fitting.get_inner_sec_dist_list"], [95, "biophysics_fitting.get_main_bifurcation_section"], [96, "biophysics_fitting.hay.default_setup.get_Combiner"], [97, "biophysics_fitting.hay.default_setup.get_Evaluator"], [98, "biophysics_fitting.hay.default_setup.get_Simulator"], [99, "biophysics_fitting.hay.default_setup.get_fixed_params_example"], [101, "biophysics_fitting.hay.default_setup.interpolate_vt"], [102, "biophysics_fitting.hay.default_setup.map_truefalse_to_str"], [103, "biophysics_fitting.hay.default_setup.record_BAC"], [104, "biophysics_fitting.hay.default_setup.record_Step"], [105, "biophysics_fitting.hay.default_setup.record_bAP"], [141, "biophysics_fitting.hay.evaluation.get_evaluate_BAC"], [142, "biophysics_fitting.hay.evaluation.get_evaluate_StepOne"], [143, "biophysics_fitting.hay.evaluation.get_evaluate_StepThree"], [144, "biophysics_fitting.hay.evaluation.get_evaluate_StepTwo"], [145, "biophysics_fitting.hay.evaluation.get_evaluate_bAP"], [146, "biophysics_fitting.hay.evaluation.hay_evaluate_BAC"], [147, "biophysics_fitting.hay.evaluation.hay_evaluate_StepOne"], [148, "biophysics_fitting.hay.evaluation.hay_evaluate_StepThree"], [149, "biophysics_fitting.hay.evaluation.hay_evaluate_StepTwo"], [150, "biophysics_fitting.hay.evaluation.hay_evaluate_bAP"], [152, "biophysics_fitting.hay.evaluation.nan_if_error"], [153, "biophysics_fitting.hay.evaluation.normalize"], [155, "biophysics_fitting.hay.specification.get_feasible_model_objectives"], [156, "biophysics_fitting.hay.specification.get_feasible_model_params"], [157, "biophysics_fitting.hay.specification.get_hay_objective_names"], [158, "biophysics_fitting.hay.specification.get_hay_param_names"], [159, "biophysics_fitting.hay.specification.get_hay_params_pdf"], [160, "biophysics_fitting.hay.specification.get_hay_problem_description"], [163, "biophysics_fitting.model_selection.get_model_pdf_from_db"], [164, "biophysics_fitting.model_selection.get_pdf_selected"], [166, "biophysics_fitting.optimizer._evaluate_invalid_fitness"], [167, "biophysics_fitting.optimizer._get_offspring"], [168, "biophysics_fitting.optimizer._record_stats"], [169, "biophysics_fitting.optimizer._update_history_and_hof"], [170, "biophysics_fitting.optimizer.eaAlphaMuPlusLambdaCheckpoint"], [171, "biophysics_fitting.optimizer.get_max_generation"], [172, "biophysics_fitting.optimizer.get_mymap"], [173, "biophysics_fitting.optimizer.get_objective_function"], [174, "biophysics_fitting.optimizer.get_population_with_different_n_objectives"], [176, "biophysics_fitting.optimizer.robust_int"], [177, "biophysics_fitting.optimizer.run"], [178, "biophysics_fitting.optimizer.save_result"], [179, "biophysics_fitting.optimizer.setup_db_run"], [180, "biophysics_fitting.optimizer.start_run"], [182, "biophysics_fitting.parameters.param_selector"], [183, "biophysics_fitting.parameters.param_to_kwargs"], [184, "biophysics_fitting.parameters.set_fixed_params"], [185, "biophysics_fitting.setup_stim._append"], [187, "biophysics_fitting.setup_stim.setup_BAC"], [188, "biophysics_fitting.setup_stim.setup_StepOne"], [189, "biophysics_fitting.setup_stim.setup_StepThree"], [190, "biophysics_fitting.setup_stim.setup_StepTwo"], [191, "biophysics_fitting.setup_stim.setup_apical_epsp_injection"], [192, "biophysics_fitting.setup_stim.setup_bAP"], [193, "biophysics_fitting.setup_stim.setup_soma_step"], [210, "biophysics_fitting.simulator.run_fun"], [213, "biophysics_fitting.utils._get_apical_sec_and_i_at_distance"], [214, "biophysics_fitting.utils.augment_cell_with_detailed_labels"], [215, "biophysics_fitting.utils.connected_to_structure_beyond"], [216, "biophysics_fitting.utils.execute_in_child_process"], [217, "biophysics_fitting.utils.execute_in_child_process_kept_alive"], [218, "biophysics_fitting.utils.get_inner_sec_dist_dict"], [219, "biophysics_fitting.utils.get_inner_section_at_distance"], [220, "biophysics_fitting.utils.get_main_bifurcation_section"], [222, "biophysics_fitting.utils.pool_helper"], [223, "biophysics_fitting.utils.run_cloudpickled_remotely"], [224, "biophysics_fitting.utils.tVec"], [225, "biophysics_fitting.utils.vmApical"], [226, "biophysics_fitting.utils.vmApical_position"], [227, "biophysics_fitting.utils.vmMax"], [228, "biophysics_fitting.utils.vmSoma"], [232, "data_base.analyze.spatiotemporal_binning.universal"], [233, "data_base.analyze.spatiotemporal_binning.universal_pd"], [234, "data_base.analyze.spike_detection._helper"], [236, "data_base.analyze.spike_detection.spike_detection"], [237, "data_base.analyze.spike_detection.spike_in_interval"], [238, "data_base.analyze.split_synapse_activation"], [240, "data_base.analyze.temporal_binning.temporal_binning_dask"], [241, "data_base.analyze.temporal_binning.temporal_binning_pd"], [242, "data_base.analyze.temporal_binning.universal"], [243, "data_base.analyze.voltage_binning.calculate_vdensity_array"], [244, "data_base.analyze.voltage_binning.calculate_vdensity_array_dask"], [245, "data_base.analyze.voltage_binning.calculate_vdensity_array_pd"], [246, "data_base.analyze.voltage_binning.calculate_vdensity_array_pixelObject"], [247, "data_base.analyze.voltage_binning.get_bins"], [250, "data_base.data_base._is_legacy_model_data_base"], [251, "data_base.data_base._make_mdb_forwards_compatible"], [252, "data_base.data_base.get_db_by_unique_id"], [254, "data_base.data_base.is_data_base"], [255, "data_base.data_base.is_isf_data_base"], [256, "data_base.data_base.is_sub_data_base"], [257, "data_base.data_base.is_sub_isf_data_base"], [258, "data_base.data_base.is_sub_model_data_base"], [263, "data_base.data_base_register._get_db_register"], [264, "data_base.data_base_register.assimilate_remote_register"], [265, "data_base.data_base_register.deregister_db"], [267, "data_base.data_base_register.register_db"], [269, "data_base.db_initializers.load_simrun_general.add_dendritic_spike_times"], [270, "data_base.db_initializers.load_simrun_general.add_dendritic_voltage_traces"], [271, "data_base.db_initializers.load_simrun_general.builders._build_core"], [272, "data_base.db_initializers.load_simrun_general.builders._build_dendritic_voltage_traces"], [273, "data_base.db_initializers.load_simrun_general.builders._build_param_files"], [274, "data_base.db_initializers.load_simrun_general.builders._build_synapse_activation"], [275, "data_base.db_initializers.load_simrun_general.builders._get_rec_site_managers"], [278, "data_base.db_initializers.load_simrun_general.data_parsing.load_dendritic_voltage_traces"], [279, "data_base.db_initializers.load_simrun_general.data_parsing.load_dendritic_voltage_traces_helper"], [280, "data_base.db_initializers.load_simrun_general.data_parsing.read_voltage_traces_by_filenames"], [281, "data_base.db_initializers.load_simrun_general.data_parsing.read_voltage_traces_from_csv"], [282, "data_base.db_initializers.load_simrun_general.data_parsing.read_voltage_traces_from_file"], [283, "data_base.db_initializers.load_simrun_general.data_parsing.read_voltage_traces_from_files_pandas"], [284, "data_base.db_initializers.load_simrun_general.data_parsing.read_voltage_traces_from_npz"], [285, "data_base.db_initializers.load_simrun_general.file_handling.get_file"], [286, "data_base.db_initializers.load_simrun_general.file_handling.get_max_commas"], [288, "data_base.db_initializers.load_simrun_general.file_handling.make_filelist"], [289, "data_base.db_initializers.load_simrun_general.filepath_resolution._convert_con_fns_to_reldb"], [290, "data_base.db_initializers.load_simrun_general.filepath_resolution._convert_netp_fns_to_reldb"], [291, "data_base.db_initializers.load_simrun_general.filepath_resolution._convert_neup_fns_to_reldb"], [292, "data_base.db_initializers.load_simrun_general.filepath_resolution._convert_syn_fns_to_reldb"], [295, "data_base.db_initializers.load_simrun_general.init"], [296, "data_base.db_initializers.load_simrun_general.load_initialized_cell_and_evokedNW_from_db"], [297, "data_base.db_initializers.load_simrun_general.metadata_utils.create_metadata"], [298, "data_base.db_initializers.load_simrun_general.metadata_utils.create_metadata_parallelization_helper"], [299, "data_base.db_initializers.load_simrun_general.metadata_utils.get_voltage_traces_divisions_by_metadata"], [301, "data_base.db_initializers.load_simrun_general.optimize"], [302, "data_base.db_initializers.load_simrun_general.param_file_parser._copy_and_transform_con"], [303, "data_base.db_initializers.load_simrun_general.param_file_parser._copy_and_transform_network_param"], [304, "data_base.db_initializers.load_simrun_general.param_file_parser._copy_and_transform_neuron_param"], [305, "data_base.db_initializers.load_simrun_general.param_file_parser._copy_and_transform_syn"], [306, "data_base.db_initializers.load_simrun_general.param_file_parser._delayed_copy_transform_paramfiles_to_db"], [307, "data_base.db_initializers.load_simrun_general.param_file_parser._generate_target_filenames"], [308, "data_base.db_initializers.load_simrun_general.param_file_parser._get_unique_hoc_fns_from_neups"], [309, "data_base.db_initializers.load_simrun_general.param_file_parser._get_unique_landmark_fns_from_neups"], [310, "data_base.db_initializers.load_simrun_general.param_file_parser._get_unique_syncons_from_netps"], [311, "data_base.db_initializers.load_simrun_general.param_file_parser.construct_param_filename_hashmap_df"], [313, "data_base.db_initializers.load_simrun_general.param_file_parser.load_param_files_from_db"], [314, "data_base.db_initializers.load_simrun_general.reoptimize._check_needs_reoptimization"], [315, "data_base.db_initializers.load_simrun_general.reoptimize._reoptimize_key"], [317, "data_base.db_initializers.load_simrun_general.reoptimize.reoptimize_db"], [318, "data_base.db_initializers.load_simrun_general.utils._get_dumper"], [319, "data_base.db_initializers.load_simrun_general.utils._hash_file_content"], [321, "data_base.db_initializers.prepare_ANN_batches.augment_synapse_activation_df_with_branch_bin"], [322, "data_base.db_initializers.prepare_ANN_batches.compute_AP_array"], [323, "data_base.db_initializers.prepare_ANN_batches.compute_ISI_array"], [324, "data_base.db_initializers.prepare_ANN_batches.compute_ISI_from_st"], [325, "data_base.db_initializers.prepare_ANN_batches.compute_ISI_from_st_list"], [326, "data_base.db_initializers.prepare_ANN_batches.get_bin"], [327, "data_base.db_initializers.prepare_ANN_batches.get_bin_adjacency_map_in_section"], [328, "data_base.db_initializers.prepare_ANN_batches.get_bin_soma_distances_in_section"], [329, "data_base.db_initializers.prepare_ANN_batches.get_binsize"], [330, "data_base.db_initializers.prepare_ANN_batches.get_max_depolarization_per_ms"], [331, "data_base.db_initializers.prepare_ANN_batches.get_max_per_ms_on_pandas_dataframe"], [332, "data_base.db_initializers.prepare_ANN_batches.get_neighboring_spatial_bins"], [333, "data_base.db_initializers.prepare_ANN_batches.get_neuron_param_file"], [334, "data_base.db_initializers.prepare_ANN_batches.get_section_distances_df"], [335, "data_base.db_initializers.prepare_ANN_batches.get_spatial_bin_names"], [336, "data_base.db_initializers.prepare_ANN_batches.get_synapse_activation_array_weighted"], [337, "data_base.db_initializers.prepare_ANN_batches.get_time_groups"], [339, "data_base.db_initializers.prepare_ANN_batches.load_syn_weights"], [340, "data_base.db_initializers.prepare_ANN_batches.run_delayeds_incrementally"], [341, "data_base.db_initializers.prepare_ANN_batches.save_SA_batch"], [342, "data_base.db_initializers.prepare_ANN_batches.spike_times_to_onehot"], [343, "data_base.db_initializers.prepare_ANN_batches.temporal_binning_augmented_sa"], [344, "data_base.db_initializers.synapse_activation_binning.applyfun"], [346, "data_base.db_initializers.synapse_activation_binning.init"], [347, "data_base.db_initializers.synapse_activation_binning.merge_results_together"], [348, "data_base.db_initializers.synapse_activation_binning.postfun"], [349, "data_base.db_initializers.synapse_activation_binning.prefun"], [350, "data_base.db_initializers.synapse_activation_binning.save_groupby"], [351, "data_base.db_initializers.synapse_activation_binning.synapse_activation_postprocess_dask"], [352, "data_base.db_initializers.synapse_activation_binning.synapse_activation_postprocess_pandas"], [353, "data_base.db_initializers.synapse_activation_binning.tree_reduction"], [354, "data_base.dbopen.cache"], [355, "data_base.dbopen.create_modular_db_path"], [356, "data_base.dbopen.create_reldb_path"], [359, "data_base.dbopen.resolve_db_path"], [360, "data_base.dbopen.resolve_modular_db_path"], [361, "data_base.dbopen.resolve_netp_reldb_paths"], [362, "data_base.dbopen.resolve_neup_reldb_paths"], [363, "data_base.dbopen.resolve_reldb_path"], [367, "data_base.distributed_lock._get_locking_config"], [368, "data_base.distributed_lock._get_locking_server_client_from_config"], [369, "data_base.distributed_lock.get_lock"], [370, "data_base.distributed_lock.get_locking_client"], [371, "data_base.distributed_lock.get_locking_server"], [372, "data_base.distributed_lock.get_locking_server_client"], [373, "data_base.distributed_lock.get_read_lock"], [374, "data_base.distributed_lock.get_write_lock"], [376, "data_base.distributed_lock.update_config"], [383, "data_base.isf_data_base.IO.LoaderDumper.cell.check"], [384, "data_base.isf_data_base.IO.LoaderDumper.cell.dump"], [388, "data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.bundle_delayeds"], [389, "data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.category_to_str"], [390, "data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.check"], [391, "data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.dump"], [392, "data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.get_numpy_dtype_as_str"], [393, "data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.get_writer_function"], [395, "data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.my_dask_writer"], [396, "data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.read_object_meta"], [397, "data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.str_to_category"], [398, "data_base.isf_data_base.IO.LoaderDumper.dask_to_msgpack.dump"], [402, "data_base.isf_data_base.IO.LoaderDumper.dask_to_parquet.check"], [403, "data_base.isf_data_base.IO.LoaderDumper.dask_to_parquet.check_df_suitable_for_pq"], [404, "data_base.isf_data_base.IO.LoaderDumper.dask_to_parquet.dump"], [406, "data_base.isf_data_base.IO.LoaderDumper.dask_to_parquet.load_helper"], [407, "data_base.isf_data_base.IO.LoaderDumper.dask_to_parquet.save_helper"], [408, "data_base.isf_data_base.IO.LoaderDumper.generic_to_specific_databases_module_name"], [409, "data_base.isf_data_base.IO.LoaderDumper.get_dumper_string_by_dumper_module"], [410, "data_base.isf_data_base.IO.LoaderDumper.get_dumper_string_by_savedir"], [418, "data_base.isf_data_base.IO.LoaderDumper.just_create_folder.check"], [419, "data_base.isf_data_base.IO.LoaderDumper.just_create_folder.dump"], [423, "data_base.isf_data_base.IO.LoaderDumper.just_create_isf_db.check"], [424, "data_base.isf_data_base.IO.LoaderDumper.just_create_isf_db.dump"], [426, "data_base.isf_data_base.IO.LoaderDumper.load"], [429, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_msgpack.check"], [430, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_msgpack.dump"], [434, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_npy.check"], [435, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_npy.dump"], [439, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_npz.check"], [440, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_npz.dump"], [444, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_zarr.check"], [445, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_zarr.dump"], [449, "data_base.isf_data_base.IO.LoaderDumper.pandas_to_msgpack.check"], [450, "data_base.isf_data_base.IO.LoaderDumper.pandas_to_msgpack.dump"], [454, "data_base.isf_data_base.IO.LoaderDumper.pandas_to_parquet.check"], [455, "data_base.isf_data_base.IO.LoaderDumper.pandas_to_parquet.dump"], [459, "data_base.isf_data_base.IO.LoaderDumper.pandas_to_pickle.check"], [460, "data_base.isf_data_base.IO.LoaderDumper.pandas_to_pickle.dump"], [466, "data_base.isf_data_base.IO.LoaderDumper.reduced_lda_model.check"], [467, "data_base.isf_data_base.IO.LoaderDumper.reduced_lda_model.dump"], [484, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store._check_filesize_matches_shape"], [485, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store._get_offset_and_size_in_bytes"], [486, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.check"], [487, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.dump"], [489, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.memmap_from_disk"], [490, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.shared_array_from_disk"], [491, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.shared_array_from_numpy"], [492, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.shared_array_from_shared_mem_name"], [495, "data_base.isf_data_base.IO.LoaderDumper.to_cloudpickle.check"], [496, "data_base.isf_data_base.IO.LoaderDumper.to_cloudpickle.dump"], [500, "data_base.isf_data_base.IO.LoaderDumper.to_msgpack.check"], [501, "data_base.isf_data_base.IO.LoaderDumper.to_msgpack.dump"], [505, "data_base.isf_data_base.IO.LoaderDumper.to_pickle.check"], [506, "data_base.isf_data_base.IO.LoaderDumper.to_pickle.dump"], [508, "data_base.isf_data_base.IO.LoaderDumper.utils.get_meta_filename"], [509, "data_base.isf_data_base.IO.LoaderDumper.utils.get_numpy_dtype_as_str"], [511, "data_base.isf_data_base.IO.LoaderDumper.utils.read_object_meta"], [512, "data_base.isf_data_base.IO.LoaderDumper.utils.save_object_meta"], [513, "data_base.isf_data_base.IO.LoaderDumper.utils.set_object_meta"], [515, "data_base.isf_data_base.IO.dask_wrappers.read_csvs"], [551, "data_base.isf_data_base.isf_data_base._check_working_dir_clean_for_build"], [552, "data_base.isf_data_base.isf_data_base.get_dumper_from_folder"], [553, "data_base.isf_data_base.isf_data_base.get_isfdb_by_unique_id"], [555, "data_base.isf_data_base.isf_data_base.make_all_str"], [560, "data_base.utils.cache"], [561, "data_base.utils.calc_recursive_filetree"], [562, "data_base.utils.chunkIt"], [563, "data_base.utils.colorize_key"], [564, "data_base.utils.colorize_str"], [565, "data_base.utils.convertible_to_int"], [566, "data_base.utils.delete_in_background"], [567, "data_base.utils.df_colnames_to_str"], [568, "data_base.utils.fancy_dict_compare"], [569, "data_base.utils.first_line_to_key"], [570, "data_base.utils.flatten"], [571, "data_base.utils.get_file_or_folder_that_endswith"], [572, "data_base.utils.get_file_or_folder_that_startswith"], [574, "data_base.utils.is_db"], [576, "data_base.utils.myrepartition"], [577, "data_base.utils.pandas_to_array"], [578, "data_base.utils.pooled_std"], [579, "data_base.utils.rename_for_deletion"], [580, "data_base.utils.select"], [582, "data_base.utils.skit"], [583, "data_base.utils.split_file_to_buffers"], [584, "data_base.utils.synchronous_ddf_concat"], [585, "data_base.utils.unique"], [586, "data_base.utils.wait_until_key_removed"], [596, "simrun.PSP_with_cell_modification.combine_PSP_objects"], [598, "simrun.generate_synapse_activations._evoked_activity"], [599, "simrun.generate_synapse_activations.generate_synapse_activations"], [601, "simrun.get_cell_with_network.get_cell_with_network"], [632, "simrun.modular_reduced_model_inference.reduced_model.get_n_workers_per_ip"], [669, "simrun.modular_reduced_model_inference.strategy.clear_memory"], [670, "simrun.modular_reduced_model_inference.strategy.convert_to_numpy"], [671, "simrun.modular_reduced_model_inference.strategy.dereference"], [673, "simrun.modular_reduced_model_inference.strategy.make_weakref"], [675, "simrun.parameters_to_cell.parameters_to_cell"], [678, "simrun.rerun_db.rerun_db"], [684, "simrun.robust_dask_delayed_execution._assert_value"], [685, "simrun.robust_dask_delayed_execution._wrapper"], [688, "simrun.run_existing_synapse_activations.run_existing_synapse_activations"], [690, "simrun.run_new_simulations.run_new_simulations"], [691, "simrun.seed_manager.get_seed"], [694, "simrun.sim_trial_to_cell_object.simtrial_to_cell_object"], [695, "simrun.sim_trial_to_cell_object.trial_to_cell_object"], [709, "simrun.synaptic_strength_fitting.analyze_voltage_trace"], [710, "simrun.synaptic_strength_fitting.calculate_optimal_g"], [711, "simrun.synaptic_strength_fitting.ePSP_summary_statistics"], [712, "simrun.synaptic_strength_fitting.generate_ex_network_param_from_network_embedding"], [713, "simrun.synaptic_strength_fitting.generate_inh_network_param_from_network_embedding"], [714, "simrun.synaptic_strength_fitting.get_optimal_g"], [715, "simrun.synaptic_strength_fitting.get_summary_statistics"], [716, "simrun.synaptic_strength_fitting.get_tMax_vMax"], [717, "simrun.synaptic_strength_fitting.get_tMax_vMax_baseline"], [718, "simrun.synaptic_strength_fitting.get_voltage_and_timing"], [720, "simrun.synaptic_strength_fitting.linear_fit"], [721, "simrun.synaptic_strength_fitting.linear_fit_pdf"], [722, "simrun.synaptic_strength_fitting.merge_celltypes"], [723, "simrun.synaptic_strength_fitting.run_ex_synapse"], [724, "simrun.synaptic_strength_fitting.run_ex_synapses"], [725, "simrun.synaptic_strength_fitting.set_ex_synapse_weight"], [726, "simrun.synaptic_strength_fitting.set_inh_synapse_weight"], [727, "simrun.utils.chunkIt"], [728, "simrun.utils.get_cellnumbers_from_confile"], [729, "simrun.utils.get_default_arguments"], [730, "simrun.utils.get_fraction_of_landmarkAscii"], [731, "simrun.utils.get_fraction_of_landmarkAscii_dir"], [733, "simrun.utils.load_param_file_if_path_is_provided"], [734, "simrun.utils.select_cells_that_spike_in_interval"], [735, "simrun.utils.set_default_arguments_if_not_set"], [736, "simrun.utils.silence_stdout"], [737, "simrun.utils.split_network_param_in_one_elem_dicts"], [738, "simrun.utils.tar_folder"], [741, "single_cell_parser.analyze.membrane_potential_analysis.PSTH_from_spike_times"], [750, "single_cell_parser.analyze.membrane_potential_analysis.compute_mean_psp_amplitude"], [751, "single_cell_parser.analyze.membrane_potential_analysis.compute_uPSP_amplitude"], [752, "single_cell_parser.analyze.membrane_potential_analysis.compute_vm_histogram"], [753, "single_cell_parser.analyze.membrane_potential_analysis.compute_vm_std_windows"], [755, "single_cell_parser.analyze.membrane_potential_analysis.simple_spike_detection"], [756, "single_cell_parser.analyze.membrane_potential_analysis.vm_mean"], [757, "single_cell_parser.analyze.membrane_potential_analysis.vm_std"], [758, "single_cell_parser.analyze.synanalysis.compute_distance_to_soma"], [759, "single_cell_parser.analyze.synanalysis.compute_syn_distance"], [760, "single_cell_parser.analyze.synanalysis.compute_syn_distances"], [761, "single_cell_parser.analyze.synanalysis.compute_syn_distances_2Dprojected"], [762, "single_cell_parser.analyze.synanalysis.compute_synapse_distances_times"], [763, "single_cell_parser.analyze.synanalysis.get_dist"], [765, "single_cell_parser.analyze.synanalysis.synapse_activation_times"], [801, "single_cell_parser.cell_modify_functions.BAC_injection.BAC_injection"], [803, "single_cell_parser.cell_modify_functions.apical_current_injection.apical_current_injection"], [805, "single_cell_parser.cell_modify_functions.apical_epsp_injection.apical_epsp_injection"], [807, "single_cell_parser.cell_modify_functions.blender_recorder.blender_recorder"], [809, "single_cell_parser.cell_modify_functions.get"], [812, "single_cell_parser.cell_modify_functions.scale_apical.scale_apical"], [813, "single_cell_parser.cell_modify_functions.scale_apical.scale_apical_dendrite"], [814, "single_cell_parser.cell_modify_functions.scale_apical.scale_by_detailed_compartment"], [816, "single_cell_parser.cell_modify_functions.soma_current_injection.soma_current_injection"], [818, "single_cell_parser.cell_modify_functions.synaptic_input.synaptic_input"], [836, "single_cell_parser.create_cell"], [838, "single_cell_parser.init_neuron_run"], [859, "single_cell_parser.network.activate_functional_synapse"], [861, "single_cell_parser.network.sample_times_from_rates"], [862, "single_cell_parser.network_modify_functions.get"], [865, "single_cell_parser.network_modify_functions.silence_synapses_by_somadist.silence_synapses_by_somadist"], [867, "single_cell_parser.network_modify_functions.silence_synapses_by_somadist_and_spike_source.silence_synapses_by_somadist_and_spike_source"], [868, "single_cell_parser.network_param_modify_functions._celltype_matches"], [869, "single_cell_parser.network_param_modify_functions._has_evoked"], [870, "single_cell_parser.network_param_modify_functions.change_evoked_INH_scaling"], [871, "single_cell_parser.network_param_modify_functions.change_glutamate_syn_weights"], [872, "single_cell_parser.network_param_modify_functions.change_ongoing_interval"], [873, "single_cell_parser.network_param_modify_functions.inactivate_evoked_activity_by_celltype_and_column"], [874, "single_cell_parser.network_param_modify_functions.inactivate_evoked_and_ongoing_activity_by_celltype_and_column"], [876, "single_cell_parser.network_param_modify_functions.multi_stimulus_trial"], [877, "single_cell_parser.network_param_modify_functions.set_stim_onset"], [878, "single_cell_parser.network_realizations.create_functional_network"], [879, "single_cell_parser.network_realizations.create_synapse_realization"], [888, "single_cell_parser.parameters._read_params_to_dict"], [889, "single_cell_parser.parameters.build_parameters"], [891, "single_cell_parser.parameters.load_NMODL_parameters"], [892, "single_cell_parser.parameters.resolve_parameter_paths"], [896, "single_cell_parser.reader.read_complete_synapse_activation_file"], [897, "single_cell_parser.reader.read_functional_realization_map"], [898, "single_cell_parser.reader.read_hoc_file"], [899, "single_cell_parser.reader.read_landmark_file"], [900, "single_cell_parser.reader.read_pruned_synapse_realization"], [901, "single_cell_parser.reader.read_scalar_field"], [902, "single_cell_parser.reader.read_spike_times_file"], [903, "single_cell_parser.reader.read_synapse_activation_file"], [904, "single_cell_parser.reader.read_synapse_realization"], [905, "single_cell_parser.reader.read_synapse_weight_file"], [914, "single_cell_parser.sec_distance_to_soma"], [915, "single_cell_parser.serialize_cell.cell_to_serializable_object"], [916, "single_cell_parser.serialize_cell.convert_dict_of_hoc_arrays_to_dict_of_np_arrays"], [917, "single_cell_parser.serialize_cell.convert_hoc_array_to_np_array"], [919, "single_cell_parser.serialize_cell.load_cell_from_file"], [920, "single_cell_parser.serialize_cell.restore_cell_from_serializable_object"], [921, "single_cell_parser.serialize_cell.save_cell_to_file"], [928, "single_cell_parser.spines_update_network_paramfile"], [929, "single_cell_parser.spines_update_synapse_distribution_file"], [947, "single_cell_parser.writer.generate_landmark_template"], [949, "single_cell_parser.writer.value_to_color"], [950, "single_cell_parser.writer.write_PSTH"], [951, "single_cell_parser.writer.write_all_traces"], [952, "single_cell_parser.writer.write_cell_simulation"], [953, "single_cell_parser.writer.write_cell_synapse_locations"], [954, "single_cell_parser.writer.write_functional_map"], [955, "single_cell_parser.writer.write_functional_realization_map"], [956, "single_cell_parser.writer.write_landmark_file"], [957, "single_cell_parser.writer.write_landmarks_colorcoded_to_folder"], [958, "single_cell_parser.writer.write_presynaptic_spike_times"], [959, "single_cell_parser.writer.write_pruned_synapse_locations"], [960, "single_cell_parser.writer.write_sim_results"], [961, "single_cell_parser.writer.write_spike_times_file"], [962, "single_cell_parser.writer.write_synapse_activation_file"], [963, "single_cell_parser.writer.write_synapse_weight_file"], [964, "singlecell_input_mapper.evoked_PSTH_from_spike_times.create_average_celltype_PSTH_from_clusters"], [965, "singlecell_input_mapper.evoked_PSTH_from_spike_times.create_evoked_PSTH"], [967, "singlecell_input_mapper.evoked_PSTH_from_spike_times.load_cluster_trials"], [968, "singlecell_input_mapper.evoked_PSTH_from_spike_times.load_spike_times"], [969, "singlecell_input_mapper.evoked_PSTH_from_spike_times.scan_directory"], [970, "singlecell_input_mapper.evoked_network_param_from_template.create_network_parameter"], [972, "singlecell_input_mapper.evoked_network_param_from_template.load_cell_number_file"], [973, "singlecell_input_mapper.evoked_network_param_from_template.whisker_evoked_PSTH"], [976, "singlecell_input_mapper.map_singlecell_inputs.map_singlecell_inputs"], [977, "singlecell_input_mapper.ongoing_network_param_from_template.create_network_parameter"], [979, "singlecell_input_mapper.ongoing_network_param_from_template.load_cell_number_file"], [997, "singlecell_input_mapper.singlecell_input_mapper.generate_nr_of_cells_spreadsheet.con_file_to_NumberOfConnectedCells_sheet"], [1020, "singlecell_input_mapper.singlecell_input_mapper.reader.read_celltype_numbers_spreadsheet"], [1021, "singlecell_input_mapper.singlecell_input_mapper.reader.read_connections_spreadsheet"], [1022, "singlecell_input_mapper.singlecell_input_mapper.reader.read_hoc_file"], [1023, "singlecell_input_mapper.singlecell_input_mapper.reader.read_scalar_field"], [1050, "singlecell_input_mapper.singlecell_input_mapper.writer.write_anatomical_realization_map"], [1051, "singlecell_input_mapper.singlecell_input_mapper.writer.write_cell_synapse_locations"], [1052, "singlecell_input_mapper.singlecell_input_mapper.writer.write_landmark_file"], [1053, "singlecell_input_mapper.singlecell_input_mapper.writer.write_population_and_sample_connectivity_summary"], [1054, "singlecell_input_mapper.singlecell_input_mapper.writer.write_population_connectivity_summary"], [1055, "singlecell_input_mapper.singlecell_input_mapper.writer.write_sample_connectivity_summary"], [1056, "singlecell_input_mapper.singlecell_input_mapper.writer.write_scalar_field"], [1103, "spike_analysis.core._sta_input_checker"], [1104, "spike_analysis.core.filter_short_ISIs"], [1105, "spike_analysis.core.filter_spike_times"], [1106, "spike_analysis.core.get_peaks_above"], [1107, "spike_analysis.core.get_period_label_by_time"], [1108, "spike_analysis.core.get_spike_times_from_row"], [1109, "spike_analysis.core.get_st_from_spike_times_and_stim_times"], [1110, "spike_analysis.core.get_upcross"], [1111, "spike_analysis.core.highpass_filter"], [1113, "spike_analysis.core.load_reader"], [1114, "spike_analysis.core.read_labview_junk1_dat_files"], [1115, "spike_analysis.core.read_smr_file"], [1116, "spike_analysis.core.stimulus_interval_filter"], [1117, "spike_analysis.core.strip_st"], [1119, "visualize._decorators.dask_to_pandas"], [1121, "visualize._decorators.pr"], [1122, "visualize._decorators.subsequent_calls_per_line"], [1124, "visualize._figure_array_converter.fig2np"], [1126, "visualize._figure_array_converter.show_pixel_object"], [1159, "visualize.cell_morphology_visualizer.get_3d_plot_morphology"], [1161, "visualize.cell_to_ipython_animation._in_parallel_context"], [1162, "visualize.cell_to_ipython_animation._load_base64"], [1163, "visualize.cell_to_ipython_animation.cell_to_animation"], [1164, "visualize.cell_to_ipython_animation.cell_to_ipython_animation"], [1165, "visualize.cell_to_ipython_animation.display_animation"], [1166, "visualize.cell_to_ipython_animation.find_closest_index"], [1167, "visualize.cell_to_ipython_animation.get_lines"], [1169, "visualize.cell_to_ipython_animation.init_fig"], [1170, "visualize.cell_to_ipython_animation.parallelMovieMaker"], [1171, "visualize.cell_to_ipython_animation.plot_lines_fun"], [1200, "visualize.dendrogram._get_db_by_sec"], [1201, "visualize.dendrogram._get_max_somadistance"], [1203, "visualize.histogram.histogram"], [1204, "visualize.histogram.histogram2"], [1208, "visualize.manylines.manylines"], [1209, "visualize.manylines.manylines_helper"], [1210, "visualize.plot_hoc"], [1212, "visualize.rasterplot.rasterplot"], [1213, "visualize.rasterplot.rasterplot2"], [1214, "visualize.rasterplot.rasterplot2_pdf_grouped"], [1215, "visualize.svg2emf"], [1219, "visualize.utils._arrow3D"], [1220, "visualize.utils._load_base64"], [1221, "visualize.utils.display_animation_from_images"], [1222, "visualize.utils.draw_arrow"], [1223, "visualize.utils.find_files_and_order_them"], [1225, "visualize.utils.value_to_color"], [1226, "visualize.utils.write_gif_from_images"], [1227, "visualize.utils.write_video_from_images"], [1229, "visualize.voltage_trace_visualizer.plot_vt"], [1230, "visualize.voltage_trace_visualizer.visualize_vt"], [1231, "visualize.vtk.convert_amira_lattice_to_vtk"], [1232, "visualize.vtk.convert_amira_surf_to_vtk"], [1234, "visualize.vtk.save_cells_landmark_files_vtk"], [1235, "visualize.vtk.write_vtk_pointcloud_file"], [1236, "visualize.vtk.write_vtk_skeleton_file"]], "interface.get_client()": [[1, "Interface.get_client"]], "interface": [[2, "module-Interface"]], "module": [[2, "module-Interface"], [9, "module-biophysics_fitting.L5tt_parameter_setup"], [19, "module-biophysics_fitting.combiner"], [48, "module-biophysics_fitting.ephys"], [58, "module-biophysics_fitting.evaluator"], [68, "module-biophysics_fitting.exploration_from_seedpoint.RW"], [78, "module-biophysics_fitting.exploration_from_seedpoint.RW_analysis"], [86, "module-biophysics_fitting.exploration_from_seedpoint"], [90, "module-biophysics_fitting.exploration_from_seedpoint.utils"], [100, "module-biophysics_fitting.hay.default_setup"], [151, "module-biophysics_fitting.hay.evaluation"], [154, "module-biophysics_fitting.hay"], [161, "module-biophysics_fitting.hay.specification"], [162, "module-biophysics_fitting"], [165, "module-biophysics_fitting.model_selection"], [175, "module-biophysics_fitting.optimizer"], [181, "module-biophysics_fitting.parameters"], [186, "module-biophysics_fitting.setup_stim"], [209, "module-biophysics_fitting.simulator"], [221, "module-biophysics_fitting.utils"], [229, "module-data_base.IO"], [230, "module-data_base.analyze"], [231, "module-data_base.analyze.spatiotemporal_binning"], [235, "module-data_base.analyze.spike_detection"], [239, "module-data_base.analyze.temporal_binning"], [248, "module-data_base.analyze.voltage_binning"], [253, "module-data_base.data_base"], [266, "module-data_base.data_base_register"], [268, "module-data_base.db_initializers"], [276, "module-data_base.db_initializers.load_simrun_general.builders"], [277, "module-data_base.db_initializers.load_simrun_general.data_parsing"], [287, "module-data_base.db_initializers.load_simrun_general.file_handling"], [293, "module-data_base.db_initializers.load_simrun_general.filepath_resolution"], [294, "module-data_base.db_initializers.load_simrun_general"], [300, "module-data_base.db_initializers.load_simrun_general.metadata_utils"], [312, "module-data_base.db_initializers.load_simrun_general.param_file_parser"], [316, "module-data_base.db_initializers.load_simrun_general.reoptimize"], [320, "module-data_base.db_initializers.load_simrun_general.utils"], [338, "module-data_base.db_initializers.prepare_ANN_batches"], [345, "module-data_base.db_initializers.synapse_activation_binning"], [358, "module-data_base.dbopen"], [375, "module-data_base.distributed_lock"], [379, "module-data_base.exceptions"], [380, "module-data_base"], [385, "module-data_base.isf_data_base.IO.LoaderDumper.cell"], [394, "module-data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack"], [399, "module-data_base.isf_data_base.IO.LoaderDumper.dask_to_msgpack"], [405, "module-data_base.isf_data_base.IO.LoaderDumper.dask_to_parquet"], [411, "module-data_base.isf_data_base.IO.LoaderDumper"], [420, "module-data_base.isf_data_base.IO.LoaderDumper.just_create_folder"], [425, "module-data_base.isf_data_base.IO.LoaderDumper.just_create_isf_db"], [431, "module-data_base.isf_data_base.IO.LoaderDumper.numpy_to_msgpack"], [436, "module-data_base.isf_data_base.IO.LoaderDumper.numpy_to_npy"], [441, "module-data_base.isf_data_base.IO.LoaderDumper.numpy_to_npz"], [446, "module-data_base.isf_data_base.IO.LoaderDumper.numpy_to_zarr"], [451, "module-data_base.isf_data_base.IO.LoaderDumper.pandas_to_msgpack"], [456, "module-data_base.isf_data_base.IO.LoaderDumper.pandas_to_parquet"], [461, "module-data_base.isf_data_base.IO.LoaderDumper.pandas_to_pickle"], [463, "module-data_base.isf_data_base.IO.LoaderDumper.parent_classes"], [468, "module-data_base.isf_data_base.IO.LoaderDumper.reduced_lda_model"], [488, "module-data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store"], [497, "module-data_base.isf_data_base.IO.LoaderDumper.to_cloudpickle"], [502, "module-data_base.isf_data_base.IO.LoaderDumper.to_msgpack"], [507, "module-data_base.isf_data_base.IO.LoaderDumper.to_pickle"], [510, "module-data_base.isf_data_base.IO.LoaderDumper.utils"], [514, "module-data_base.isf_data_base.IO.dask_wrappers"], [516, "module-data_base.isf_data_base.IO"], [517, "module-data_base.isf_data_base"], [554, "module-data_base.isf_data_base.isf_data_base"], [556, "module-data_base.settings"], [573, "module-data_base.utils"], [597, "module-simrun.PSP_with_cell_modification"], [600, "module-simrun.generate_synapse_activations"], [602, "module-simrun.get_cell_with_network"], [603, "module-simrun"], [614, "module-simrun.modular_reduced_model_inference.data_extractor"], [615, "module-simrun.modular_reduced_model_inference"], [633, "module-simrun.modular_reduced_model_inference.reduced_model"], [642, "module-simrun.modular_reduced_model_inference.solver"], [672, "module-simrun.modular_reduced_model_inference.strategy"], [674, "module-simrun.parameters_to_cell"], [677, "module-simrun.rerun_db"], [686, "module-simrun.robust_dask_delayed_execution"], [687, "module-simrun.run_existing_synapse_activations"], [689, "module-simrun.run_new_simulations"], [692, "module-simrun.seed_manager"], [693, "module-simrun.sim_trial_to_cell_object"], [719, "module-simrun.synaptic_strength_fitting"], [732, "module-simrun.utils"], [740, "module-single_cell_parser.analyze"], [754, "module-single_cell_parser.analyze.membrane_potential_analysis"], [764, "module-single_cell_parser.analyze.synanalysis"], [800, "module-single_cell_parser.cell"], [802, "module-single_cell_parser.cell_modify_functions.BAC_injection"], [804, "module-single_cell_parser.cell_modify_functions.apical_current_injection"], [806, "module-single_cell_parser.cell_modify_functions.apical_epsp_injection"], [808, "module-single_cell_parser.cell_modify_functions.blender_recorder"], [810, "module-single_cell_parser.cell_modify_functions"], [811, "module-single_cell_parser.cell_modify_functions.scale_apical"], [815, "module-single_cell_parser.cell_modify_functions.soma_current_injection"], [817, "module-single_cell_parser.cell_modify_functions.synaptic_input"], [835, "module-single_cell_parser.cell_parser"], [837, "module-single_cell_parser"], [860, "module-single_cell_parser.network"], [863, "module-single_cell_parser.network_modify_functions"], [864, "module-single_cell_parser.network_modify_functions.silence_synapses_by_somadist"], [866, "module-single_cell_parser.network_modify_functions.silence_synapses_by_somadist_and_spike_source"], [875, "module-single_cell_parser.network_param_modify_functions"], [880, "module-single_cell_parser.network_realizations"], [890, "module-single_cell_parser.parameters"], [895, "module-single_cell_parser.reader"], [913, "module-single_cell_parser.scalar_field"], [918, "module-single_cell_parser.serialize_cell"], [927, "module-single_cell_parser.sim_control"], [936, "module-single_cell_parser.synapse"], [946, "module-single_cell_parser.synapse_mapper"], [948, "module-single_cell_parser.writer"], [966, "module-singlecell_input_mapper.evoked_PSTH_from_spike_times"], [971, "module-singlecell_input_mapper.evoked_network_param_from_template"], [974, "module-singlecell_input_mapper"], [975, "module-singlecell_input_mapper.map_singlecell_inputs"], [978, "module-singlecell_input_mapper.ongoing_network_param_from_template"], [996, "module-singlecell_input_mapper.singlecell_input_mapper.cell"], [998, "module-singlecell_input_mapper.singlecell_input_mapper.generate_nr_of_cells_spreadsheet"], [999, "module-singlecell_input_mapper.singlecell_input_mapper"], [1016, "module-singlecell_input_mapper.singlecell_input_mapper.network_embedding"], [1019, "module-singlecell_input_mapper.singlecell_input_mapper.reader"], [1031, "module-singlecell_input_mapper.singlecell_input_mapper.scalar_field"], [1048, "module-singlecell_input_mapper.singlecell_input_mapper.synapse_mapper"], [1049, "module-singlecell_input_mapper.singlecell_input_mapper.writer"], [1112, "module-spike_analysis.core"], [1118, "module-spike_analysis"], [1120, "module-visualize._decorators"], [1125, "module-visualize._figure_array_converter"], [1160, "module-visualize.cell_morphology_visualizer"], [1168, "module-visualize.cell_to_ipython_animation"], [1177, "module-visualize.current_visualizer"], [1202, "module-visualize.dendrogram"], [1205, "module-visualize.histogram"], [1206, "module-visualize"], [1207, "module-visualize.manylines"], [1211, "module-visualize.rasterplot"], [1224, "module-visualize.utils"], [1228, "module-visualize.voltage_trace_visualizer"], [1233, "module-visualize.vtk"]], "interface.print_module_versions()": [[3, "Interface.print_module_versions"]], "biophysics_fitting.l5tt_parameter_setup.check_unset_range_mechanisms()": [[4, "biophysics_fitting.L5tt_parameter_setup.check_unset_range_mechanisms"]], "biophysics_fitting.l5tt_parameter_setup.get_l5tt_template()": [[5, "biophysics_fitting.L5tt_parameter_setup.get_L5tt_template"]], "biophysics_fitting.l5tt_parameter_setup.get_l5tt_template_v2()": [[6, "biophysics_fitting.L5tt_parameter_setup.get_L5tt_template_v2"]], "biophysics_fitting.l5tt_parameter_setup.hay_param_to_scp_neuron_param()": [[7, "biophysics_fitting.L5tt_parameter_setup.hay_param_to_scp_neuron_param"]], "biophysics_fitting.l5tt_parameter_setup.hay_params_to_scp_neuron_params()": [[8, "biophysics_fitting.L5tt_parameter_setup.hay_params_to_scp_neuron_params"]], "biophysics_fitting.l5tt_parameter_setup": [[9, "module-biophysics_fitting.L5tt_parameter_setup"]], "biophysics_fitting.l5tt_parameter_setup.set_ephys()": [[10, "biophysics_fitting.L5tt_parameter_setup.set_ephys"]], "biophysics_fitting.l5tt_parameter_setup.set_hot_zone()": [[11, "biophysics_fitting.L5tt_parameter_setup.set_hot_zone"]], "biophysics_fitting.l5tt_parameter_setup.set_many_param()": [[12, "biophysics_fitting.L5tt_parameter_setup.set_many_param"]], "biophysics_fitting.l5tt_parameter_setup.set_morphology()": [[13, "biophysics_fitting.L5tt_parameter_setup.set_morphology"]], "biophysics_fitting.l5tt_parameter_setup.set_param()": [[14, "biophysics_fitting.L5tt_parameter_setup.set_param"]], "biophysics_fitting.combiner.combiner (built-in class)": [[15, "biophysics_fitting.combiner.Combiner"]], "setup (biophysics_fitting.combiner.combiner attribute)": [[15, "biophysics_fitting.combiner.Combiner.setup"]], "combine() (biophysics_fitting.combiner.combiner method)": [[16, "biophysics_fitting.combiner.Combiner.combine"]], "biophysics_fitting.combiner.combiner_setup (built-in class)": [[17, "biophysics_fitting.combiner.Combiner_Setup"]], "append() (biophysics_fitting.combiner.combiner_setup method)": [[18, "biophysics_fitting.combiner.Combiner_Setup.append"]], "biophysics_fitting.combiner": [[19, "module-biophysics_fitting.combiner"]], "biophysics_fitting.connected_to_dend_beyond()": [[20, "biophysics_fitting.connected_to_dend_beyond"]], "biophysics_fitting.ephys.ahp_depth_abs()": [[21, "biophysics_fitting.ephys.AHP_depth_abs"]], "biophysics_fitting.ephys.ahp_depth_abs_check_2ap()": [[22, "biophysics_fitting.ephys.AHP_depth_abs_check_2AP"]], "biophysics_fitting.ephys.ap_height()": [[23, "biophysics_fitting.ephys.AP_height"]], "biophysics_fitting.ephys.ap_height_check_1ap()": [[24, "biophysics_fitting.ephys.AP_height_check_1AP"]], "biophysics_fitting.ephys.ap_width()": [[25, "biophysics_fitting.ephys.AP_width"]], "biophysics_fitting.ephys.bac_isi()": [[26, "biophysics_fitting.ephys.BAC_ISI"]], "biophysics_fitting.ephys.bac_isi_check_2_or_3_aps()": [[27, "biophysics_fitting.ephys.BAC_ISI_check_2_or_3_APs"]], "biophysics_fitting.ephys.bac_isi_check_repolarization()": [[28, "biophysics_fitting.ephys.BAC_ISI_check_repolarization"]], "biophysics_fitting.ephys.bac_caspike_height()": [[29, "biophysics_fitting.ephys.BAC_caSpike_height"]], "biophysics_fitting.ephys.bac_caspike_height_check_1_ca_ap()": [[30, "biophysics_fitting.ephys.BAC_caSpike_height_check_1_Ca_AP"]], "biophysics_fitting.ephys.bac_caspike_height_check_ca_spikes_after_na_spike()": [[31, "biophysics_fitting.ephys.BAC_caSpike_height_check_Ca_spikes_after_Na_spike"]], "biophysics_fitting.ephys.bac_caspike_height_check_gt2_na_spikes()": [[32, "biophysics_fitting.ephys.BAC_caSpike_height_check_gt2_Na_spikes"]], "biophysics_fitting.ephys.bac_caspike_width()": [[33, "biophysics_fitting.ephys.BAC_caSpike_width"]], "biophysics_fitting.ephys.bpapatt()": [[34, "biophysics_fitting.ephys.BPAPatt"]], "biophysics_fitting.ephys.bpapatt_check_1_ap()": [[35, "biophysics_fitting.ephys.BPAPatt_check_1_AP"]], "biophysics_fitting.ephys.bpapatt_check_relative_height()": [[36, "biophysics_fitting.ephys.BPAPatt_check_relative_height"]], "biophysics_fitting.ephys.step_adaptation_index()": [[37, "biophysics_fitting.ephys.STEP_adaptation_index"]], "biophysics_fitting.ephys.step_check_2_isis()": [[38, "biophysics_fitting.ephys.STEP_check_2_ISIs"]], "biophysics_fitting.ephys.step_coef_var()": [[39, "biophysics_fitting.ephys.STEP_coef_var"]], "biophysics_fitting.ephys.step_fast_ahp_depth()": [[40, "biophysics_fitting.ephys.STEP_fast_ahp_depth"]], "biophysics_fitting.ephys.step_initial_isi()": [[41, "biophysics_fitting.ephys.STEP_initial_ISI"]], "biophysics_fitting.ephys.step_mean_frequency()": [[42, "biophysics_fitting.ephys.STEP_mean_frequency"]], "biophysics_fitting.ephys.step_slow_ahp_depth()": [[43, "biophysics_fitting.ephys.STEP_slow_ahp_depth"]], "biophysics_fitting.ephys.step_slow_ahp_time()": [[44, "biophysics_fitting.ephys.STEP_slow_ahp_time"]], "biophysics_fitting.ephys.step_time_to_first_spike()": [[45, "biophysics_fitting.ephys.STEP_time_to_first_spike"]], "biophysics_fitting.ephys.find_crossing()": [[46, "biophysics_fitting.ephys.find_crossing"]], "biophysics_fitting.ephys.find_crossing_old()": [[47, "biophysics_fitting.ephys.find_crossing_old"]], "biophysics_fitting.ephys": [[48, "module-biophysics_fitting.ephys"]], "biophysics_fitting.ephys.spike_count()": [[49, "biophysics_fitting.ephys.spike_count"]], "biophysics_fitting.ephys.trace_check()": [[50, "biophysics_fitting.ephys.trace_check"]], "biophysics_fitting.ephys.trace_check_err()": [[51, "biophysics_fitting.ephys.trace_check_err"]], "biophysics_fitting.ephys.trace_check_max_prestim_dendrite_depo()": [[52, "biophysics_fitting.ephys.trace_check_max_prestim_dendrite_depo"]], "biophysics_fitting.ephys.voltage_base()": [[53, "biophysics_fitting.ephys.voltage_base"]], "biophysics_fitting.ephys.voltage_base2()": [[54, "biophysics_fitting.ephys.voltage_base2"]], "biophysics_fitting.evaluator.evaluator (built-in class)": [[55, "biophysics_fitting.evaluator.Evaluator"]], "setup (biophysics_fitting.evaluator.evaluator attribute)": [[55, "biophysics_fitting.evaluator.Evaluator.setup"]], "evaluate() (biophysics_fitting.evaluator.evaluator method)": [[56, "biophysics_fitting.evaluator.Evaluator.evaluate"]], "biophysics_fitting.evaluator.evaluator_setup (built-in class)": [[57, "biophysics_fitting.evaluator.Evaluator_Setup"]], "evaluate_funs (biophysics_fitting.evaluator.evaluator_setup attribute)": [[57, "biophysics_fitting.evaluator.Evaluator_Setup.evaluate_funs"]], "finalize_funs (biophysics_fitting.evaluator.evaluator_setup attribute)": [[57, "biophysics_fitting.evaluator.Evaluator_Setup.finalize_funs"]], "pre_funs (biophysics_fitting.evaluator.evaluator_setup attribute)": [[57, "biophysics_fitting.evaluator.Evaluator_Setup.pre_funs"]], "biophysics_fitting.evaluator": [[58, "module-biophysics_fitting.evaluator"]], "main_directory (biophysics_fitting.exploration_from_seedpoint.rw.rw attribute)": [[59, "biophysics_fitting.exploration_from_seedpoint.RW.RW.MAIN_DIRECTORY"]], "aim_params (biophysics_fitting.exploration_from_seedpoint.rw.rw attribute)": [[59, "biophysics_fitting.exploration_from_seedpoint.RW.RW.aim_params"]], "biophysics_fitting.exploration_from_seedpoint.rw.rw (built-in class)": [[59, "biophysics_fitting.exploration_from_seedpoint.RW.RW"]], "checkpoint_by_time (biophysics_fitting.exploration_from_seedpoint.rw.rw attribute)": [[59, "biophysics_fitting.exploration_from_seedpoint.RW.RW.checkpoint_by_time"]], "checkpoint_every (biophysics_fitting.exploration_from_seedpoint.rw.rw attribute)": [[59, "biophysics_fitting.exploration_from_seedpoint.RW.RW.checkpoint_every"]], "concat_every_n_save (biophysics_fitting.exploration_from_seedpoint.rw.rw attribute)": [[59, "biophysics_fitting.exploration_from_seedpoint.RW.RW.concat_every_n_save"]], "df_seeds (biophysics_fitting.exploration_from_seedpoint.rw.rw attribute)": [[59, "biophysics_fitting.exploration_from_seedpoint.RW.RW.df_seeds"]], "evaluation_function (biophysics_fitting.exploration_from_seedpoint.rw.rw attribute)": [[59, "biophysics_fitting.exploration_from_seedpoint.RW.RW.evaluation_function"]], "max_step_size (biophysics_fitting.exploration_from_seedpoint.rw.rw attribute)": [[59, "biophysics_fitting.exploration_from_seedpoint.RW.RW.max_step_size"]], "min_step_size (biophysics_fitting.exploration_from_seedpoint.rw.rw attribute)": [[59, "biophysics_fitting.exploration_from_seedpoint.RW.RW.min_step_size"]], "mode (biophysics_fitting.exploration_from_seedpoint.rw.rw attribute)": [[59, "biophysics_fitting.exploration_from_seedpoint.RW.RW.mode"]], "n_iterations (biophysics_fitting.exploration_from_seedpoint.rw.rw attribute)": [[59, "biophysics_fitting.exploration_from_seedpoint.RW.RW.n_iterations"]], "normalized_aim_params (biophysics_fitting.exploration_from_seedpoint.rw.rw attribute)": [[59, "biophysics_fitting.exploration_from_seedpoint.RW.RW.normalized_aim_params"]], "param_ranges (biophysics_fitting.exploration_from_seedpoint.rw.rw attribute)": [[59, "biophysics_fitting.exploration_from_seedpoint.RW.RW.param_ranges"]], "params_to_explore (biophysics_fitting.exploration_from_seedpoint.rw.rw attribute)": [[59, "biophysics_fitting.exploration_from_seedpoint.RW.RW.params_to_explore"]], "stop_n_inside_with_aim_params (biophysics_fitting.exploration_from_seedpoint.rw.rw attribute)": [[59, "biophysics_fitting.exploration_from_seedpoint.RW.RW.stop_n_inside_with_aim_params"]], "_clean_the_pickles() (biophysics_fitting.exploration_from_seedpoint.rw.rw method)": [[60, "biophysics_fitting.exploration_from_seedpoint.RW.RW._clean_the_pickles"]], "_concatenate_and_clean() (biophysics_fitting.exploration_from_seedpoint.rw.rw method)": [[61, "biophysics_fitting.exploration_from_seedpoint.RW.RW._concatenate_and_clean"]], "_load_pickle_or_parquet() (biophysics_fitting.exploration_from_seedpoint.rw.rw method)": [[62, "biophysics_fitting.exploration_from_seedpoint.RW.RW._load_pickle_or_parquet"]], "_normalize_aim_params() (biophysics_fitting.exploration_from_seedpoint.rw.rw method)": [[63, "biophysics_fitting.exploration_from_seedpoint.RW.RW._normalize_aim_params"]], "_normalize_params() (biophysics_fitting.exploration_from_seedpoint.rw.rw method)": [[64, "biophysics_fitting.exploration_from_seedpoint.RW.RW._normalize_params"]], "_unnormalize_params() (biophysics_fitting.exploration_from_seedpoint.rw.rw method)": [[65, "biophysics_fitting.exploration_from_seedpoint.RW.RW._unnormalize_params"]], "assess_aim_params_reached() (biophysics_fitting.exploration_from_seedpoint.rw.rw method)": [[66, "biophysics_fitting.exploration_from_seedpoint.RW.RW.assess_aim_params_reached"]], "run_rw() (biophysics_fitting.exploration_from_seedpoint.rw.rw method)": [[67, "biophysics_fitting.exploration_from_seedpoint.RW.RW.run_RW"]], "biophysics_fitting.exploration_from_seedpoint.rw": [[68, "module-biophysics_fitting.exploration_from_seedpoint.RW"]], "biophysics_fitting.exploration_from_seedpoint.rw_analysis.load (built-in class)": [[69, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.Load"]], "get_df() (biophysics_fitting.exploration_from_seedpoint.rw_analysis.load method)": [[70, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.Load.get_df"]], "get_futures() (biophysics_fitting.exploration_from_seedpoint.rw_analysis.load method)": [[71, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.Load.get_futures"]], "biophysics_fitting.exploration_from_seedpoint.rw_analysis.augment_ddf_with_pca_space()": [[72, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.augment_ddf_with_PCA_space"]], "biophysics_fitting.exploration_from_seedpoint.rw_analysis.get_depolarization_index()": [[73, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.get_depolarization_index"]], "biophysics_fitting.exploration_from_seedpoint.rw_analysis.get_hyperpolarization_index()": [[74, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.get_hyperpolarization_index"]], "biophysics_fitting.exploration_from_seedpoint.rw_analysis.get_index()": [[75, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.get_index"]], "biophysics_fitting.exploration_from_seedpoint.rw_analysis.get_inside_fraction()": [[76, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.get_inside_fraction"]], "biophysics_fitting.exploration_from_seedpoint.rw_analysis.get_param_range_evolution_from_ddf()": [[77, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.get_param_range_evolution_from_ddf"]], "biophysics_fitting.exploration_from_seedpoint.rw_analysis": [[78, "module-biophysics_fitting.exploration_from_seedpoint.RW_analysis"]], "biophysics_fitting.exploration_from_seedpoint.rw_analysis.normalize()": [[79, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.normalize"]], "biophysics_fitting.exploration_from_seedpoint.rw_analysis.pandas_binby()": [[80, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.pandas_binby"]], "biophysics_fitting.exploration_from_seedpoint.rw_analysis.read_all()": [[81, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.read_all"]], "biophysics_fitting.exploration_from_seedpoint.rw_analysis.read_parameters()": [[82, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.read_parameters"]], "biophysics_fitting.exploration_from_seedpoint.rw_analysis.read_pickle()": [[83, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.read_pickle"]], "biophysics_fitting.exploration_from_seedpoint.rw_analysis.robust_read_pickle()": [[84, "biophysics_fitting.exploration_from_seedpoint.RW_analysis.robust_read_pickle"]], "biophysics_fitting.exploration_from_seedpoint.evaluation_function_incremental_helper()": [[85, "biophysics_fitting.exploration_from_seedpoint.evaluation_function_incremental_helper"]], "biophysics_fitting.exploration_from_seedpoint": [[86, "module-biophysics_fitting.exploration_from_seedpoint"]], "biophysics_fitting.exploration_from_seedpoint.utils.convert_all_check_columns_bool_to_float()": [[87, "biophysics_fitting.exploration_from_seedpoint.utils.convert_all_check_columns_bool_to_float"]], "biophysics_fitting.exploration_from_seedpoint.utils.evaluation_function_incremental_helper()": [[88, "biophysics_fitting.exploration_from_seedpoint.utils.evaluation_function_incremental_helper"]], "biophysics_fitting.exploration_from_seedpoint.utils.get_vector_norm()": [[89, "biophysics_fitting.exploration_from_seedpoint.utils.get_vector_norm"]], "biophysics_fitting.exploration_from_seedpoint.utils": [[90, "module-biophysics_fitting.exploration_from_seedpoint.utils"]], "biophysics_fitting.get_branching_depth()": [[91, "biophysics_fitting.get_branching_depth"]], "biophysics_fitting.get_branching_depth_series()": [[92, "biophysics_fitting.get_branching_depth_series"]], "biophysics_fitting.get_first_order_bifurcation_sections()": [[93, "biophysics_fitting.get_first_order_bifurcation_sections"]], "biophysics_fitting.get_inner_sec_dist_list()": [[94, "biophysics_fitting.get_inner_sec_dist_list"]], "biophysics_fitting.get_main_bifurcation_section()": [[95, "biophysics_fitting.get_main_bifurcation_section"]], "biophysics_fitting.hay.default_setup.get_combiner()": [[96, "biophysics_fitting.hay.default_setup.get_Combiner"]], "biophysics_fitting.hay.default_setup.get_evaluator()": [[97, "biophysics_fitting.hay.default_setup.get_Evaluator"]], "biophysics_fitting.hay.default_setup.get_simulator()": [[98, "biophysics_fitting.hay.default_setup.get_Simulator"]], "biophysics_fitting.hay.default_setup.get_fixed_params_example()": [[99, "biophysics_fitting.hay.default_setup.get_fixed_params_example"]], "biophysics_fitting.hay.default_setup": [[100, "module-biophysics_fitting.hay.default_setup"]], "biophysics_fitting.hay.default_setup.interpolate_vt()": [[101, "biophysics_fitting.hay.default_setup.interpolate_vt"]], "biophysics_fitting.hay.default_setup.map_truefalse_to_str()": [[102, "biophysics_fitting.hay.default_setup.map_truefalse_to_str"]], "biophysics_fitting.hay.default_setup.record_bac()": [[103, "biophysics_fitting.hay.default_setup.record_BAC"]], "biophysics_fitting.hay.default_setup.record_step()": [[104, "biophysics_fitting.hay.default_setup.record_Step"]], "biophysics_fitting.hay.default_setup.record_bap()": [[105, "biophysics_fitting.hay.default_setup.record_bAP"]], "biophysics_fitting.hay.evaluation.bac (built-in class)": [[106, "biophysics_fitting.hay.evaluation.BAC"]], "ca_max_after_nth_somatic_spike (biophysics_fitting.hay.evaluation.bac attribute)": [[106, "biophysics_fitting.hay.evaluation.BAC.ca_max_after_nth_somatic_spike"]], "definitions (biophysics_fitting.hay.evaluation.bac attribute)": [[106, "biophysics_fitting.hay.evaluation.BAC.definitions"]], "hot_zone_thresh (biophysics_fitting.hay.evaluation.bac attribute)": [[106, "biophysics_fitting.hay.evaluation.BAC.hot_zone_thresh"]], "prefix (biophysics_fitting.hay.evaluation.bac attribute)": [[106, "biophysics_fitting.hay.evaluation.BAC.prefix"]], "punish (biophysics_fitting.hay.evaluation.bac attribute)": [[106, "biophysics_fitting.hay.evaluation.BAC.punish"]], "punish_last_spike_after_deadline (biophysics_fitting.hay.evaluation.bac attribute)": [[106, "biophysics_fitting.hay.evaluation.BAC.punish_last_spike_after_deadline"]], "punish_minspikenum (biophysics_fitting.hay.evaluation.bac attribute)": [[106, "biophysics_fitting.hay.evaluation.BAC.punish_minspikenum"]], "punish_returning_to_rest_tolerance (biophysics_fitting.hay.evaluation.bac attribute)": [[106, "biophysics_fitting.hay.evaluation.BAC.punish_returning_to_rest_tolerance"]], "repolarization (biophysics_fitting.hay.evaluation.bac attribute)": [[106, "biophysics_fitting.hay.evaluation.BAC.repolarization"]], "soma_thresh (biophysics_fitting.hay.evaluation.bac attribute)": [[106, "biophysics_fitting.hay.evaluation.BAC.soma_thresh"]], "stim_duration (biophysics_fitting.hay.evaluation.bac attribute)": [[106, "biophysics_fitting.hay.evaluation.BAC.stim_duration"]], "stim_onset (biophysics_fitting.hay.evaluation.bac attribute)": [[106, "biophysics_fitting.hay.evaluation.BAC.stim_onset"]], "bac_apheight() (biophysics_fitting.hay.evaluation.bac method)": [[107, "biophysics_fitting.hay.evaluation.BAC.BAC_APheight"]], "bac_isi() (biophysics_fitting.hay.evaluation.bac method)": [[108, "biophysics_fitting.hay.evaluation.BAC.BAC_ISI"]], "bac_ahpdepth() (biophysics_fitting.hay.evaluation.bac method)": [[109, "biophysics_fitting.hay.evaluation.BAC.BAC_ahpdepth"]], "bac_caspike_height() (biophysics_fitting.hay.evaluation.bac method)": [[110, "biophysics_fitting.hay.evaluation.BAC.BAC_caSpike_height"]], "bac_caspike_width() (biophysics_fitting.hay.evaluation.bac method)": [[111, "biophysics_fitting.hay.evaluation.BAC.BAC_caSpike_width"]], "bac_spikecount() (biophysics_fitting.hay.evaluation.bac method)": [[112, "biophysics_fitting.hay.evaluation.BAC.BAC_spikecount"]], "check() (biophysics_fitting.hay.evaluation.bac method)": [[113, "biophysics_fitting.hay.evaluation.BAC.check"]], "get() (biophysics_fitting.hay.evaluation.bac method)": [[114, "biophysics_fitting.hay.evaluation.BAC.get"]], "biophysics_fitting.hay.evaluation.stepone (built-in class)": [[115, "biophysics_fitting.hay.evaluation.StepOne"]], "biophysics_fitting.hay.evaluation.stepthree (built-in class)": [[116, "biophysics_fitting.hay.evaluation.StepThree"]], "biophysics_fitting.hay.evaluation.steptwo (built-in class)": [[117, "biophysics_fitting.hay.evaluation.StepTwo"]], "biophysics_fitting.hay.evaluation._step (built-in class)": [[118, "biophysics_fitting.hay.evaluation._Step"]], "definitions (biophysics_fitting.hay.evaluation._step attribute)": [[118, "biophysics_fitting.hay.evaluation._Step.definitions"]], "name (biophysics_fitting.hay.evaluation._step attribute)": [[118, "biophysics_fitting.hay.evaluation._Step.name"]], "prefix (biophysics_fitting.hay.evaluation._step attribute)": [[118, "biophysics_fitting.hay.evaluation._Step.prefix"]], "punish (biophysics_fitting.hay.evaluation._step attribute)": [[118, "biophysics_fitting.hay.evaluation._Step.punish"]], "punish_last_spike_after_deadline (biophysics_fitting.hay.evaluation._step attribute)": [[118, "biophysics_fitting.hay.evaluation._Step.punish_last_spike_after_deadline"]], "punish_minspikenum (biophysics_fitting.hay.evaluation._step attribute)": [[118, "biophysics_fitting.hay.evaluation._Step.punish_minspikenum"]], "punish_returning_to_rest_tolerance (biophysics_fitting.hay.evaluation._step attribute)": [[118, "biophysics_fitting.hay.evaluation._Step.punish_returning_to_rest_tolerance"]], "soma_thresh (biophysics_fitting.hay.evaluation._step attribute)": [[118, "biophysics_fitting.hay.evaluation._Step.soma_thresh"]], "step_index (biophysics_fitting.hay.evaluation._step attribute)": [[118, "biophysics_fitting.hay.evaluation._Step.step_index"]], "stim_duration (biophysics_fitting.hay.evaluation._step attribute)": [[118, "biophysics_fitting.hay.evaluation._Step.stim_duration"]], "stim_onset (biophysics_fitting.hay.evaluation._step attribute)": [[118, "biophysics_fitting.hay.evaluation._Step.stim_onset"]], "ahp_depth_abs() (biophysics_fitting.hay.evaluation._step method)": [[119, "biophysics_fitting.hay.evaluation._Step.AHP_depth_abs"]], "ai() (biophysics_fitting.hay.evaluation._step method)": [[120, "biophysics_fitting.hay.evaluation._Step.AI"]], "aph() (biophysics_fitting.hay.evaluation._step method)": [[121, "biophysics_fitting.hay.evaluation._Step.APh"]], "apw() (biophysics_fitting.hay.evaluation._step method)": [[122, "biophysics_fitting.hay.evaluation._Step.APw"]], "di() (biophysics_fitting.hay.evaluation._step method)": [[123, "biophysics_fitting.hay.evaluation._Step.DI"]], "isicv() (biophysics_fitting.hay.evaluation._step method)": [[124, "biophysics_fitting.hay.evaluation._Step.ISIcv"]], "ttfs() (biophysics_fitting.hay.evaluation._step method)": [[125, "biophysics_fitting.hay.evaluation._Step.TTFS"]], "check() (biophysics_fitting.hay.evaluation._step method)": [[126, "biophysics_fitting.hay.evaluation._Step.check"]], "fahpd() (biophysics_fitting.hay.evaluation._step method)": [[127, "biophysics_fitting.hay.evaluation._Step.fAHPd"]], "get() (biophysics_fitting.hay.evaluation._step method)": [[128, "biophysics_fitting.hay.evaluation._Step.get"]], "mf() (biophysics_fitting.hay.evaluation._step method)": [[129, "biophysics_fitting.hay.evaluation._Step.mf"]], "sahpd() (biophysics_fitting.hay.evaluation._step method)": [[130, "biophysics_fitting.hay.evaluation._Step.sAHPd"]], "sahpt() (biophysics_fitting.hay.evaluation._step method)": [[131, "biophysics_fitting.hay.evaluation._Step.sAHPt"]], "bap_thresh (biophysics_fitting.hay.evaluation.bap attribute)": [[132, "biophysics_fitting.hay.evaluation.bAP.bAP_thresh"]], "biophysics_fitting.hay.evaluation.bap (built-in class)": [[132, "biophysics_fitting.hay.evaluation.bAP"]], "definitions (biophysics_fitting.hay.evaluation.bap attribute)": [[132, "biophysics_fitting.hay.evaluation.bAP.definitions"]], "punish (biophysics_fitting.hay.evaluation.bap attribute)": [[132, "biophysics_fitting.hay.evaluation.bAP.punish"]], "punish_last_spike_after_deadline (biophysics_fitting.hay.evaluation.bap attribute)": [[132, "biophysics_fitting.hay.evaluation.bAP.punish_last_spike_after_deadline"]], "punish_minspikenum (biophysics_fitting.hay.evaluation.bap attribute)": [[132, "biophysics_fitting.hay.evaluation.bAP.punish_minspikenum"]], "punish_returning_to_rest_tolerance (biophysics_fitting.hay.evaluation.bap attribute)": [[132, "biophysics_fitting.hay.evaluation.bAP.punish_returning_to_rest_tolerance"]], "soma_thresh (biophysics_fitting.hay.evaluation.bap attribute)": [[132, "biophysics_fitting.hay.evaluation.bAP.soma_thresh"]], "stim_duration (biophysics_fitting.hay.evaluation.bap attribute)": [[132, "biophysics_fitting.hay.evaluation.bAP.stim_duration"]], "stim_onset (biophysics_fitting.hay.evaluation.bap attribute)": [[132, "biophysics_fitting.hay.evaluation.bAP.stim_onset"]], "_bap_att() (biophysics_fitting.hay.evaluation.bap method)": [[133, "biophysics_fitting.hay.evaluation.bAP._bAP_att"]], "bap_apheight() (biophysics_fitting.hay.evaluation.bap method)": [[134, "biophysics_fitting.hay.evaluation.bAP.bAP_APheight"]], "bap_apwidth() (biophysics_fitting.hay.evaluation.bap method)": [[135, "biophysics_fitting.hay.evaluation.bAP.bAP_APwidth"]], "bap_att2() (biophysics_fitting.hay.evaluation.bap method)": [[136, "biophysics_fitting.hay.evaluation.bAP.bAP_att2"]], "bap_att3() (biophysics_fitting.hay.evaluation.bap method)": [[137, "biophysics_fitting.hay.evaluation.bAP.bAP_att3"]], "bap_spikecount() (biophysics_fitting.hay.evaluation.bap method)": [[138, "biophysics_fitting.hay.evaluation.bAP.bAP_spikecount"]], "check() (biophysics_fitting.hay.evaluation.bap method)": [[139, "biophysics_fitting.hay.evaluation.bAP.check"]], "get() (biophysics_fitting.hay.evaluation.bap method)": [[140, "biophysics_fitting.hay.evaluation.bAP.get"]], "biophysics_fitting.hay.evaluation.get_evaluate_bac()": [[141, "biophysics_fitting.hay.evaluation.get_evaluate_BAC"]], "biophysics_fitting.hay.evaluation.get_evaluate_stepone()": [[142, "biophysics_fitting.hay.evaluation.get_evaluate_StepOne"]], "biophysics_fitting.hay.evaluation.get_evaluate_stepthree()": [[143, "biophysics_fitting.hay.evaluation.get_evaluate_StepThree"]], "biophysics_fitting.hay.evaluation.get_evaluate_steptwo()": [[144, "biophysics_fitting.hay.evaluation.get_evaluate_StepTwo"]], "biophysics_fitting.hay.evaluation.get_evaluate_bap()": [[145, "biophysics_fitting.hay.evaluation.get_evaluate_bAP"]], "biophysics_fitting.hay.evaluation.hay_evaluate_bac()": [[146, "biophysics_fitting.hay.evaluation.hay_evaluate_BAC"]], "biophysics_fitting.hay.evaluation.hay_evaluate_stepone()": [[147, "biophysics_fitting.hay.evaluation.hay_evaluate_StepOne"]], "biophysics_fitting.hay.evaluation.hay_evaluate_stepthree()": [[148, "biophysics_fitting.hay.evaluation.hay_evaluate_StepThree"]], "biophysics_fitting.hay.evaluation.hay_evaluate_steptwo()": [[149, "biophysics_fitting.hay.evaluation.hay_evaluate_StepTwo"]], "biophysics_fitting.hay.evaluation.hay_evaluate_bap()": [[150, "biophysics_fitting.hay.evaluation.hay_evaluate_bAP"]], "biophysics_fitting.hay.evaluation": [[151, "module-biophysics_fitting.hay.evaluation"]], "biophysics_fitting.hay.evaluation.nan_if_error()": [[152, "biophysics_fitting.hay.evaluation.nan_if_error"]], "biophysics_fitting.hay.evaluation.normalize()": [[153, "biophysics_fitting.hay.evaluation.normalize"]], "biophysics_fitting.hay": [[154, "module-biophysics_fitting.hay"]], "biophysics_fitting.hay.specification.get_feasible_model_objectives()": [[155, "biophysics_fitting.hay.specification.get_feasible_model_objectives"]], "biophysics_fitting.hay.specification.get_feasible_model_params()": [[156, "biophysics_fitting.hay.specification.get_feasible_model_params"]], "biophysics_fitting.hay.specification.get_hay_objective_names()": [[157, "biophysics_fitting.hay.specification.get_hay_objective_names"]], "biophysics_fitting.hay.specification.get_hay_param_names()": [[158, "biophysics_fitting.hay.specification.get_hay_param_names"]], "biophysics_fitting.hay.specification.get_hay_params_pdf()": [[159, "biophysics_fitting.hay.specification.get_hay_params_pdf"]], "biophysics_fitting.hay.specification.get_hay_problem_description()": [[160, "biophysics_fitting.hay.specification.get_hay_problem_description"]], "biophysics_fitting.hay.specification": [[161, "module-biophysics_fitting.hay.specification"]], "biophysics_fitting": [[162, "module-biophysics_fitting"]], "biophysics_fitting.model_selection.get_model_pdf_from_db()": [[163, "biophysics_fitting.model_selection.get_model_pdf_from_db"]], "biophysics_fitting.model_selection.get_pdf_selected()": [[164, "biophysics_fitting.model_selection.get_pdf_selected"]], "biophysics_fitting.model_selection": [[165, "module-biophysics_fitting.model_selection"]], "biophysics_fitting.optimizer._evaluate_invalid_fitness()": [[166, "biophysics_fitting.optimizer._evaluate_invalid_fitness"]], "biophysics_fitting.optimizer._get_offspring()": [[167, "biophysics_fitting.optimizer._get_offspring"]], "biophysics_fitting.optimizer._record_stats()": [[168, "biophysics_fitting.optimizer._record_stats"]], "biophysics_fitting.optimizer._update_history_and_hof()": [[169, "biophysics_fitting.optimizer._update_history_and_hof"]], "biophysics_fitting.optimizer.eaalphamupluslambdacheckpoint()": [[170, "biophysics_fitting.optimizer.eaAlphaMuPlusLambdaCheckpoint"]], "biophysics_fitting.optimizer.get_max_generation()": [[171, "biophysics_fitting.optimizer.get_max_generation"]], "biophysics_fitting.optimizer.get_mymap()": [[172, "biophysics_fitting.optimizer.get_mymap"]], "biophysics_fitting.optimizer.get_objective_function()": [[173, "biophysics_fitting.optimizer.get_objective_function"]], "biophysics_fitting.optimizer.get_population_with_different_n_objectives()": [[174, "biophysics_fitting.optimizer.get_population_with_different_n_objectives"]], "biophysics_fitting.optimizer": [[175, "module-biophysics_fitting.optimizer"]], "biophysics_fitting.optimizer.robust_int()": [[176, "biophysics_fitting.optimizer.robust_int"]], "biophysics_fitting.optimizer.run()": [[177, "biophysics_fitting.optimizer.run"]], "biophysics_fitting.optimizer.save_result()": [[178, "biophysics_fitting.optimizer.save_result"]], "biophysics_fitting.optimizer.setup_db_run()": [[179, "biophysics_fitting.optimizer.setup_db_run"]], "biophysics_fitting.optimizer.start_run()": [[180, "biophysics_fitting.optimizer.start_run"]], "biophysics_fitting.parameters": [[181, "module-biophysics_fitting.parameters"]], "biophysics_fitting.parameters.param_selector()": [[182, "biophysics_fitting.parameters.param_selector"]], "biophysics_fitting.parameters.param_to_kwargs()": [[183, "biophysics_fitting.parameters.param_to_kwargs"]], "biophysics_fitting.parameters.set_fixed_params()": [[184, "biophysics_fitting.parameters.set_fixed_params"]], "biophysics_fitting.setup_stim._append()": [[185, "biophysics_fitting.setup_stim._append"]], "biophysics_fitting.setup_stim": [[186, "module-biophysics_fitting.setup_stim"]], "biophysics_fitting.setup_stim.setup_bac()": [[187, "biophysics_fitting.setup_stim.setup_BAC"]], "biophysics_fitting.setup_stim.setup_stepone()": [[188, "biophysics_fitting.setup_stim.setup_StepOne"]], "biophysics_fitting.setup_stim.setup_stepthree()": [[189, "biophysics_fitting.setup_stim.setup_StepThree"]], "biophysics_fitting.setup_stim.setup_steptwo()": [[190, "biophysics_fitting.setup_stim.setup_StepTwo"]], "biophysics_fitting.setup_stim.setup_apical_epsp_injection()": [[191, "biophysics_fitting.setup_stim.setup_apical_epsp_injection"]], "biophysics_fitting.setup_stim.setup_bap()": [[192, "biophysics_fitting.setup_stim.setup_bAP"]], "biophysics_fitting.setup_stim.setup_soma_step()": [[193, "biophysics_fitting.setup_stim.setup_soma_step"]], "biophysics_fitting.simulator.simulator (built-in class)": [[194, "biophysics_fitting.simulator.Simulator"]], "setup (biophysics_fitting.simulator.simulator attribute)": [[194, "biophysics_fitting.simulator.Simulator.setup"]], "get_simulated_cell() (biophysics_fitting.simulator.simulator method)": [[195, "biophysics_fitting.simulator.Simulator.get_simulated_cell"]], "run() (biophysics_fitting.simulator.simulator method)": [[196, "biophysics_fitting.simulator.Simulator.run"]], "biophysics_fitting.simulator.simulator_setup (built-in class)": [[197, "biophysics_fitting.simulator.Simulator_Setup"]], "cell_generator (biophysics_fitting.simulator.simulator_setup attribute)": [[197, "biophysics_fitting.simulator.Simulator_Setup.cell_generator"]], "cell_modify_funs (biophysics_fitting.simulator.simulator_setup attribute)": [[197, "biophysics_fitting.simulator.Simulator_Setup.cell_modify_funs"]], "cell_param_generator (biophysics_fitting.simulator.simulator_setup attribute)": [[197, "biophysics_fitting.simulator.Simulator_Setup.cell_param_generator"]], "cell_param_modify_funs (biophysics_fitting.simulator.simulator_setup attribute)": [[197, "biophysics_fitting.simulator.Simulator_Setup.cell_param_modify_funs"]], "check_funs (biophysics_fitting.simulator.simulator_setup attribute)": [[197, "biophysics_fitting.simulator.Simulator_Setup.check_funs"]], "params_modify_funs (biophysics_fitting.simulator.simulator_setup attribute)": [[197, "biophysics_fitting.simulator.Simulator_Setup.params_modify_funs"]], "stim_response_measure_funs (biophysics_fitting.simulator.simulator_setup attribute)": [[197, "biophysics_fitting.simulator.Simulator_Setup.stim_response_measure_funs"]], "stim_run_funs (biophysics_fitting.simulator.simulator_setup attribute)": [[197, "biophysics_fitting.simulator.Simulator_Setup.stim_run_funs"]], "stim_setup_funs (biophysics_fitting.simulator.simulator_setup attribute)": [[197, "biophysics_fitting.simulator.Simulator_Setup.stim_setup_funs"]], "_check_first_element_of_name_is_the_same() (biophysics_fitting.simulator.simulator_setup method)": [[198, "biophysics_fitting.simulator.Simulator_Setup._check_first_element_of_name_is_the_same"]], "_check_not_none() (biophysics_fitting.simulator.simulator_setup method)": [[199, "biophysics_fitting.simulator.Simulator_Setup._check_not_none"]], "check() (biophysics_fitting.simulator.simulator_setup method)": [[200, "biophysics_fitting.simulator.Simulator_Setup.check"]], "get() (biophysics_fitting.simulator.simulator_setup method)": [[201, "biophysics_fitting.simulator.Simulator_Setup.get"]], "get_cell_params() (biophysics_fitting.simulator.simulator_setup method)": [[202, "biophysics_fitting.simulator.Simulator_Setup.get_cell_params"]], "get_cell_params_with_default_sim_prams() (biophysics_fitting.simulator.simulator_setup method)": [[203, "biophysics_fitting.simulator.Simulator_Setup.get_cell_params_with_default_sim_prams"]], "get_params() (biophysics_fitting.simulator.simulator_setup method)": [[204, "biophysics_fitting.simulator.Simulator_Setup.get_params"]], "get_stim_response_measure_fun() (biophysics_fitting.simulator.simulator_setup method)": [[205, "biophysics_fitting.simulator.Simulator_Setup.get_stim_response_measure_fun"]], "get_stim_run_fun_by_stim() (biophysics_fitting.simulator.simulator_setup method)": [[206, "biophysics_fitting.simulator.Simulator_Setup.get_stim_run_fun_by_stim"]], "get_stim_setup_fun_by_stim() (biophysics_fitting.simulator.simulator_setup method)": [[207, "biophysics_fitting.simulator.Simulator_Setup.get_stim_setup_fun_by_stim"]], "get_stims() (biophysics_fitting.simulator.simulator_setup method)": [[208, "biophysics_fitting.simulator.Simulator_Setup.get_stims"]], "biophysics_fitting.simulator": [[209, "module-biophysics_fitting.simulator"]], "biophysics_fitting.simulator.run_fun()": [[210, "biophysics_fitting.simulator.run_fun"]], "biophysics_fitting.utils.undemonize (built-in class)": [[211, "biophysics_fitting.utils.Undemonize"]], "biophysics_fitting.utils.variablethatdoesnotgetpickled (built-in class)": [[212, "biophysics_fitting.utils.VariableThatDoesNotGetPickled"]], "biophysics_fitting.utils._get_apical_sec_and_i_at_distance()": [[213, "biophysics_fitting.utils._get_apical_sec_and_i_at_distance"]], "biophysics_fitting.utils.augment_cell_with_detailed_labels()": [[214, "biophysics_fitting.utils.augment_cell_with_detailed_labels"]], "biophysics_fitting.utils.connected_to_structure_beyond()": [[215, "biophysics_fitting.utils.connected_to_structure_beyond"]], "biophysics_fitting.utils.execute_in_child_process()": [[216, "biophysics_fitting.utils.execute_in_child_process"]], "biophysics_fitting.utils.execute_in_child_process_kept_alive()": [[217, "biophysics_fitting.utils.execute_in_child_process_kept_alive"]], "biophysics_fitting.utils.get_inner_sec_dist_dict()": [[218, "biophysics_fitting.utils.get_inner_sec_dist_dict"]], "biophysics_fitting.utils.get_inner_section_at_distance()": [[219, "biophysics_fitting.utils.get_inner_section_at_distance"]], "biophysics_fitting.utils.get_main_bifurcation_section()": [[220, "biophysics_fitting.utils.get_main_bifurcation_section"]], "biophysics_fitting.utils": [[221, "module-biophysics_fitting.utils"]], "biophysics_fitting.utils.pool_helper()": [[222, "biophysics_fitting.utils.pool_helper"]], "biophysics_fitting.utils.run_cloudpickled_remotely()": [[223, "biophysics_fitting.utils.run_cloudpickled_remotely"]], "biophysics_fitting.utils.tvec()": [[224, "biophysics_fitting.utils.tVec"]], "biophysics_fitting.utils.vmapical()": [[225, "biophysics_fitting.utils.vmApical"]], "biophysics_fitting.utils.vmapical_position()": [[226, "biophysics_fitting.utils.vmApical_position"]], "biophysics_fitting.utils.vmmax()": [[227, "biophysics_fitting.utils.vmMax"]], "biophysics_fitting.utils.vmsoma()": [[228, "biophysics_fitting.utils.vmSoma"]], "data_base.io": [[229, "module-data_base.IO"]], "data_base.analyze": [[230, "module-data_base.analyze"]], "data_base.analyze.spatiotemporal_binning": [[231, "module-data_base.analyze.spatiotemporal_binning"]], "data_base.analyze.spatiotemporal_binning.universal()": [[232, "data_base.analyze.spatiotemporal_binning.universal"]], "data_base.analyze.spatiotemporal_binning.universal_pd()": [[233, "data_base.analyze.spatiotemporal_binning.universal_pd"]], "data_base.analyze.spike_detection._helper()": [[234, "data_base.analyze.spike_detection._helper"]], "data_base.analyze.spike_detection": [[235, "module-data_base.analyze.spike_detection"]], "data_base.analyze.spike_detection.spike_detection()": [[236, "data_base.analyze.spike_detection.spike_detection"]], "data_base.analyze.spike_detection.spike_in_interval()": [[237, "data_base.analyze.spike_detection.spike_in_interval"]], "data_base.analyze.split_synapse_activation()": [[238, "data_base.analyze.split_synapse_activation"]], "data_base.analyze.temporal_binning": [[239, "module-data_base.analyze.temporal_binning"]], "data_base.analyze.temporal_binning.temporal_binning_dask()": [[240, "data_base.analyze.temporal_binning.temporal_binning_dask"]], "data_base.analyze.temporal_binning.temporal_binning_pd()": [[241, "data_base.analyze.temporal_binning.temporal_binning_pd"]], "data_base.analyze.temporal_binning.universal()": [[242, "data_base.analyze.temporal_binning.universal"]], "data_base.analyze.voltage_binning.calculate_vdensity_array()": [[243, "data_base.analyze.voltage_binning.calculate_vdensity_array"]], "data_base.analyze.voltage_binning.calculate_vdensity_array_dask()": [[244, "data_base.analyze.voltage_binning.calculate_vdensity_array_dask"]], "data_base.analyze.voltage_binning.calculate_vdensity_array_pd()": [[245, "data_base.analyze.voltage_binning.calculate_vdensity_array_pd"]], "data_base.analyze.voltage_binning.calculate_vdensity_array_pixelobject()": [[246, "data_base.analyze.voltage_binning.calculate_vdensity_array_pixelObject"]], "data_base.analyze.voltage_binning.get_bins()": [[247, "data_base.analyze.voltage_binning.get_bins"]], "data_base.analyze.voltage_binning": [[248, "module-data_base.analyze.voltage_binning"]], "data_base.data_base.database (built-in class)": [[249, "data_base.data_base.DataBase"]], "data_base.data_base._is_legacy_model_data_base()": [[250, "data_base.data_base._is_legacy_model_data_base"]], "data_base.data_base._make_mdb_forwards_compatible()": [[251, "data_base.data_base._make_mdb_forwards_compatible"]], "data_base.data_base.get_db_by_unique_id()": [[252, "data_base.data_base.get_db_by_unique_id"]], "data_base.data_base": [[253, "module-data_base.data_base"]], "data_base.data_base.is_data_base()": [[254, "data_base.data_base.is_data_base"]], "data_base.data_base.is_isf_data_base()": [[255, "data_base.data_base.is_isf_data_base"]], "data_base.data_base.is_sub_data_base()": [[256, "data_base.data_base.is_sub_data_base"]], "data_base.data_base.is_sub_isf_data_base()": [[257, "data_base.data_base.is_sub_isf_data_base"]], "data_base.data_base.is_sub_model_data_base()": [[258, "data_base.data_base.is_sub_model_data_base"]], "data_base.data_base_register.databaseregister (built-in class)": [[259, "data_base.data_base_register.DataBaseRegister"]], "registry (data_base.data_base_register.databaseregister attribute)": [[259, "data_base.data_base_register.DataBaseRegister.registry"]], "registry_basedir (data_base.data_base_register.databaseregister attribute)": [[259, "data_base.data_base_register.DataBaseRegister.registry_basedir"]], "add_db() (data_base.data_base_register.databaseregister method)": [[260, "data_base.data_base_register.DataBaseRegister.add_db"]], "keys() (data_base.data_base_register.databaseregister method)": [[261, "data_base.data_base_register.DataBaseRegister.keys"]], "search_dbs() (data_base.data_base_register.databaseregister method)": [[262, "data_base.data_base_register.DataBaseRegister.search_dbs"]], "data_base.data_base_register._get_db_register()": [[263, "data_base.data_base_register._get_db_register"]], "data_base.data_base_register.assimilate_remote_register()": [[264, "data_base.data_base_register.assimilate_remote_register"]], "data_base.data_base_register.deregister_db()": [[265, "data_base.data_base_register.deregister_db"]], "data_base.data_base_register": [[266, "module-data_base.data_base_register"]], "data_base.data_base_register.register_db()": [[267, "data_base.data_base_register.register_db"]], "data_base.db_initializers": [[268, "module-data_base.db_initializers"]], "data_base.db_initializers.load_simrun_general.add_dendritic_spike_times()": [[269, "data_base.db_initializers.load_simrun_general.add_dendritic_spike_times"]], "data_base.db_initializers.load_simrun_general.add_dendritic_voltage_traces()": [[270, "data_base.db_initializers.load_simrun_general.add_dendritic_voltage_traces"]], "data_base.db_initializers.load_simrun_general.builders._build_core()": [[271, "data_base.db_initializers.load_simrun_general.builders._build_core"]], "data_base.db_initializers.load_simrun_general.builders._build_dendritic_voltage_traces()": [[272, "data_base.db_initializers.load_simrun_general.builders._build_dendritic_voltage_traces"]], "data_base.db_initializers.load_simrun_general.builders._build_param_files()": [[273, "data_base.db_initializers.load_simrun_general.builders._build_param_files"]], "data_base.db_initializers.load_simrun_general.builders._build_synapse_activation()": [[274, "data_base.db_initializers.load_simrun_general.builders._build_synapse_activation"]], "data_base.db_initializers.load_simrun_general.builders._get_rec_site_managers()": [[275, "data_base.db_initializers.load_simrun_general.builders._get_rec_site_managers"]], "data_base.db_initializers.load_simrun_general.builders": [[276, "module-data_base.db_initializers.load_simrun_general.builders"]], "data_base.db_initializers.load_simrun_general.data_parsing": [[277, "module-data_base.db_initializers.load_simrun_general.data_parsing"]], "data_base.db_initializers.load_simrun_general.data_parsing.load_dendritic_voltage_traces()": [[278, "data_base.db_initializers.load_simrun_general.data_parsing.load_dendritic_voltage_traces"]], "data_base.db_initializers.load_simrun_general.data_parsing.load_dendritic_voltage_traces_helper()": [[279, "data_base.db_initializers.load_simrun_general.data_parsing.load_dendritic_voltage_traces_helper"]], "data_base.db_initializers.load_simrun_general.data_parsing.read_voltage_traces_by_filenames()": [[280, "data_base.db_initializers.load_simrun_general.data_parsing.read_voltage_traces_by_filenames"]], "data_base.db_initializers.load_simrun_general.data_parsing.read_voltage_traces_from_csv()": [[281, "data_base.db_initializers.load_simrun_general.data_parsing.read_voltage_traces_from_csv"]], "data_base.db_initializers.load_simrun_general.data_parsing.read_voltage_traces_from_file()": [[282, "data_base.db_initializers.load_simrun_general.data_parsing.read_voltage_traces_from_file"]], "data_base.db_initializers.load_simrun_general.data_parsing.read_voltage_traces_from_files_pandas()": [[283, "data_base.db_initializers.load_simrun_general.data_parsing.read_voltage_traces_from_files_pandas"]], "data_base.db_initializers.load_simrun_general.data_parsing.read_voltage_traces_from_npz()": [[284, "data_base.db_initializers.load_simrun_general.data_parsing.read_voltage_traces_from_npz"]], "data_base.db_initializers.load_simrun_general.file_handling.get_file()": [[285, "data_base.db_initializers.load_simrun_general.file_handling.get_file"]], "data_base.db_initializers.load_simrun_general.file_handling.get_max_commas()": [[286, "data_base.db_initializers.load_simrun_general.file_handling.get_max_commas"]], "data_base.db_initializers.load_simrun_general.file_handling": [[287, "module-data_base.db_initializers.load_simrun_general.file_handling"]], "data_base.db_initializers.load_simrun_general.file_handling.make_filelist()": [[288, "data_base.db_initializers.load_simrun_general.file_handling.make_filelist"]], "data_base.db_initializers.load_simrun_general.filepath_resolution._convert_con_fns_to_reldb()": [[289, "data_base.db_initializers.load_simrun_general.filepath_resolution._convert_con_fns_to_reldb"]], "data_base.db_initializers.load_simrun_general.filepath_resolution._convert_netp_fns_to_reldb()": [[290, "data_base.db_initializers.load_simrun_general.filepath_resolution._convert_netp_fns_to_reldb"]], "data_base.db_initializers.load_simrun_general.filepath_resolution._convert_neup_fns_to_reldb()": [[291, "data_base.db_initializers.load_simrun_general.filepath_resolution._convert_neup_fns_to_reldb"]], "data_base.db_initializers.load_simrun_general.filepath_resolution._convert_syn_fns_to_reldb()": [[292, "data_base.db_initializers.load_simrun_general.filepath_resolution._convert_syn_fns_to_reldb"]], "data_base.db_initializers.load_simrun_general.filepath_resolution": [[293, "module-data_base.db_initializers.load_simrun_general.filepath_resolution"]], "data_base.db_initializers.load_simrun_general": [[294, "module-data_base.db_initializers.load_simrun_general"]], "data_base.db_initializers.load_simrun_general.init()": [[295, "data_base.db_initializers.load_simrun_general.init"]], "data_base.db_initializers.load_simrun_general.load_initialized_cell_and_evokednw_from_db()": [[296, "data_base.db_initializers.load_simrun_general.load_initialized_cell_and_evokedNW_from_db"]], "data_base.db_initializers.load_simrun_general.metadata_utils.create_metadata()": [[297, "data_base.db_initializers.load_simrun_general.metadata_utils.create_metadata"]], "data_base.db_initializers.load_simrun_general.metadata_utils.create_metadata_parallelization_helper()": [[298, "data_base.db_initializers.load_simrun_general.metadata_utils.create_metadata_parallelization_helper"]], "data_base.db_initializers.load_simrun_general.metadata_utils.get_voltage_traces_divisions_by_metadata()": [[299, "data_base.db_initializers.load_simrun_general.metadata_utils.get_voltage_traces_divisions_by_metadata"]], "data_base.db_initializers.load_simrun_general.metadata_utils": [[300, "module-data_base.db_initializers.load_simrun_general.metadata_utils"]], "data_base.db_initializers.load_simrun_general.optimize()": [[301, "data_base.db_initializers.load_simrun_general.optimize"]], "data_base.db_initializers.load_simrun_general.param_file_parser._copy_and_transform_con()": [[302, "data_base.db_initializers.load_simrun_general.param_file_parser._copy_and_transform_con"]], "data_base.db_initializers.load_simrun_general.param_file_parser._copy_and_transform_network_param()": [[303, "data_base.db_initializers.load_simrun_general.param_file_parser._copy_and_transform_network_param"]], "data_base.db_initializers.load_simrun_general.param_file_parser._copy_and_transform_neuron_param()": [[304, "data_base.db_initializers.load_simrun_general.param_file_parser._copy_and_transform_neuron_param"]], "data_base.db_initializers.load_simrun_general.param_file_parser._copy_and_transform_syn()": [[305, "data_base.db_initializers.load_simrun_general.param_file_parser._copy_and_transform_syn"]], "data_base.db_initializers.load_simrun_general.param_file_parser._delayed_copy_transform_paramfiles_to_db()": [[306, "data_base.db_initializers.load_simrun_general.param_file_parser._delayed_copy_transform_paramfiles_to_db"]], "data_base.db_initializers.load_simrun_general.param_file_parser._generate_target_filenames()": [[307, "data_base.db_initializers.load_simrun_general.param_file_parser._generate_target_filenames"]], "data_base.db_initializers.load_simrun_general.param_file_parser._get_unique_hoc_fns_from_neups()": [[308, "data_base.db_initializers.load_simrun_general.param_file_parser._get_unique_hoc_fns_from_neups"]], "data_base.db_initializers.load_simrun_general.param_file_parser._get_unique_landmark_fns_from_neups()": [[309, "data_base.db_initializers.load_simrun_general.param_file_parser._get_unique_landmark_fns_from_neups"]], "data_base.db_initializers.load_simrun_general.param_file_parser._get_unique_syncons_from_netps()": [[310, "data_base.db_initializers.load_simrun_general.param_file_parser._get_unique_syncons_from_netps"]], "data_base.db_initializers.load_simrun_general.param_file_parser.construct_param_filename_hashmap_df()": [[311, "data_base.db_initializers.load_simrun_general.param_file_parser.construct_param_filename_hashmap_df"]], "data_base.db_initializers.load_simrun_general.param_file_parser": [[312, "module-data_base.db_initializers.load_simrun_general.param_file_parser"]], "data_base.db_initializers.load_simrun_general.param_file_parser.load_param_files_from_db()": [[313, "data_base.db_initializers.load_simrun_general.param_file_parser.load_param_files_from_db"]], "data_base.db_initializers.load_simrun_general.reoptimize._check_needs_reoptimization()": [[314, "data_base.db_initializers.load_simrun_general.reoptimize._check_needs_reoptimization"]], "data_base.db_initializers.load_simrun_general.reoptimize._reoptimize_key()": [[315, "data_base.db_initializers.load_simrun_general.reoptimize._reoptimize_key"]], "data_base.db_initializers.load_simrun_general.reoptimize": [[316, "module-data_base.db_initializers.load_simrun_general.reoptimize"]], "data_base.db_initializers.load_simrun_general.reoptimize.reoptimize_db()": [[317, "data_base.db_initializers.load_simrun_general.reoptimize.reoptimize_db"]], "data_base.db_initializers.load_simrun_general.utils._get_dumper()": [[318, "data_base.db_initializers.load_simrun_general.utils._get_dumper"]], "data_base.db_initializers.load_simrun_general.utils._hash_file_content()": [[319, "data_base.db_initializers.load_simrun_general.utils._hash_file_content"]], "data_base.db_initializers.load_simrun_general.utils": [[320, "module-data_base.db_initializers.load_simrun_general.utils"]], "data_base.db_initializers.prepare_ann_batches.augment_synapse_activation_df_with_branch_bin()": [[321, "data_base.db_initializers.prepare_ANN_batches.augment_synapse_activation_df_with_branch_bin"]], "data_base.db_initializers.prepare_ann_batches.compute_ap_array()": [[322, "data_base.db_initializers.prepare_ANN_batches.compute_AP_array"]], "data_base.db_initializers.prepare_ann_batches.compute_isi_array()": [[323, "data_base.db_initializers.prepare_ANN_batches.compute_ISI_array"]], "data_base.db_initializers.prepare_ann_batches.compute_isi_from_st()": [[324, "data_base.db_initializers.prepare_ANN_batches.compute_ISI_from_st"]], "data_base.db_initializers.prepare_ann_batches.compute_isi_from_st_list()": [[325, "data_base.db_initializers.prepare_ANN_batches.compute_ISI_from_st_list"]], "data_base.db_initializers.prepare_ann_batches.get_bin()": [[326, "data_base.db_initializers.prepare_ANN_batches.get_bin"]], "data_base.db_initializers.prepare_ann_batches.get_bin_adjacency_map_in_section()": [[327, "data_base.db_initializers.prepare_ANN_batches.get_bin_adjacency_map_in_section"]], "data_base.db_initializers.prepare_ann_batches.get_bin_soma_distances_in_section()": [[328, "data_base.db_initializers.prepare_ANN_batches.get_bin_soma_distances_in_section"]], "data_base.db_initializers.prepare_ann_batches.get_binsize()": [[329, "data_base.db_initializers.prepare_ANN_batches.get_binsize"]], "data_base.db_initializers.prepare_ann_batches.get_max_depolarization_per_ms()": [[330, "data_base.db_initializers.prepare_ANN_batches.get_max_depolarization_per_ms"]], "data_base.db_initializers.prepare_ann_batches.get_max_per_ms_on_pandas_dataframe()": [[331, "data_base.db_initializers.prepare_ANN_batches.get_max_per_ms_on_pandas_dataframe"]], "data_base.db_initializers.prepare_ann_batches.get_neighboring_spatial_bins()": [[332, "data_base.db_initializers.prepare_ANN_batches.get_neighboring_spatial_bins"]], "data_base.db_initializers.prepare_ann_batches.get_neuron_param_file()": [[333, "data_base.db_initializers.prepare_ANN_batches.get_neuron_param_file"]], "data_base.db_initializers.prepare_ann_batches.get_section_distances_df()": [[334, "data_base.db_initializers.prepare_ANN_batches.get_section_distances_df"]], "data_base.db_initializers.prepare_ann_batches.get_spatial_bin_names()": [[335, "data_base.db_initializers.prepare_ANN_batches.get_spatial_bin_names"]], "data_base.db_initializers.prepare_ann_batches.get_synapse_activation_array_weighted()": [[336, "data_base.db_initializers.prepare_ANN_batches.get_synapse_activation_array_weighted"]], "data_base.db_initializers.prepare_ann_batches.get_time_groups()": [[337, "data_base.db_initializers.prepare_ANN_batches.get_time_groups"]], "data_base.db_initializers.prepare_ann_batches": [[338, "module-data_base.db_initializers.prepare_ANN_batches"]], "data_base.db_initializers.prepare_ann_batches.load_syn_weights()": [[339, "data_base.db_initializers.prepare_ANN_batches.load_syn_weights"]], "data_base.db_initializers.prepare_ann_batches.run_delayeds_incrementally()": [[340, "data_base.db_initializers.prepare_ANN_batches.run_delayeds_incrementally"]], "data_base.db_initializers.prepare_ann_batches.save_sa_batch()": [[341, "data_base.db_initializers.prepare_ANN_batches.save_SA_batch"]], "data_base.db_initializers.prepare_ann_batches.spike_times_to_onehot()": [[342, "data_base.db_initializers.prepare_ANN_batches.spike_times_to_onehot"]], "data_base.db_initializers.prepare_ann_batches.temporal_binning_augmented_sa()": [[343, "data_base.db_initializers.prepare_ANN_batches.temporal_binning_augmented_sa"]], "data_base.db_initializers.synapse_activation_binning.applyfun()": [[344, "data_base.db_initializers.synapse_activation_binning.applyfun"]], "data_base.db_initializers.synapse_activation_binning": [[345, "module-data_base.db_initializers.synapse_activation_binning"]], "data_base.db_initializers.synapse_activation_binning.init()": [[346, "data_base.db_initializers.synapse_activation_binning.init"]], "data_base.db_initializers.synapse_activation_binning.merge_results_together()": [[347, "data_base.db_initializers.synapse_activation_binning.merge_results_together"]], "data_base.db_initializers.synapse_activation_binning.postfun()": [[348, "data_base.db_initializers.synapse_activation_binning.postfun"]], "data_base.db_initializers.synapse_activation_binning.prefun()": [[349, "data_base.db_initializers.synapse_activation_binning.prefun"]], "data_base.db_initializers.synapse_activation_binning.save_groupby()": [[350, "data_base.db_initializers.synapse_activation_binning.save_groupby"]], "data_base.db_initializers.synapse_activation_binning.synapse_activation_postprocess_dask()": [[351, "data_base.db_initializers.synapse_activation_binning.synapse_activation_postprocess_dask"]], "data_base.db_initializers.synapse_activation_binning.synapse_activation_postprocess_pandas()": [[352, "data_base.db_initializers.synapse_activation_binning.synapse_activation_postprocess_pandas"]], "data_base.db_initializers.synapse_activation_binning.tree_reduction()": [[353, "data_base.db_initializers.synapse_activation_binning.tree_reduction"]], "data_base.dbopen.cache()": [[354, "data_base.dbopen.cache"]], "data_base.dbopen.create_modular_db_path()": [[355, "data_base.dbopen.create_modular_db_path"]], "data_base.dbopen.create_reldb_path()": [[356, "data_base.dbopen.create_reldb_path"]], "data_base.dbopen.dbopen (built-in class)": [[357, "data_base.dbopen.dbopen"]], "exit_hooks (data_base.dbopen.dbopen attribute)": [[357, "data_base.dbopen.dbopen.exit_hooks"]], "mode (data_base.dbopen.dbopen attribute)": [[357, "data_base.dbopen.dbopen.mode"]], "path (data_base.dbopen.dbopen attribute)": [[357, "data_base.dbopen.dbopen.path"]], "data_base.dbopen": [[358, "module-data_base.dbopen"]], "data_base.dbopen.resolve_db_path()": [[359, "data_base.dbopen.resolve_db_path"]], "data_base.dbopen.resolve_modular_db_path()": [[360, "data_base.dbopen.resolve_modular_db_path"]], "data_base.dbopen.resolve_netp_reldb_paths()": [[361, "data_base.dbopen.resolve_netp_reldb_paths"]], "data_base.dbopen.resolve_neup_reldb_paths()": [[362, "data_base.dbopen.resolve_neup_reldb_paths"]], "data_base.dbopen.resolve_reldb_path()": [[363, "data_base.dbopen.resolve_reldb_path"]], "data_base.distributed_lock.interprocesslocknowritepermission (built-in class)": [[364, "data_base.distributed_lock.InterProcessLockNoWritePermission"]], "lock (data_base.distributed_lock.interprocesslocknowritepermission attribute)": [[364, "data_base.distributed_lock.InterProcessLockNoWritePermission.lock"]], "acquire() (data_base.distributed_lock.interprocesslocknowritepermission method)": [[365, "data_base.distributed_lock.InterProcessLockNoWritePermission.acquire"]], "release() (data_base.distributed_lock.interprocesslocknowritepermission method)": [[366, "data_base.distributed_lock.InterProcessLockNoWritePermission.release"]], "data_base.distributed_lock._get_locking_config()": [[367, "data_base.distributed_lock._get_locking_config"]], "data_base.distributed_lock._get_locking_server_client_from_config()": [[368, "data_base.distributed_lock._get_locking_server_client_from_config"]], "data_base.distributed_lock.get_lock()": [[369, "data_base.distributed_lock.get_lock"]], "data_base.distributed_lock.get_locking_client()": [[370, "data_base.distributed_lock.get_locking_client"]], "data_base.distributed_lock.get_locking_server()": [[371, "data_base.distributed_lock.get_locking_server"]], "data_base.distributed_lock.get_locking_server_client()": [[372, "data_base.distributed_lock.get_locking_server_client"]], "data_base.distributed_lock.get_read_lock()": [[373, "data_base.distributed_lock.get_read_lock"]], "data_base.distributed_lock.get_write_lock()": [[374, "data_base.distributed_lock.get_write_lock"]], "data_base.distributed_lock": [[375, "module-data_base.distributed_lock"]], "data_base.distributed_lock.update_config()": [[376, "data_base.distributed_lock.update_config"]], "data_base.exceptions.databaseexception (built-in class)": [[377, "data_base.exceptions.DataBaseException"]], "data_base.exceptions.isfdatabaseexception (built-in class)": [[378, "data_base.exceptions.ISFDataBaseException"]], "data_base.exceptions": [[379, "module-data_base.exceptions"]], "data_base": [[380, "module-data_base"]], "data_base.isf_data_base.io.loaderdumper.cell.loader (built-in class)": [[381, "data_base.isf_data_base.IO.LoaderDumper.cell.Loader"]], "get() (data_base.isf_data_base.io.loaderdumper.cell.loader method)": [[382, "data_base.isf_data_base.IO.LoaderDumper.cell.Loader.get"]], "data_base.isf_data_base.io.loaderdumper.cell.check()": [[383, "data_base.isf_data_base.IO.LoaderDumper.cell.check"]], "data_base.isf_data_base.io.loaderdumper.cell.dump()": [[384, "data_base.isf_data_base.IO.LoaderDumper.cell.dump"]], "data_base.isf_data_base.io.loaderdumper.cell": [[385, "module-data_base.isf_data_base.IO.LoaderDumper.cell"]], "data_base.isf_data_base.io.loaderdumper.dask_to_categorized_msgpack.loader (built-in class)": [[386, "data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.Loader"]], "get() (data_base.isf_data_base.io.loaderdumper.dask_to_categorized_msgpack.loader method)": [[387, "data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.Loader.get"]], "data_base.isf_data_base.io.loaderdumper.dask_to_categorized_msgpack.bundle_delayeds()": [[388, "data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.bundle_delayeds"]], "data_base.isf_data_base.io.loaderdumper.dask_to_categorized_msgpack.category_to_str()": [[389, "data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.category_to_str"]], "data_base.isf_data_base.io.loaderdumper.dask_to_categorized_msgpack.check()": [[390, "data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.check"]], "data_base.isf_data_base.io.loaderdumper.dask_to_categorized_msgpack.dump()": [[391, "data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.dump"]], "data_base.isf_data_base.io.loaderdumper.dask_to_categorized_msgpack.get_numpy_dtype_as_str()": [[392, "data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.get_numpy_dtype_as_str"]], "data_base.isf_data_base.io.loaderdumper.dask_to_categorized_msgpack.get_writer_function()": [[393, "data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.get_writer_function"]], "data_base.isf_data_base.io.loaderdumper.dask_to_categorized_msgpack": [[394, "module-data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack"]], "data_base.isf_data_base.io.loaderdumper.dask_to_categorized_msgpack.my_dask_writer()": [[395, "data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.my_dask_writer"]], "data_base.isf_data_base.io.loaderdumper.dask_to_categorized_msgpack.read_object_meta()": [[396, "data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.read_object_meta"]], "data_base.isf_data_base.io.loaderdumper.dask_to_categorized_msgpack.str_to_category()": [[397, "data_base.isf_data_base.IO.LoaderDumper.dask_to_categorized_msgpack.str_to_category"]], "data_base.isf_data_base.io.loaderdumper.dask_to_msgpack.dump()": [[398, "data_base.isf_data_base.IO.LoaderDumper.dask_to_msgpack.dump"]], "data_base.isf_data_base.io.loaderdumper.dask_to_msgpack": [[399, "module-data_base.isf_data_base.IO.LoaderDumper.dask_to_msgpack"]], "data_base.isf_data_base.io.loaderdumper.dask_to_parquet.loader (built-in class)": [[400, "data_base.isf_data_base.IO.LoaderDumper.dask_to_parquet.Loader"]], "get() (data_base.isf_data_base.io.loaderdumper.dask_to_parquet.loader method)": [[401, "data_base.isf_data_base.IO.LoaderDumper.dask_to_parquet.Loader.get"]], "data_base.isf_data_base.io.loaderdumper.dask_to_parquet.check()": [[402, "data_base.isf_data_base.IO.LoaderDumper.dask_to_parquet.check"]], "data_base.isf_data_base.io.loaderdumper.dask_to_parquet.check_df_suitable_for_pq()": [[403, "data_base.isf_data_base.IO.LoaderDumper.dask_to_parquet.check_df_suitable_for_pq"]], "data_base.isf_data_base.io.loaderdumper.dask_to_parquet.dump()": [[404, "data_base.isf_data_base.IO.LoaderDumper.dask_to_parquet.dump"]], "data_base.isf_data_base.io.loaderdumper.dask_to_parquet": [[405, "module-data_base.isf_data_base.IO.LoaderDumper.dask_to_parquet"]], "data_base.isf_data_base.io.loaderdumper.dask_to_parquet.load_helper()": [[406, "data_base.isf_data_base.IO.LoaderDumper.dask_to_parquet.load_helper"]], "data_base.isf_data_base.io.loaderdumper.dask_to_parquet.save_helper()": [[407, "data_base.isf_data_base.IO.LoaderDumper.dask_to_parquet.save_helper"]], "data_base.isf_data_base.io.loaderdumper.generic_to_specific_databases_module_name()": [[408, "data_base.isf_data_base.IO.LoaderDumper.generic_to_specific_databases_module_name"]], "data_base.isf_data_base.io.loaderdumper.get_dumper_string_by_dumper_module()": [[409, "data_base.isf_data_base.IO.LoaderDumper.get_dumper_string_by_dumper_module"]], "data_base.isf_data_base.io.loaderdumper.get_dumper_string_by_savedir()": [[410, "data_base.isf_data_base.IO.LoaderDumper.get_dumper_string_by_savedir"]], "data_base.isf_data_base.io.loaderdumper": [[411, "module-data_base.isf_data_base.IO.LoaderDumper"]], "data_base.isf_data_base.io.loaderdumper.just_create_folder.loader (built-in class)": [[412, "data_base.isf_data_base.IO.LoaderDumper.just_create_folder.Loader"]], "get() (data_base.isf_data_base.io.loaderdumper.just_create_folder.loader method)": [[413, "data_base.isf_data_base.IO.LoaderDumper.just_create_folder.Loader.get"]], "data_base.isf_data_base.io.loaderdumper.just_create_folder.managedfolder (built-in class)": [[414, "data_base.isf_data_base.IO.LoaderDumper.just_create_folder.ManagedFolder"]], "get_file() (data_base.isf_data_base.io.loaderdumper.just_create_folder.managedfolder method)": [[415, "data_base.isf_data_base.IO.LoaderDumper.just_create_folder.ManagedFolder.get_file"]], "join() (data_base.isf_data_base.io.loaderdumper.just_create_folder.managedfolder method)": [[416, "data_base.isf_data_base.IO.LoaderDumper.just_create_folder.ManagedFolder.join"]], "listdir() (data_base.isf_data_base.io.loaderdumper.just_create_folder.managedfolder method)": [[417, "data_base.isf_data_base.IO.LoaderDumper.just_create_folder.ManagedFolder.listdir"]], "data_base.isf_data_base.io.loaderdumper.just_create_folder.check()": [[418, "data_base.isf_data_base.IO.LoaderDumper.just_create_folder.check"]], "data_base.isf_data_base.io.loaderdumper.just_create_folder.dump()": [[419, "data_base.isf_data_base.IO.LoaderDumper.just_create_folder.dump"]], "data_base.isf_data_base.io.loaderdumper.just_create_folder": [[420, "module-data_base.isf_data_base.IO.LoaderDumper.just_create_folder"]], "data_base.isf_data_base.io.loaderdumper.just_create_isf_db.loader (built-in class)": [[421, "data_base.isf_data_base.IO.LoaderDumper.just_create_isf_db.Loader"]], "get() (data_base.isf_data_base.io.loaderdumper.just_create_isf_db.loader method)": [[422, "data_base.isf_data_base.IO.LoaderDumper.just_create_isf_db.Loader.get"]], "data_base.isf_data_base.io.loaderdumper.just_create_isf_db.check()": [[423, "data_base.isf_data_base.IO.LoaderDumper.just_create_isf_db.check"]], "data_base.isf_data_base.io.loaderdumper.just_create_isf_db.dump()": [[424, "data_base.isf_data_base.IO.LoaderDumper.just_create_isf_db.dump"]], "data_base.isf_data_base.io.loaderdumper.just_create_isf_db": [[425, "module-data_base.isf_data_base.IO.LoaderDumper.just_create_isf_db"]], "data_base.isf_data_base.io.loaderdumper.load()": [[426, "data_base.isf_data_base.IO.LoaderDumper.load"]], "data_base.isf_data_base.io.loaderdumper.numpy_to_msgpack.loader (built-in class)": [[427, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_msgpack.Loader"]], "get() (data_base.isf_data_base.io.loaderdumper.numpy_to_msgpack.loader method)": [[428, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_msgpack.Loader.get"]], "data_base.isf_data_base.io.loaderdumper.numpy_to_msgpack.check()": [[429, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_msgpack.check"]], "data_base.isf_data_base.io.loaderdumper.numpy_to_msgpack.dump()": [[430, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_msgpack.dump"]], "data_base.isf_data_base.io.loaderdumper.numpy_to_msgpack": [[431, "module-data_base.isf_data_base.IO.LoaderDumper.numpy_to_msgpack"]], "data_base.isf_data_base.io.loaderdumper.numpy_to_npy.loader (built-in class)": [[432, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_npy.Loader"]], "get() (data_base.isf_data_base.io.loaderdumper.numpy_to_npy.loader method)": [[433, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_npy.Loader.get"]], "data_base.isf_data_base.io.loaderdumper.numpy_to_npy.check()": [[434, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_npy.check"]], "data_base.isf_data_base.io.loaderdumper.numpy_to_npy.dump()": [[435, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_npy.dump"]], "data_base.isf_data_base.io.loaderdumper.numpy_to_npy": [[436, "module-data_base.isf_data_base.IO.LoaderDumper.numpy_to_npy"]], "data_base.isf_data_base.io.loaderdumper.numpy_to_npz.loader (built-in class)": [[437, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_npz.Loader"]], "get() (data_base.isf_data_base.io.loaderdumper.numpy_to_npz.loader method)": [[438, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_npz.Loader.get"]], "data_base.isf_data_base.io.loaderdumper.numpy_to_npz.check()": [[439, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_npz.check"]], "data_base.isf_data_base.io.loaderdumper.numpy_to_npz.dump()": [[440, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_npz.dump"]], "data_base.isf_data_base.io.loaderdumper.numpy_to_npz": [[441, "module-data_base.isf_data_base.IO.LoaderDumper.numpy_to_npz"]], "data_base.isf_data_base.io.loaderdumper.numpy_to_zarr.loader (built-in class)": [[442, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_zarr.Loader"]], "get() (data_base.isf_data_base.io.loaderdumper.numpy_to_zarr.loader method)": [[443, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_zarr.Loader.get"]], "data_base.isf_data_base.io.loaderdumper.numpy_to_zarr.check()": [[444, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_zarr.check"]], "data_base.isf_data_base.io.loaderdumper.numpy_to_zarr.dump()": [[445, "data_base.isf_data_base.IO.LoaderDumper.numpy_to_zarr.dump"]], "data_base.isf_data_base.io.loaderdumper.numpy_to_zarr": [[446, "module-data_base.isf_data_base.IO.LoaderDumper.numpy_to_zarr"]], "data_base.isf_data_base.io.loaderdumper.pandas_to_msgpack.loader (built-in class)": [[447, "data_base.isf_data_base.IO.LoaderDumper.pandas_to_msgpack.Loader"]], "get() (data_base.isf_data_base.io.loaderdumper.pandas_to_msgpack.loader method)": [[448, "data_base.isf_data_base.IO.LoaderDumper.pandas_to_msgpack.Loader.get"]], "data_base.isf_data_base.io.loaderdumper.pandas_to_msgpack.check()": [[449, "data_base.isf_data_base.IO.LoaderDumper.pandas_to_msgpack.check"]], "data_base.isf_data_base.io.loaderdumper.pandas_to_msgpack.dump()": [[450, "data_base.isf_data_base.IO.LoaderDumper.pandas_to_msgpack.dump"]], "data_base.isf_data_base.io.loaderdumper.pandas_to_msgpack": [[451, "module-data_base.isf_data_base.IO.LoaderDumper.pandas_to_msgpack"]], "data_base.isf_data_base.io.loaderdumper.pandas_to_parquet.loader (built-in class)": [[452, "data_base.isf_data_base.IO.LoaderDumper.pandas_to_parquet.Loader"]], "meta (data_base.isf_data_base.io.loaderdumper.pandas_to_parquet.loader attribute)": [[452, "data_base.isf_data_base.IO.LoaderDumper.pandas_to_parquet.Loader.meta"]], "get() (data_base.isf_data_base.io.loaderdumper.pandas_to_parquet.loader method)": [[453, "data_base.isf_data_base.IO.LoaderDumper.pandas_to_parquet.Loader.get"]], "data_base.isf_data_base.io.loaderdumper.pandas_to_parquet.check()": [[454, "data_base.isf_data_base.IO.LoaderDumper.pandas_to_parquet.check"]], "data_base.isf_data_base.io.loaderdumper.pandas_to_parquet.dump()": [[455, "data_base.isf_data_base.IO.LoaderDumper.pandas_to_parquet.dump"]], "data_base.isf_data_base.io.loaderdumper.pandas_to_parquet": [[456, "module-data_base.isf_data_base.IO.LoaderDumper.pandas_to_parquet"]], "data_base.isf_data_base.io.loaderdumper.pandas_to_pickle.loader (built-in class)": [[457, "data_base.isf_data_base.IO.LoaderDumper.pandas_to_pickle.Loader"]], "get() (data_base.isf_data_base.io.loaderdumper.pandas_to_pickle.loader method)": [[458, "data_base.isf_data_base.IO.LoaderDumper.pandas_to_pickle.Loader.get"]], "data_base.isf_data_base.io.loaderdumper.pandas_to_pickle.check()": [[459, "data_base.isf_data_base.IO.LoaderDumper.pandas_to_pickle.check"]], "data_base.isf_data_base.io.loaderdumper.pandas_to_pickle.dump()": [[460, "data_base.isf_data_base.IO.LoaderDumper.pandas_to_pickle.dump"]], "data_base.isf_data_base.io.loaderdumper.pandas_to_pickle": [[461, "module-data_base.isf_data_base.IO.LoaderDumper.pandas_to_pickle"]], "data_base.isf_data_base.io.loaderdumper.parent_classes.loader (built-in class)": [[462, "data_base.isf_data_base.IO.LoaderDumper.parent_classes.Loader"]], "data_base.isf_data_base.io.loaderdumper.parent_classes": [[463, "module-data_base.isf_data_base.IO.LoaderDumper.parent_classes"]], "data_base.isf_data_base.io.loaderdumper.reduced_lda_model.loader (built-in class)": [[464, "data_base.isf_data_base.IO.LoaderDumper.reduced_lda_model.Loader"]], "get() (data_base.isf_data_base.io.loaderdumper.reduced_lda_model.loader method)": [[465, "data_base.isf_data_base.IO.LoaderDumper.reduced_lda_model.Loader.get"]], "data_base.isf_data_base.io.loaderdumper.reduced_lda_model.check()": [[466, "data_base.isf_data_base.IO.LoaderDumper.reduced_lda_model.check"]], "data_base.isf_data_base.io.loaderdumper.reduced_lda_model.dump()": [[467, "data_base.isf_data_base.IO.LoaderDumper.reduced_lda_model.dump"]], "data_base.isf_data_base.io.loaderdumper.reduced_lda_model": [[468, "module-data_base.isf_data_base.IO.LoaderDumper.reduced_lda_model"]], "data_base.isf_data_base.io.loaderdumper.shared_numpy_store.loader (built-in class)": [[469, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.Loader"]], "get() (data_base.isf_data_base.io.loaderdumper.shared_numpy_store.loader method)": [[470, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.Loader.get"]], "_files (data_base.isf_data_base.io.loaderdumper.shared_numpy_store.sharednumpystore attribute)": [[471, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.SharedNumpyStore._files"]], "_pending_renames (data_base.isf_data_base.io.loaderdumper.shared_numpy_store.sharednumpystore attribute)": [[471, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.SharedNumpyStore._pending_renames"]], "_shared_memory_buffers (data_base.isf_data_base.io.loaderdumper.shared_numpy_store.sharednumpystore attribute)": [[471, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.SharedNumpyStore._shared_memory_buffers"]], "_suffix (data_base.isf_data_base.io.loaderdumper.shared_numpy_store.sharednumpystore attribute)": [[471, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.SharedNumpyStore._suffix"]], "data_base.isf_data_base.io.loaderdumper.shared_numpy_store.sharednumpystore (built-in class)": [[471, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.SharedNumpyStore"]], "working_dir (data_base.isf_data_base.io.loaderdumper.shared_numpy_store.sharednumpystore attribute)": [[471, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.SharedNumpyStore.working_dir"]], "_get_fname() (data_base.isf_data_base.io.loaderdumper.shared_numpy_store.sharednumpystore method)": [[472, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.SharedNumpyStore._get_fname"]], "_get_fname_from_metadata() (data_base.isf_data_base.io.loaderdumper.shared_numpy_store.sharednumpystore method)": [[473, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.SharedNumpyStore._get_fname_from_metadata"]], "_get_metadata_from_fname() (data_base.isf_data_base.io.loaderdumper.shared_numpy_store.sharednumpystore static method)": [[474, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.SharedNumpyStore._get_metadata_from_fname"]], "_get_metadata_from_name() (data_base.isf_data_base.io.loaderdumper.shared_numpy_store.sharednumpystore method)": [[475, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.SharedNumpyStore._get_metadata_from_name"]], "append_save() (data_base.isf_data_base.io.loaderdumper.shared_numpy_store.sharednumpystore method)": [[476, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.SharedNumpyStore.append_save"]], "close() (data_base.isf_data_base.io.loaderdumper.shared_numpy_store.sharednumpystore method)": [[477, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.SharedNumpyStore.close"]], "flush() (data_base.isf_data_base.io.loaderdumper.shared_numpy_store.sharednumpystore method)": [[478, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.SharedNumpyStore.flush"]], "get_expected_file_length() (data_base.isf_data_base.io.loaderdumper.shared_numpy_store.sharednumpystore method)": [[479, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.SharedNumpyStore.get_expected_file_length"]], "load() (data_base.isf_data_base.io.loaderdumper.shared_numpy_store.sharednumpystore method)": [[480, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.SharedNumpyStore.load"]], "save() (data_base.isf_data_base.io.loaderdumper.shared_numpy_store.sharednumpystore method)": [[481, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.SharedNumpyStore.save"]], "update() (data_base.isf_data_base.io.loaderdumper.shared_numpy_store.sharednumpystore method)": [[482, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.SharedNumpyStore.update"]], "data_base.isf_data_base.io.loaderdumper.shared_numpy_store.uninterruptible (built-in class)": [[483, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.Uninterruptible"]], "data_base.isf_data_base.io.loaderdumper.shared_numpy_store._check_filesize_matches_shape()": [[484, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store._check_filesize_matches_shape"]], "data_base.isf_data_base.io.loaderdumper.shared_numpy_store._get_offset_and_size_in_bytes()": [[485, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store._get_offset_and_size_in_bytes"]], "data_base.isf_data_base.io.loaderdumper.shared_numpy_store.check()": [[486, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.check"]], "data_base.isf_data_base.io.loaderdumper.shared_numpy_store.dump()": [[487, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.dump"]], "data_base.isf_data_base.io.loaderdumper.shared_numpy_store": [[488, "module-data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store"]], "data_base.isf_data_base.io.loaderdumper.shared_numpy_store.memmap_from_disk()": [[489, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.memmap_from_disk"]], "data_base.isf_data_base.io.loaderdumper.shared_numpy_store.shared_array_from_disk()": [[490, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.shared_array_from_disk"]], "data_base.isf_data_base.io.loaderdumper.shared_numpy_store.shared_array_from_numpy()": [[491, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.shared_array_from_numpy"]], "data_base.isf_data_base.io.loaderdumper.shared_numpy_store.shared_array_from_shared_mem_name()": [[492, "data_base.isf_data_base.IO.LoaderDumper.shared_numpy_store.shared_array_from_shared_mem_name"]], "data_base.isf_data_base.io.loaderdumper.to_cloudpickle.loader (built-in class)": [[493, "data_base.isf_data_base.IO.LoaderDumper.to_cloudpickle.Loader"]], "get() (data_base.isf_data_base.io.loaderdumper.to_cloudpickle.loader method)": [[494, "data_base.isf_data_base.IO.LoaderDumper.to_cloudpickle.Loader.get"]], "data_base.isf_data_base.io.loaderdumper.to_cloudpickle.check()": [[495, "data_base.isf_data_base.IO.LoaderDumper.to_cloudpickle.check"]], "data_base.isf_data_base.io.loaderdumper.to_cloudpickle.dump()": [[496, "data_base.isf_data_base.IO.LoaderDumper.to_cloudpickle.dump"]], "data_base.isf_data_base.io.loaderdumper.to_cloudpickle": [[497, "module-data_base.isf_data_base.IO.LoaderDumper.to_cloudpickle"]], "data_base.isf_data_base.io.loaderdumper.to_msgpack.loader (built-in class)": [[498, "data_base.isf_data_base.IO.LoaderDumper.to_msgpack.Loader"]], "get() (data_base.isf_data_base.io.loaderdumper.to_msgpack.loader method)": [[499, "data_base.isf_data_base.IO.LoaderDumper.to_msgpack.Loader.get"]], "data_base.isf_data_base.io.loaderdumper.to_msgpack.check()": [[500, "data_base.isf_data_base.IO.LoaderDumper.to_msgpack.check"]], "data_base.isf_data_base.io.loaderdumper.to_msgpack.dump()": [[501, "data_base.isf_data_base.IO.LoaderDumper.to_msgpack.dump"]], "data_base.isf_data_base.io.loaderdumper.to_msgpack": [[502, "module-data_base.isf_data_base.IO.LoaderDumper.to_msgpack"]], "data_base.isf_data_base.io.loaderdumper.to_pickle.loader (built-in class)": [[503, "data_base.isf_data_base.IO.LoaderDumper.to_pickle.Loader"]], "get() (data_base.isf_data_base.io.loaderdumper.to_pickle.loader method)": [[504, "data_base.isf_data_base.IO.LoaderDumper.to_pickle.Loader.get"]], "data_base.isf_data_base.io.loaderdumper.to_pickle.check()": [[505, "data_base.isf_data_base.IO.LoaderDumper.to_pickle.check"]], "data_base.isf_data_base.io.loaderdumper.to_pickle.dump()": [[506, "data_base.isf_data_base.IO.LoaderDumper.to_pickle.dump"]], "data_base.isf_data_base.io.loaderdumper.to_pickle": [[507, "module-data_base.isf_data_base.IO.LoaderDumper.to_pickle"]], "data_base.isf_data_base.io.loaderdumper.utils.get_meta_filename()": [[508, "data_base.isf_data_base.IO.LoaderDumper.utils.get_meta_filename"]], "data_base.isf_data_base.io.loaderdumper.utils.get_numpy_dtype_as_str()": [[509, "data_base.isf_data_base.IO.LoaderDumper.utils.get_numpy_dtype_as_str"]], "data_base.isf_data_base.io.loaderdumper.utils": [[510, "module-data_base.isf_data_base.IO.LoaderDumper.utils"]], "data_base.isf_data_base.io.loaderdumper.utils.read_object_meta()": [[511, "data_base.isf_data_base.IO.LoaderDumper.utils.read_object_meta"]], "data_base.isf_data_base.io.loaderdumper.utils.save_object_meta()": [[512, "data_base.isf_data_base.IO.LoaderDumper.utils.save_object_meta"]], "data_base.isf_data_base.io.loaderdumper.utils.set_object_meta()": [[513, "data_base.isf_data_base.IO.LoaderDumper.utils.set_object_meta"]], "data_base.isf_data_base.io.dask_wrappers": [[514, "module-data_base.isf_data_base.IO.dask_wrappers"]], "data_base.isf_data_base.io.dask_wrappers.read_csvs()": [[515, "data_base.isf_data_base.IO.dask_wrappers.read_csvs"]], "data_base.isf_data_base.io": [[516, "module-data_base.isf_data_base.IO"]], "data_base.isf_data_base": [[517, "module-data_base.isf_data_base"]], "_basedir (data_base.isf_data_base.isf_data_base.isfdatabase attribute)": [[518, "data_base.isf_data_base.isf_data_base.ISFDataBase._basedir"]], "_db_state_fn (data_base.isf_data_base.isf_data_base.isfdatabase attribute)": [[518, "data_base.isf_data_base.isf_data_base.ISFDataBase._db_state_fn"]], "_forbidden_keys (data_base.isf_data_base.isf_data_base.isfdatabase attribute)": [[518, "data_base.isf_data_base.isf_data_base.ISFDataBase._forbidden_keys"]], "_registereddumpers (data_base.isf_data_base.isf_data_base.isfdatabase attribute)": [[518, "data_base.isf_data_base.isf_data_base.ISFDataBase._registeredDumpers"]], "_registered_to_path (data_base.isf_data_base.isf_data_base.isfdatabase attribute)": [[518, "data_base.isf_data_base.isf_data_base.ISFDataBase._registered_to_path"]], "_suppress_errors (data_base.isf_data_base.isf_data_base.isfdatabase attribute)": [[518, "data_base.isf_data_base.isf_data_base.ISFDataBase._suppress_errors"]], "_unique_id (data_base.isf_data_base.isf_data_base.isfdatabase attribute)": [[518, "data_base.isf_data_base.isf_data_base.ISFDataBase._unique_id"]], "basedir (data_base.isf_data_base.isf_data_base.isfdatabase attribute)": [[518, "data_base.isf_data_base.isf_data_base.ISFDataBase.basedir"]], "data_base.isf_data_base.isf_data_base.isfdatabase (built-in class)": [[518, "data_base.isf_data_base.isf_data_base.ISFDataBase"]], "metadata (data_base.isf_data_base.isf_data_base.isfdatabase attribute)": [[518, "data_base.isf_data_base.isf_data_base.ISFDataBase.metadata"]], "nocreate (data_base.isf_data_base.isf_data_base.isfdatabase attribute)": [[518, "data_base.isf_data_base.isf_data_base.ISFDataBase.nocreate"]], "parent_db (data_base.isf_data_base.isf_data_base.isfdatabase attribute)": [[518, "data_base.isf_data_base.isf_data_base.ISFDataBase.parent_db"]], "readonly (data_base.isf_data_base.isf_data_base.isfdatabase attribute)": [[518, "data_base.isf_data_base.isf_data_base.ISFDataBase.readonly"]], "_check_key_format() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[519, "data_base.isf_data_base.isf_data_base.ISFDataBase._check_key_format"]], "_check_writing_privilege() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[520, "data_base.isf_data_base.isf_data_base.ISFDataBase._check_writing_privilege"]], "_convert_key_to_path() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[521, "data_base.isf_data_base.isf_data_base.ISFDataBase._convert_key_to_path"]], "_detect_dumper_string_of_existing_key() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[522, "data_base.isf_data_base.isf_data_base.ISFDataBase._detect_dumper_string_of_existing_key"]], "_find_dumper() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[523, "data_base.isf_data_base.isf_data_base.ISFDataBase._find_dumper"]], "_get_str() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[524, "data_base.isf_data_base.isf_data_base.ISFDataBase._get_str"]], "_infer_missing_metadata() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[525, "data_base.isf_data_base.isf_data_base.ISFDataBase._infer_missing_metadata"]], "_initialize() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[526, "data_base.isf_data_base.isf_data_base.ISFDataBase._initialize"]], "_is_initialized() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[527, "data_base.isf_data_base.isf_data_base.ISFDataBase._is_initialized"]], "_register_this_database() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[528, "data_base.isf_data_base.isf_data_base.ISFDataBase._register_this_database"]], "_set_unique_id() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[529, "data_base.isf_data_base.isf_data_base.ISFDataBase._set_unique_id"]], "_subkeys() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[530, "data_base.isf_data_base.isf_data_base.ISFDataBase._subkeys"]], "_write_metadata() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[531, "data_base.isf_data_base.isf_data_base.ISFDataBase._write_metadata"]], "check_if_key_exists() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[532, "data_base.isf_data_base.isf_data_base.ISFDataBase.check_if_key_exists"]], "create_managed_folder() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[533, "data_base.isf_data_base.isf_data_base.ISFDataBase.create_managed_folder"]], "create_shared_numpy_store() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[534, "data_base.isf_data_base.isf_data_base.ISFDataBase.create_shared_numpy_store"]], "create_sub_db() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[535, "data_base.isf_data_base.isf_data_base.ISFDataBase.create_sub_db"]], "get() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[536, "data_base.isf_data_base.isf_data_base.ISFDataBase.get"]], "get_id() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[537, "data_base.isf_data_base.isf_data_base.ISFDataBase.get_id"]], "get_mkdtemp() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[538, "data_base.isf_data_base.isf_data_base.ISFDataBase.get_mkdtemp"]], "keys() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[539, "data_base.isf_data_base.isf_data_base.ISFDataBase.keys"]], "ls() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[540, "data_base.isf_data_base.isf_data_base.ISFDataBase.ls"]], "maybe_calculate() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[541, "data_base.isf_data_base.isf_data_base.ISFDataBase.maybe_calculate"]], "read_db_state() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[542, "data_base.isf_data_base.isf_data_base.ISFDataBase.read_db_state"]], "register_dumper() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[543, "data_base.isf_data_base.isf_data_base.ISFDataBase.register_dumper"]], "remove() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[544, "data_base.isf_data_base.isf_data_base.ISFDataBase.remove"]], "rename() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[545, "data_base.isf_data_base.isf_data_base.ISFDataBase.rename"]], "save_db_state() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[546, "data_base.isf_data_base.isf_data_base.ISFDataBase.save_db_state"]], "set() (data_base.isf_data_base.isf_data_base.isfdatabase method)": [[547, "data_base.isf_data_base.isf_data_base.ISFDataBase.set"]], "data_base.isf_data_base.isf_data_base.loaderwrapper (built-in class)": [[548, "data_base.isf_data_base.isf_data_base.LoaderWrapper"]], "data_base.isf_data_base.isf_data_base.metadataaccessor (built-in class)": [[549, "data_base.isf_data_base.isf_data_base.MetadataAccessor"]], "keys() (data_base.isf_data_base.isf_data_base.metadataaccessor method)": [[550, "data_base.isf_data_base.isf_data_base.MetadataAccessor.keys"]], "data_base.isf_data_base.isf_data_base._check_working_dir_clean_for_build()": [[551, "data_base.isf_data_base.isf_data_base._check_working_dir_clean_for_build"]], "data_base.isf_data_base.isf_data_base.get_dumper_from_folder()": [[552, "data_base.isf_data_base.isf_data_base.get_dumper_from_folder"]], "data_base.isf_data_base.isf_data_base.get_isfdb_by_unique_id()": [[553, "data_base.isf_data_base.isf_data_base.get_isfdb_by_unique_id"]], "data_base.isf_data_base.isf_data_base": [[554, "module-data_base.isf_data_base.isf_data_base"]], "data_base.isf_data_base.isf_data_base.make_all_str()": [[555, "data_base.isf_data_base.isf_data_base.make_all_str"]], "data_base.settings": [[556, "module-data_base.settings"]], "data_base.utils.delayedkeyboardinterrupt (built-in class)": [[557, "data_base.utils.DelayedKeyboardInterrupt"]], "handler() (data_base.utils.delayedkeyboardinterrupt method)": [[558, "data_base.utils.DelayedKeyboardInterrupt.handler"]], "bold (data_base.utils.bcolors attribute)": [[559, "data_base.utils.bcolors.BOLD"]], "endc (data_base.utils.bcolors attribute)": [[559, "data_base.utils.bcolors.ENDC"]], "fail (data_base.utils.bcolors attribute)": [[559, "data_base.utils.bcolors.FAIL"]], "header (data_base.utils.bcolors attribute)": [[559, "data_base.utils.bcolors.HEADER"]], "okblue (data_base.utils.bcolors attribute)": [[559, "data_base.utils.bcolors.OKBLUE"]], "okcyan (data_base.utils.bcolors attribute)": [[559, "data_base.utils.bcolors.OKCYAN"]], "okgreen (data_base.utils.bcolors attribute)": [[559, "data_base.utils.bcolors.OKGREEN"]], "underline (data_base.utils.bcolors attribute)": [[559, "data_base.utils.bcolors.UNDERLINE"]], "warning (data_base.utils.bcolors attribute)": [[559, "data_base.utils.bcolors.WARNING"]], "data_base.utils.bcolors (built-in class)": [[559, "data_base.utils.bcolors"]], "data_base.utils.cache()": [[560, "data_base.utils.cache"]], "data_base.utils.calc_recursive_filetree()": [[561, "data_base.utils.calc_recursive_filetree"]], "data_base.utils.chunkit()": [[562, "data_base.utils.chunkIt"]], "data_base.utils.colorize_key()": [[563, "data_base.utils.colorize_key"]], "data_base.utils.colorize_str()": [[564, "data_base.utils.colorize_str"]], "data_base.utils.convertible_to_int()": [[565, "data_base.utils.convertible_to_int"]], "data_base.utils.delete_in_background()": [[566, "data_base.utils.delete_in_background"]], "data_base.utils.df_colnames_to_str()": [[567, "data_base.utils.df_colnames_to_str"]], "data_base.utils.fancy_dict_compare()": [[568, "data_base.utils.fancy_dict_compare"]], "data_base.utils.first_line_to_key()": [[569, "data_base.utils.first_line_to_key"]], "data_base.utils.flatten()": [[570, "data_base.utils.flatten"]], "data_base.utils.get_file_or_folder_that_endswith()": [[571, "data_base.utils.get_file_or_folder_that_endswith"]], "data_base.utils.get_file_or_folder_that_startswith()": [[572, "data_base.utils.get_file_or_folder_that_startswith"]], "data_base.utils": [[573, "module-data_base.utils"]], "data_base.utils.is_db()": [[574, "data_base.utils.is_db"]], "data_base.utils.mkdtemp (built-in class)": [[575, "data_base.utils.mkdtemp"]], "data_base.utils.myrepartition()": [[576, "data_base.utils.myrepartition"]], "data_base.utils.pandas_to_array()": [[577, "data_base.utils.pandas_to_array"]], "data_base.utils.pooled_std()": [[578, "data_base.utils.pooled_std"]], "data_base.utils.rename_for_deletion()": [[579, "data_base.utils.rename_for_deletion"]], "data_base.utils.select()": [[580, "data_base.utils.select"]], "data_base.utils.silence_stdout (built-in class)": [[581, "data_base.utils.silence_stdout"]], "data_base.utils.skit()": [[582, "data_base.utils.skit"]], "data_base.utils.split_file_to_buffers()": [[583, "data_base.utils.split_file_to_buffers"]], "data_base.utils.synchronous_ddf_concat()": [[584, "data_base.utils.synchronous_ddf_concat"]], "data_base.utils.unique()": [[585, "data_base.utils.unique"]], "data_base.utils.wait_until_key_removed()": [[586, "data_base.utils.wait_until_key_removed"]], "bounds (simrun.psp_with_cell_modification.psp_with_current_injection attribute)": [[587, "simrun.PSP_with_cell_modification.PSP_with_current_injection.bounds"]], "cell_modify_functions (simrun.psp_with_cell_modification.psp_with_current_injection attribute)": [[587, "simrun.PSP_with_cell_modification.PSP_with_current_injection.cell_modify_functions"]], "confile (simrun.psp_with_cell_modification.psp_with_current_injection attribute)": [[587, "simrun.PSP_with_cell_modification.PSP_with_current_injection.confile"]], "delay (simrun.psp_with_cell_modification.psp_with_current_injection attribute)": [[587, "simrun.PSP_with_cell_modification.PSP_with_current_injection.delay"]], "duration (simrun.psp_with_cell_modification.psp_with_current_injection attribute)": [[587, "simrun.PSP_with_cell_modification.PSP_with_current_injection.duration"]], "holding_current (simrun.psp_with_cell_modification.psp_with_current_injection attribute)": [[587, "simrun.PSP_with_cell_modification.PSP_with_current_injection.holding_current"]], "neuron_param (simrun.psp_with_cell_modification.psp_with_current_injection attribute)": [[587, "simrun.PSP_with_cell_modification.PSP_with_current_injection.neuron_param"]], "optimize_for_timepoint (simrun.psp_with_cell_modification.psp_with_current_injection attribute)": [[587, "simrun.PSP_with_cell_modification.PSP_with_current_injection.optimize_for_timepoint"]], "simrun.psp_with_cell_modification.psp_with_current_injection (built-in class)": [[587, "simrun.PSP_with_cell_modification.PSP_with_current_injection"]], "tend (simrun.psp_with_cell_modification.psp_with_current_injection attribute)": [[587, "simrun.PSP_with_cell_modification.PSP_with_current_injection.tEnd"]], "target_vm (simrun.psp_with_cell_modification.psp_with_current_injection attribute)": [[587, "simrun.PSP_with_cell_modification.PSP_with_current_injection.target_vm"]], "_get_current_dependent_vt() (simrun.psp_with_cell_modification.psp_with_current_injection method)": [[588, "simrun.PSP_with_cell_modification.PSP_with_current_injection._get_current_dependent_vt"]], "_objective_fun() (simrun.psp_with_cell_modification.psp_with_current_injection method)": [[589, "simrun.PSP_with_cell_modification.PSP_with_current_injection._objective_fun"]], "get() (simrun.psp_with_cell_modification.psp_with_current_injection method)": [[590, "simrun.PSP_with_cell_modification.PSP_with_current_injection.get"]], "get_neuron_param_with_current_injection() (simrun.psp_with_cell_modification.psp_with_current_injection method)": [[591, "simrun.PSP_with_cell_modification.PSP_with_current_injection.get_neuron_param_with_current_injection"]], "get_psp_simulator() (simrun.psp_with_cell_modification.psp_with_current_injection method)": [[592, "simrun.PSP_with_cell_modification.PSP_with_current_injection.get_psp_simulator"]], "get_psp_simulator_exc_and_inh_combined() (simrun.psp_with_cell_modification.psp_with_current_injection method)": [[593, "simrun.PSP_with_cell_modification.PSP_with_current_injection.get_psp_simulator_exc_and_inh_combined"]], "optimize_holding_current() (simrun.psp_with_cell_modification.psp_with_current_injection method)": [[594, "simrun.PSP_with_cell_modification.PSP_with_current_injection.optimize_holding_current"]], "plot_current_injection_voltage_trace() (simrun.psp_with_cell_modification.psp_with_current_injection method)": [[595, "simrun.PSP_with_cell_modification.PSP_with_current_injection.plot_current_injection_voltage_trace"]], "simrun.psp_with_cell_modification.combine_psp_objects()": [[596, "simrun.PSP_with_cell_modification.combine_PSP_objects"]], "simrun.psp_with_cell_modification": [[597, "module-simrun.PSP_with_cell_modification"]], "simrun.generate_synapse_activations._evoked_activity()": [[598, "simrun.generate_synapse_activations._evoked_activity"]], "simrun.generate_synapse_activations.generate_synapse_activations()": [[599, "simrun.generate_synapse_activations.generate_synapse_activations"]], "simrun.generate_synapse_activations": [[600, "module-simrun.generate_synapse_activations"]], "simrun.get_cell_with_network.get_cell_with_network()": [[601, "simrun.get_cell_with_network.get_cell_with_network"]], "simrun.get_cell_with_network": [[602, "module-simrun.get_cell_with_network"]], "simrun": [[603, "module-simrun"]], "data (simrun.modular_reduced_model_inference.data_extractor.dataextractor_spatiotemporalsynapseactivation attribute)": [[604, "simrun.modular_reduced_model_inference.data_extractor.DataExtractor_spatiotemporalSynapseActivation.data"]], "key (simrun.modular_reduced_model_inference.data_extractor.dataextractor_spatiotemporalsynapseactivation attribute)": [[604, "simrun.modular_reduced_model_inference.data_extractor.DataExtractor_spatiotemporalSynapseActivation.key"]], "simrun.modular_reduced_model_inference.data_extractor.dataextractor_spatiotemporalsynapseactivation (built-in class)": [[604, "simrun.modular_reduced_model_inference.data_extractor.DataExtractor_spatiotemporalSynapseActivation"]], "_get_spatial_bin_level() (simrun.modular_reduced_model_inference.data_extractor.dataextractor_spatiotemporalsynapseactivation static method)": [[605, "simrun.modular_reduced_model_inference.data_extractor.DataExtractor_spatiotemporalSynapseActivation._get_spatial_bin_level"]], "_get_spatiotemporal_input() (simrun.modular_reduced_model_inference.data_extractor.dataextractor_spatiotemporalsynapseactivation method)": [[606, "simrun.modular_reduced_model_inference.data_extractor.DataExtractor_spatiotemporalSynapseActivation._get_spatiotemporal_input"]], "get() (simrun.modular_reduced_model_inference.data_extractor.dataextractor_spatiotemporalsynapseactivation method)": [[607, "simrun.modular_reduced_model_inference.data_extractor.DataExtractor_spatiotemporalSynapseActivation.get"]], "get_groups() (simrun.modular_reduced_model_inference.data_extractor.dataextractor_spatiotemporalsynapseactivation method)": [[608, "simrun.modular_reduced_model_inference.data_extractor.DataExtractor_spatiotemporalSynapseActivation.get_groups"]], "get_sorted_keys_by_group() (simrun.modular_reduced_model_inference.data_extractor.dataextractor_spatiotemporalsynapseactivation method)": [[609, "simrun.modular_reduced_model_inference.data_extractor.DataExtractor_spatiotemporalSynapseActivation.get_sorted_keys_by_group"]], "get_spatial_binsize() (simrun.modular_reduced_model_inference.data_extractor.dataextractor_spatiotemporalsynapseactivation method)": [[610, "simrun.modular_reduced_model_inference.data_extractor.DataExtractor_spatiotemporalSynapseActivation.get_spatial_binsize"]], "setup() (simrun.modular_reduced_model_inference.data_extractor.dataextractor_spatiotemporalsynapseactivation method)": [[611, "simrun.modular_reduced_model_inference.data_extractor.DataExtractor_spatiotemporalSynapseActivation.setup"]], "simrun.modular_reduced_model_inference.data_extractor._dataextractor (built-in class)": [[612, "simrun.modular_reduced_model_inference.data_extractor._DataExtractor"]], "setup() (simrun.modular_reduced_model_inference.data_extractor._dataextractor method)": [[613, "simrun.modular_reduced_model_inference.data_extractor._DataExtractor.setup"]], "simrun.modular_reduced_model_inference.data_extractor": [[614, "module-simrun.modular_reduced_model_inference.data_extractor"]], "simrun.modular_reduced_model_inference": [[615, "module-simrun.modular_reduced_model_inference"]], "rm (simrun.modular_reduced_model_inference.reduced_model.datasplitevaluation attribute)": [[616, "simrun.modular_reduced_model_inference.reduced_model.DataSplitEvaluation.Rm"]], "optimizer_results (simrun.modular_reduced_model_inference.reduced_model.datasplitevaluation attribute)": [[616, "simrun.modular_reduced_model_inference.reduced_model.DataSplitEvaluation.optimizer_results"]], "optimizer_results_keys (simrun.modular_reduced_model_inference.reduced_model.datasplitevaluation attribute)": [[616, "simrun.modular_reduced_model_inference.reduced_model.DataSplitEvaluation.optimizer_results_keys"]], "scores (simrun.modular_reduced_model_inference.reduced_model.datasplitevaluation attribute)": [[616, "simrun.modular_reduced_model_inference.reduced_model.DataSplitEvaluation.scores"]], "scores_keys (simrun.modular_reduced_model_inference.reduced_model.datasplitevaluation attribute)": [[616, "simrun.modular_reduced_model_inference.reduced_model.DataSplitEvaluation.scores_keys"]], "simrun.modular_reduced_model_inference.reduced_model.datasplitevaluation (built-in class)": [[616, "simrun.modular_reduced_model_inference.reduced_model.DataSplitEvaluation"]], "solvers (simrun.modular_reduced_model_inference.reduced_model.datasplitevaluation attribute)": [[616, "simrun.modular_reduced_model_inference.reduced_model.DataSplitEvaluation.solvers"]], "splits (simrun.modular_reduced_model_inference.reduced_model.datasplitevaluation attribute)": [[616, "simrun.modular_reduced_model_inference.reduced_model.DataSplitEvaluation.splits"]], "add_isi_dependent_random_split() (simrun.modular_reduced_model_inference.reduced_model.datasplitevaluation method)": [[617, "simrun.modular_reduced_model_inference.reduced_model.DataSplitEvaluation.add_isi_dependent_random_split"]], "add_random_split() (simrun.modular_reduced_model_inference.reduced_model.datasplitevaluation method)": [[618, "simrun.modular_reduced_model_inference.reduced_model.DataSplitEvaluation.add_random_split"]], "add_result() (simrun.modular_reduced_model_inference.reduced_model.datasplitevaluation method)": [[619, "simrun.modular_reduced_model_inference.reduced_model.DataSplitEvaluation.add_result"]], "compute_scores() (simrun.modular_reduced_model_inference.reduced_model.datasplitevaluation method)": [[620, "simrun.modular_reduced_model_inference.reduced_model.DataSplitEvaluation.compute_scores"]], "get_splits() (simrun.modular_reduced_model_inference.reduced_model.datasplitevaluation method)": [[621, "simrun.modular_reduced_model_inference.reduced_model.DataSplitEvaluation.get_splits"]], "rm (simrun.modular_reduced_model_inference.reduced_model.dataview attribute)": [[622, "simrun.modular_reduced_model_inference.reduced_model.DataView.Rm"]], "mapping_dict (simrun.modular_reduced_model_inference.reduced_model.dataview attribute)": [[622, "simrun.modular_reduced_model_inference.reduced_model.DataView.mapping_dict"]], "simrun.modular_reduced_model_inference.reduced_model.dataview (built-in class)": [[622, "simrun.modular_reduced_model_inference.reduced_model.DataView"]], "setup() (simrun.modular_reduced_model_inference.reduced_model.dataview method)": [[623, "simrun.modular_reduced_model_inference.reduced_model.DataView.setup"]], "data (simrun.modular_reduced_model_inference.reduced_model.rm attribute)": [[624, "simrun.modular_reduced_model_inference.reduced_model.Rm.Data"]], "datasplitevaluation (simrun.modular_reduced_model_inference.reduced_model.rm attribute)": [[624, "simrun.modular_reduced_model_inference.reduced_model.Rm.DataSplitEvaluation"]], "data_extractors (simrun.modular_reduced_model_inference.reduced_model.rm attribute)": [[624, "simrun.modular_reduced_model_inference.reduced_model.Rm.data_extractors"]], "db (simrun.modular_reduced_model_inference.reduced_model.rm attribute)": [[624, "simrun.modular_reduced_model_inference.reduced_model.Rm.db"]], "n_trials (simrun.modular_reduced_model_inference.reduced_model.rm attribute)": [[624, "simrun.modular_reduced_model_inference.reduced_model.Rm.n_trials"]], "name (simrun.modular_reduced_model_inference.reduced_model.rm attribute)": [[624, "simrun.modular_reduced_model_inference.reduced_model.Rm.name"]], "results_remote (simrun.modular_reduced_model_inference.reduced_model.rm attribute)": [[624, "simrun.modular_reduced_model_inference.reduced_model.Rm.results_remote"]], "selected_indices (simrun.modular_reduced_model_inference.reduced_model.rm attribute)": [[624, "simrun.modular_reduced_model_inference.reduced_model.Rm.selected_indices"]], "simrun.modular_reduced_model_inference.reduced_model.rm (built-in class)": [[624, "simrun.modular_reduced_model_inference.reduced_model.Rm"]], "strategies (simrun.modular_reduced_model_inference.reduced_model.rm attribute)": [[624, "simrun.modular_reduced_model_inference.reduced_model.Rm.strategies"]], "tmax (simrun.modular_reduced_model_inference.reduced_model.rm attribute)": [[624, "simrun.modular_reduced_model_inference.reduced_model.Rm.tmax"]], "tmin (simrun.modular_reduced_model_inference.reduced_model.rm attribute)": [[624, "simrun.modular_reduced_model_inference.reduced_model.Rm.tmin"]], "width (simrun.modular_reduced_model_inference.reduced_model.rm attribute)": [[624, "simrun.modular_reduced_model_inference.reduced_model.Rm.width"]], "_gather_results() (simrun.modular_reduced_model_inference.reduced_model.rm method)": [[625, "simrun.modular_reduced_model_inference.reduced_model.Rm._gather_results"]], "add_data_extractor() (simrun.modular_reduced_model_inference.reduced_model.rm method)": [[626, "simrun.modular_reduced_model_inference.reduced_model.Rm.add_data_extractor"]], "add_strategy() (simrun.modular_reduced_model_inference.reduced_model.rm method)": [[627, "simrun.modular_reduced_model_inference.reduced_model.Rm.add_strategy"]], "extract() (simrun.modular_reduced_model_inference.reduced_model.rm method)": [[628, "simrun.modular_reduced_model_inference.reduced_model.Rm.extract"]], "get_n_trials() (simrun.modular_reduced_model_inference.reduced_model.rm method)": [[629, "simrun.modular_reduced_model_inference.reduced_model.Rm.get_n_trials"]], "get_results() (simrun.modular_reduced_model_inference.reduced_model.rm method)": [[630, "simrun.modular_reduced_model_inference.reduced_model.Rm.get_results"]], "run() (simrun.modular_reduced_model_inference.reduced_model.rm method)": [[631, "simrun.modular_reduced_model_inference.reduced_model.Rm.run"]], "simrun.modular_reduced_model_inference.reduced_model.get_n_workers_per_ip()": [[632, "simrun.modular_reduced_model_inference.reduced_model.get_n_workers_per_ip"]], "simrun.modular_reduced_model_inference.reduced_model": [[633, "module-simrun.modular_reduced_model_inference.reduced_model"]], "name (simrun.modular_reduced_model_inference.solver.solver_cobyla attribute)": [[634, "simrun.modular_reduced_model_inference.solver.Solver_COBYLA.name"]], "optimize (simrun.modular_reduced_model_inference.solver.solver_cobyla attribute)": [[634, "simrun.modular_reduced_model_inference.solver.Solver_COBYLA.optimize"]], "simrun.modular_reduced_model_inference.solver.solver_cobyla (built-in class)": [[634, "simrun.modular_reduced_model_inference.solver.Solver_COBYLA"]], "_optimize() (simrun.modular_reduced_model_inference.solver.solver_cobyla static method)": [[635, "simrun.modular_reduced_model_inference.solver.Solver_COBYLA._optimize"]], "_setup_optimizer() (simrun.modular_reduced_model_inference.solver.solver_cobyla method)": [[636, "simrun.modular_reduced_model_inference.solver.Solver_COBYLA._setup_optimizer"]], "name (simrun.modular_reduced_model_inference.solver._solver attribute)": [[637, "simrun.modular_reduced_model_inference.solver._Solver.name"]], "optimize (simrun.modular_reduced_model_inference.solver._solver attribute)": [[637, "simrun.modular_reduced_model_inference.solver._Solver.optimize"]], "simrun.modular_reduced_model_inference.solver._solver (built-in class)": [[637, "simrun.modular_reduced_model_inference.solver._Solver"]], "strategy (simrun.modular_reduced_model_inference.solver._solver attribute)": [[637, "simrun.modular_reduced_model_inference.solver._Solver.strategy"]], "_setup_optimizer() (simrun.modular_reduced_model_inference.solver._solver method)": [[638, "simrun.modular_reduced_model_inference.solver._Solver._setup_optimizer"]], "optimize_all_splits() (simrun.modular_reduced_model_inference.solver._solver method)": [[639, "simrun.modular_reduced_model_inference.solver._Solver.optimize_all_splits"]], "optimize_one_split() (simrun.modular_reduced_model_inference.solver._solver method)": [[640, "simrun.modular_reduced_model_inference.solver._Solver.optimize_one_split"]], "setup() (simrun.modular_reduced_model_inference.solver._solver method)": [[641, "simrun.modular_reduced_model_inference.solver._Solver.setup"]], "simrun.modular_reduced_model_inference.solver": [[642, "module-simrun.modular_reduced_model_inference.solver"]], "a (simrun.modular_reduced_model_inference.strategy.raisedcosinebasis attribute)": [[643, "simrun.modular_reduced_model_inference.strategy.RaisedCosineBasis.a"]], "backend (simrun.modular_reduced_model_inference.strategy.raisedcosinebasis attribute)": [[643, "simrun.modular_reduced_model_inference.strategy.RaisedCosineBasis.backend"]], "basis (simrun.modular_reduced_model_inference.strategy.raisedcosinebasis attribute)": [[643, "simrun.modular_reduced_model_inference.strategy.RaisedCosineBasis.basis"]], "c (simrun.modular_reduced_model_inference.strategy.raisedcosinebasis attribute)": [[643, "simrun.modular_reduced_model_inference.strategy.RaisedCosineBasis.c"]], "phis (simrun.modular_reduced_model_inference.strategy.raisedcosinebasis attribute)": [[643, "simrun.modular_reduced_model_inference.strategy.RaisedCosineBasis.phis"]], "reversed_ (simrun.modular_reduced_model_inference.strategy.raisedcosinebasis attribute)": [[643, "simrun.modular_reduced_model_inference.strategy.RaisedCosineBasis.reversed_"]], "simrun.modular_reduced_model_inference.strategy.raisedcosinebasis (built-in class)": [[643, "simrun.modular_reduced_model_inference.strategy.RaisedCosineBasis"]], "width (simrun.modular_reduced_model_inference.strategy.raisedcosinebasis attribute)": [[643, "simrun.modular_reduced_model_inference.strategy.RaisedCosineBasis.width"]], "compute() (simrun.modular_reduced_model_inference.strategy.raisedcosinebasis method)": [[644, "simrun.modular_reduced_model_inference.strategy.RaisedCosineBasis.compute"]], "get() (simrun.modular_reduced_model_inference.strategy.raisedcosinebasis method)": [[645, "simrun.modular_reduced_model_inference.strategy.RaisedCosineBasis.get"]], "get_raised_cosine() (simrun.modular_reduced_model_inference.strategy.raisedcosinebasis static method)": [[646, "simrun.modular_reduced_model_inference.strategy.RaisedCosineBasis.get_raised_cosine"]], "get_superposition() (simrun.modular_reduced_model_inference.strategy.raisedcosinebasis method)": [[647, "simrun.modular_reduced_model_inference.strategy.RaisedCosineBasis.get_superposition"]], "visualize() (simrun.modular_reduced_model_inference.strategy.raisedcosinebasis method)": [[648, "simrun.modular_reduced_model_inference.strategy.RaisedCosineBasis.visualize"]], "visualize_w() (simrun.modular_reduced_model_inference.strategy.raisedcosinebasis method)": [[649, "simrun.modular_reduced_model_inference.strategy.RaisedCosineBasis.visualize_w"]], "raisedcosinebasis_spatial (simrun.modular_reduced_model_inference.strategy.strategy_spatiotemporalraisedcosine attribute)": [[650, "simrun.modular_reduced_model_inference.strategy.Strategy_spatiotemporalRaisedCosine.RaisedCosineBasis_spatial"]], "raisedcosinebasis_temporal (simrun.modular_reduced_model_inference.strategy.strategy_spatiotemporalraisedcosine attribute)": [[650, "simrun.modular_reduced_model_inference.strategy.Strategy_spatiotemporalRaisedCosine.RaisedCosineBasis_temporal"]], "_get_score (simrun.modular_reduced_model_inference.strategy.strategy_spatiotemporalraisedcosine attribute)": [[650, "simrun.modular_reduced_model_inference.strategy.Strategy_spatiotemporalRaisedCosine._get_score"]], "base_vectors_arrays_dict (simrun.modular_reduced_model_inference.strategy.strategy_spatiotemporalraisedcosine attribute)": [[650, "simrun.modular_reduced_model_inference.strategy.Strategy_spatiotemporalRaisedCosine.base_vectors_arrays_dict"]], "convert_x (simrun.modular_reduced_model_inference.strategy.strategy_spatiotemporalraisedcosine attribute)": [[650, "simrun.modular_reduced_model_inference.strategy.Strategy_spatiotemporalRaisedCosine.convert_x"]], "groups (simrun.modular_reduced_model_inference.strategy.strategy_spatiotemporalraisedcosine attribute)": [[650, "simrun.modular_reduced_model_inference.strategy.Strategy_spatiotemporalRaisedCosine.groups"]], "len_t (simrun.modular_reduced_model_inference.strategy.strategy_spatiotemporalraisedcosine attribute)": [[650, "simrun.modular_reduced_model_inference.strategy.Strategy_spatiotemporalRaisedCosine.len_t"]], "len_trials (simrun.modular_reduced_model_inference.strategy.strategy_spatiotemporalraisedcosine attribute)": [[650, "simrun.modular_reduced_model_inference.strategy.Strategy_spatiotemporalRaisedCosine.len_trials"]], "len_z (simrun.modular_reduced_model_inference.strategy.strategy_spatiotemporalraisedcosine attribute)": [[650, "simrun.modular_reduced_model_inference.strategy.Strategy_spatiotemporalRaisedCosine.len_z"]], "simrun.modular_reduced_model_inference.strategy.strategy_spatiotemporalraisedcosine (built-in class)": [[650, "simrun.modular_reduced_model_inference.strategy.Strategy_spatiotemporalRaisedCosine"]], "_convert_x_static() (simrun.modular_reduced_model_inference.strategy.strategy_spatiotemporalraisedcosine static method)": [[651, "simrun.modular_reduced_model_inference.strategy.Strategy_spatiotemporalRaisedCosine._convert_x_static"]], "_get_score_static() (simrun.modular_reduced_model_inference.strategy.strategy_spatiotemporalraisedcosine static method)": [[652, "simrun.modular_reduced_model_inference.strategy.Strategy_spatiotemporalRaisedCosine._get_score_static"]], "_get_x0() (simrun.modular_reduced_model_inference.strategy.strategy_spatiotemporalraisedcosine method)": [[653, "simrun.modular_reduced_model_inference.strategy.Strategy_spatiotemporalRaisedCosine._get_x0"]], "_setup() (simrun.modular_reduced_model_inference.strategy.strategy_spatiotemporalraisedcosine method)": [[654, "simrun.modular_reduced_model_inference.strategy.Strategy_spatiotemporalRaisedCosine._setup"]], "compute_basis() (simrun.modular_reduced_model_inference.strategy.strategy_spatiotemporalraisedcosine method)": [[655, "simrun.modular_reduced_model_inference.strategy.Strategy_spatiotemporalRaisedCosine.compute_basis"]], "get_color_by_group() (simrun.modular_reduced_model_inference.strategy.strategy_spatiotemporalraisedcosine method)": [[656, "simrun.modular_reduced_model_inference.strategy.Strategy_spatiotemporalRaisedCosine.get_color_by_group"]], "normalize() (simrun.modular_reduced_model_inference.strategy.strategy_spatiotemporalraisedcosine method)": [[657, "simrun.modular_reduced_model_inference.strategy.Strategy_spatiotemporalRaisedCosine.normalize"]], "visualize() (simrun.modular_reduced_model_inference.strategy.strategy_spatiotemporalraisedcosine method)": [[658, "simrun.modular_reduced_model_inference.strategy.Strategy_spatiotemporalRaisedCosine.visualize"]], "simrun.modular_reduced_model_inference.strategy._strategy (built-in class)": [[659, "simrun.modular_reduced_model_inference.strategy._Strategy"]], "_get_score() (simrun.modular_reduced_model_inference.strategy._strategy method)": [[660, "simrun.modular_reduced_model_inference.strategy._Strategy._get_score"]], "_get_x0() (simrun.modular_reduced_model_inference.strategy._strategy method)": [[661, "simrun.modular_reduced_model_inference.strategy._Strategy._get_x0"]], "_objective_function_static() (simrun.modular_reduced_model_inference.strategy._strategy static method)": [[662, "simrun.modular_reduced_model_inference.strategy._Strategy._objective_function_static"]], "_setup() (simrun.modular_reduced_model_inference.strategy._strategy method)": [[663, "simrun.modular_reduced_model_inference.strategy._Strategy._setup"]], "add_solver() (simrun.modular_reduced_model_inference.strategy._strategy method)": [[664, "simrun.modular_reduced_model_inference.strategy._Strategy.add_solver"]], "get_score_static() (simrun.modular_reduced_model_inference.strategy._strategy static method)": [[665, "simrun.modular_reduced_model_inference.strategy._Strategy.get_score_static"]], "get_y_static() (simrun.modular_reduced_model_inference.strategy._strategy static method)": [[666, "simrun.modular_reduced_model_inference.strategy._Strategy.get_y_static"]], "set_split() (simrun.modular_reduced_model_inference.strategy._strategy method)": [[667, "simrun.modular_reduced_model_inference.strategy._Strategy.set_split"]], "setup() (simrun.modular_reduced_model_inference.strategy._strategy method)": [[668, "simrun.modular_reduced_model_inference.strategy._Strategy.setup"]], "simrun.modular_reduced_model_inference.strategy.clear_memory()": [[669, "simrun.modular_reduced_model_inference.strategy.clear_memory"]], "simrun.modular_reduced_model_inference.strategy.convert_to_numpy()": [[670, "simrun.modular_reduced_model_inference.strategy.convert_to_numpy"]], "simrun.modular_reduced_model_inference.strategy.dereference()": [[671, "simrun.modular_reduced_model_inference.strategy.dereference"]], "simrun.modular_reduced_model_inference.strategy": [[672, "module-simrun.modular_reduced_model_inference.strategy"]], "simrun.modular_reduced_model_inference.strategy.make_weakref()": [[673, "simrun.modular_reduced_model_inference.strategy.make_weakref"]], "simrun.parameters_to_cell": [[674, "module-simrun.parameters_to_cell"]], "simrun.parameters_to_cell.parameters_to_cell()": [[675, "simrun.parameters_to_cell.parameters_to_cell"]], "simrun.rerun_db.opaque (built-in class)": [[676, "simrun.rerun_db.Opaque"]], "simrun.rerun_db": [[677, "module-simrun.rerun_db"]], "simrun.rerun_db.rerun_db()": [[678, "simrun.rerun_db.rerun_db"]], "db (simrun.robust_dask_delayed_execution.robustdaskdelayedexecution attribute)": [[679, "simrun.robust_dask_delayed_execution.RobustDaskDelayedExecution.db"]], "simrun.robust_dask_delayed_execution.robustdaskdelayedexecution (built-in class)": [[679, "simrun.robust_dask_delayed_execution.RobustDaskDelayedExecution"]], "add_delayed_to_db() (simrun.robust_dask_delayed_execution.robustdaskdelayedexecution method)": [[680, "simrun.robust_dask_delayed_execution.RobustDaskDelayedExecution.add_delayed_to_db"]], "get_status() (simrun.robust_dask_delayed_execution.robustdaskdelayedexecution method)": [[681, "simrun.robust_dask_delayed_execution.RobustDaskDelayedExecution.get_status"]], "reset_status() (simrun.robust_dask_delayed_execution.robustdaskdelayedexecution method)": [[682, "simrun.robust_dask_delayed_execution.RobustDaskDelayedExecution.reset_status"]], "run_db() (simrun.robust_dask_delayed_execution.robustdaskdelayedexecution method)": [[683, "simrun.robust_dask_delayed_execution.RobustDaskDelayedExecution.run_db"]], "simrun.robust_dask_delayed_execution._assert_value()": [[684, "simrun.robust_dask_delayed_execution._assert_value"]], "simrun.robust_dask_delayed_execution._wrapper()": [[685, "simrun.robust_dask_delayed_execution._wrapper"]], "simrun.robust_dask_delayed_execution": [[686, "module-simrun.robust_dask_delayed_execution"]], "simrun.run_existing_synapse_activations": [[687, "module-simrun.run_existing_synapse_activations"]], "simrun.run_existing_synapse_activations.run_existing_synapse_activations()": [[688, "simrun.run_existing_synapse_activations.run_existing_synapse_activations"]], "simrun.run_new_simulations": [[689, "module-simrun.run_new_simulations"]], "simrun.run_new_simulations.run_new_simulations()": [[690, "simrun.run_new_simulations.run_new_simulations"]], "simrun.seed_manager.get_seed()": [[691, "simrun.seed_manager.get_seed"]], "simrun.seed_manager": [[692, "module-simrun.seed_manager"]], "simrun.sim_trial_to_cell_object": [[693, "module-simrun.sim_trial_to_cell_object"]], "simrun.sim_trial_to_cell_object.simtrial_to_cell_object()": [[694, "simrun.sim_trial_to_cell_object.simtrial_to_cell_object"]], "simrun.sim_trial_to_cell_object.trial_to_cell_object()": [[695, "simrun.sim_trial_to_cell_object.trial_to_cell_object"]], "ampa_component (simrun.synaptic_strength_fitting.psps attribute)": [[696, "simrun.synaptic_strength_fitting.PSPs.AMPA_component"]], "nmda_component (simrun.synaptic_strength_fitting.psps attribute)": [[696, "simrun.synaptic_strength_fitting.PSPs.NMDA_component"]], "confile (simrun.synaptic_strength_fitting.psps attribute)": [[696, "simrun.synaptic_strength_fitting.PSPs.confile"]], "exc_inh (simrun.synaptic_strength_fitting.psps attribute)": [[696, "simrun.synaptic_strength_fitting.PSPs.exc_inh"]], "futures (simrun.synaptic_strength_fitting.psps attribute)": [[696, "simrun.synaptic_strength_fitting.PSPs.futures"]], "gexrange (simrun.synaptic_strength_fitting.psps attribute)": [[696, "simrun.synaptic_strength_fitting.PSPs.gExRange"]], "mode (simrun.synaptic_strength_fitting.psps attribute)": [[696, "simrun.synaptic_strength_fitting.PSPs.mode"]], "network_param (simrun.synaptic_strength_fitting.psps attribute)": [[696, "simrun.synaptic_strength_fitting.PSPs.network_param"]], "network_params_by_celltype (simrun.synaptic_strength_fitting.psps attribute)": [[696, "simrun.synaptic_strength_fitting.PSPs.network_params_by_celltype"]], "neuron_param (simrun.synaptic_strength_fitting.psps attribute)": [[696, "simrun.synaptic_strength_fitting.PSPs.neuron_param"]], "result (simrun.synaptic_strength_fitting.psps attribute)": [[696, "simrun.synaptic_strength_fitting.PSPs.result"]], "simrun.synaptic_strength_fitting.psps (built-in class)": [[696, "simrun.synaptic_strength_fitting.PSPs"]], "tend (simrun.synaptic_strength_fitting.psps attribute)": [[696, "simrun.synaptic_strength_fitting.PSPs.tEnd"]], "tstim (simrun.synaptic_strength_fitting.psps attribute)": [[696, "simrun.synaptic_strength_fitting.PSPs.tStim"]], "vardt (simrun.synaptic_strength_fitting.psps attribute)": [[696, "simrun.synaptic_strength_fitting.PSPs.vardt"]], "_get_cell_and_nw_map() (simrun.synaptic_strength_fitting.psps method)": [[697, "simrun.synaptic_strength_fitting.PSPs._get_cell_and_nw_map"]], "_setup_computation() (simrun.synaptic_strength_fitting.psps method)": [[698, "simrun.synaptic_strength_fitting.PSPs._setup_computation"]], "get_merged_synapse_coordinates() (simrun.synaptic_strength_fitting.psps method)": [[699, "simrun.synaptic_strength_fitting.PSPs.get_merged_synapse_coordinates"]], "get_optimal_g() (simrun.synaptic_strength_fitting.psps method)": [[700, "simrun.synaptic_strength_fitting.PSPs.get_optimal_g"]], "get_summary_statistics() (simrun.synaptic_strength_fitting.psps method)": [[701, "simrun.synaptic_strength_fitting.PSPs.get_summary_statistics"]], "get_synapse_coordinates() (simrun.synaptic_strength_fitting.psps method)": [[702, "simrun.synaptic_strength_fitting.PSPs.get_synapse_coordinates"]], "get_synapse_coordinates_with_psp_amplitude() (simrun.synaptic_strength_fitting.psps method)": [[703, "simrun.synaptic_strength_fitting.PSPs.get_synapse_coordinates_with_psp_amplitude"]], "get_voltage_and_timing() (simrun.synaptic_strength_fitting.psps method)": [[704, "simrun.synaptic_strength_fitting.PSPs.get_voltage_and_timing"]], "get_voltage_traces() (simrun.synaptic_strength_fitting.psps method)": [[705, "simrun.synaptic_strength_fitting.PSPs.get_voltage_traces"]], "plot_vt() (simrun.synaptic_strength_fitting.psps method)": [[706, "simrun.synaptic_strength_fitting.PSPs.plot_vt"]], "run() (simrun.synaptic_strength_fitting.psps method)": [[707, "simrun.synaptic_strength_fitting.PSPs.run"]], "visualize_psps() (simrun.synaptic_strength_fitting.psps method)": [[708, "simrun.synaptic_strength_fitting.PSPs.visualize_psps"]], "simrun.synaptic_strength_fitting.analyze_voltage_trace()": [[709, "simrun.synaptic_strength_fitting.analyze_voltage_trace"]], "simrun.synaptic_strength_fitting.calculate_optimal_g()": [[710, "simrun.synaptic_strength_fitting.calculate_optimal_g"]], "simrun.synaptic_strength_fitting.epsp_summary_statistics()": [[711, "simrun.synaptic_strength_fitting.ePSP_summary_statistics"]], "simrun.synaptic_strength_fitting.generate_ex_network_param_from_network_embedding()": [[712, "simrun.synaptic_strength_fitting.generate_ex_network_param_from_network_embedding"]], "simrun.synaptic_strength_fitting.generate_inh_network_param_from_network_embedding()": [[713, "simrun.synaptic_strength_fitting.generate_inh_network_param_from_network_embedding"]], "simrun.synaptic_strength_fitting.get_optimal_g()": [[714, "simrun.synaptic_strength_fitting.get_optimal_g"]], "simrun.synaptic_strength_fitting.get_summary_statistics()": [[715, "simrun.synaptic_strength_fitting.get_summary_statistics"]], "simrun.synaptic_strength_fitting.get_tmax_vmax()": [[716, "simrun.synaptic_strength_fitting.get_tMax_vMax"]], "simrun.synaptic_strength_fitting.get_tmax_vmax_baseline()": [[717, "simrun.synaptic_strength_fitting.get_tMax_vMax_baseline"]], "simrun.synaptic_strength_fitting.get_voltage_and_timing()": [[718, "simrun.synaptic_strength_fitting.get_voltage_and_timing"]], "simrun.synaptic_strength_fitting": [[719, "module-simrun.synaptic_strength_fitting"]], "simrun.synaptic_strength_fitting.linear_fit()": [[720, "simrun.synaptic_strength_fitting.linear_fit"]], "simrun.synaptic_strength_fitting.linear_fit_pdf()": [[721, "simrun.synaptic_strength_fitting.linear_fit_pdf"]], "simrun.synaptic_strength_fitting.merge_celltypes()": [[722, "simrun.synaptic_strength_fitting.merge_celltypes"]], "simrun.synaptic_strength_fitting.run_ex_synapse()": [[723, "simrun.synaptic_strength_fitting.run_ex_synapse"]], "simrun.synaptic_strength_fitting.run_ex_synapses()": [[724, "simrun.synaptic_strength_fitting.run_ex_synapses"]], "simrun.synaptic_strength_fitting.set_ex_synapse_weight()": [[725, "simrun.synaptic_strength_fitting.set_ex_synapse_weight"]], "simrun.synaptic_strength_fitting.set_inh_synapse_weight()": [[726, "simrun.synaptic_strength_fitting.set_inh_synapse_weight"]], "simrun.utils.chunkit()": [[727, "simrun.utils.chunkIt"]], "simrun.utils.get_cellnumbers_from_confile()": [[728, "simrun.utils.get_cellnumbers_from_confile"]], "simrun.utils.get_default_arguments()": [[729, "simrun.utils.get_default_arguments"]], "simrun.utils.get_fraction_of_landmarkascii()": [[730, "simrun.utils.get_fraction_of_landmarkAscii"]], "simrun.utils.get_fraction_of_landmarkascii_dir()": [[731, "simrun.utils.get_fraction_of_landmarkAscii_dir"]], "simrun.utils": [[732, "module-simrun.utils"]], "simrun.utils.load_param_file_if_path_is_provided()": [[733, "simrun.utils.load_param_file_if_path_is_provided"]], "simrun.utils.select_cells_that_spike_in_interval()": [[734, "simrun.utils.select_cells_that_spike_in_interval"]], "simrun.utils.set_default_arguments_if_not_set()": [[735, "simrun.utils.set_default_arguments_if_not_set"]], "simrun.utils.silence_stdout()": [[736, "simrun.utils.silence_stdout"]], "simrun.utils.split_network_param_in_one_elem_dicts()": [[737, "simrun.utils.split_network_param_in_one_elem_dicts"]], "simrun.utils.tar_folder()": [[738, "simrun.utils.tar_folder"]], "single_cell_parser.event (built-in class)": [[739, "single_cell_parser.Event"]], "single_cell_parser.analyze": [[740, "module-single_cell_parser.analyze"]], "single_cell_parser.analyze.membrane_potential_analysis.psth_from_spike_times()": [[741, "single_cell_parser.analyze.membrane_potential_analysis.PSTH_from_spike_times"]], "label (single_cell_parser.analyze.membrane_potential_analysis.recordingsite attribute)": [[742, "single_cell_parser.analyze.membrane_potential_analysis.RecordingSite.label"]], "secid (single_cell_parser.analyze.membrane_potential_analysis.recordingsite attribute)": [[742, "single_cell_parser.analyze.membrane_potential_analysis.RecordingSite.secID"]], "segid (single_cell_parser.analyze.membrane_potential_analysis.recordingsite attribute)": [[742, "single_cell_parser.analyze.membrane_potential_analysis.RecordingSite.segID"]], "single_cell_parser.analyze.membrane_potential_analysis.recordingsite (built-in class)": [[742, "single_cell_parser.analyze.membrane_potential_analysis.RecordingSite"]], "vrecordings (single_cell_parser.analyze.membrane_potential_analysis.recordingsite attribute)": [[742, "single_cell_parser.analyze.membrane_potential_analysis.RecordingSite.vRecordings"]], "cell (single_cell_parser.analyze.membrane_potential_analysis.recordingsitemanager attribute)": [[743, "single_cell_parser.analyze.membrane_potential_analysis.RecordingSiteManager.cell"]], "recordingsites (single_cell_parser.analyze.membrane_potential_analysis.recordingsitemanager attribute)": [[743, "single_cell_parser.analyze.membrane_potential_analysis.RecordingSiteManager.recordingSites"]], "single_cell_parser.analyze.membrane_potential_analysis.recordingsitemanager (built-in class)": [[743, "single_cell_parser.analyze.membrane_potential_analysis.RecordingSiteManager"]], "_read_landmark_file() (single_cell_parser.analyze.membrane_potential_analysis.recordingsitemanager method)": [[744, "single_cell_parser.analyze.membrane_potential_analysis.RecordingSiteManager._read_landmark_file"]], "set_up_recording_site() (single_cell_parser.analyze.membrane_potential_analysis.recordingsitemanager method)": [[745, "single_cell_parser.analyze.membrane_potential_analysis.RecordingSiteManager.set_up_recording_site"]], "update_recordings() (single_cell_parser.analyze.membrane_potential_analysis.recordingsitemanager method)": [[746, "single_cell_parser.analyze.membrane_potential_analysis.RecordingSiteManager.update_recordings"]], "single_cell_parser.analyze.membrane_potential_analysis.spikeinit (built-in class)": [[747, "single_cell_parser.analyze.membrane_potential_analysis.SpikeInit"]], "analyze_single_spike() (single_cell_parser.analyze.membrane_potential_analysis.spikeinit static method)": [[748, "single_cell_parser.analyze.membrane_potential_analysis.SpikeInit.analyze_single_spike"]], "vm_steady_state() (single_cell_parser.analyze.membrane_potential_analysis.spikeinit static method)": [[749, "single_cell_parser.analyze.membrane_potential_analysis.SpikeInit.vm_steady_state"]], "single_cell_parser.analyze.membrane_potential_analysis.compute_mean_psp_amplitude()": [[750, "single_cell_parser.analyze.membrane_potential_analysis.compute_mean_psp_amplitude"]], "single_cell_parser.analyze.membrane_potential_analysis.compute_upsp_amplitude()": [[751, "single_cell_parser.analyze.membrane_potential_analysis.compute_uPSP_amplitude"]], "single_cell_parser.analyze.membrane_potential_analysis.compute_vm_histogram()": [[752, "single_cell_parser.analyze.membrane_potential_analysis.compute_vm_histogram"]], "single_cell_parser.analyze.membrane_potential_analysis.compute_vm_std_windows()": [[753, "single_cell_parser.analyze.membrane_potential_analysis.compute_vm_std_windows"]], "single_cell_parser.analyze.membrane_potential_analysis": [[754, "module-single_cell_parser.analyze.membrane_potential_analysis"]], "single_cell_parser.analyze.membrane_potential_analysis.simple_spike_detection()": [[755, "single_cell_parser.analyze.membrane_potential_analysis.simple_spike_detection"]], "single_cell_parser.analyze.membrane_potential_analysis.vm_mean()": [[756, "single_cell_parser.analyze.membrane_potential_analysis.vm_mean"]], "single_cell_parser.analyze.membrane_potential_analysis.vm_std()": [[757, "single_cell_parser.analyze.membrane_potential_analysis.vm_std"]], "single_cell_parser.analyze.synanalysis.compute_distance_to_soma()": [[758, "single_cell_parser.analyze.synanalysis.compute_distance_to_soma"]], "single_cell_parser.analyze.synanalysis.compute_syn_distance()": [[759, "single_cell_parser.analyze.synanalysis.compute_syn_distance"]], "single_cell_parser.analyze.synanalysis.compute_syn_distances()": [[760, "single_cell_parser.analyze.synanalysis.compute_syn_distances"]], "single_cell_parser.analyze.synanalysis.compute_syn_distances_2dprojected()": [[761, "single_cell_parser.analyze.synanalysis.compute_syn_distances_2Dprojected"]], "single_cell_parser.analyze.synanalysis.compute_synapse_distances_times()": [[762, "single_cell_parser.analyze.synanalysis.compute_synapse_distances_times"]], "single_cell_parser.analyze.synanalysis.get_dist()": [[763, "single_cell_parser.analyze.synanalysis.get_dist"]], "single_cell_parser.analyze.synanalysis": [[764, "module-single_cell_parser.analyze.synanalysis"]], "single_cell_parser.analyze.synanalysis.synapse_activation_times()": [[765, "single_cell_parser.analyze.synanalysis.synapse_activation_times"]], "e (single_cell_parser.cell.cell attribute)": [[766, "single_cell_parser.cell.Cell.E"]], "branches (single_cell_parser.cell.cell attribute)": [[766, "single_cell_parser.cell.Cell.branches"]], "changesynparamdict (single_cell_parser.cell.cell attribute)": [[766, "single_cell_parser.cell.Cell.changeSynParamDict"]], "hoc_path (single_cell_parser.cell.cell attribute)": [[766, "single_cell_parser.cell.Cell.hoc_path"]], "id (single_cell_parser.cell.cell attribute)": [[766, "single_cell_parser.cell.Cell.id"]], "neuron_param (single_cell_parser.cell.cell attribute)": [[766, "single_cell_parser.cell.Cell.neuron_param"]], "section_adjacency_map (single_cell_parser.cell.cell attribute)": [[766, "single_cell_parser.cell.Cell.section_adjacency_map"]], "sections (single_cell_parser.cell.cell attribute)": [[766, "single_cell_parser.cell.Cell.sections"]], "single_cell_parser.cell.cell (built-in class)": [[766, "single_cell_parser.cell.Cell"]], "soma (single_cell_parser.cell.cell attribute)": [[766, "single_cell_parser.cell.Cell.soma"]], "structures (single_cell_parser.cell.cell attribute)": [[766, "single_cell_parser.cell.Cell.structures"]], "synapses (single_cell_parser.cell.cell attribute)": [[766, "single_cell_parser.cell.Cell.synapses"]], "tvec (single_cell_parser.cell.cell attribute)": [[766, "single_cell_parser.cell.Cell.tVec"]], "tree (single_cell_parser.cell.cell attribute)": [[766, "single_cell_parser.cell.Cell.tree"]], "add_synapse() (single_cell_parser.cell.cell method)": [[767, "single_cell_parser.cell.Cell.add_synapse"]], "distance_between_pts() (single_cell_parser.cell.cell method)": [[768, "single_cell_parser.cell.Cell.distance_between_pts"]], "distance_to_soma() (single_cell_parser.cell.cell method)": [[769, "single_cell_parser.cell.Cell.distance_to_soma"]], "get_range_var_conductances() (single_cell_parser.cell.cell method)": [[770, "single_cell_parser.cell.Cell.get_range_var_conductances"]], "get_section_adjacancy_map() (single_cell_parser.cell.cell method)": [[771, "single_cell_parser.cell.Cell.get_section_adjacancy_map"]], "get_synapse_activation_dataframe() (single_cell_parser.cell.cell method)": [[772, "single_cell_parser.cell.Cell.get_synapse_activation_dataframe"]], "init_time_recording() (single_cell_parser.cell.cell method)": [[773, "single_cell_parser.cell.Cell.init_time_recording"]], "max_distance() (single_cell_parser.cell.cell method)": [[774, "single_cell_parser.cell.Cell.max_distance"]], "re_init_cell() (single_cell_parser.cell.cell method)": [[775, "single_cell_parser.cell.Cell.re_init_cell"]], "record_range_var() (single_cell_parser.cell.cell method)": [[776, "single_cell_parser.cell.Cell.record_range_var"]], "remove_synapses() (single_cell_parser.cell.cell method)": [[777, "single_cell_parser.cell.Cell.remove_synapses"]], "playing (single_cell_parser.cell.pointcell attribute)": [[778, "single_cell_parser.cell.PointCell.playing"]], "single_cell_parser.cell.pointcell (built-in class)": [[778, "single_cell_parser.cell.PointCell"]], "spiketimes (single_cell_parser.cell.pointcell attribute)": [[778, "single_cell_parser.cell.PointCell.spikeTimes"]], "spikevec (single_cell_parser.cell.pointcell attribute)": [[778, "single_cell_parser.cell.PointCell.spikeVec"]], "spikes (single_cell_parser.cell.pointcell attribute)": [[778, "single_cell_parser.cell.PointCell.spikes"]], "synapselist (single_cell_parser.cell.pointcell attribute)": [[778, "single_cell_parser.cell.PointCell.synapseList"]], "_add_synapse_pointer() (single_cell_parser.cell.pointcell method)": [[779, "single_cell_parser.cell.PointCell._add_synapse_pointer"]], "_next_interval() (single_cell_parser.cell.pointcell method)": [[780, "single_cell_parser.cell.PointCell._next_interval"]], "append() (single_cell_parser.cell.pointcell method)": [[781, "single_cell_parser.cell.PointCell.append"]], "compute_spike_train_times() (single_cell_parser.cell.pointcell method)": [[782, "single_cell_parser.cell.PointCell.compute_spike_train_times"]], "is_active() (single_cell_parser.cell.pointcell method)": [[783, "single_cell_parser.cell.PointCell.is_active"]], "play() (single_cell_parser.cell.pointcell method)": [[784, "single_cell_parser.cell.PointCell.play"]], "turn_off() (single_cell_parser.cell.pointcell method)": [[785, "single_cell_parser.cell.PointCell.turn_off"]], "area (single_cell_parser.cell.pysection attribute)": [[786, "single_cell_parser.cell.PySection.area"]], "bounds (single_cell_parser.cell.pysection attribute)": [[786, "single_cell_parser.cell.PySection.bounds"]], "diamlist (single_cell_parser.cell.pysection attribute)": [[786, "single_cell_parser.cell.PySection.diamList"]], "label (single_cell_parser.cell.pysection attribute)": [[786, "single_cell_parser.cell.PySection.label"]], "label_detailed (single_cell_parser.cell.pysection attribute)": [[786, "single_cell_parser.cell.PySection.label_detailed"]], "nrofpts (single_cell_parser.cell.pysection attribute)": [[786, "single_cell_parser.cell.PySection.nrOfPts"]], "parent (single_cell_parser.cell.pysection attribute)": [[786, "single_cell_parser.cell.PySection.parent"]], "parentx (single_cell_parser.cell.pysection attribute)": [[786, "single_cell_parser.cell.PySection.parentx"]], "pts (single_cell_parser.cell.pysection attribute)": [[786, "single_cell_parser.cell.PySection.pts"]], "recvlist (single_cell_parser.cell.pysection attribute)": [[786, "single_cell_parser.cell.PySection.recVList"]], "recordvars (single_cell_parser.cell.pysection attribute)": [[786, "single_cell_parser.cell.PySection.recordVars"]], "relpts (single_cell_parser.cell.pysection attribute)": [[786, "single_cell_parser.cell.PySection.relPts"]], "segdiams (single_cell_parser.cell.pysection attribute)": [[786, "single_cell_parser.cell.PySection.segDiams"]], "segpts (single_cell_parser.cell.pysection attribute)": [[786, "single_cell_parser.cell.PySection.segPts"]], "segx (single_cell_parser.cell.pysection attribute)": [[786, "single_cell_parser.cell.PySection.segx"]], "single_cell_parser.cell.pysection (built-in class)": [[786, "single_cell_parser.cell.PySection"]], "_compute_bounds() (single_cell_parser.cell.pysection method)": [[787, "single_cell_parser.cell.PySection._compute_bounds"]], "_compute_relative_pts() (single_cell_parser.cell.pysection method)": [[788, "single_cell_parser.cell.PySection._compute_relative_pts"]], "_compute_seg_diameters() (single_cell_parser.cell.pysection method)": [[789, "single_cell_parser.cell.PySection._compute_seg_diameters"]], "_compute_seg_pts() (single_cell_parser.cell.pysection method)": [[790, "single_cell_parser.cell.PySection._compute_seg_pts"]], "_compute_total_area() (single_cell_parser.cell.pysection method)": [[791, "single_cell_parser.cell.PySection._compute_total_area"]], "_get_seg_conductance() (single_cell_parser.cell.pysection method)": [[792, "single_cell_parser.cell.PySection._get_seg_conductance"]], "_init_range_var_recording() (single_cell_parser.cell.pysection method)": [[793, "single_cell_parser.cell.PySection._init_range_var_recording"]], "_init_vm_recording() (single_cell_parser.cell.pysection method)": [[794, "single_cell_parser.cell.PySection._init_vm_recording"]], "_re_init_range_var_recording() (single_cell_parser.cell.pysection method)": [[795, "single_cell_parser.cell.PySection._re_init_range_var_recording"]], "_re_init_vm_recording() (single_cell_parser.cell.pysection method)": [[796, "single_cell_parser.cell.PySection._re_init_vm_recording"]], "get_range_conductances() (single_cell_parser.cell.pysection method)": [[797, "single_cell_parser.cell.PySection.get_range_conductances"]], "set_3d_geometry() (single_cell_parser.cell.pysection method)": [[798, "single_cell_parser.cell.PySection.set_3d_geometry"]], "set_segments() (single_cell_parser.cell.pysection method)": [[799, "single_cell_parser.cell.PySection.set_segments"]], "single_cell_parser.cell": [[800, "module-single_cell_parser.cell"]], "single_cell_parser.cell_modify_functions.bac_injection.bac_injection()": [[801, "single_cell_parser.cell_modify_functions.BAC_injection.BAC_injection"]], "single_cell_parser.cell_modify_functions.bac_injection": [[802, "module-single_cell_parser.cell_modify_functions.BAC_injection"]], "single_cell_parser.cell_modify_functions.apical_current_injection.apical_current_injection()": [[803, "single_cell_parser.cell_modify_functions.apical_current_injection.apical_current_injection"]], "single_cell_parser.cell_modify_functions.apical_current_injection": [[804, "module-single_cell_parser.cell_modify_functions.apical_current_injection"]], "single_cell_parser.cell_modify_functions.apical_epsp_injection.apical_epsp_injection()": [[805, "single_cell_parser.cell_modify_functions.apical_epsp_injection.apical_epsp_injection"]], "single_cell_parser.cell_modify_functions.apical_epsp_injection": [[806, "module-single_cell_parser.cell_modify_functions.apical_epsp_injection"]], "single_cell_parser.cell_modify_functions.blender_recorder.blender_recorder()": [[807, "single_cell_parser.cell_modify_functions.blender_recorder.blender_recorder"]], "single_cell_parser.cell_modify_functions.blender_recorder": [[808, "module-single_cell_parser.cell_modify_functions.blender_recorder"]], "single_cell_parser.cell_modify_functions.get()": [[809, "single_cell_parser.cell_modify_functions.get"]], "single_cell_parser.cell_modify_functions": [[810, "module-single_cell_parser.cell_modify_functions"]], "single_cell_parser.cell_modify_functions.scale_apical": [[811, "module-single_cell_parser.cell_modify_functions.scale_apical"]], "single_cell_parser.cell_modify_functions.scale_apical.scale_apical()": [[812, "single_cell_parser.cell_modify_functions.scale_apical.scale_apical"]], "single_cell_parser.cell_modify_functions.scale_apical.scale_apical_dendrite()": [[813, "single_cell_parser.cell_modify_functions.scale_apical.scale_apical_dendrite"]], "single_cell_parser.cell_modify_functions.scale_apical.scale_by_detailed_compartment()": [[814, "single_cell_parser.cell_modify_functions.scale_apical.scale_by_detailed_compartment"]], "single_cell_parser.cell_modify_functions.soma_current_injection": [[815, "module-single_cell_parser.cell_modify_functions.soma_current_injection"]], "single_cell_parser.cell_modify_functions.soma_current_injection.soma_current_injection()": [[816, "single_cell_parser.cell_modify_functions.soma_current_injection.soma_current_injection"]], "single_cell_parser.cell_modify_functions.synaptic_input": [[817, "module-single_cell_parser.cell_modify_functions.synaptic_input"]], "single_cell_parser.cell_modify_functions.synaptic_input.synaptic_input()": [[818, "single_cell_parser.cell_modify_functions.synaptic_input.synaptic_input"]], "cell (single_cell_parser.cell_parser.cellparser attribute)": [[819, "single_cell_parser.cell_parser.CellParser.cell"]], "cell_modify_functions_applied (single_cell_parser.cell_parser.cellparser attribute)": [[819, "single_cell_parser.cell_parser.CellParser.cell_modify_functions_applied"]], "hoc_path (single_cell_parser.cell_parser.cellparser attribute)": [[819, "single_cell_parser.cell_parser.CellParser.hoc_path"]], "membraneparams (single_cell_parser.cell_parser.cellparser attribute)": [[819, "single_cell_parser.cell_parser.CellParser.membraneParams"]], "single_cell_parser.cell_parser.cellparser (built-in class)": [[819, "single_cell_parser.cell_parser.CellParser"]], "_add_spines() (single_cell_parser.cell_parser.cellparser method)": [[820, "single_cell_parser.cell_parser.CellParser._add_spines"]], "_add_spines_ar() (single_cell_parser.cell_parser.cellparser method)": [[821, "single_cell_parser.cell_parser.CellParser._add_spines_ar"]], "_create_ais() (single_cell_parser.cell_parser.cellparser method)": [[822, "single_cell_parser.cell_parser.CellParser._create_ais"]], "_create_ais_hay2013() (single_cell_parser.cell_parser.cellparser method)": [[823, "single_cell_parser.cell_parser.CellParser._create_ais_Hay2013"]], "_insert_ion_properties() (single_cell_parser.cell_parser.cellparser method)": [[824, "single_cell_parser.cell_parser.CellParser._insert_ion_properties"]], "apply_cell_modify_functions() (single_cell_parser.cell_parser.cellparser method)": [[825, "single_cell_parser.cell_parser.CellParser.apply_cell_modify_functions"]], "determine_nseg() (single_cell_parser.cell_parser.cellparser method)": [[826, "single_cell_parser.cell_parser.CellParser.determine_nseg"]], "get_cell() (single_cell_parser.cell_parser.cellparser method)": [[827, "single_cell_parser.cell_parser.CellParser.get_cell"]], "insert_hh_membrane() (single_cell_parser.cell_parser.cellparser method)": [[828, "single_cell_parser.cell_parser.CellParser.insert_hh_membrane"]], "insert_membrane_properties() (single_cell_parser.cell_parser.cellparser method)": [[829, "single_cell_parser.cell_parser.CellParser.insert_membrane_properties"]], "insert_passive_membrane() (single_cell_parser.cell_parser.cellparser method)": [[830, "single_cell_parser.cell_parser.CellParser.insert_passive_membrane"]], "insert_range_mechanisms() (single_cell_parser.cell_parser.cellparser method)": [[831, "single_cell_parser.cell_parser.CellParser.insert_range_mechanisms"]], "set_up_biophysics() (single_cell_parser.cell_parser.cellparser method)": [[832, "single_cell_parser.cell_parser.CellParser.set_up_biophysics"]], "spatialgraph_to_cell() (single_cell_parser.cell_parser.cellparser method)": [[833, "single_cell_parser.cell_parser.CellParser.spatialgraph_to_cell"]], "update_range_mechanisms() (single_cell_parser.cell_parser.cellparser method)": [[834, "single_cell_parser.cell_parser.CellParser.update_range_mechanisms"]], "single_cell_parser.cell_parser": [[835, "module-single_cell_parser.cell_parser"]], "single_cell_parser.create_cell()": [[836, "single_cell_parser.create_cell"]], "single_cell_parser": [[837, "module-single_cell_parser"]], "single_cell_parser.init_neuron_run()": [[838, "single_cell_parser.init_neuron_run"]], "cells (single_cell_parser.network.networkmapper attribute)": [[839, "single_cell_parser.network.NetworkMapper.cells"]], "connected_cells (single_cell_parser.network.networkmapper attribute)": [[839, "single_cell_parser.network.NetworkMapper.connected_cells"]], "nwparam (single_cell_parser.network.networkmapper attribute)": [[839, "single_cell_parser.network.NetworkMapper.nwParam"]], "postcell (single_cell_parser.network.networkmapper attribute)": [[839, "single_cell_parser.network.NetworkMapper.postCell"]], "simparam (single_cell_parser.network.networkmapper attribute)": [[839, "single_cell_parser.network.NetworkMapper.simParam"]], "single_cell_parser.network.networkmapper (built-in class)": [[839, "single_cell_parser.network.NetworkMapper"]], "_activate_presyn_cells() (single_cell_parser.network.networkmapper method)": [[840, "single_cell_parser.network.NetworkMapper._activate_presyn_cells"]], "_apply_network_modify_functions() (single_cell_parser.network.networkmapper method)": [[841, "single_cell_parser.network.NetworkMapper._apply_network_modify_functions"]], "_assign_anatomical_synapses() (single_cell_parser.network.networkmapper method)": [[842, "single_cell_parser.network.NetworkMapper._assign_anatomical_synapses"]], "_assign_synapse_weights() (single_cell_parser.network.networkmapper method)": [[843, "single_cell_parser.network.NetworkMapper._assign_synapse_weights"]], "_connect_functional_synapses() (single_cell_parser.network.networkmapper method)": [[844, "single_cell_parser.network.NetworkMapper._connect_functional_synapses"]], "_connect_spike_trains() (single_cell_parser.network.networkmapper method)": [[845, "single_cell_parser.network.NetworkMapper._connect_spike_trains"]], "_create_functional_connectivity_map() (single_cell_parser.network.networkmapper method)": [[846, "single_cell_parser.network.NetworkMapper._create_functional_connectivity_map"]], "_create_pointcell_activities() (single_cell_parser.network.networkmapper method)": [[847, "single_cell_parser.network.NetworkMapper._create_pointcell_activities"]], "_create_presyn_cells() (single_cell_parser.network.networkmapper method)": [[848, "single_cell_parser.network.NetworkMapper._create_presyn_cells"]], "_create_spiketrain_activities() (single_cell_parser.network.networkmapper method)": [[849, "single_cell_parser.network.NetworkMapper._create_spiketrain_activities"]], "_map_complete_anatomical_realization() (single_cell_parser.network.networkmapper method)": [[850, "single_cell_parser.network.NetworkMapper._map_complete_anatomical_realization"]], "_map_functional_realization() (single_cell_parser.network.networkmapper method)": [[851, "single_cell_parser.network.NetworkMapper._map_functional_realization"]], "create_functional_realization() (single_cell_parser.network.networkmapper method)": [[852, "single_cell_parser.network.NetworkMapper.create_functional_realization"]], "create_network() (single_cell_parser.network.networkmapper method)": [[853, "single_cell_parser.network.NetworkMapper.create_network"]], "create_saved_network() (single_cell_parser.network.networkmapper method)": [[854, "single_cell_parser.network.NetworkMapper.create_saved_network"]], "create_saved_network2() (single_cell_parser.network.networkmapper method)": [[855, "single_cell_parser.network.NetworkMapper.create_saved_network2"]], "re_init_network() (single_cell_parser.network.networkmapper method)": [[856, "single_cell_parser.network.NetworkMapper.re_init_network"]], "reconnect_network() (single_cell_parser.network.networkmapper method)": [[857, "single_cell_parser.network.NetworkMapper.reconnect_network"]], "reconnect_saved_synapses() (single_cell_parser.network.networkmapper method)": [[858, "single_cell_parser.network.NetworkMapper.reconnect_saved_synapses"]], "single_cell_parser.network.activate_functional_synapse()": [[859, "single_cell_parser.network.activate_functional_synapse"]], "single_cell_parser.network": [[860, "module-single_cell_parser.network"]], "single_cell_parser.network.sample_times_from_rates()": [[861, "single_cell_parser.network.sample_times_from_rates"]], "single_cell_parser.network_modify_functions.get()": [[862, "single_cell_parser.network_modify_functions.get"]], "single_cell_parser.network_modify_functions": [[863, "module-single_cell_parser.network_modify_functions"]], "single_cell_parser.network_modify_functions.silence_synapses_by_somadist": [[864, "module-single_cell_parser.network_modify_functions.silence_synapses_by_somadist"]], "single_cell_parser.network_modify_functions.silence_synapses_by_somadist.silence_synapses_by_somadist()": [[865, "single_cell_parser.network_modify_functions.silence_synapses_by_somadist.silence_synapses_by_somadist"]], "single_cell_parser.network_modify_functions.silence_synapses_by_somadist_and_spike_source": [[866, "module-single_cell_parser.network_modify_functions.silence_synapses_by_somadist_and_spike_source"]], "single_cell_parser.network_modify_functions.silence_synapses_by_somadist_and_spike_source.silence_synapses_by_somadist_and_spike_source()": [[867, "single_cell_parser.network_modify_functions.silence_synapses_by_somadist_and_spike_source.silence_synapses_by_somadist_and_spike_source"]], "single_cell_parser.network_param_modify_functions._celltype_matches()": [[868, "single_cell_parser.network_param_modify_functions._celltype_matches"]], "single_cell_parser.network_param_modify_functions._has_evoked()": [[869, "single_cell_parser.network_param_modify_functions._has_evoked"]], "single_cell_parser.network_param_modify_functions.change_evoked_inh_scaling()": [[870, "single_cell_parser.network_param_modify_functions.change_evoked_INH_scaling"]], "single_cell_parser.network_param_modify_functions.change_glutamate_syn_weights()": [[871, "single_cell_parser.network_param_modify_functions.change_glutamate_syn_weights"]], "single_cell_parser.network_param_modify_functions.change_ongoing_interval()": [[872, "single_cell_parser.network_param_modify_functions.change_ongoing_interval"]], "single_cell_parser.network_param_modify_functions.inactivate_evoked_activity_by_celltype_and_column()": [[873, "single_cell_parser.network_param_modify_functions.inactivate_evoked_activity_by_celltype_and_column"]], "single_cell_parser.network_param_modify_functions.inactivate_evoked_and_ongoing_activity_by_celltype_and_column()": [[874, "single_cell_parser.network_param_modify_functions.inactivate_evoked_and_ongoing_activity_by_celltype_and_column"]], "single_cell_parser.network_param_modify_functions": [[875, "module-single_cell_parser.network_param_modify_functions"]], "single_cell_parser.network_param_modify_functions.multi_stimulus_trial()": [[876, "single_cell_parser.network_param_modify_functions.multi_stimulus_trial"]], "single_cell_parser.network_param_modify_functions.set_stim_onset()": [[877, "single_cell_parser.network_param_modify_functions.set_stim_onset"]], "single_cell_parser.network_realizations.create_functional_network()": [[878, "single_cell_parser.network_realizations.create_functional_network"]], "single_cell_parser.network_realizations.create_synapse_realization()": [[879, "single_cell_parser.network_realizations.create_synapse_realization"]], "single_cell_parser.network_realizations": [[880, "module-single_cell_parser.network_realizations"]], "single_cell_parser.parameters.parameterset (built-in class)": [[881, "single_cell_parser.parameters.ParameterSet"]], "_resolve_path() (single_cell_parser.parameters.parameterset method)": [[882, "single_cell_parser.parameters.ParameterSet._resolve_path"]], "_unwrap() (single_cell_parser.parameters.parameterset method)": [[883, "single_cell_parser.parameters.ParameterSet._unwrap"]], "_wrap() (single_cell_parser.parameters.parameterset method)": [[884, "single_cell_parser.parameters.ParameterSet._wrap"]], "save() (single_cell_parser.parameters.parameterset method)": [[885, "single_cell_parser.parameters.ParameterSet.save"]], "to_dict() (single_cell_parser.parameters.parameterset method)": [[886, "single_cell_parser.parameters.ParameterSet.to_dict"]], "update() (single_cell_parser.parameters.parameterset method)": [[887, "single_cell_parser.parameters.ParameterSet.update"]], "single_cell_parser.parameters._read_params_to_dict()": [[888, "single_cell_parser.parameters._read_params_to_dict"]], "single_cell_parser.parameters.build_parameters()": [[889, "single_cell_parser.parameters.build_parameters"]], "single_cell_parser.parameters": [[890, "module-single_cell_parser.parameters"]], "single_cell_parser.parameters.load_nmodl_parameters()": [[891, "single_cell_parser.parameters.load_NMODL_parameters"]], "single_cell_parser.parameters.resolve_parameter_paths()": [[892, "single_cell_parser.parameters.resolve_parameter_paths"]], "diameterlist (single_cell_parser.reader._edge attribute)": [[893, "single_cell_parser.reader._Edge.diameterList"]], "edgepts (single_cell_parser.reader._edge attribute)": [[893, "single_cell_parser.reader._Edge.edgePts"]], "hoclabel (single_cell_parser.reader._edge attribute)": [[893, "single_cell_parser.reader._Edge.hocLabel"]], "label (single_cell_parser.reader._edge attribute)": [[893, "single_cell_parser.reader._Edge.label"]], "parentconnect (single_cell_parser.reader._edge attribute)": [[893, "single_cell_parser.reader._Edge.parentConnect"]], "parentid (single_cell_parser.reader._edge attribute)": [[893, "single_cell_parser.reader._Edge.parentID"]], "single_cell_parser.reader._edge (built-in class)": [[893, "single_cell_parser.reader._Edge"]], "valid (single_cell_parser.reader._edge attribute)": [[893, "single_cell_parser.reader._Edge.valid"]], "is_valid() (single_cell_parser.reader._edge method)": [[894, "single_cell_parser.reader._Edge.is_valid"]], "single_cell_parser.reader": [[895, "module-single_cell_parser.reader"]], "single_cell_parser.reader.read_complete_synapse_activation_file()": [[896, "single_cell_parser.reader.read_complete_synapse_activation_file"]], "single_cell_parser.reader.read_functional_realization_map()": [[897, "single_cell_parser.reader.read_functional_realization_map"]], "single_cell_parser.reader.read_hoc_file()": [[898, "single_cell_parser.reader.read_hoc_file"]], "single_cell_parser.reader.read_landmark_file()": [[899, "single_cell_parser.reader.read_landmark_file"]], "single_cell_parser.reader.read_pruned_synapse_realization()": [[900, "single_cell_parser.reader.read_pruned_synapse_realization"]], "single_cell_parser.reader.read_scalar_field()": [[901, "single_cell_parser.reader.read_scalar_field"]], "single_cell_parser.reader.read_spike_times_file()": [[902, "single_cell_parser.reader.read_spike_times_file"]], "single_cell_parser.reader.read_synapse_activation_file()": [[903, "single_cell_parser.reader.read_synapse_activation_file"]], "single_cell_parser.reader.read_synapse_realization()": [[904, "single_cell_parser.reader.read_synapse_realization"]], "single_cell_parser.reader.read_synapse_weight_file()": [[905, "single_cell_parser.reader.read_synapse_weight_file"]], "boundingbox (single_cell_parser.scalar_field.scalarfield attribute)": [[906, "single_cell_parser.scalar_field.ScalarField.boundingBox"]], "extent (single_cell_parser.scalar_field.scalarfield attribute)": [[906, "single_cell_parser.scalar_field.ScalarField.extent"]], "mesh (single_cell_parser.scalar_field.scalarfield attribute)": [[906, "single_cell_parser.scalar_field.ScalarField.mesh"]], "origin (single_cell_parser.scalar_field.scalarfield attribute)": [[906, "single_cell_parser.scalar_field.ScalarField.origin"]], "single_cell_parser.scalar_field.scalarfield (built-in class)": [[906, "single_cell_parser.scalar_field.ScalarField"]], "spacing (single_cell_parser.scalar_field.scalarfield attribute)": [[906, "single_cell_parser.scalar_field.ScalarField.spacing"]], "get_mesh_coordinates() (single_cell_parser.scalar_field.scalarfield method)": [[907, "single_cell_parser.scalar_field.ScalarField.get_mesh_coordinates"]], "get_scalar() (single_cell_parser.scalar_field.scalarfield method)": [[908, "single_cell_parser.scalar_field.ScalarField.get_scalar"]], "get_voxel_bounds() (single_cell_parser.scalar_field.scalarfield method)": [[909, "single_cell_parser.scalar_field.ScalarField.get_voxel_bounds"]], "get_voxel_center() (single_cell_parser.scalar_field.scalarfield method)": [[910, "single_cell_parser.scalar_field.ScalarField.get_voxel_center"]], "is_in_bounds() (single_cell_parser.scalar_field.scalarfield method)": [[911, "single_cell_parser.scalar_field.ScalarField.is_in_bounds"]], "resize_mesh() (single_cell_parser.scalar_field.scalarfield method)": [[912, "single_cell_parser.scalar_field.ScalarField.resize_mesh"]], "single_cell_parser.scalar_field": [[913, "module-single_cell_parser.scalar_field"]], "single_cell_parser.sec_distance_to_soma()": [[914, "single_cell_parser.sec_distance_to_soma"]], "single_cell_parser.serialize_cell.cell_to_serializable_object()": [[915, "single_cell_parser.serialize_cell.cell_to_serializable_object"]], "single_cell_parser.serialize_cell.convert_dict_of_hoc_arrays_to_dict_of_np_arrays()": [[916, "single_cell_parser.serialize_cell.convert_dict_of_hoc_arrays_to_dict_of_np_arrays"]], "single_cell_parser.serialize_cell.convert_hoc_array_to_np_array()": [[917, "single_cell_parser.serialize_cell.convert_hoc_array_to_np_array"]], "single_cell_parser.serialize_cell": [[918, "module-single_cell_parser.serialize_cell"]], "single_cell_parser.serialize_cell.load_cell_from_file()": [[919, "single_cell_parser.serialize_cell.load_cell_from_file"]], "single_cell_parser.serialize_cell.restore_cell_from_serializable_object()": [[920, "single_cell_parser.serialize_cell.restore_cell_from_serializable_object"]], "single_cell_parser.serialize_cell.save_cell_to_file()": [[921, "single_cell_parser.serialize_cell.save_cell_to_file"]], "t (single_cell_parser.sim_control.simcontrol attribute)": [[922, "single_cell_parser.sim_control.SimControl.T"]], "cell (single_cell_parser.sim_control.simcontrol attribute)": [[922, "single_cell_parser.sim_control.SimControl.cell"]], "dt (single_cell_parser.sim_control.simcontrol attribute)": [[922, "single_cell_parser.sim_control.SimControl.dt"]], "goalready (single_cell_parser.sim_control.simcontrol attribute)": [[922, "single_cell_parser.sim_control.SimControl.goAlready"]], "h (single_cell_parser.sim_control.simcontrol attribute)": [[922, "single_cell_parser.sim_control.SimControl.h"]], "simtime (single_cell_parser.sim_control.simcontrol attribute)": [[922, "single_cell_parser.sim_control.SimControl.simTime"]], "single_cell_parser.sim_control.simcontrol (built-in class)": [[922, "single_cell_parser.sim_control.SimControl"]], "go() (single_cell_parser.sim_control.simcontrol method)": [[923, "single_cell_parser.sim_control.SimControl.go"]], "set_iclamp() (single_cell_parser.sim_control.simcontrol method)": [[924, "single_cell_parser.sim_control.SimControl.set_IClamp"]], "set_recording() (single_cell_parser.sim_control.simcontrol method)": [[925, "single_cell_parser.sim_control.SimControl.set_recording"]], "show() (single_cell_parser.sim_control.simcontrol method)": [[926, "single_cell_parser.sim_control.SimControl.show"]], "single_cell_parser.sim_control": [[927, "module-single_cell_parser.sim_control"]], "single_cell_parser.spines_update_network_paramfile()": [[928, "single_cell_parser.spines_update_network_paramfile"]], "single_cell_parser.spines_update_synapse_distribution_file()": [[929, "single_cell_parser.spines_update_synapse_distribution_file"]], "_active (single_cell_parser.synapse.exsyn attribute)": [[930, "single_cell_parser.synapse.ExSyn._active"]], "netcon (single_cell_parser.synapse.exsyn attribute)": [[930, "single_cell_parser.synapse.ExSyn.netcon"]], "single_cell_parser.synapse.exsyn (built-in class)": [[930, "single_cell_parser.synapse.ExSyn"]], "syn (single_cell_parser.synapse.exsyn attribute)": [[930, "single_cell_parser.synapse.ExSyn.syn"]], "activate_hoc_syn() (single_cell_parser.synapse.exsyn method)": [[931, "single_cell_parser.synapse.ExSyn.activate_hoc_syn"]], "_active (single_cell_parser.synapse.synapse attribute)": [[932, "single_cell_parser.synapse.Synapse._active"]], "coordinates (single_cell_parser.synapse.synapse attribute)": [[932, "single_cell_parser.synapse.Synapse.coordinates"]], "netcons (single_cell_parser.synapse.synapse attribute)": [[932, "single_cell_parser.synapse.Synapse.netcons"]], "postcelltype (single_cell_parser.synapse.synapse attribute)": [[932, "single_cell_parser.synapse.Synapse.postCellType"]], "precell (single_cell_parser.synapse.synapse attribute)": [[932, "single_cell_parser.synapse.Synapse.preCell"]], "precelltype (single_cell_parser.synapse.synapse attribute)": [[932, "single_cell_parser.synapse.Synapse.preCellType"]], "pruned (single_cell_parser.synapse.synapse attribute)": [[932, "single_cell_parser.synapse.Synapse.pruned"]], "ptid (single_cell_parser.synapse.synapse attribute)": [[932, "single_cell_parser.synapse.Synapse.ptID"]], "receptors (single_cell_parser.synapse.synapse attribute)": [[932, "single_cell_parser.synapse.Synapse.receptors"]], "releasesite (single_cell_parser.synapse.synapse attribute)": [[932, "single_cell_parser.synapse.Synapse.releaseSite"]], "secid (single_cell_parser.synapse.synapse attribute)": [[932, "single_cell_parser.synapse.Synapse.secID"]], "single_cell_parser.synapse.synapse (built-in class)": [[932, "single_cell_parser.synapse.Synapse"]], "weight (single_cell_parser.synapse.synapse attribute)": [[932, "single_cell_parser.synapse.Synapse.weight"]], "x (single_cell_parser.synapse.synapse attribute)": [[932, "single_cell_parser.synapse.Synapse.x"]], "activate_hoc_syn() (single_cell_parser.synapse.synapse method)": [[933, "single_cell_parser.synapse.Synapse.activate_hoc_syn"]], "disconnect_hoc_synapse() (single_cell_parser.synapse.synapse method)": [[934, "single_cell_parser.synapse.Synapse.disconnect_hoc_synapse"]], "is_active() (single_cell_parser.synapse.synapse method)": [[935, "single_cell_parser.synapse.Synapse.is_active"]], "single_cell_parser.synapse": [[936, "module-single_cell_parser.synapse"]], "cell (single_cell_parser.synapse_mapper.synapsemapper attribute)": [[937, "single_cell_parser.synapse_mapper.SynapseMapper.cell"]], "isdensity (single_cell_parser.synapse_mapper.synapsemapper attribute)": [[937, "single_cell_parser.synapse_mapper.SynapseMapper.isDensity"]], "single_cell_parser.synapse_mapper.synapsemapper (built-in class)": [[937, "single_cell_parser.synapse_mapper.SynapseMapper"]], "syndist (single_cell_parser.synapse_mapper.synapsemapper attribute)": [[937, "single_cell_parser.synapse_mapper.SynapseMapper.synDist"]], "voxeledgemap (single_cell_parser.synapse_mapper.synapsemapper attribute)": [[937, "single_cell_parser.synapse_mapper.SynapseMapper.voxelEdgeMap"]], "_compute_path_length() (single_cell_parser.synapse_mapper.synapsemapper method)": [[938, "single_cell_parser.synapse_mapper.SynapseMapper._compute_path_length"]], "_create_voxel_edge_map() (single_cell_parser.synapse_mapper.synapsemapper method)": [[939, "single_cell_parser.synapse_mapper.SynapseMapper._create_voxel_edge_map"]], "_intersect_bboxes() (single_cell_parser.synapse_mapper.synapsemapper method)": [[940, "single_cell_parser.synapse_mapper.SynapseMapper._intersect_bboxes"]], "_pt_in_box() (single_cell_parser.synapse_mapper.synapsemapper method)": [[941, "single_cell_parser.synapse_mapper.SynapseMapper._pt_in_box"]], "create_synapses() (single_cell_parser.synapse_mapper.synapsemapper method)": [[942, "single_cell_parser.synapse_mapper.SynapseMapper.create_synapses"]], "map_pruned_synapse_realization() (single_cell_parser.synapse_mapper.synapsemapper method)": [[943, "single_cell_parser.synapse_mapper.SynapseMapper.map_pruned_synapse_realization"]], "map_synapse_model_distribution() (single_cell_parser.synapse_mapper.synapsemapper method)": [[944, "single_cell_parser.synapse_mapper.SynapseMapper.map_synapse_model_distribution"]], "map_synapse_realization() (single_cell_parser.synapse_mapper.synapsemapper method)": [[945, "single_cell_parser.synapse_mapper.SynapseMapper.map_synapse_realization"]], "single_cell_parser.synapse_mapper": [[946, "module-single_cell_parser.synapse_mapper"]], "single_cell_parser.writer.generate_landmark_template()": [[947, "single_cell_parser.writer.generate_landmark_template"]], "single_cell_parser.writer": [[948, "module-single_cell_parser.writer"]], "single_cell_parser.writer.value_to_color()": [[949, "single_cell_parser.writer.value_to_color"]], "single_cell_parser.writer.write_psth()": [[950, "single_cell_parser.writer.write_PSTH"]], "single_cell_parser.writer.write_all_traces()": [[951, "single_cell_parser.writer.write_all_traces"]], "single_cell_parser.writer.write_cell_simulation()": [[952, "single_cell_parser.writer.write_cell_simulation"]], "single_cell_parser.writer.write_cell_synapse_locations()": [[953, "single_cell_parser.writer.write_cell_synapse_locations"]], "single_cell_parser.writer.write_functional_map()": [[954, "single_cell_parser.writer.write_functional_map"]], "single_cell_parser.writer.write_functional_realization_map()": [[955, "single_cell_parser.writer.write_functional_realization_map"]], "single_cell_parser.writer.write_landmark_file()": [[956, "single_cell_parser.writer.write_landmark_file"]], "single_cell_parser.writer.write_landmarks_colorcoded_to_folder()": [[957, "single_cell_parser.writer.write_landmarks_colorcoded_to_folder"]], "single_cell_parser.writer.write_presynaptic_spike_times()": [[958, "single_cell_parser.writer.write_presynaptic_spike_times"]], "single_cell_parser.writer.write_pruned_synapse_locations()": [[959, "single_cell_parser.writer.write_pruned_synapse_locations"]], "single_cell_parser.writer.write_sim_results()": [[960, "single_cell_parser.writer.write_sim_results"]], "single_cell_parser.writer.write_spike_times_file()": [[961, "single_cell_parser.writer.write_spike_times_file"]], "single_cell_parser.writer.write_synapse_activation_file()": [[962, "single_cell_parser.writer.write_synapse_activation_file"]], "single_cell_parser.writer.write_synapse_weight_file()": [[963, "single_cell_parser.writer.write_synapse_weight_file"]], "singlecell_input_mapper.evoked_psth_from_spike_times.create_average_celltype_psth_from_clusters()": [[964, "singlecell_input_mapper.evoked_PSTH_from_spike_times.create_average_celltype_PSTH_from_clusters"]], "singlecell_input_mapper.evoked_psth_from_spike_times.create_evoked_psth()": [[965, "singlecell_input_mapper.evoked_PSTH_from_spike_times.create_evoked_PSTH"]], "singlecell_input_mapper.evoked_psth_from_spike_times": [[966, "module-singlecell_input_mapper.evoked_PSTH_from_spike_times"]], "singlecell_input_mapper.evoked_psth_from_spike_times.load_cluster_trials()": [[967, "singlecell_input_mapper.evoked_PSTH_from_spike_times.load_cluster_trials"]], "singlecell_input_mapper.evoked_psth_from_spike_times.load_spike_times()": [[968, "singlecell_input_mapper.evoked_PSTH_from_spike_times.load_spike_times"]], "singlecell_input_mapper.evoked_psth_from_spike_times.scan_directory()": [[969, "singlecell_input_mapper.evoked_PSTH_from_spike_times.scan_directory"]], "singlecell_input_mapper.evoked_network_param_from_template.create_network_parameter()": [[970, "singlecell_input_mapper.evoked_network_param_from_template.create_network_parameter"]], "singlecell_input_mapper.evoked_network_param_from_template": [[971, "module-singlecell_input_mapper.evoked_network_param_from_template"]], "singlecell_input_mapper.evoked_network_param_from_template.load_cell_number_file()": [[972, "singlecell_input_mapper.evoked_network_param_from_template.load_cell_number_file"]], "singlecell_input_mapper.evoked_network_param_from_template.whisker_evoked_psth()": [[973, "singlecell_input_mapper.evoked_network_param_from_template.whisker_evoked_PSTH"]], "singlecell_input_mapper": [[974, "module-singlecell_input_mapper"]], "singlecell_input_mapper.map_singlecell_inputs": [[975, "module-singlecell_input_mapper.map_singlecell_inputs"]], "singlecell_input_mapper.map_singlecell_inputs.map_singlecell_inputs()": [[976, "singlecell_input_mapper.map_singlecell_inputs.map_singlecell_inputs"]], "singlecell_input_mapper.ongoing_network_param_from_template.create_network_parameter()": [[977, "singlecell_input_mapper.ongoing_network_param_from_template.create_network_parameter"]], "singlecell_input_mapper.ongoing_network_param_from_template": [[978, "module-singlecell_input_mapper.ongoing_network_param_from_template"]], "singlecell_input_mapper.ongoing_network_param_from_template.load_cell_number_file()": [[979, "singlecell_input_mapper.ongoing_network_param_from_template.load_cell_number_file"]], "boundingbox (singlecell_input_mapper.singlecell_input_mapper.cell.cell attribute)": [[980, "singlecell_input_mapper.singlecell_input_mapper.cell.Cell.boundingBox"]], "id (singlecell_input_mapper.singlecell_input_mapper.cell.cell attribute)": [[980, "singlecell_input_mapper.singlecell_input_mapper.cell.Cell.id"]], "sections (singlecell_input_mapper.singlecell_input_mapper.cell.cell attribute)": [[980, "singlecell_input_mapper.singlecell_input_mapper.cell.Cell.sections"]], "singlecell_input_mapper.singlecell_input_mapper.cell.cell (built-in class)": [[980, "singlecell_input_mapper.singlecell_input_mapper.cell.Cell"]], "soma (singlecell_input_mapper.singlecell_input_mapper.cell.cell attribute)": [[980, "singlecell_input_mapper.singlecell_input_mapper.cell.Cell.soma"]], "structures (singlecell_input_mapper.singlecell_input_mapper.cell.cell attribute)": [[980, "singlecell_input_mapper.singlecell_input_mapper.cell.Cell.structures"]], "synapses (singlecell_input_mapper.singlecell_input_mapper.cell.cell attribute)": [[980, "singlecell_input_mapper.singlecell_input_mapper.cell.Cell.synapses"]], "add_synapse() (singlecell_input_mapper.singlecell_input_mapper.cell.cell method)": [[981, "singlecell_input_mapper.singlecell_input_mapper.cell.Cell.add_synapse"]], "distance_to_soma() (singlecell_input_mapper.singlecell_input_mapper.cell.cell method)": [[982, "singlecell_input_mapper.singlecell_input_mapper.cell.Cell.distance_to_soma"]], "get_bounding_box() (singlecell_input_mapper.singlecell_input_mapper.cell.cell method)": [[983, "singlecell_input_mapper.singlecell_input_mapper.cell.Cell.get_bounding_box"]], "remove_synapses() (singlecell_input_mapper.singlecell_input_mapper.cell.cell method)": [[984, "singlecell_input_mapper.singlecell_input_mapper.cell.Cell.remove_synapses"]], "cell (singlecell_input_mapper.singlecell_input_mapper.cell.cellparser attribute)": [[985, "singlecell_input_mapper.singlecell_input_mapper.cell.CellParser.cell"]], "hoc_fname (singlecell_input_mapper.singlecell_input_mapper.cell.cellparser attribute)": [[985, "singlecell_input_mapper.singlecell_input_mapper.cell.CellParser.hoc_fname"]], "singlecell_input_mapper.singlecell_input_mapper.cell.cellparser (built-in class)": [[985, "singlecell_input_mapper.singlecell_input_mapper.cell.CellParser"]], "get_cell() (singlecell_input_mapper.singlecell_input_mapper.cell.cellparser method)": [[986, "singlecell_input_mapper.singlecell_input_mapper.cell.CellParser.get_cell"]], "spatialgraph_to_cell() (singlecell_input_mapper.singlecell_input_mapper.cell.cellparser method)": [[987, "singlecell_input_mapper.singlecell_input_mapper.cell.CellParser.spatialgraph_to_cell"]], "celltype (singlecell_input_mapper.singlecell_input_mapper.cell.pointcell attribute)": [[988, "singlecell_input_mapper.singlecell_input_mapper.cell.PointCell.cellType"]], "column (singlecell_input_mapper.singlecell_input_mapper.cell.pointcell attribute)": [[988, "singlecell_input_mapper.singlecell_input_mapper.cell.PointCell.column"]], "singlecell_input_mapper.singlecell_input_mapper.cell.pointcell (built-in class)": [[988, "singlecell_input_mapper.singlecell_input_mapper.cell.PointCell"]], "synapselist (singlecell_input_mapper.singlecell_input_mapper.cell.pointcell attribute)": [[988, "singlecell_input_mapper.singlecell_input_mapper.cell.PointCell.synapseList"]], "_add_synapse_pointer() (singlecell_input_mapper.singlecell_input_mapper.cell.pointcell method)": [[989, "singlecell_input_mapper.singlecell_input_mapper.cell.PointCell._add_synapse_pointer"]], "l (singlecell_input_mapper.singlecell_input_mapper.cell.pysection2 attribute)": [[990, "singlecell_input_mapper.singlecell_input_mapper.cell.PySection2.L"]], "bounds (singlecell_input_mapper.singlecell_input_mapper.cell.pysection2 attribute)": [[990, "singlecell_input_mapper.singlecell_input_mapper.cell.PySection2.bounds"]], "diamlist (singlecell_input_mapper.singlecell_input_mapper.cell.pysection2 attribute)": [[990, "singlecell_input_mapper.singlecell_input_mapper.cell.PySection2.diamList"]], "label (singlecell_input_mapper.singlecell_input_mapper.cell.pysection2 attribute)": [[990, "singlecell_input_mapper.singlecell_input_mapper.cell.PySection2.label"]], "name (singlecell_input_mapper.singlecell_input_mapper.cell.pysection2 attribute)": [[990, "singlecell_input_mapper.singlecell_input_mapper.cell.PySection2.name"]], "nrofpts (singlecell_input_mapper.singlecell_input_mapper.cell.pysection2 attribute)": [[990, "singlecell_input_mapper.singlecell_input_mapper.cell.PySection2.nrOfPts"]], "parent (singlecell_input_mapper.singlecell_input_mapper.cell.pysection2 attribute)": [[990, "singlecell_input_mapper.singlecell_input_mapper.cell.PySection2.parent"]], "parentx (singlecell_input_mapper.singlecell_input_mapper.cell.pysection2 attribute)": [[990, "singlecell_input_mapper.singlecell_input_mapper.cell.PySection2.parentx"]], "pts (singlecell_input_mapper.singlecell_input_mapper.cell.pysection2 attribute)": [[990, "singlecell_input_mapper.singlecell_input_mapper.cell.PySection2.pts"]], "relpts (singlecell_input_mapper.singlecell_input_mapper.cell.pysection2 attribute)": [[990, "singlecell_input_mapper.singlecell_input_mapper.cell.PySection2.relPts"]], "singlecell_input_mapper.singlecell_input_mapper.cell.pysection2 (built-in class)": [[990, "singlecell_input_mapper.singlecell_input_mapper.cell.PySection2"]], "_compute_bounds() (singlecell_input_mapper.singlecell_input_mapper.cell.pysection2 method)": [[991, "singlecell_input_mapper.singlecell_input_mapper.cell.PySection2._compute_bounds"]], "_compute_length() (singlecell_input_mapper.singlecell_input_mapper.cell.pysection2 method)": [[992, "singlecell_input_mapper.singlecell_input_mapper.cell.PySection2._compute_length"]], "_compute_relative_pts() (singlecell_input_mapper.singlecell_input_mapper.cell.pysection2 method)": [[993, "singlecell_input_mapper.singlecell_input_mapper.cell.PySection2._compute_relative_pts"]], "set_3d_geometry() (singlecell_input_mapper.singlecell_input_mapper.cell.pysection2 method)": [[994, "singlecell_input_mapper.singlecell_input_mapper.cell.PySection2.set_3d_geometry"]], "coordinates (singlecell_input_mapper.singlecell_input_mapper.cell.synapse attribute)": [[995, "singlecell_input_mapper.singlecell_input_mapper.cell.Synapse.coordinates"]], "postcelltype (singlecell_input_mapper.singlecell_input_mapper.cell.synapse attribute)": [[995, "singlecell_input_mapper.singlecell_input_mapper.cell.Synapse.postCellType"]], "precell (singlecell_input_mapper.singlecell_input_mapper.cell.synapse attribute)": [[995, "singlecell_input_mapper.singlecell_input_mapper.cell.Synapse.preCell"]], "precelltype (singlecell_input_mapper.singlecell_input_mapper.cell.synapse attribute)": [[995, "singlecell_input_mapper.singlecell_input_mapper.cell.Synapse.preCellType"]], "ptid (singlecell_input_mapper.singlecell_input_mapper.cell.synapse attribute)": [[995, "singlecell_input_mapper.singlecell_input_mapper.cell.Synapse.ptID"]], "secid (singlecell_input_mapper.singlecell_input_mapper.cell.synapse attribute)": [[995, "singlecell_input_mapper.singlecell_input_mapper.cell.Synapse.secID"]], "singlecell_input_mapper.singlecell_input_mapper.cell.synapse (built-in class)": [[995, "singlecell_input_mapper.singlecell_input_mapper.cell.Synapse"]], "x (singlecell_input_mapper.singlecell_input_mapper.cell.synapse attribute)": [[995, "singlecell_input_mapper.singlecell_input_mapper.cell.Synapse.x"]], "singlecell_input_mapper.singlecell_input_mapper.cell": [[996, "module-singlecell_input_mapper.singlecell_input_mapper.cell"]], "singlecell_input_mapper.singlecell_input_mapper.generate_nr_of_cells_spreadsheet.con_file_to_numberofconnectedcells_sheet()": [[997, "singlecell_input_mapper.singlecell_input_mapper.generate_nr_of_cells_spreadsheet.con_file_to_NumberOfConnectedCells_sheet"]], "singlecell_input_mapper.singlecell_input_mapper.generate_nr_of_cells_spreadsheet": [[998, "module-singlecell_input_mapper.singlecell_input_mapper.generate_nr_of_cells_spreadsheet"]], "singlecell_input_mapper.singlecell_input_mapper": [[999, "module-singlecell_input_mapper.singlecell_input_mapper"]], "cells (singlecell_input_mapper.singlecell_input_mapper.network_embedding.networkmapper attribute)": [[1000, "singlecell_input_mapper.singlecell_input_mapper.network_embedding.NetworkMapper.cells"]], "connected_cells (singlecell_input_mapper.singlecell_input_mapper.network_embedding.networkmapper attribute)": [[1000, "singlecell_input_mapper.singlecell_input_mapper.network_embedding.NetworkMapper.connected_cells"]], "postcell (singlecell_input_mapper.singlecell_input_mapper.network_embedding.networkmapper attribute)": [[1000, "singlecell_input_mapper.singlecell_input_mapper.network_embedding.NetworkMapper.postCell"]], "postcelltype (singlecell_input_mapper.singlecell_input_mapper.network_embedding.networkmapper attribute)": [[1000, "singlecell_input_mapper.singlecell_input_mapper.network_embedding.NetworkMapper.postCellType"]], "singlecell_input_mapper.singlecell_input_mapper.network_embedding.networkmapper (built-in class)": [[1000, "singlecell_input_mapper.singlecell_input_mapper.network_embedding.NetworkMapper"]], "_compute_parameter_distribution() (singlecell_input_mapper.singlecell_input_mapper.network_embedding.networkmapper method)": [[1001, "singlecell_input_mapper.singlecell_input_mapper.network_embedding.NetworkMapper._compute_parameter_distribution"]], "_compute_sample_distance() (singlecell_input_mapper.singlecell_input_mapper.network_embedding.networkmapper method)": [[1002, "singlecell_input_mapper.singlecell_input_mapper.network_embedding.NetworkMapper._compute_sample_distance"]], "_compute_summary_tables() (singlecell_input_mapper.singlecell_input_mapper.network_embedding.networkmapper method)": [[1003, "singlecell_input_mapper.singlecell_input_mapper.network_embedding.NetworkMapper._compute_summary_tables"]], "_create_anatomical_connectivity_map() (singlecell_input_mapper.singlecell_input_mapper.network_embedding.networkmapper method)": [[1004, "singlecell_input_mapper.singlecell_input_mapper.network_embedding.NetworkMapper._create_anatomical_connectivity_map"]], "_create_anatomical_realization() (singlecell_input_mapper.singlecell_input_mapper.network_embedding.networkmapper method)": [[1005, "singlecell_input_mapper.singlecell_input_mapper.network_embedding.NetworkMapper._create_anatomical_realization"]], "_create_presyn_cells() (singlecell_input_mapper.singlecell_input_mapper.network_embedding.networkmapper method)": [[1006, "singlecell_input_mapper.singlecell_input_mapper.network_embedding.NetworkMapper._create_presyn_cells"]], "_generate_output_files() (singlecell_input_mapper.singlecell_input_mapper.network_embedding.networkmapper method)": [[1007, "singlecell_input_mapper.singlecell_input_mapper.network_embedding.NetworkMapper._generate_output_files"]], "_get_representative_sample() (singlecell_input_mapper.singlecell_input_mapper.network_embedding.networkmapper method)": [[1008, "singlecell_input_mapper.singlecell_input_mapper.network_embedding.NetworkMapper._get_representative_sample"]], "_precompute_anatomical_area_celltype_synapse_densities() (singlecell_input_mapper.singlecell_input_mapper.network_embedding.networkmapper method)": [[1009, "singlecell_input_mapper.singlecell_input_mapper.network_embedding.NetworkMapper._precompute_anatomical_area_celltype_synapse_densities"]], "_test_population_convergence() (singlecell_input_mapper.singlecell_input_mapper.network_embedding.networkmapper method)": [[1010, "singlecell_input_mapper.singlecell_input_mapper.network_embedding.NetworkMapper._test_population_convergence"]], "_write_landmark_files() (singlecell_input_mapper.singlecell_input_mapper.network_embedding.networkmapper method)": [[1011, "singlecell_input_mapper.singlecell_input_mapper.network_embedding.NetworkMapper._write_landmark_files"]], "_write_population_output_files() (singlecell_input_mapper.singlecell_input_mapper.network_embedding.networkmapper method)": [[1012, "singlecell_input_mapper.singlecell_input_mapper.network_embedding.NetworkMapper._write_population_output_files"]], "create_network_embedding() (singlecell_input_mapper.singlecell_input_mapper.network_embedding.networkmapper method)": [[1013, "singlecell_input_mapper.singlecell_input_mapper.network_embedding.NetworkMapper.create_network_embedding"]], "create_network_embedding_for_simulations() (singlecell_input_mapper.singlecell_input_mapper.network_embedding.networkmapper method)": [[1014, "singlecell_input_mapper.singlecell_input_mapper.network_embedding.NetworkMapper.create_network_embedding_for_simulations"]], "create_network_embedding_from_synapse_densities() (singlecell_input_mapper.singlecell_input_mapper.network_embedding.networkmapper method)": [[1015, "singlecell_input_mapper.singlecell_input_mapper.network_embedding.NetworkMapper.create_network_embedding_from_synapse_densities"]], "singlecell_input_mapper.singlecell_input_mapper.network_embedding": [[1016, "module-singlecell_input_mapper.singlecell_input_mapper.network_embedding"]], "diameterlist (singlecell_input_mapper.singlecell_input_mapper.reader._edge attribute)": [[1017, "singlecell_input_mapper.singlecell_input_mapper.reader._Edge.diameterList"]], "edgepts (singlecell_input_mapper.singlecell_input_mapper.reader._edge attribute)": [[1017, "singlecell_input_mapper.singlecell_input_mapper.reader._Edge.edgePts"]], "hoclabel (singlecell_input_mapper.singlecell_input_mapper.reader._edge attribute)": [[1017, "singlecell_input_mapper.singlecell_input_mapper.reader._Edge.hocLabel"]], "label (singlecell_input_mapper.singlecell_input_mapper.reader._edge attribute)": [[1017, "singlecell_input_mapper.singlecell_input_mapper.reader._Edge.label"]], "parentconnect (singlecell_input_mapper.singlecell_input_mapper.reader._edge attribute)": [[1017, "singlecell_input_mapper.singlecell_input_mapper.reader._Edge.parentConnect"]], "parentid (singlecell_input_mapper.singlecell_input_mapper.reader._edge attribute)": [[1017, "singlecell_input_mapper.singlecell_input_mapper.reader._Edge.parentID"]], "singlecell_input_mapper.singlecell_input_mapper.reader._edge (built-in class)": [[1017, "singlecell_input_mapper.singlecell_input_mapper.reader._Edge"]], "is_valid() (singlecell_input_mapper.singlecell_input_mapper.reader._edge method)": [[1018, "singlecell_input_mapper.singlecell_input_mapper.reader._Edge.is_valid"]], "singlecell_input_mapper.singlecell_input_mapper.reader": [[1019, "module-singlecell_input_mapper.singlecell_input_mapper.reader"]], "singlecell_input_mapper.singlecell_input_mapper.reader.read_celltype_numbers_spreadsheet()": [[1020, "singlecell_input_mapper.singlecell_input_mapper.reader.read_celltype_numbers_spreadsheet"]], "singlecell_input_mapper.singlecell_input_mapper.reader.read_connections_spreadsheet()": [[1021, "singlecell_input_mapper.singlecell_input_mapper.reader.read_connections_spreadsheet"]], "singlecell_input_mapper.singlecell_input_mapper.reader.read_hoc_file()": [[1022, "singlecell_input_mapper.singlecell_input_mapper.reader.read_hoc_file"]], "singlecell_input_mapper.singlecell_input_mapper.reader.read_scalar_field()": [[1023, "singlecell_input_mapper.singlecell_input_mapper.reader.read_scalar_field"]], "boundingbox (singlecell_input_mapper.singlecell_input_mapper.scalar_field.scalarfield attribute)": [[1024, "singlecell_input_mapper.singlecell_input_mapper.scalar_field.ScalarField.boundingBox"]], "extent (singlecell_input_mapper.singlecell_input_mapper.scalar_field.scalarfield attribute)": [[1024, "singlecell_input_mapper.singlecell_input_mapper.scalar_field.ScalarField.extent"]], "mesh (singlecell_input_mapper.singlecell_input_mapper.scalar_field.scalarfield attribute)": [[1024, "singlecell_input_mapper.singlecell_input_mapper.scalar_field.ScalarField.mesh"]], "origin (singlecell_input_mapper.singlecell_input_mapper.scalar_field.scalarfield attribute)": [[1024, "singlecell_input_mapper.singlecell_input_mapper.scalar_field.ScalarField.origin"]], "singlecell_input_mapper.singlecell_input_mapper.scalar_field.scalarfield (built-in class)": [[1024, "singlecell_input_mapper.singlecell_input_mapper.scalar_field.ScalarField"]], "spacing (singlecell_input_mapper.singlecell_input_mapper.scalar_field.scalarfield attribute)": [[1024, "singlecell_input_mapper.singlecell_input_mapper.scalar_field.ScalarField.spacing"]], "get_mesh_coordinates() (singlecell_input_mapper.singlecell_input_mapper.scalar_field.scalarfield method)": [[1025, "singlecell_input_mapper.singlecell_input_mapper.scalar_field.ScalarField.get_mesh_coordinates"]], "get_scalar() (singlecell_input_mapper.singlecell_input_mapper.scalar_field.scalarfield method)": [[1026, "singlecell_input_mapper.singlecell_input_mapper.scalar_field.ScalarField.get_scalar"]], "get_voxel_bounds() (singlecell_input_mapper.singlecell_input_mapper.scalar_field.scalarfield method)": [[1027, "singlecell_input_mapper.singlecell_input_mapper.scalar_field.ScalarField.get_voxel_bounds"]], "get_voxel_center() (singlecell_input_mapper.singlecell_input_mapper.scalar_field.scalarfield method)": [[1028, "singlecell_input_mapper.singlecell_input_mapper.scalar_field.ScalarField.get_voxel_center"]], "is_in_bounds() (singlecell_input_mapper.singlecell_input_mapper.scalar_field.scalarfield method)": [[1029, "singlecell_input_mapper.singlecell_input_mapper.scalar_field.ScalarField.is_in_bounds"]], "resize_mesh() (singlecell_input_mapper.singlecell_input_mapper.scalar_field.scalarfield method)": [[1030, "singlecell_input_mapper.singlecell_input_mapper.scalar_field.ScalarField.resize_mesh"]], "singlecell_input_mapper.singlecell_input_mapper.scalar_field": [[1031, "module-singlecell_input_mapper.singlecell_input_mapper.scalar_field"]], "cellpst (singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.synapsedensity attribute)": [[1032, "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.SynapseDensity.cellPST"]], "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.synapsedensity (built-in class)": [[1032, "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.SynapseDensity"]], "_clip_u() (singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.synapsedensity method)": [[1033, "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.SynapseDensity._clip_u"]], "_compute_cell_density_grid() (singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.synapsedensity method)": [[1034, "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.SynapseDensity._compute_cell_density_grid"]], "_compute_length_surface_area_density() (singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.synapsedensity method)": [[1035, "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.SynapseDensity._compute_length_surface_area_density"]], "_get_truncated_cone_area() (singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.synapsedensity method)": [[1036, "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.SynapseDensity._get_truncated_cone_area"]], "_interpolate_radius() (singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.synapsedensity method)": [[1037, "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.SynapseDensity._interpolate_radius"]], "_intersect_bboxes() (singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.synapsedensity method)": [[1038, "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.SynapseDensity._intersect_bboxes"]], "_is_zero() (singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.synapsedensity method)": [[1039, "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.SynapseDensity._is_zero"]], "compute_cell_pst() (singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.synapsedensity method)": [[1040, "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.SynapseDensity.compute_cell_PST"]], "compute_synapse_density() (singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.synapsedensity method)": [[1041, "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.SynapseDensity.compute_synapse_density"]], "cell (singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.synapsemapper attribute)": [[1042, "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.SynapseMapper.cell"]], "isdensity (singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.synapsemapper attribute)": [[1042, "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.SynapseMapper.isDensity"]], "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.synapsemapper (built-in class)": [[1042, "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.SynapseMapper"]], "syndist (singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.synapsemapper attribute)": [[1042, "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.SynapseMapper.synDist"]], "voxeledgemap (singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.synapsemapper attribute)": [[1042, "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.SynapseMapper.voxelEdgeMap"]], "_compute_path_length() (singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.synapsemapper method)": [[1043, "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.SynapseMapper._compute_path_length"]], "_create_voxel_edge_map() (singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.synapsemapper method)": [[1044, "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.SynapseMapper._create_voxel_edge_map"]], "_intersect_bboxes() (singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.synapsemapper method)": [[1045, "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.SynapseMapper._intersect_bboxes"]], "_pt_in_box() (singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.synapsemapper method)": [[1046, "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.SynapseMapper._pt_in_box"]], "create_synapses() (singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.synapsemapper method)": [[1047, "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper.SynapseMapper.create_synapses"]], "singlecell_input_mapper.singlecell_input_mapper.synapse_mapper": [[1048, "module-singlecell_input_mapper.singlecell_input_mapper.synapse_mapper"]], "singlecell_input_mapper.singlecell_input_mapper.writer": [[1049, "module-singlecell_input_mapper.singlecell_input_mapper.writer"]], "singlecell_input_mapper.singlecell_input_mapper.writer.write_anatomical_realization_map()": [[1050, "singlecell_input_mapper.singlecell_input_mapper.writer.write_anatomical_realization_map"]], "singlecell_input_mapper.singlecell_input_mapper.writer.write_cell_synapse_locations()": [[1051, "singlecell_input_mapper.singlecell_input_mapper.writer.write_cell_synapse_locations"]], "singlecell_input_mapper.singlecell_input_mapper.writer.write_landmark_file()": [[1052, "singlecell_input_mapper.singlecell_input_mapper.writer.write_landmark_file"]], "singlecell_input_mapper.singlecell_input_mapper.writer.write_population_and_sample_connectivity_summary()": [[1053, "singlecell_input_mapper.singlecell_input_mapper.writer.write_population_and_sample_connectivity_summary"]], "singlecell_input_mapper.singlecell_input_mapper.writer.write_population_connectivity_summary()": [[1054, "singlecell_input_mapper.singlecell_input_mapper.writer.write_population_connectivity_summary"]], "singlecell_input_mapper.singlecell_input_mapper.writer.write_sample_connectivity_summary()": [[1055, "singlecell_input_mapper.singlecell_input_mapper.writer.write_sample_connectivity_summary"]], "singlecell_input_mapper.singlecell_input_mapper.writer.write_scalar_field()": [[1056, "singlecell_input_mapper.singlecell_input_mapper.writer.write_scalar_field"]], "apply_filter (spike_analysis.core.readerlabview attribute)": [[1057, "spike_analysis.core.ReaderLabView.apply_filter"]], "path (spike_analysis.core.readerlabview attribute)": [[1057, "spike_analysis.core.ReaderLabView.path"]], "sampling_rate (spike_analysis.core.readerlabview attribute)": [[1057, "spike_analysis.core.ReaderLabView.sampling_rate"]], "scale (spike_analysis.core.readerlabview attribute)": [[1057, "spike_analysis.core.ReaderLabView.scale"]], "spike_analysis.core.readerlabview (built-in class)": [[1057, "spike_analysis.core.ReaderLabView"]], "stim_times (spike_analysis.core.readerlabview attribute)": [[1057, "spike_analysis.core.ReaderLabView.stim_times"]], "t (spike_analysis.core.readerlabview attribute)": [[1057, "spike_analysis.core.ReaderLabView.t"]], "t_end (spike_analysis.core.readerlabview attribute)": [[1057, "spike_analysis.core.ReaderLabView.t_end"]], "t_start (spike_analysis.core.readerlabview attribute)": [[1057, "spike_analysis.core.ReaderLabView.t_start"]], "v (spike_analysis.core.readerlabview attribute)": [[1057, "spike_analysis.core.ReaderLabView.v"]], "get_serialize_dict() (spike_analysis.core.readerlabview method)": [[1058, "spike_analysis.core.ReaderLabView.get_serialize_dict"]], "get_stim_times() (spike_analysis.core.readerlabview method)": [[1059, "spike_analysis.core.ReaderLabView.get_stim_times"]], "get_voltage_traces() (spike_analysis.core.readerlabview method)": [[1060, "spike_analysis.core.ReaderLabView.get_voltage_traces"]], "analogsignal_id (spike_analysis.core.readersmr attribute)": [[1061, "spike_analysis.core.ReaderSmr.analogsignal_id"]], "max_rel_time (spike_analysis.core.readersmr attribute)": [[1061, "spike_analysis.core.ReaderSmr.max_rel_time"]], "min_rel_time (spike_analysis.core.readersmr attribute)": [[1061, "spike_analysis.core.ReaderSmr.min_rel_time"]], "path (spike_analysis.core.readersmr attribute)": [[1061, "spike_analysis.core.ReaderSmr.path"]], "spike_analysis.core.readersmr (built-in class)": [[1061, "spike_analysis.core.ReaderSmr"]], "stim_times (spike_analysis.core.readersmr attribute)": [[1061, "spike_analysis.core.ReaderSmr.stim_times"]], "stim_times_channel (spike_analysis.core.readersmr attribute)": [[1061, "spike_analysis.core.ReaderSmr.stim_times_channel"]], "t (spike_analysis.core.readersmr attribute)": [[1061, "spike_analysis.core.ReaderSmr.t"]], "t_end (spike_analysis.core.readersmr attribute)": [[1061, "spike_analysis.core.ReaderSmr.t_end"]], "t_start (spike_analysis.core.readersmr attribute)": [[1061, "spike_analysis.core.ReaderSmr.t_start"]], "v (spike_analysis.core.readersmr attribute)": [[1061, "spike_analysis.core.ReaderSmr.v"]], "get_serialize_dict() (spike_analysis.core.readersmr method)": [[1062, "spike_analysis.core.ReaderSmr.get_serialize_dict"]], "get_stim_times() (spike_analysis.core.readersmr method)": [[1063, "spike_analysis.core.ReaderSmr.get_stim_times"]], "get_voltage_traces() (spike_analysis.core.readersmr method)": [[1064, "spike_analysis.core.ReaderSmr.get_voltage_traces"]], "max_n (spike_analysis.core.staplugin_isin attribute)": [[1065, "spike_analysis.core.STAPlugin_ISIn.max_n"]], "name (spike_analysis.core.staplugin_isin attribute)": [[1065, "spike_analysis.core.STAPlugin_ISIn.name"]], "source (spike_analysis.core.staplugin_isin attribute)": [[1065, "spike_analysis.core.STAPlugin_ISIn.source"]], "spike_analysis.core.staplugin_isin (built-in class)": [[1065, "spike_analysis.core.STAPlugin_ISIn"]], "event_analysis_isin() (spike_analysis.core.staplugin_isin static method)": [[1066, "spike_analysis.core.STAPlugin_ISIn.event_analysis_ISIn"]], "setup() (spike_analysis.core.staplugin_isin method)": [[1067, "spike_analysis.core.STAPlugin_ISIn.setup"]], "_result (spike_analysis.core.staplugin_template attribute)": [[1068, "spike_analysis.core.STAPlugin_TEMPLATE._result"]], "spike_analysis.core.staplugin_template (built-in class)": [[1068, "spike_analysis.core.STAPlugin_TEMPLATE"]], "get_result() (spike_analysis.core.staplugin_template method)": [[1069, "spike_analysis.core.STAPlugin_TEMPLATE.get_result"]], "setup() (spike_analysis.core.staplugin_template method)": [[1070, "spike_analysis.core.STAPlugin_TEMPLATE.setup"]], "event_maxtimes (spike_analysis.core.staplugin_annotate_bursts_in_st attribute)": [[1071, "spike_analysis.core.STAPlugin_annotate_bursts_in_st.event_maxtimes"]], "event_names (spike_analysis.core.staplugin_annotate_bursts_in_st attribute)": [[1071, "spike_analysis.core.STAPlugin_annotate_bursts_in_st.event_names"]], "name (spike_analysis.core.staplugin_annotate_bursts_in_st attribute)": [[1071, "spike_analysis.core.STAPlugin_annotate_bursts_in_st.name"]], "source (spike_analysis.core.staplugin_annotate_bursts_in_st attribute)": [[1071, "spike_analysis.core.STAPlugin_annotate_bursts_in_st.source"]], "spike_analysis.core.staplugin_annotate_bursts_in_st (built-in class)": [[1071, "spike_analysis.core.STAPlugin_annotate_bursts_in_st"]], "setup() (spike_analysis.core.staplugin_annotate_bursts_in_st method)": [[1072, "spike_analysis.core.STAPlugin_annotate_bursts_in_st.setup"]], "event_maxtimes (spike_analysis.core.staplugin_bursts attribute)": [[1073, "spike_analysis.core.STAPlugin_bursts.event_maxtimes"]], "event_names (spike_analysis.core.staplugin_bursts attribute)": [[1073, "spike_analysis.core.STAPlugin_bursts.event_names"]], "name (spike_analysis.core.staplugin_bursts attribute)": [[1073, "spike_analysis.core.STAPlugin_bursts.name"]], "source (spike_analysis.core.staplugin_bursts attribute)": [[1073, "spike_analysis.core.STAPlugin_bursts.source"]], "spike_analysis.core.staplugin_bursts (built-in class)": [[1073, "spike_analysis.core.STAPlugin_bursts"]], "event_analysis_bursts() (spike_analysis.core.staplugin_bursts static method)": [[1074, "spike_analysis.core.STAPlugin_bursts.event_analysis_bursts"]], "setup() (spike_analysis.core.staplugin_bursts method)": [[1075, "spike_analysis.core.STAPlugin_bursts.setup"]], "column_name (spike_analysis.core.staplugin_extract_column_in_filtered_dataframe attribute)": [[1076, "spike_analysis.core.STAPlugin_extract_column_in_filtered_dataframe.column_name"]], "name (spike_analysis.core.staplugin_extract_column_in_filtered_dataframe attribute)": [[1076, "spike_analysis.core.STAPlugin_extract_column_in_filtered_dataframe.name"]], "select (spike_analysis.core.staplugin_extract_column_in_filtered_dataframe attribute)": [[1076, "spike_analysis.core.STAPlugin_extract_column_in_filtered_dataframe.select"]], "source (spike_analysis.core.staplugin_extract_column_in_filtered_dataframe attribute)": [[1076, "spike_analysis.core.STAPlugin_extract_column_in_filtered_dataframe.source"]], "spike_analysis.core.staplugin_extract_column_in_filtered_dataframe (built-in class)": [[1076, "spike_analysis.core.STAPlugin_extract_column_in_filtered_dataframe"]], "setup() (spike_analysis.core.staplugin_extract_column_in_filtered_dataframe method)": [[1077, "spike_analysis.core.STAPlugin_extract_column_in_filtered_dataframe.setup"]], "mode (spike_analysis.core.staplugin_ongoing attribute)": [[1078, "spike_analysis.core.STAPlugin_ongoing.mode"]], "name (spike_analysis.core.staplugin_ongoing attribute)": [[1078, "spike_analysis.core.STAPlugin_ongoing.name"]], "ongoing_sample_length (spike_analysis.core.staplugin_ongoing attribute)": [[1078, "spike_analysis.core.STAPlugin_ongoing.ongoing_sample_length"]], "source (spike_analysis.core.staplugin_ongoing attribute)": [[1078, "spike_analysis.core.STAPlugin_ongoing.source"]], "spike_analysis.core.staplugin_ongoing (built-in class)": [[1078, "spike_analysis.core.STAPlugin_ongoing"]], "setup() (spike_analysis.core.staplugin_ongoing method)": [[1079, "spike_analysis.core.STAPlugin_ongoing.setup"]], "mode (spike_analysis.core.staplugin_quantification_in_period attribute)": [[1080, "spike_analysis.core.STAPlugin_quantification_in_period.mode"]], "name (spike_analysis.core.staplugin_quantification_in_period attribute)": [[1080, "spike_analysis.core.STAPlugin_quantification_in_period.name"]], "period (spike_analysis.core.staplugin_quantification_in_period attribute)": [[1080, "spike_analysis.core.STAPlugin_quantification_in_period.period"]], "source (spike_analysis.core.staplugin_quantification_in_period attribute)": [[1080, "spike_analysis.core.STAPlugin_quantification_in_period.source"]], "spike_analysis.core.staplugin_quantification_in_period (built-in class)": [[1080, "spike_analysis.core.STAPlugin_quantification_in_period"]], "t_end (spike_analysis.core.staplugin_quantification_in_period attribute)": [[1080, "spike_analysis.core.STAPlugin_quantification_in_period.t_end"]], "t_start (spike_analysis.core.staplugin_quantification_in_period attribute)": [[1080, "spike_analysis.core.STAPlugin_quantification_in_period.t_start"]], "setup() (spike_analysis.core.staplugin_quantification_in_period method)": [[1081, "spike_analysis.core.STAPlugin_quantification_in_period.setup"]], "_by_trial (spike_analysis.core.staplugin_response_latency_in_period attribute)": [[1082, "spike_analysis.core.STAPlugin_response_latency_in_period._by_trial"]], "name (spike_analysis.core.staplugin_response_latency_in_period attribute)": [[1082, "spike_analysis.core.STAPlugin_response_latency_in_period.name"]], "spike_analysis.core.staplugin_response_latency_in_period (built-in class)": [[1082, "spike_analysis.core.STAPlugin_response_latency_in_period"]], "setup() (spike_analysis.core.staplugin_response_latency_in_period method)": [[1083, "spike_analysis.core.STAPlugin_response_latency_in_period.setup"]], "_by_trial (spike_analysis.core.staplugin_response_probability_in_period attribute)": [[1084, "spike_analysis.core.STAPlugin_response_probability_in_period._by_trial"]], "name (spike_analysis.core.staplugin_response_probability_in_period attribute)": [[1084, "spike_analysis.core.STAPlugin_response_probability_in_period.name"]], "spike_analysis.core.staplugin_response_probability_in_period (built-in class)": [[1084, "spike_analysis.core.STAPlugin_response_probability_in_period"]], "setup() (spike_analysis.core.staplugin_response_probability_in_period method)": [[1085, "spike_analysis.core.STAPlugin_response_probability_in_period.setup"]], "mode (spike_analysis.core.staplugin_spike_times_dataframe attribute)": [[1086, "spike_analysis.core.STAPlugin_spike_times_dataframe.mode"]], "name (spike_analysis.core.staplugin_spike_times_dataframe attribute)": [[1086, "spike_analysis.core.STAPlugin_spike_times_dataframe.name"]], "offset (spike_analysis.core.staplugin_spike_times_dataframe attribute)": [[1086, "spike_analysis.core.STAPlugin_spike_times_dataframe.offset"]], "source (spike_analysis.core.staplugin_spike_times_dataframe attribute)": [[1086, "spike_analysis.core.STAPlugin_spike_times_dataframe.source"]], "spike_analysis.core.staplugin_spike_times_dataframe (built-in class)": [[1086, "spike_analysis.core.STAPlugin_spike_times_dataframe"]], "setup() (spike_analysis.core.staplugin_spike_times_dataframe method)": [[1087, "spike_analysis.core.STAPlugin_spike_times_dataframe.setup"]], "_spike_times_creast (spike_analysis.core.spikedetectioncreasttrough attribute)": [[1088, "spike_analysis.core.SpikeDetectionCreastTrough._spike_times_creast"]], "_spike_times_trough (spike_analysis.core.spikedetectioncreasttrough attribute)": [[1088, "spike_analysis.core.SpikeDetectionCreastTrough._spike_times_trough"]], "lim_creast (spike_analysis.core.spikedetectioncreasttrough attribute)": [[1088, "spike_analysis.core.SpikeDetectionCreastTrough.lim_creast"]], "lim_trough (spike_analysis.core.spikedetectioncreasttrough attribute)": [[1088, "spike_analysis.core.SpikeDetectionCreastTrough.lim_trough"]], "spike_analysis.core.spikedetectioncreasttrough (built-in class)": [[1088, "spike_analysis.core.SpikeDetectionCreastTrough"]], "spike_times (spike_analysis.core.spikedetectioncreasttrough attribute)": [[1088, "spike_analysis.core.SpikeDetectionCreastTrough.spike_times"]], "st (spike_analysis.core.spikedetectioncreasttrough attribute)": [[1088, "spike_analysis.core.SpikeDetectionCreastTrough.st"]], "_extract_spike_times() (spike_analysis.core.spikedetectioncreasttrough method)": [[1089, "spike_analysis.core.SpikeDetectionCreastTrough._extract_spike_times"]], "_set_creast_trough() (spike_analysis.core.spikedetectioncreasttrough method)": [[1090, "spike_analysis.core.SpikeDetectionCreastTrough._set_creast_trough"]], "get_creast_and_trough_ampltidues_by_bins() (spike_analysis.core.spikedetectioncreasttrough method)": [[1091, "spike_analysis.core.SpikeDetectionCreastTrough.get_creast_and_trough_ampltidues_by_bins"]], "get_default_events() (spike_analysis.core.spikedetectioncreasttrough method)": [[1092, "spike_analysis.core.SpikeDetectionCreastTrough.get_default_events"]], "get_serialize_dict() (spike_analysis.core.spikedetectioncreasttrough method)": [[1093, "spike_analysis.core.SpikeDetectionCreastTrough.get_serialize_dict"]], "load() (spike_analysis.core.spikedetectioncreasttrough static method)": [[1094, "spike_analysis.core.SpikeDetectionCreastTrough.load"]], "plot_creast_trough_histogram() (spike_analysis.core.spikedetectioncreasttrough method)": [[1095, "spike_analysis.core.SpikeDetectionCreastTrough.plot_creast_trough_histogram"]], "run_analysis() (spike_analysis.core.spikedetectioncreasttrough method)": [[1096, "spike_analysis.core.SpikeDetectionCreastTrough.run_analysis"]], "save() (spike_analysis.core.spikedetectioncreasttrough method)": [[1097, "spike_analysis.core.SpikeDetectionCreastTrough.save"]], "show_events() (spike_analysis.core.spikedetectioncreasttrough method)": [[1098, "spike_analysis.core.SpikeDetectionCreastTrough.show_events"]], "_db (spike_analysis.core.spiketimesanalysis attribute)": [[1099, "spike_analysis.core.SpikeTimesAnalysis._db"]], "periods (spike_analysis.core.spiketimesanalysis attribute)": [[1099, "spike_analysis.core.SpikeTimesAnalysis.periods"]], "spike_analysis.core.spiketimesanalysis (built-in class)": [[1099, "spike_analysis.core.SpikeTimesAnalysis"]], "spike_times_object (spike_analysis.core.spiketimesanalysis attribute)": [[1099, "spike_analysis.core.SpikeTimesAnalysis.spike_times_object"]], "apply_extractor() (spike_analysis.core.spiketimesanalysis method)": [[1100, "spike_analysis.core.SpikeTimesAnalysis.apply_extractor"]], "get() (spike_analysis.core.spiketimesanalysis method)": [[1101, "spike_analysis.core.SpikeTimesAnalysis.get"]], "get_by_trial() (spike_analysis.core.spiketimesanalysis method)": [[1102, "spike_analysis.core.SpikeTimesAnalysis.get_by_trial"]], "spike_analysis.core._sta_input_checker()": [[1103, "spike_analysis.core._sta_input_checker"]], "spike_analysis.core.filter_short_isis()": [[1104, "spike_analysis.core.filter_short_ISIs"]], "spike_analysis.core.filter_spike_times()": [[1105, "spike_analysis.core.filter_spike_times"]], "spike_analysis.core.get_peaks_above()": [[1106, "spike_analysis.core.get_peaks_above"]], "spike_analysis.core.get_period_label_by_time()": [[1107, "spike_analysis.core.get_period_label_by_time"]], "spike_analysis.core.get_spike_times_from_row()": [[1108, "spike_analysis.core.get_spike_times_from_row"]], "spike_analysis.core.get_st_from_spike_times_and_stim_times()": [[1109, "spike_analysis.core.get_st_from_spike_times_and_stim_times"]], "spike_analysis.core.get_upcross()": [[1110, "spike_analysis.core.get_upcross"]], "spike_analysis.core.highpass_filter()": [[1111, "spike_analysis.core.highpass_filter"]], "spike_analysis.core": [[1112, "module-spike_analysis.core"]], "spike_analysis.core.load_reader()": [[1113, "spike_analysis.core.load_reader"]], "spike_analysis.core.read_labview_junk1_dat_files()": [[1114, "spike_analysis.core.read_labview_junk1_dat_files"]], "spike_analysis.core.read_smr_file()": [[1115, "spike_analysis.core.read_smr_file"]], "spike_analysis.core.stimulus_interval_filter()": [[1116, "spike_analysis.core.stimulus_interval_filter"]], "spike_analysis.core.strip_st()": [[1117, "spike_analysis.core.strip_st"]], "spike_analysis": [[1118, "module-spike_analysis"]], "visualize._decorators.dask_to_pandas()": [[1119, "visualize._decorators.dask_to_pandas"]], "visualize._decorators": [[1120, "module-visualize._decorators"]], "visualize._decorators.pr()": [[1121, "visualize._decorators.pr"]], "visualize._decorators.subsequent_calls_per_line()": [[1122, "visualize._decorators.subsequent_calls_per_line"]], "array (visualize._figure_array_converter.pixelobject attribute)": [[1123, "visualize._figure_array_converter.PixelObject.array"]], "extent (visualize._figure_array_converter.pixelobject attribute)": [[1123, "visualize._figure_array_converter.PixelObject.extent"]], "visualize._figure_array_converter.pixelobject (built-in class)": [[1123, "visualize._figure_array_converter.PixelObject"]], "visualize._figure_array_converter.fig2np()": [[1124, "visualize._figure_array_converter.fig2np"]], "visualize._figure_array_converter": [[1125, "module-visualize._figure_array_converter"]], "visualize._figure_array_converter.show_pixel_object()": [[1126, "visualize._figure_array_converter.show_pixel_object"]], "background_color (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.background_color"]], "cell (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.cell"]], "cmap (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.cmap"]], "dt (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.dt"]], "ion_dynamics_timeseries (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.ion_dynamics_timeseries"]], "line_pairs (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.line_pairs"]], "morphology (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.morphology"]], "n_sections (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.n_sections"]], "norm (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.norm"]], "parents (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.parents"]], "possible_scalars (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.possible_scalars"]], "rotation_with_zaxis (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.rotation_with_zaxis"]], "scalar_mappable (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.scalar_mappable"]], "sections (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.sections"]], "simulation_times (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.simulation_times"]], "soma (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.soma"]], "soma_center (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.soma_center"]], "synapses_timeseries (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.synapses_timeseries"]], "t_start (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.t_start"]], "t_step (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.t_step"]], "t_stop (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.t_stop"]], "time_offset (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.time_offset"]], "time_show_syn_activ (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.time_show_syn_activ"]], "times_to_show (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.times_to_show"]], "visualize.cell_morphology_visualizer.cmvdataparser (built-in class)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser"]], "vmax (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.vmax"]], "vmin (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.vmin"]], "voltage_timeseries (visualize.cell_morphology_visualizer.cmvdataparser attribute)": [[1127, "visualize.cell_morphology_visualizer.CMVDataParser.voltage_timeseries"]], "_align_trunk_with_z_axis() (visualize.cell_morphology_visualizer.cmvdataparser method)": [[1128, "visualize.cell_morphology_visualizer.CMVDataParser._align_trunk_with_z_axis"]], "_calc_ion_dynamics_timeseries() (visualize.cell_morphology_visualizer.cmvdataparser method)": [[1129, "visualize.cell_morphology_visualizer.CMVDataParser._calc_ion_dynamics_timeseries"]], "_calc_morphology() (visualize.cell_morphology_visualizer.cmvdataparser method)": [[1130, "visualize.cell_morphology_visualizer.CMVDataParser._calc_morphology"]], "_calc_scalar_data_from_keyword() (visualize.cell_morphology_visualizer.cmvdataparser method)": [[1131, "visualize.cell_morphology_visualizer.CMVDataParser._calc_scalar_data_from_keyword"]], "_calc_synapses_timeseries() (visualize.cell_morphology_visualizer.cmvdataparser method)": [[1132, "visualize.cell_morphology_visualizer.CMVDataParser._calc_synapses_timeseries"]], "_calc_voltage_timeseries() (visualize.cell_morphology_visualizer.cmvdataparser method)": [[1133, "visualize.cell_morphology_visualizer.CMVDataParser._calc_voltage_timeseries"]], "_data_per_section_to_data_per_point() (visualize.cell_morphology_visualizer.cmvdataparser method)": [[1134, "visualize.cell_morphology_visualizer.CMVDataParser._data_per_section_to_data_per_point"]], "_get_color_per_section() (visualize.cell_morphology_visualizer.cmvdataparser method)": [[1135, "visualize.cell_morphology_visualizer.CMVDataParser._get_color_per_section"]], "_get_ion_dynamics_at_timepoint() (visualize.cell_morphology_visualizer.cmvdataparser method)": [[1136, "visualize.cell_morphology_visualizer.CMVDataParser._get_ion_dynamics_at_timepoint"]], "_get_synapses_at_timepoint() (visualize.cell_morphology_visualizer.cmvdataparser method)": [[1137, "visualize.cell_morphology_visualizer.CMVDataParser._get_synapses_at_timepoint"]], "_get_timeseries_minmax() (visualize.cell_morphology_visualizer.cmvdataparser method)": [[1138, "visualize.cell_morphology_visualizer.CMVDataParser._get_timeseries_minmax"]], "_get_voltages_at_timepoint() (visualize.cell_morphology_visualizer.cmvdataparser method)": [[1139, "visualize.cell_morphology_visualizer.CMVDataParser._get_voltages_at_timepoint"]], "_has_simulation_data() (visualize.cell_morphology_visualizer.cmvdataparser method)": [[1140, "visualize.cell_morphology_visualizer.CMVDataParser._has_simulation_data"]], "_init_simulation_data() (visualize.cell_morphology_visualizer.cmvdataparser method)": [[1141, "visualize.cell_morphology_visualizer.CMVDataParser._init_simulation_data"]], "_keyword_is_scalar_data() (visualize.cell_morphology_visualizer.cmvdataparser method)": [[1142, "visualize.cell_morphology_visualizer.CMVDataParser._keyword_is_scalar_data"]], "_update_times_to_show() (visualize.cell_morphology_visualizer.cmvdataparser method)": [[1143, "visualize.cell_morphology_visualizer.CMVDataParser._update_times_to_show"]], "scale_diameter() (visualize.cell_morphology_visualizer.cmvdataparser method)": [[1144, "visualize.cell_morphology_visualizer.CMVDataParser.scale_diameter"]], "set_cmap() (visualize.cell_morphology_visualizer.cmvdataparser method)": [[1145, "visualize.cell_morphology_visualizer.CMVDataParser.set_cmap"]], "background_color (visualize.cell_morphology_visualizer.cellmorphologyinteractivevisualizer attribute)": [[1146, "visualize.cell_morphology_visualizer.CellMorphologyInteractiveVisualizer.background_color"]], "dash_ip (visualize.cell_morphology_visualizer.cellmorphologyinteractivevisualizer attribute)": [[1146, "visualize.cell_morphology_visualizer.CellMorphologyInteractiveVisualizer.dash_ip"]], "renderer (visualize.cell_morphology_visualizer.cellmorphologyinteractivevisualizer attribute)": [[1146, "visualize.cell_morphology_visualizer.CellMorphologyInteractiveVisualizer.renderer"]], "show (visualize.cell_morphology_visualizer.cellmorphologyinteractivevisualizer attribute)": [[1146, "visualize.cell_morphology_visualizer.CellMorphologyInteractiveVisualizer.show"]], "visualize.cell_morphology_visualizer.cellmorphologyinteractivevisualizer (built-in class)": [[1146, "visualize.cell_morphology_visualizer.CellMorphologyInteractiveVisualizer"]], "_get_interactive_cell() (visualize.cell_morphology_visualizer.cellmorphologyinteractivevisualizer method)": [[1147, "visualize.cell_morphology_visualizer.CellMorphologyInteractiveVisualizer._get_interactive_cell"]], "_get_interactive_dash_app() (visualize.cell_morphology_visualizer.cellmorphologyinteractivevisualizer method)": [[1148, "visualize.cell_morphology_visualizer.CellMorphologyInteractiveVisualizer._get_interactive_dash_app"]], "interactive_app() (visualize.cell_morphology_visualizer.cellmorphologyinteractivevisualizer method)": [[1149, "visualize.cell_morphology_visualizer.CellMorphologyInteractiveVisualizer.interactive_app"]], "interactive_plot() (visualize.cell_morphology_visualizer.cellmorphologyinteractivevisualizer method)": [[1150, "visualize.cell_morphology_visualizer.CellMorphologyInteractiveVisualizer.interactive_plot"]], "camera_position (visualize.cell_morphology_visualizer.cellmorphologyvisualizer attribute)": [[1151, "visualize.cell_morphology_visualizer.CellMorphologyVisualizer.camera_position"]], "dpi (visualize.cell_morphology_visualizer.cellmorphologyvisualizer attribute)": [[1151, "visualize.cell_morphology_visualizer.CellMorphologyVisualizer.dpi"]], "highlight_arrow_kwargs (visualize.cell_morphology_visualizer.cellmorphologyvisualizer attribute)": [[1151, "visualize.cell_morphology_visualizer.CellMorphologyVisualizer.highlight_arrow_kwargs"]], "neuron_rotation (visualize.cell_morphology_visualizer.cellmorphologyvisualizer attribute)": [[1151, "visualize.cell_morphology_visualizer.CellMorphologyVisualizer.neuron_rotation"]], "population_to_color_dict (visualize.cell_morphology_visualizer.cellmorphologyvisualizer attribute)": [[1151, "visualize.cell_morphology_visualizer.CellMorphologyVisualizer.population_to_color_dict"]], "show_synapses (visualize.cell_morphology_visualizer.cellmorphologyvisualizer attribute)": [[1151, "visualize.cell_morphology_visualizer.CellMorphologyVisualizer.show_synapses"]], "synapse_group_function (visualize.cell_morphology_visualizer.cellmorphologyvisualizer attribute)": [[1151, "visualize.cell_morphology_visualizer.CellMorphologyVisualizer.synapse_group_function"]], "synapse_legend (visualize.cell_morphology_visualizer.cellmorphologyvisualizer attribute)": [[1151, "visualize.cell_morphology_visualizer.CellMorphologyVisualizer.synapse_legend"]], "visualize.cell_morphology_visualizer.cellmorphologyvisualizer (built-in class)": [[1151, "visualize.cell_morphology_visualizer.CellMorphologyVisualizer"]], "_write_png_timeseries() (visualize.cell_morphology_visualizer.cellmorphologyvisualizer method)": [[1152, "visualize.cell_morphology_visualizer.CellMorphologyVisualizer._write_png_timeseries"]], "animation() (visualize.cell_morphology_visualizer.cellmorphologyvisualizer method)": [[1153, "visualize.cell_morphology_visualizer.CellMorphologyVisualizer.animation"]], "plot() (visualize.cell_morphology_visualizer.cellmorphologyvisualizer method)": [[1154, "visualize.cell_morphology_visualizer.CellMorphologyVisualizer.plot"]], "to_vtk() (visualize.cell_morphology_visualizer.cellmorphologyvisualizer method)": [[1155, "visualize.cell_morphology_visualizer.CellMorphologyVisualizer.to_vtk"]], "write_gif() (visualize.cell_morphology_visualizer.cellmorphologyvisualizer method)": [[1156, "visualize.cell_morphology_visualizer.CellMorphologyVisualizer.write_gif"]], "write_video() (visualize.cell_morphology_visualizer.cellmorphologyvisualizer method)": [[1157, "visualize.cell_morphology_visualizer.CellMorphologyVisualizer.write_video"]], "write_vtk_frames() (visualize.cell_morphology_visualizer.cellmorphologyvisualizer method)": [[1158, "visualize.cell_morphology_visualizer.CellMorphologyVisualizer.write_vtk_frames"]], "visualize.cell_morphology_visualizer.get_3d_plot_morphology()": [[1159, "visualize.cell_morphology_visualizer.get_3d_plot_morphology"]], "visualize.cell_morphology_visualizer": [[1160, "module-visualize.cell_morphology_visualizer"]], "visualize.cell_to_ipython_animation._in_parallel_context()": [[1161, "visualize.cell_to_ipython_animation._in_parallel_context"]], "visualize.cell_to_ipython_animation._load_base64()": [[1162, "visualize.cell_to_ipython_animation._load_base64"]], "visualize.cell_to_ipython_animation.cell_to_animation()": [[1163, "visualize.cell_to_ipython_animation.cell_to_animation"]], "visualize.cell_to_ipython_animation.cell_to_ipython_animation()": [[1164, "visualize.cell_to_ipython_animation.cell_to_ipython_animation"]], "visualize.cell_to_ipython_animation.display_animation()": [[1165, "visualize.cell_to_ipython_animation.display_animation"]], "visualize.cell_to_ipython_animation.find_closest_index()": [[1166, "visualize.cell_to_ipython_animation.find_closest_index"]], "visualize.cell_to_ipython_animation.get_lines()": [[1167, "visualize.cell_to_ipython_animation.get_lines"]], "visualize.cell_to_ipython_animation": [[1168, "module-visualize.cell_to_ipython_animation"]], "visualize.cell_to_ipython_animation.init_fig()": [[1169, "visualize.cell_to_ipython_animation.init_fig"]], "visualize.cell_to_ipython_animation.parallelmoviemaker()": [[1170, "visualize.cell_to_ipython_animation.parallelMovieMaker"]], "visualize.cell_to_ipython_animation.plot_lines_fun()": [[1171, "visualize.cell_to_ipython_animation.plot_lines_fun"]], "cell (visualize.current_visualizer.currentanalysis attribute)": [[1172, "visualize.current_visualizer.CurrentAnalysis.cell"]], "colormap (visualize.current_visualizer.currentanalysis attribute)": [[1172, "visualize.current_visualizer.CurrentAnalysis.colormap"]], "depolarizing_currents (visualize.current_visualizer.currentanalysis attribute)": [[1172, "visualize.current_visualizer.CurrentAnalysis.depolarizing_currents"]], "depolarizing_currents_normalized (visualize.current_visualizer.currentanalysis attribute)": [[1172, "visualize.current_visualizer.CurrentAnalysis.depolarizing_currents_normalized"]], "depolarizing_currents_sum (visualize.current_visualizer.currentanalysis attribute)": [[1172, "visualize.current_visualizer.CurrentAnalysis.depolarizing_currents_sum"]], "hyperpolarizing_currents (visualize.current_visualizer.currentanalysis attribute)": [[1172, "visualize.current_visualizer.CurrentAnalysis.hyperpolarizing_currents"]], "hyperpolarizing_currents_normalized (visualize.current_visualizer.currentanalysis attribute)": [[1172, "visualize.current_visualizer.CurrentAnalysis.hyperpolarizing_currents_normalized"]], "hyperpolarizing_currents_sum (visualize.current_visualizer.currentanalysis attribute)": [[1172, "visualize.current_visualizer.CurrentAnalysis.hyperpolarizing_currents_sum"]], "mode (visualize.current_visualizer.currentanalysis attribute)": [[1172, "visualize.current_visualizer.CurrentAnalysis.mode"]], "net_current (visualize.current_visualizer.currentanalysis attribute)": [[1172, "visualize.current_visualizer.CurrentAnalysis.net_current"]], "rangevars (visualize.current_visualizer.currentanalysis attribute)": [[1172, "visualize.current_visualizer.CurrentAnalysis.rangeVars"]], "sec (visualize.current_visualizer.currentanalysis attribute)": [[1172, "visualize.current_visualizer.CurrentAnalysis.sec"]], "secid (visualize.current_visualizer.currentanalysis attribute)": [[1172, "visualize.current_visualizer.CurrentAnalysis.secID"]], "seg (visualize.current_visualizer.currentanalysis attribute)": [[1172, "visualize.current_visualizer.CurrentAnalysis.seg"]], "segid (visualize.current_visualizer.currentanalysis attribute)": [[1172, "visualize.current_visualizer.CurrentAnalysis.segID"]], "t (visualize.current_visualizer.currentanalysis attribute)": [[1172, "visualize.current_visualizer.CurrentAnalysis.t"]], "visualize.current_visualizer.currentanalysis (built-in class)": [[1172, "visualize.current_visualizer.CurrentAnalysis"]], "voltage_trace (visualize.current_visualizer.currentanalysis attribute)": [[1172, "visualize.current_visualizer.CurrentAnalysis.voltage_trace"]], "_compute_current_arrays() (visualize.current_visualizer.currentanalysis method)": [[1173, "visualize.current_visualizer.CurrentAnalysis._compute_current_arrays"]], "_get_current_by_rv() (visualize.current_visualizer.currentanalysis method)": [[1174, "visualize.current_visualizer.CurrentAnalysis._get_current_by_rv"]], "plot_areas() (visualize.current_visualizer.currentanalysis method)": [[1175, "visualize.current_visualizer.CurrentAnalysis.plot_areas"]], "plot_lines() (visualize.current_visualizer.currentanalysis method)": [[1176, "visualize.current_visualizer.CurrentAnalysis.plot_lines"]], "visualize.current_visualizer": [[1177, "module-visualize.current_visualizer"]], "cell (visualize.dendrogram.dendrogram attribute)": [[1178, "visualize.dendrogram.Dendrogram.cell"]], "dendrogram_db (visualize.dendrogram.dendrogram attribute)": [[1178, "visualize.dendrogram.Dendrogram.dendrogram_db"]], "dendrogram_db_by_name (visualize.dendrogram.dendrogram attribute)": [[1178, "visualize.dendrogram.Dendrogram.dendrogram_db_by_name"]], "dendrogram_db_by_sec_id (visualize.dendrogram.dendrogram attribute)": [[1178, "visualize.dendrogram.Dendrogram.dendrogram_db_by_sec_id"]], "main_bifur_dist (visualize.dendrogram.dendrogram attribute)": [[1178, "visualize.dendrogram.Dendrogram.main_bifur_dist"]], "visualize.dendrogram.dendrogram (built-in class)": [[1178, "visualize.dendrogram.Dendrogram"]], "_plot_dendrogram() (visualize.dendrogram.dendrogram method)": [[1179, "visualize.dendrogram.Dendrogram._plot_dendrogram"]], "get_parent_by_name() (visualize.dendrogram.dendrogram method)": [[1180, "visualize.dendrogram.Dendrogram.get_parent_by_name"]], "plot() (visualize.dendrogram.dendrogram method)": [[1181, "visualize.dendrogram.Dendrogram.plot"]], "dend_statistics (visualize.dendrogram.dendrogramstatistics attribute)": [[1182, "visualize.dendrogram.DendrogramStatistics.dend_statistics"]], "dendrogram (visualize.dendrogram.dendrogramstatistics attribute)": [[1182, "visualize.dendrogram.DendrogramStatistics.dendrogram"]], "syn_statistics (visualize.dendrogram.dendrogramstatistics attribute)": [[1182, "visualize.dendrogram.DendrogramStatistics.syn_statistics"]], "visualize.dendrogram.dendrogramstatistics (built-in class)": [[1182, "visualize.dendrogram.DendrogramStatistics"]], "plot() (visualize.dendrogram.dendrogramstatistics method)": [[1183, "visualize.dendrogram.DendrogramStatistics.plot"]], "bins (visualize.dendrogram._dendrogramdendritestatistics attribute)": [[1184, "visualize.dendrogram._DendrogramDendriteStatistics.bins"]], "colormap_synapses (visualize.dendrogram._dendrogramdendritestatistics attribute)": [[1184, "visualize.dendrogram._DendrogramDendriteStatistics.colormap_synapses"]], "dendrite_density (visualize.dendrogram._dendrogramdendritestatistics attribute)": [[1184, "visualize.dendrogram._DendrogramDendriteStatistics.dendrite_density"]], "dendrogram_db (visualize.dendrogram._dendrogramdendritestatistics attribute)": [[1184, "visualize.dendrogram._DendrogramDendriteStatistics.dendrogram_db"]], "visualize.dendrogram._dendrogramdendritestatistics (built-in class)": [[1184, "visualize.dendrogram._DendrogramDendriteStatistics"]], "_compute_dendrite_hist() (visualize.dendrogram._dendrogramdendritestatistics method)": [[1185, "visualize.dendrogram._DendrogramDendriteStatistics._compute_dendrite_hist"]], "_get_amount_of_dendrite_in_bin() (visualize.dendrogram._dendrogramdendritestatistics method)": [[1186, "visualize.dendrogram._DendrogramDendriteStatistics._get_amount_of_dendrite_in_bin"]], "_plot_dendrite_hist() (visualize.dendrogram._dendrogramdendritestatistics method)": [[1187, "visualize.dendrogram._DendrogramDendriteStatistics._plot_dendrite_hist"]], "plot() (visualize.dendrogram._dendrogramdendritestatistics method)": [[1188, "visualize.dendrogram._DendrogramDendriteStatistics.plot"]], "main_bifurcation (visualize.dendrogram._dendrogramsection attribute)": [[1189, "visualize.dendrogram._DendrogramSection.main_bifurcation"]], "name (visualize.dendrogram._dendrogramsection attribute)": [[1189, "visualize.dendrogram._DendrogramSection.name"]], "sec (visualize.dendrogram._dendrogramsection attribute)": [[1189, "visualize.dendrogram._DendrogramSection.sec"]], "sec_id (visualize.dendrogram._dendrogramsection attribute)": [[1189, "visualize.dendrogram._DendrogramSection.sec_id"]], "synapses (visualize.dendrogram._dendrogramsection attribute)": [[1189, "visualize.dendrogram._DendrogramSection.synapses"]], "visualize.dendrogram._dendrogramsection (built-in class)": [[1189, "visualize.dendrogram._DendrogramSection"]], "x_dist_end (visualize.dendrogram._dendrogramsection attribute)": [[1189, "visualize.dendrogram._DendrogramSection.x_dist_end"]], "x_dist_start (visualize.dendrogram._dendrogramsection attribute)": [[1189, "visualize.dendrogram._DendrogramSection.x_dist_start"]], "_add_synapse() (visualize.dendrogram._dendrogramsection method)": [[1190, "visualize.dendrogram._DendrogramSection._add_synapse"]], "bins (visualize.dendrogram._dendrogramsynapsestatistics attribute)": [[1191, "visualize.dendrogram._DendrogramSynapseStatistics.bins"]], "cell (visualize.dendrogram._dendrogramsynapsestatistics attribute)": [[1191, "visualize.dendrogram._DendrogramSynapseStatistics.cell"]], "colormap_synapses (visualize.dendrogram._dendrogramsynapsestatistics attribute)": [[1191, "visualize.dendrogram._DendrogramSynapseStatistics.colormap_synapses"]], "dendrogram_db (visualize.dendrogram._dendrogramsynapsestatistics attribute)": [[1191, "visualize.dendrogram._DendrogramSynapseStatistics.dendrogram_db"]], "synapse_density (visualize.dendrogram._dendrogramsynapsestatistics attribute)": [[1191, "visualize.dendrogram._DendrogramSynapseStatistics.synapse_density"]], "synapse_density_apical (visualize.dendrogram._dendrogramsynapsestatistics attribute)": [[1191, "visualize.dendrogram._DendrogramSynapseStatistics.synapse_density_apical"]], "synapse_density_basal (visualize.dendrogram._dendrogramsynapsestatistics attribute)": [[1191, "visualize.dendrogram._DendrogramSynapseStatistics.synapse_density_basal"]], "synapse_statistics (visualize.dendrogram._dendrogramsynapsestatistics attribute)": [[1191, "visualize.dendrogram._DendrogramSynapseStatistics.synapse_statistics"]], "visualize.dendrogram._dendrogramsynapsestatistics (built-in class)": [[1191, "visualize.dendrogram._DendrogramSynapseStatistics"]], "_add_synapses() (visualize.dendrogram._dendrogramsynapsestatistics method)": [[1192, "visualize.dendrogram._DendrogramSynapseStatistics._add_synapses"]], "_compute_synapse_hist() (visualize.dendrogram._dendrogramsynapsestatistics method)": [[1193, "visualize.dendrogram._DendrogramSynapseStatistics._compute_synapse_hist"]], "_compute_synapse_statistics() (visualize.dendrogram._dendrogramsynapsestatistics method)": [[1194, "visualize.dendrogram._DendrogramSynapseStatistics._compute_synapse_statistics"]], "_plot_synapse_density_hist() (visualize.dendrogram._dendrogramsynapsestatistics method)": [[1195, "visualize.dendrogram._DendrogramSynapseStatistics._plot_synapse_density_hist"]], "_plot_synapse_hist() (visualize.dendrogram._dendrogramsynapsestatistics method)": [[1196, "visualize.dendrogram._DendrogramSynapseStatistics._plot_synapse_hist"]], "_plot_synapses_dendrogram_overlay() (visualize.dendrogram._dendrogramsynapsestatistics method)": [[1197, "visualize.dendrogram._DendrogramSynapseStatistics._plot_synapses_dendrogram_overlay"]], "get_number_of_synapses_in_bin() (visualize.dendrogram._dendrogramsynapsestatistics method)": [[1198, "visualize.dendrogram._DendrogramSynapseStatistics.get_number_of_synapses_in_bin"]], "plot() (visualize.dendrogram._dendrogramsynapsestatistics method)": [[1199, "visualize.dendrogram._DendrogramSynapseStatistics.plot"]], "visualize.dendrogram._get_db_by_sec()": [[1200, "visualize.dendrogram._get_db_by_sec"]], "visualize.dendrogram._get_max_somadistance()": [[1201, "visualize.dendrogram._get_max_somadistance"]], "visualize.dendrogram": [[1202, "module-visualize.dendrogram"]], "visualize.histogram.histogram()": [[1203, "visualize.histogram.histogram"]], "visualize.histogram.histogram2()": [[1204, "visualize.histogram.histogram2"]], "visualize.histogram": [[1205, "module-visualize.histogram"]], "visualize": [[1206, "module-visualize"]], "visualize.manylines": [[1207, "module-visualize.manylines"]], "visualize.manylines.manylines()": [[1208, "visualize.manylines.manylines"]], "visualize.manylines.manylines_helper()": [[1209, "visualize.manylines.manylines_helper"]], "visualize.plot_hoc()": [[1210, "visualize.plot_hoc"]], "visualize.rasterplot": [[1211, "module-visualize.rasterplot"]], "visualize.rasterplot.rasterplot()": [[1212, "visualize.rasterplot.rasterplot"]], "visualize.rasterplot.rasterplot2()": [[1213, "visualize.rasterplot.rasterplot2"]], "visualize.rasterplot.rasterplot2_pdf_grouped()": [[1214, "visualize.rasterplot.rasterplot2_pdf_grouped"]], "visualize.svg2emf()": [[1215, "visualize.svg2emf"]], "_dxdydz (visualize.utils.arrow3d attribute)": [[1216, "visualize.utils.Arrow3D._dxdydz"]], "_xyz (visualize.utils.arrow3d attribute)": [[1216, "visualize.utils.Arrow3D._xyz"]], "visualize.utils.arrow3d (built-in class)": [[1216, "visualize.utils.Arrow3D"]], "do_3d_projection() (visualize.utils.arrow3d method)": [[1217, "visualize.utils.Arrow3D.do_3d_projection"]], "draw() (visualize.utils.arrow3d method)": [[1218, "visualize.utils.Arrow3D.draw"]], "visualize.utils._arrow3d()": [[1219, "visualize.utils._arrow3D"]], "visualize.utils._load_base64()": [[1220, "visualize.utils._load_base64"]], "visualize.utils.display_animation_from_images()": [[1221, "visualize.utils.display_animation_from_images"]], "visualize.utils.draw_arrow()": [[1222, "visualize.utils.draw_arrow"]], "visualize.utils.find_files_and_order_them()": [[1223, "visualize.utils.find_files_and_order_them"]], "visualize.utils": [[1224, "module-visualize.utils"]], "visualize.utils.value_to_color()": [[1225, "visualize.utils.value_to_color"]], "visualize.utils.write_gif_from_images()": [[1226, "visualize.utils.write_gif_from_images"]], "visualize.utils.write_video_from_images()": [[1227, "visualize.utils.write_video_from_images"]], "visualize.voltage_trace_visualizer": [[1228, "module-visualize.voltage_trace_visualizer"]], "visualize.voltage_trace_visualizer.plot_vt()": [[1229, "visualize.voltage_trace_visualizer.plot_vt"]], "visualize.voltage_trace_visualizer.visualize_vt()": [[1230, "visualize.voltage_trace_visualizer.visualize_vt"]], "visualize.vtk.convert_amira_lattice_to_vtk()": [[1231, "visualize.vtk.convert_amira_lattice_to_vtk"]], "visualize.vtk.convert_amira_surf_to_vtk()": [[1232, "visualize.vtk.convert_amira_surf_to_vtk"]], "visualize.vtk": [[1233, "module-visualize.vtk"]], "visualize.vtk.save_cells_landmark_files_vtk()": [[1234, "visualize.vtk.save_cells_landmark_files_vtk"]], "visualize.vtk.write_vtk_pointcloud_file()": [[1235, "visualize.vtk.write_vtk_pointcloud_file"]], "visualize.vtk.write_vtk_skeleton_file()": [[1236, "visualize.vtk.write_vtk_skeleton_file"]]}, "docurls": ["autoapi/Interface/_is_running_on_dask_worker.html", "autoapi/Interface/get_client.html", "autoapi/Interface/index.html", "autoapi/Interface/print_module_versions.html", "autoapi/biophysics_fitting/L5tt_parameter_setup/check_unset_range_mechanisms.html", "autoapi/biophysics_fitting/L5tt_parameter_setup/get_L5tt_template.html", "autoapi/biophysics_fitting/L5tt_parameter_setup/get_L5tt_template_v2.html", "autoapi/biophysics_fitting/L5tt_parameter_setup/hay_param_to_scp_neuron_param.html", "autoapi/biophysics_fitting/L5tt_parameter_setup/hay_params_to_scp_neuron_params.html", "autoapi/biophysics_fitting/L5tt_parameter_setup/index.html", "autoapi/biophysics_fitting/L5tt_parameter_setup/set_ephys.html", "autoapi/biophysics_fitting/L5tt_parameter_setup/set_hot_zone.html", "autoapi/biophysics_fitting/L5tt_parameter_setup/set_many_param.html", "autoapi/biophysics_fitting/L5tt_parameter_setup/set_morphology.html", "autoapi/biophysics_fitting/L5tt_parameter_setup/set_param.html", "autoapi/biophysics_fitting/combiner/Combiner.html", "autoapi/biophysics_fitting/combiner/Combiner.combine.html", "autoapi/biophysics_fitting/combiner/Combiner_Setup.html", "autoapi/biophysics_fitting/combiner/Combiner_Setup.append.html", "autoapi/biophysics_fitting/combiner/index.html", "autoapi/biophysics_fitting/connected_to_dend_beyond.html", "autoapi/biophysics_fitting/ephys/AHP_depth_abs.html", "autoapi/biophysics_fitting/ephys/AHP_depth_abs_check_2AP.html", "autoapi/biophysics_fitting/ephys/AP_height.html", "autoapi/biophysics_fitting/ephys/AP_height_check_1AP.html", "autoapi/biophysics_fitting/ephys/AP_width.html", "autoapi/biophysics_fitting/ephys/BAC_ISI.html", "autoapi/biophysics_fitting/ephys/BAC_ISI_check_2_or_3_APs.html", "autoapi/biophysics_fitting/ephys/BAC_ISI_check_repolarization.html", "autoapi/biophysics_fitting/ephys/BAC_caSpike_height.html", "autoapi/biophysics_fitting/ephys/BAC_caSpike_height_check_1_Ca_AP.html", "autoapi/biophysics_fitting/ephys/BAC_caSpike_height_check_Ca_spikes_after_Na_spike.html", "autoapi/biophysics_fitting/ephys/BAC_caSpike_height_check_gt2_Na_spikes.html", "autoapi/biophysics_fitting/ephys/BAC_caSpike_width.html", "autoapi/biophysics_fitting/ephys/BPAPatt.html", "autoapi/biophysics_fitting/ephys/BPAPatt_check_1_AP.html", "autoapi/biophysics_fitting/ephys/BPAPatt_check_relative_height.html", "autoapi/biophysics_fitting/ephys/STEP_adaptation_index.html", "autoapi/biophysics_fitting/ephys/STEP_check_2_ISIs.html", "autoapi/biophysics_fitting/ephys/STEP_coef_var.html", "autoapi/biophysics_fitting/ephys/STEP_fast_ahp_depth.html", "autoapi/biophysics_fitting/ephys/STEP_initial_ISI.html", "autoapi/biophysics_fitting/ephys/STEP_mean_frequency.html", "autoapi/biophysics_fitting/ephys/STEP_slow_ahp_depth.html", "autoapi/biophysics_fitting/ephys/STEP_slow_ahp_time.html", "autoapi/biophysics_fitting/ephys/STEP_time_to_first_spike.html", "autoapi/biophysics_fitting/ephys/find_crossing.html", "autoapi/biophysics_fitting/ephys/find_crossing_old.html", "autoapi/biophysics_fitting/ephys/index.html", "autoapi/biophysics_fitting/ephys/spike_count.html", "autoapi/biophysics_fitting/ephys/trace_check.html", "autoapi/biophysics_fitting/ephys/trace_check_err.html", "autoapi/biophysics_fitting/ephys/trace_check_max_prestim_dendrite_depo.html", "autoapi/biophysics_fitting/ephys/voltage_base.html", "autoapi/biophysics_fitting/ephys/voltage_base2.html", "autoapi/biophysics_fitting/evaluator/Evaluator.html", "autoapi/biophysics_fitting/evaluator/Evaluator.evaluate.html", "autoapi/biophysics_fitting/evaluator/Evaluator_Setup.html", "autoapi/biophysics_fitting/evaluator/index.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW/RW.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW/RW._clean_the_pickles.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW/RW._concatenate_and_clean.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW/RW._load_pickle_or_parquet.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW/RW._normalize_aim_params.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW/RW._normalize_params.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW/RW._unnormalize_params.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW/RW.assess_aim_params_reached.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW/RW.run_RW.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW/index.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW_analysis/Load.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW_analysis/Load.get_df.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW_analysis/Load.get_futures.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW_analysis/augment_ddf_with_PCA_space.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW_analysis/get_depolarization_index.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW_analysis/get_hyperpolarization_index.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW_analysis/get_index.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW_analysis/get_inside_fraction.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW_analysis/get_param_range_evolution_from_ddf.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW_analysis/index.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW_analysis/normalize.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW_analysis/pandas_binby.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW_analysis/read_all.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW_analysis/read_parameters.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW_analysis/read_pickle.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/RW_analysis/robust_read_pickle.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/evaluation_function_incremental_helper.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/index.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/utils/convert_all_check_columns_bool_to_float.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/utils/evaluation_function_incremental_helper.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/utils/get_vector_norm.html", "autoapi/biophysics_fitting/exploration_from_seedpoint/utils/index.html", "autoapi/biophysics_fitting/get_branching_depth.html", "autoapi/biophysics_fitting/get_branching_depth_series.html", "autoapi/biophysics_fitting/get_first_order_bifurcation_sections.html", "autoapi/biophysics_fitting/get_inner_sec_dist_list.html", "autoapi/biophysics_fitting/get_main_bifurcation_section.html", "autoapi/biophysics_fitting/hay/default_setup/get_Combiner.html", "autoapi/biophysics_fitting/hay/default_setup/get_Evaluator.html", "autoapi/biophysics_fitting/hay/default_setup/get_Simulator.html", "autoapi/biophysics_fitting/hay/default_setup/get_fixed_params_example.html", "autoapi/biophysics_fitting/hay/default_setup/index.html", "autoapi/biophysics_fitting/hay/default_setup/interpolate_vt.html", "autoapi/biophysics_fitting/hay/default_setup/map_truefalse_to_str.html", "autoapi/biophysics_fitting/hay/default_setup/record_BAC.html", "autoapi/biophysics_fitting/hay/default_setup/record_Step.html", "autoapi/biophysics_fitting/hay/default_setup/record_bAP.html", "autoapi/biophysics_fitting/hay/evaluation/BAC.html", "autoapi/biophysics_fitting/hay/evaluation/BAC.BAC_APheight.html", "autoapi/biophysics_fitting/hay/evaluation/BAC.BAC_ISI.html", "autoapi/biophysics_fitting/hay/evaluation/BAC.BAC_ahpdepth.html", "autoapi/biophysics_fitting/hay/evaluation/BAC.BAC_caSpike_height.html", "autoapi/biophysics_fitting/hay/evaluation/BAC.BAC_caSpike_width.html", "autoapi/biophysics_fitting/hay/evaluation/BAC.BAC_spikecount.html", "autoapi/biophysics_fitting/hay/evaluation/BAC.check.html", "autoapi/biophysics_fitting/hay/evaluation/BAC.get.html", "autoapi/biophysics_fitting/hay/evaluation/StepOne.html", "autoapi/biophysics_fitting/hay/evaluation/StepThree.html", "autoapi/biophysics_fitting/hay/evaluation/StepTwo.html", "autoapi/biophysics_fitting/hay/evaluation/_Step.html", "autoapi/biophysics_fitting/hay/evaluation/_Step.AHP_depth_abs.html", "autoapi/biophysics_fitting/hay/evaluation/_Step.AI.html", "autoapi/biophysics_fitting/hay/evaluation/_Step.APh.html", "autoapi/biophysics_fitting/hay/evaluation/_Step.APw.html", "autoapi/biophysics_fitting/hay/evaluation/_Step.DI.html", "autoapi/biophysics_fitting/hay/evaluation/_Step.ISIcv.html", "autoapi/biophysics_fitting/hay/evaluation/_Step.TTFS.html", "autoapi/biophysics_fitting/hay/evaluation/_Step.check.html", "autoapi/biophysics_fitting/hay/evaluation/_Step.fAHPd.html", "autoapi/biophysics_fitting/hay/evaluation/_Step.get.html", "autoapi/biophysics_fitting/hay/evaluation/_Step.mf.html", "autoapi/biophysics_fitting/hay/evaluation/_Step.sAHPd.html", "autoapi/biophysics_fitting/hay/evaluation/_Step.sAHPt.html", "autoapi/biophysics_fitting/hay/evaluation/bAP.html", "autoapi/biophysics_fitting/hay/evaluation/bAP._bAP_att.html", "autoapi/biophysics_fitting/hay/evaluation/bAP.bAP_APheight.html", "autoapi/biophysics_fitting/hay/evaluation/bAP.bAP_APwidth.html", "autoapi/biophysics_fitting/hay/evaluation/bAP.bAP_att2.html", "autoapi/biophysics_fitting/hay/evaluation/bAP.bAP_att3.html", "autoapi/biophysics_fitting/hay/evaluation/bAP.bAP_spikecount.html", "autoapi/biophysics_fitting/hay/evaluation/bAP.check.html", "autoapi/biophysics_fitting/hay/evaluation/bAP.get.html", "autoapi/biophysics_fitting/hay/evaluation/get_evaluate_BAC.html", "autoapi/biophysics_fitting/hay/evaluation/get_evaluate_StepOne.html", "autoapi/biophysics_fitting/hay/evaluation/get_evaluate_StepThree.html", "autoapi/biophysics_fitting/hay/evaluation/get_evaluate_StepTwo.html", "autoapi/biophysics_fitting/hay/evaluation/get_evaluate_bAP.html", "autoapi/biophysics_fitting/hay/evaluation/hay_evaluate_BAC.html", "autoapi/biophysics_fitting/hay/evaluation/hay_evaluate_StepOne.html", "autoapi/biophysics_fitting/hay/evaluation/hay_evaluate_StepThree.html", "autoapi/biophysics_fitting/hay/evaluation/hay_evaluate_StepTwo.html", "autoapi/biophysics_fitting/hay/evaluation/hay_evaluate_bAP.html", "autoapi/biophysics_fitting/hay/evaluation/index.html", "autoapi/biophysics_fitting/hay/evaluation/nan_if_error.html", "autoapi/biophysics_fitting/hay/evaluation/normalize.html", "autoapi/biophysics_fitting/hay/index.html", "autoapi/biophysics_fitting/hay/specification/get_feasible_model_objectives.html", "autoapi/biophysics_fitting/hay/specification/get_feasible_model_params.html", "autoapi/biophysics_fitting/hay/specification/get_hay_objective_names.html", "autoapi/biophysics_fitting/hay/specification/get_hay_param_names.html", "autoapi/biophysics_fitting/hay/specification/get_hay_params_pdf.html", "autoapi/biophysics_fitting/hay/specification/get_hay_problem_description.html", "autoapi/biophysics_fitting/hay/specification/index.html", "autoapi/biophysics_fitting/index.html", "autoapi/biophysics_fitting/model_selection/get_model_pdf_from_db.html", "autoapi/biophysics_fitting/model_selection/get_pdf_selected.html", "autoapi/biophysics_fitting/model_selection/index.html", "autoapi/biophysics_fitting/optimizer/_evaluate_invalid_fitness.html", "autoapi/biophysics_fitting/optimizer/_get_offspring.html", "autoapi/biophysics_fitting/optimizer/_record_stats.html", "autoapi/biophysics_fitting/optimizer/_update_history_and_hof.html", "autoapi/biophysics_fitting/optimizer/eaAlphaMuPlusLambdaCheckpoint.html", "autoapi/biophysics_fitting/optimizer/get_max_generation.html", "autoapi/biophysics_fitting/optimizer/get_mymap.html", "autoapi/biophysics_fitting/optimizer/get_objective_function.html", "autoapi/biophysics_fitting/optimizer/get_population_with_different_n_objectives.html", "autoapi/biophysics_fitting/optimizer/index.html", "autoapi/biophysics_fitting/optimizer/robust_int.html", "autoapi/biophysics_fitting/optimizer/run.html", "autoapi/biophysics_fitting/optimizer/save_result.html", "autoapi/biophysics_fitting/optimizer/setup_db_run.html", "autoapi/biophysics_fitting/optimizer/start_run.html", "autoapi/biophysics_fitting/parameters/index.html", "autoapi/biophysics_fitting/parameters/param_selector.html", "autoapi/biophysics_fitting/parameters/param_to_kwargs.html", "autoapi/biophysics_fitting/parameters/set_fixed_params.html", "autoapi/biophysics_fitting/setup_stim/_append.html", "autoapi/biophysics_fitting/setup_stim/index.html", "autoapi/biophysics_fitting/setup_stim/setup_BAC.html", "autoapi/biophysics_fitting/setup_stim/setup_StepOne.html", "autoapi/biophysics_fitting/setup_stim/setup_StepThree.html", "autoapi/biophysics_fitting/setup_stim/setup_StepTwo.html", "autoapi/biophysics_fitting/setup_stim/setup_apical_epsp_injection.html", "autoapi/biophysics_fitting/setup_stim/setup_bAP.html", "autoapi/biophysics_fitting/setup_stim/setup_soma_step.html", "autoapi/biophysics_fitting/simulator/Simulator.html", "autoapi/biophysics_fitting/simulator/Simulator.get_simulated_cell.html", "autoapi/biophysics_fitting/simulator/Simulator.run.html", "autoapi/biophysics_fitting/simulator/Simulator_Setup.html", "autoapi/biophysics_fitting/simulator/Simulator_Setup._check_first_element_of_name_is_the_same.html", "autoapi/biophysics_fitting/simulator/Simulator_Setup._check_not_none.html", "autoapi/biophysics_fitting/simulator/Simulator_Setup.check.html", "autoapi/biophysics_fitting/simulator/Simulator_Setup.get.html", "autoapi/biophysics_fitting/simulator/Simulator_Setup.get_cell_params.html", "autoapi/biophysics_fitting/simulator/Simulator_Setup.get_cell_params_with_default_sim_prams.html", "autoapi/biophysics_fitting/simulator/Simulator_Setup.get_params.html", "autoapi/biophysics_fitting/simulator/Simulator_Setup.get_stim_response_measure_fun.html", "autoapi/biophysics_fitting/simulator/Simulator_Setup.get_stim_run_fun_by_stim.html", "autoapi/biophysics_fitting/simulator/Simulator_Setup.get_stim_setup_fun_by_stim.html", "autoapi/biophysics_fitting/simulator/Simulator_Setup.get_stims.html", "autoapi/biophysics_fitting/simulator/index.html", "autoapi/biophysics_fitting/simulator/run_fun.html", "autoapi/biophysics_fitting/utils/Undemonize.html", "autoapi/biophysics_fitting/utils/VariableThatDoesNotGetPickled.html", "autoapi/biophysics_fitting/utils/_get_apical_sec_and_i_at_distance.html", "autoapi/biophysics_fitting/utils/augment_cell_with_detailed_labels.html", "autoapi/biophysics_fitting/utils/connected_to_structure_beyond.html", "autoapi/biophysics_fitting/utils/execute_in_child_process.html", "autoapi/biophysics_fitting/utils/execute_in_child_process_kept_alive.html", "autoapi/biophysics_fitting/utils/get_inner_sec_dist_dict.html", "autoapi/biophysics_fitting/utils/get_inner_section_at_distance.html", "autoapi/biophysics_fitting/utils/get_main_bifurcation_section.html", "autoapi/biophysics_fitting/utils/index.html", "autoapi/biophysics_fitting/utils/pool_helper.html", "autoapi/biophysics_fitting/utils/run_cloudpickled_remotely.html", "autoapi/biophysics_fitting/utils/tVec.html", "autoapi/biophysics_fitting/utils/vmApical.html", "autoapi/biophysics_fitting/utils/vmApical_position.html", "autoapi/biophysics_fitting/utils/vmMax.html", "autoapi/biophysics_fitting/utils/vmSoma.html", "autoapi/data_base/IO/index.html", "autoapi/data_base/analyze/index.html", "autoapi/data_base/analyze/spatiotemporal_binning/index.html", "autoapi/data_base/analyze/spatiotemporal_binning/universal.html", "autoapi/data_base/analyze/spatiotemporal_binning/universal_pd.html", "autoapi/data_base/analyze/spike_detection/_helper.html", "autoapi/data_base/analyze/spike_detection/index.html", "autoapi/data_base/analyze/spike_detection/spike_detection.html", "autoapi/data_base/analyze/spike_detection/spike_in_interval.html", "autoapi/data_base/analyze/split_synapse_activation.html", "autoapi/data_base/analyze/temporal_binning/index.html", "autoapi/data_base/analyze/temporal_binning/temporal_binning_dask.html", "autoapi/data_base/analyze/temporal_binning/temporal_binning_pd.html", "autoapi/data_base/analyze/temporal_binning/universal.html", "autoapi/data_base/analyze/voltage_binning/calculate_vdensity_array.html", "autoapi/data_base/analyze/voltage_binning/calculate_vdensity_array_dask.html", "autoapi/data_base/analyze/voltage_binning/calculate_vdensity_array_pd.html", "autoapi/data_base/analyze/voltage_binning/calculate_vdensity_array_pixelObject.html", "autoapi/data_base/analyze/voltage_binning/get_bins.html", "autoapi/data_base/analyze/voltage_binning/index.html", "autoapi/data_base/data_base/DataBase.html", "autoapi/data_base/data_base/_is_legacy_model_data_base.html", "autoapi/data_base/data_base/_make_mdb_forwards_compatible.html", "autoapi/data_base/data_base/get_db_by_unique_id.html", "autoapi/data_base/data_base/index.html", "autoapi/data_base/data_base/is_data_base.html", "autoapi/data_base/data_base/is_isf_data_base.html", "autoapi/data_base/data_base/is_sub_data_base.html", "autoapi/data_base/data_base/is_sub_isf_data_base.html", "autoapi/data_base/data_base/is_sub_model_data_base.html", "autoapi/data_base/data_base_register/DataBaseRegister.html", "autoapi/data_base/data_base_register/DataBaseRegister.add_db.html", "autoapi/data_base/data_base_register/DataBaseRegister.keys.html", "autoapi/data_base/data_base_register/DataBaseRegister.search_dbs.html", "autoapi/data_base/data_base_register/_get_db_register.html", "autoapi/data_base/data_base_register/assimilate_remote_register.html", "autoapi/data_base/data_base_register/deregister_db.html", "autoapi/data_base/data_base_register/index.html", "autoapi/data_base/data_base_register/register_db.html", "autoapi/data_base/db_initializers/index.html", "autoapi/data_base/db_initializers/load_simrun_general/add_dendritic_spike_times.html", "autoapi/data_base/db_initializers/load_simrun_general/add_dendritic_voltage_traces.html", "autoapi/data_base/db_initializers/load_simrun_general/builders/_build_core.html", "autoapi/data_base/db_initializers/load_simrun_general/builders/_build_dendritic_voltage_traces.html", "autoapi/data_base/db_initializers/load_simrun_general/builders/_build_param_files.html", "autoapi/data_base/db_initializers/load_simrun_general/builders/_build_synapse_activation.html", "autoapi/data_base/db_initializers/load_simrun_general/builders/_get_rec_site_managers.html", "autoapi/data_base/db_initializers/load_simrun_general/builders/index.html", "autoapi/data_base/db_initializers/load_simrun_general/data_parsing/index.html", "autoapi/data_base/db_initializers/load_simrun_general/data_parsing/load_dendritic_voltage_traces.html", "autoapi/data_base/db_initializers/load_simrun_general/data_parsing/load_dendritic_voltage_traces_helper.html", "autoapi/data_base/db_initializers/load_simrun_general/data_parsing/read_voltage_traces_by_filenames.html", "autoapi/data_base/db_initializers/load_simrun_general/data_parsing/read_voltage_traces_from_csv.html", "autoapi/data_base/db_initializers/load_simrun_general/data_parsing/read_voltage_traces_from_file.html", "autoapi/data_base/db_initializers/load_simrun_general/data_parsing/read_voltage_traces_from_files_pandas.html", "autoapi/data_base/db_initializers/load_simrun_general/data_parsing/read_voltage_traces_from_npz.html", "autoapi/data_base/db_initializers/load_simrun_general/file_handling/get_file.html", "autoapi/data_base/db_initializers/load_simrun_general/file_handling/get_max_commas.html", "autoapi/data_base/db_initializers/load_simrun_general/file_handling/index.html", "autoapi/data_base/db_initializers/load_simrun_general/file_handling/make_filelist.html", "autoapi/data_base/db_initializers/load_simrun_general/filepath_resolution/_convert_con_fns_to_reldb.html", "autoapi/data_base/db_initializers/load_simrun_general/filepath_resolution/_convert_netp_fns_to_reldb.html", "autoapi/data_base/db_initializers/load_simrun_general/filepath_resolution/_convert_neup_fns_to_reldb.html", "autoapi/data_base/db_initializers/load_simrun_general/filepath_resolution/_convert_syn_fns_to_reldb.html", "autoapi/data_base/db_initializers/load_simrun_general/filepath_resolution/index.html", "autoapi/data_base/db_initializers/load_simrun_general/index.html", "autoapi/data_base/db_initializers/load_simrun_general/init.html", "autoapi/data_base/db_initializers/load_simrun_general/load_initialized_cell_and_evokedNW_from_db.html", "autoapi/data_base/db_initializers/load_simrun_general/metadata_utils/create_metadata.html", "autoapi/data_base/db_initializers/load_simrun_general/metadata_utils/create_metadata_parallelization_helper.html", "autoapi/data_base/db_initializers/load_simrun_general/metadata_utils/get_voltage_traces_divisions_by_metadata.html", "autoapi/data_base/db_initializers/load_simrun_general/metadata_utils/index.html", "autoapi/data_base/db_initializers/load_simrun_general/optimize.html", "autoapi/data_base/db_initializers/load_simrun_general/param_file_parser/_copy_and_transform_con.html", "autoapi/data_base/db_initializers/load_simrun_general/param_file_parser/_copy_and_transform_network_param.html", "autoapi/data_base/db_initializers/load_simrun_general/param_file_parser/_copy_and_transform_neuron_param.html", "autoapi/data_base/db_initializers/load_simrun_general/param_file_parser/_copy_and_transform_syn.html", "autoapi/data_base/db_initializers/load_simrun_general/param_file_parser/_delayed_copy_transform_paramfiles_to_db.html", "autoapi/data_base/db_initializers/load_simrun_general/param_file_parser/_generate_target_filenames.html", "autoapi/data_base/db_initializers/load_simrun_general/param_file_parser/_get_unique_hoc_fns_from_neups.html", "autoapi/data_base/db_initializers/load_simrun_general/param_file_parser/_get_unique_landmark_fns_from_neups.html", "autoapi/data_base/db_initializers/load_simrun_general/param_file_parser/_get_unique_syncons_from_netps.html", "autoapi/data_base/db_initializers/load_simrun_general/param_file_parser/construct_param_filename_hashmap_df.html", "autoapi/data_base/db_initializers/load_simrun_general/param_file_parser/index.html", "autoapi/data_base/db_initializers/load_simrun_general/param_file_parser/load_param_files_from_db.html", "autoapi/data_base/db_initializers/load_simrun_general/reoptimize/_check_needs_reoptimization.html", "autoapi/data_base/db_initializers/load_simrun_general/reoptimize/_reoptimize_key.html", "autoapi/data_base/db_initializers/load_simrun_general/reoptimize/index.html", "autoapi/data_base/db_initializers/load_simrun_general/reoptimize/reoptimize_db.html", "autoapi/data_base/db_initializers/load_simrun_general/utils/_get_dumper.html", "autoapi/data_base/db_initializers/load_simrun_general/utils/_hash_file_content.html", "autoapi/data_base/db_initializers/load_simrun_general/utils/index.html", "autoapi/data_base/db_initializers/prepare_ANN_batches/augment_synapse_activation_df_with_branch_bin.html", "autoapi/data_base/db_initializers/prepare_ANN_batches/compute_AP_array.html", "autoapi/data_base/db_initializers/prepare_ANN_batches/compute_ISI_array.html", "autoapi/data_base/db_initializers/prepare_ANN_batches/compute_ISI_from_st.html", "autoapi/data_base/db_initializers/prepare_ANN_batches/compute_ISI_from_st_list.html", "autoapi/data_base/db_initializers/prepare_ANN_batches/get_bin.html", "autoapi/data_base/db_initializers/prepare_ANN_batches/get_bin_adjacency_map_in_section.html", "autoapi/data_base/db_initializers/prepare_ANN_batches/get_bin_soma_distances_in_section.html", "autoapi/data_base/db_initializers/prepare_ANN_batches/get_binsize.html", "autoapi/data_base/db_initializers/prepare_ANN_batches/get_max_depolarization_per_ms.html", "autoapi/data_base/db_initializers/prepare_ANN_batches/get_max_per_ms_on_pandas_dataframe.html", "autoapi/data_base/db_initializers/prepare_ANN_batches/get_neighboring_spatial_bins.html", "autoapi/data_base/db_initializers/prepare_ANN_batches/get_neuron_param_file.html", "autoapi/data_base/db_initializers/prepare_ANN_batches/get_section_distances_df.html", "autoapi/data_base/db_initializers/prepare_ANN_batches/get_spatial_bin_names.html", "autoapi/data_base/db_initializers/prepare_ANN_batches/get_synapse_activation_array_weighted.html", "autoapi/data_base/db_initializers/prepare_ANN_batches/get_time_groups.html", "autoapi/data_base/db_initializers/prepare_ANN_batches/index.html", "autoapi/data_base/db_initializers/prepare_ANN_batches/load_syn_weights.html", "autoapi/data_base/db_initializers/prepare_ANN_batches/run_delayeds_incrementally.html", "autoapi/data_base/db_initializers/prepare_ANN_batches/save_SA_batch.html", "autoapi/data_base/db_initializers/prepare_ANN_batches/spike_times_to_onehot.html", "autoapi/data_base/db_initializers/prepare_ANN_batches/temporal_binning_augmented_sa.html", "autoapi/data_base/db_initializers/synapse_activation_binning/applyfun.html", "autoapi/data_base/db_initializers/synapse_activation_binning/index.html", "autoapi/data_base/db_initializers/synapse_activation_binning/init.html", "autoapi/data_base/db_initializers/synapse_activation_binning/merge_results_together.html", "autoapi/data_base/db_initializers/synapse_activation_binning/postfun.html", "autoapi/data_base/db_initializers/synapse_activation_binning/prefun.html", "autoapi/data_base/db_initializers/synapse_activation_binning/save_groupby.html", "autoapi/data_base/db_initializers/synapse_activation_binning/synapse_activation_postprocess_dask.html", "autoapi/data_base/db_initializers/synapse_activation_binning/synapse_activation_postprocess_pandas.html", "autoapi/data_base/db_initializers/synapse_activation_binning/tree_reduction.html", "autoapi/data_base/dbopen/cache.html", "autoapi/data_base/dbopen/create_modular_db_path.html", "autoapi/data_base/dbopen/create_reldb_path.html", "autoapi/data_base/dbopen/dbopen.html", "autoapi/data_base/dbopen/index.html", "autoapi/data_base/dbopen/resolve_db_path.html", "autoapi/data_base/dbopen/resolve_modular_db_path.html", "autoapi/data_base/dbopen/resolve_netp_reldb_paths.html", "autoapi/data_base/dbopen/resolve_neup_reldb_paths.html", "autoapi/data_base/dbopen/resolve_reldb_path.html", "autoapi/data_base/distributed_lock/InterProcessLockNoWritePermission.html", "autoapi/data_base/distributed_lock/InterProcessLockNoWritePermission.acquire.html", "autoapi/data_base/distributed_lock/InterProcessLockNoWritePermission.release.html", "autoapi/data_base/distributed_lock/_get_locking_config.html", "autoapi/data_base/distributed_lock/_get_locking_server_client_from_config.html", "autoapi/data_base/distributed_lock/get_lock.html", "autoapi/data_base/distributed_lock/get_locking_client.html", "autoapi/data_base/distributed_lock/get_locking_server.html", "autoapi/data_base/distributed_lock/get_locking_server_client.html", "autoapi/data_base/distributed_lock/get_read_lock.html", "autoapi/data_base/distributed_lock/get_write_lock.html", "autoapi/data_base/distributed_lock/index.html", "autoapi/data_base/distributed_lock/update_config.html", "autoapi/data_base/exceptions/DataBaseException.html", "autoapi/data_base/exceptions/ISFDataBaseException.html", "autoapi/data_base/exceptions/index.html", "autoapi/data_base/index.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/cell/Loader.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/cell/Loader.get.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/cell/check.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/cell/dump.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/cell/index.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_categorized_msgpack/Loader.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_categorized_msgpack/Loader.get.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_categorized_msgpack/bundle_delayeds.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_categorized_msgpack/category_to_str.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_categorized_msgpack/check.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_categorized_msgpack/dump.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_categorized_msgpack/get_numpy_dtype_as_str.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_categorized_msgpack/get_writer_function.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_categorized_msgpack/index.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_categorized_msgpack/my_dask_writer.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_categorized_msgpack/read_object_meta.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_categorized_msgpack/str_to_category.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_msgpack/dump.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_msgpack/index.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_parquet/Loader.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_parquet/Loader.get.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_parquet/check.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_parquet/check_df_suitable_for_pq.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_parquet/dump.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_parquet/index.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_parquet/load_helper.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/dask_to_parquet/save_helper.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/generic_to_specific_databases_module_name.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/get_dumper_string_by_dumper_module.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/get_dumper_string_by_savedir.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/index.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/just_create_folder/Loader.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/just_create_folder/Loader.get.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/just_create_folder/ManagedFolder.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/just_create_folder/ManagedFolder.get_file.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/just_create_folder/ManagedFolder.join.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/just_create_folder/ManagedFolder.listdir.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/just_create_folder/check.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/just_create_folder/dump.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/just_create_folder/index.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/just_create_isf_db/Loader.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/just_create_isf_db/Loader.get.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/just_create_isf_db/check.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/just_create_isf_db/dump.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/just_create_isf_db/index.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/load.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/numpy_to_msgpack/Loader.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/numpy_to_msgpack/Loader.get.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/numpy_to_msgpack/check.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/numpy_to_msgpack/dump.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/numpy_to_msgpack/index.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/numpy_to_npy/Loader.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/numpy_to_npy/Loader.get.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/numpy_to_npy/check.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/numpy_to_npy/dump.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/numpy_to_npy/index.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/numpy_to_npz/Loader.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/numpy_to_npz/Loader.get.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/numpy_to_npz/check.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/numpy_to_npz/dump.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/numpy_to_npz/index.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/numpy_to_zarr/Loader.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/numpy_to_zarr/Loader.get.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/numpy_to_zarr/check.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/numpy_to_zarr/dump.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/numpy_to_zarr/index.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/pandas_to_msgpack/Loader.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/pandas_to_msgpack/Loader.get.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/pandas_to_msgpack/check.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/pandas_to_msgpack/dump.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/pandas_to_msgpack/index.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/pandas_to_parquet/Loader.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/pandas_to_parquet/Loader.get.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/pandas_to_parquet/check.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/pandas_to_parquet/dump.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/pandas_to_parquet/index.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/pandas_to_pickle/Loader.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/pandas_to_pickle/Loader.get.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/pandas_to_pickle/check.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/pandas_to_pickle/dump.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/pandas_to_pickle/index.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/parent_classes/Loader.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/parent_classes/index.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/reduced_lda_model/Loader.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/reduced_lda_model/Loader.get.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/reduced_lda_model/check.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/reduced_lda_model/dump.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/reduced_lda_model/index.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/Loader.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/Loader.get.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/SharedNumpyStore.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/SharedNumpyStore._get_fname.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/SharedNumpyStore._get_fname_from_metadata.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/SharedNumpyStore._get_metadata_from_fname.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/SharedNumpyStore._get_metadata_from_name.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/SharedNumpyStore.append_save.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/SharedNumpyStore.close.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/SharedNumpyStore.flush.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/SharedNumpyStore.get_expected_file_length.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/SharedNumpyStore.load.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/SharedNumpyStore.save.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/SharedNumpyStore.update.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/Uninterruptible.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/_check_filesize_matches_shape.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/_get_offset_and_size_in_bytes.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/check.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/dump.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/index.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/memmap_from_disk.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/shared_array_from_disk.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/shared_array_from_numpy.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/shared_numpy_store/shared_array_from_shared_mem_name.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/to_cloudpickle/Loader.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/to_cloudpickle/Loader.get.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/to_cloudpickle/check.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/to_cloudpickle/dump.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/to_cloudpickle/index.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/to_msgpack/Loader.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/to_msgpack/Loader.get.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/to_msgpack/check.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/to_msgpack/dump.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/to_msgpack/index.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/to_pickle/Loader.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/to_pickle/Loader.get.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/to_pickle/check.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/to_pickle/dump.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/to_pickle/index.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/utils/get_meta_filename.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/utils/get_numpy_dtype_as_str.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/utils/index.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/utils/read_object_meta.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/utils/save_object_meta.html", "autoapi/data_base/isf_data_base/IO/LoaderDumper/utils/set_object_meta.html", "autoapi/data_base/isf_data_base/IO/dask_wrappers/index.html", "autoapi/data_base/isf_data_base/IO/dask_wrappers/read_csvs.html", "autoapi/data_base/isf_data_base/IO/index.html", "autoapi/data_base/isf_data_base/index.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase._check_key_format.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase._check_writing_privilege.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase._convert_key_to_path.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase._detect_dumper_string_of_existing_key.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase._find_dumper.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase._get_str.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase._infer_missing_metadata.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase._initialize.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase._is_initialized.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase._register_this_database.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase._set_unique_id.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase._subkeys.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase._write_metadata.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase.check_if_key_exists.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase.create_managed_folder.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase.create_shared_numpy_store.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase.create_sub_db.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase.get.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase.get_id.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase.get_mkdtemp.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase.keys.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase.ls.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase.maybe_calculate.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase.read_db_state.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase.register_dumper.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase.remove.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase.rename.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase.save_db_state.html", "autoapi/data_base/isf_data_base/isf_data_base/ISFDataBase.set.html", "autoapi/data_base/isf_data_base/isf_data_base/LoaderWrapper.html", "autoapi/data_base/isf_data_base/isf_data_base/MetadataAccessor.html", "autoapi/data_base/isf_data_base/isf_data_base/MetadataAccessor.keys.html", "autoapi/data_base/isf_data_base/isf_data_base/_check_working_dir_clean_for_build.html", "autoapi/data_base/isf_data_base/isf_data_base/get_dumper_from_folder.html", "autoapi/data_base/isf_data_base/isf_data_base/get_isfdb_by_unique_id.html", "autoapi/data_base/isf_data_base/isf_data_base/index.html", "autoapi/data_base/isf_data_base/isf_data_base/make_all_str.html", "autoapi/data_base/settings/index.html", "autoapi/data_base/utils/DelayedKeyboardInterrupt.html", "autoapi/data_base/utils/DelayedKeyboardInterrupt.handler.html", "autoapi/data_base/utils/bcolors.html", "autoapi/data_base/utils/cache.html", "autoapi/data_base/utils/calc_recursive_filetree.html", "autoapi/data_base/utils/chunkIt.html", "autoapi/data_base/utils/colorize_key.html", "autoapi/data_base/utils/colorize_str.html", "autoapi/data_base/utils/convertible_to_int.html", "autoapi/data_base/utils/delete_in_background.html", "autoapi/data_base/utils/df_colnames_to_str.html", "autoapi/data_base/utils/fancy_dict_compare.html", "autoapi/data_base/utils/first_line_to_key.html", "autoapi/data_base/utils/flatten.html", "autoapi/data_base/utils/get_file_or_folder_that_endswith.html", "autoapi/data_base/utils/get_file_or_folder_that_startswith.html", "autoapi/data_base/utils/index.html", "autoapi/data_base/utils/is_db.html", "autoapi/data_base/utils/mkdtemp.html", "autoapi/data_base/utils/myrepartition.html", "autoapi/data_base/utils/pandas_to_array.html", "autoapi/data_base/utils/pooled_std.html", "autoapi/data_base/utils/rename_for_deletion.html", "autoapi/data_base/utils/select.html", "autoapi/data_base/utils/silence_stdout.html", "autoapi/data_base/utils/skit.html", "autoapi/data_base/utils/split_file_to_buffers.html", "autoapi/data_base/utils/synchronous_ddf_concat.html", "autoapi/data_base/utils/unique.html", "autoapi/data_base/utils/wait_until_key_removed.html", "autoapi/simrun/PSP_with_cell_modification/PSP_with_current_injection.html", "autoapi/simrun/PSP_with_cell_modification/PSP_with_current_injection._get_current_dependent_vt.html", "autoapi/simrun/PSP_with_cell_modification/PSP_with_current_injection._objective_fun.html", "autoapi/simrun/PSP_with_cell_modification/PSP_with_current_injection.get.html", "autoapi/simrun/PSP_with_cell_modification/PSP_with_current_injection.get_neuron_param_with_current_injection.html", "autoapi/simrun/PSP_with_cell_modification/PSP_with_current_injection.get_psp_simulator.html", "autoapi/simrun/PSP_with_cell_modification/PSP_with_current_injection.get_psp_simulator_exc_and_inh_combined.html", "autoapi/simrun/PSP_with_cell_modification/PSP_with_current_injection.optimize_holding_current.html", "autoapi/simrun/PSP_with_cell_modification/PSP_with_current_injection.plot_current_injection_voltage_trace.html", "autoapi/simrun/PSP_with_cell_modification/combine_PSP_objects.html", "autoapi/simrun/PSP_with_cell_modification/index.html", "autoapi/simrun/generate_synapse_activations/_evoked_activity.html", "autoapi/simrun/generate_synapse_activations/generate_synapse_activations.html", "autoapi/simrun/generate_synapse_activations/index.html", "autoapi/simrun/get_cell_with_network/get_cell_with_network.html", "autoapi/simrun/get_cell_with_network/index.html", "autoapi/simrun/index.html", "autoapi/simrun/modular_reduced_model_inference/data_extractor/DataExtractor_spatiotemporalSynapseActivation.html", "autoapi/simrun/modular_reduced_model_inference/data_extractor/DataExtractor_spatiotemporalSynapseActivation._get_spatial_bin_level.html", "autoapi/simrun/modular_reduced_model_inference/data_extractor/DataExtractor_spatiotemporalSynapseActivation._get_spatiotemporal_input.html", "autoapi/simrun/modular_reduced_model_inference/data_extractor/DataExtractor_spatiotemporalSynapseActivation.get.html", "autoapi/simrun/modular_reduced_model_inference/data_extractor/DataExtractor_spatiotemporalSynapseActivation.get_groups.html", "autoapi/simrun/modular_reduced_model_inference/data_extractor/DataExtractor_spatiotemporalSynapseActivation.get_sorted_keys_by_group.html", "autoapi/simrun/modular_reduced_model_inference/data_extractor/DataExtractor_spatiotemporalSynapseActivation.get_spatial_binsize.html", "autoapi/simrun/modular_reduced_model_inference/data_extractor/DataExtractor_spatiotemporalSynapseActivation.setup.html", "autoapi/simrun/modular_reduced_model_inference/data_extractor/_DataExtractor.html", "autoapi/simrun/modular_reduced_model_inference/data_extractor/_DataExtractor.setup.html", "autoapi/simrun/modular_reduced_model_inference/data_extractor/index.html", "autoapi/simrun/modular_reduced_model_inference/index.html", "autoapi/simrun/modular_reduced_model_inference/reduced_model/DataSplitEvaluation.html", "autoapi/simrun/modular_reduced_model_inference/reduced_model/DataSplitEvaluation.add_isi_dependent_random_split.html", "autoapi/simrun/modular_reduced_model_inference/reduced_model/DataSplitEvaluation.add_random_split.html", "autoapi/simrun/modular_reduced_model_inference/reduced_model/DataSplitEvaluation.add_result.html", "autoapi/simrun/modular_reduced_model_inference/reduced_model/DataSplitEvaluation.compute_scores.html", "autoapi/simrun/modular_reduced_model_inference/reduced_model/DataSplitEvaluation.get_splits.html", "autoapi/simrun/modular_reduced_model_inference/reduced_model/DataView.html", "autoapi/simrun/modular_reduced_model_inference/reduced_model/DataView.setup.html", "autoapi/simrun/modular_reduced_model_inference/reduced_model/Rm.html", "autoapi/simrun/modular_reduced_model_inference/reduced_model/Rm._gather_results.html", "autoapi/simrun/modular_reduced_model_inference/reduced_model/Rm.add_data_extractor.html", "autoapi/simrun/modular_reduced_model_inference/reduced_model/Rm.add_strategy.html", "autoapi/simrun/modular_reduced_model_inference/reduced_model/Rm.extract.html", "autoapi/simrun/modular_reduced_model_inference/reduced_model/Rm.get_n_trials.html", "autoapi/simrun/modular_reduced_model_inference/reduced_model/Rm.get_results.html", "autoapi/simrun/modular_reduced_model_inference/reduced_model/Rm.run.html", "autoapi/simrun/modular_reduced_model_inference/reduced_model/get_n_workers_per_ip.html", "autoapi/simrun/modular_reduced_model_inference/reduced_model/index.html", "autoapi/simrun/modular_reduced_model_inference/solver/Solver_COBYLA.html", "autoapi/simrun/modular_reduced_model_inference/solver/Solver_COBYLA._optimize.html", "autoapi/simrun/modular_reduced_model_inference/solver/Solver_COBYLA._setup_optimizer.html", "autoapi/simrun/modular_reduced_model_inference/solver/_Solver.html", "autoapi/simrun/modular_reduced_model_inference/solver/_Solver._setup_optimizer.html", "autoapi/simrun/modular_reduced_model_inference/solver/_Solver.optimize_all_splits.html", "autoapi/simrun/modular_reduced_model_inference/solver/_Solver.optimize_one_split.html", "autoapi/simrun/modular_reduced_model_inference/solver/_Solver.setup.html", "autoapi/simrun/modular_reduced_model_inference/solver/index.html", "autoapi/simrun/modular_reduced_model_inference/strategy/RaisedCosineBasis.html", "autoapi/simrun/modular_reduced_model_inference/strategy/RaisedCosineBasis.compute.html", "autoapi/simrun/modular_reduced_model_inference/strategy/RaisedCosineBasis.get.html", "autoapi/simrun/modular_reduced_model_inference/strategy/RaisedCosineBasis.get_raised_cosine.html", "autoapi/simrun/modular_reduced_model_inference/strategy/RaisedCosineBasis.get_superposition.html", "autoapi/simrun/modular_reduced_model_inference/strategy/RaisedCosineBasis.visualize.html", "autoapi/simrun/modular_reduced_model_inference/strategy/RaisedCosineBasis.visualize_w.html", "autoapi/simrun/modular_reduced_model_inference/strategy/Strategy_spatiotemporalRaisedCosine.html", "autoapi/simrun/modular_reduced_model_inference/strategy/Strategy_spatiotemporalRaisedCosine._convert_x_static.html", "autoapi/simrun/modular_reduced_model_inference/strategy/Strategy_spatiotemporalRaisedCosine._get_score_static.html", "autoapi/simrun/modular_reduced_model_inference/strategy/Strategy_spatiotemporalRaisedCosine._get_x0.html", "autoapi/simrun/modular_reduced_model_inference/strategy/Strategy_spatiotemporalRaisedCosine._setup.html", "autoapi/simrun/modular_reduced_model_inference/strategy/Strategy_spatiotemporalRaisedCosine.compute_basis.html", "autoapi/simrun/modular_reduced_model_inference/strategy/Strategy_spatiotemporalRaisedCosine.get_color_by_group.html", "autoapi/simrun/modular_reduced_model_inference/strategy/Strategy_spatiotemporalRaisedCosine.normalize.html", "autoapi/simrun/modular_reduced_model_inference/strategy/Strategy_spatiotemporalRaisedCosine.visualize.html", "autoapi/simrun/modular_reduced_model_inference/strategy/_Strategy.html", "autoapi/simrun/modular_reduced_model_inference/strategy/_Strategy._get_score.html", "autoapi/simrun/modular_reduced_model_inference/strategy/_Strategy._get_x0.html", "autoapi/simrun/modular_reduced_model_inference/strategy/_Strategy._objective_function_static.html", "autoapi/simrun/modular_reduced_model_inference/strategy/_Strategy._setup.html", "autoapi/simrun/modular_reduced_model_inference/strategy/_Strategy.add_solver.html", "autoapi/simrun/modular_reduced_model_inference/strategy/_Strategy.get_score_static.html", "autoapi/simrun/modular_reduced_model_inference/strategy/_Strategy.get_y_static.html", "autoapi/simrun/modular_reduced_model_inference/strategy/_Strategy.set_split.html", "autoapi/simrun/modular_reduced_model_inference/strategy/_Strategy.setup.html", "autoapi/simrun/modular_reduced_model_inference/strategy/clear_memory.html", "autoapi/simrun/modular_reduced_model_inference/strategy/convert_to_numpy.html", "autoapi/simrun/modular_reduced_model_inference/strategy/dereference.html", "autoapi/simrun/modular_reduced_model_inference/strategy/index.html", "autoapi/simrun/modular_reduced_model_inference/strategy/make_weakref.html", "autoapi/simrun/parameters_to_cell/index.html", "autoapi/simrun/parameters_to_cell/parameters_to_cell.html", "autoapi/simrun/rerun_db/Opaque.html", "autoapi/simrun/rerun_db/index.html", "autoapi/simrun/rerun_db/rerun_db.html", "autoapi/simrun/robust_dask_delayed_execution/RobustDaskDelayedExecution.html", "autoapi/simrun/robust_dask_delayed_execution/RobustDaskDelayedExecution.add_delayed_to_db.html", "autoapi/simrun/robust_dask_delayed_execution/RobustDaskDelayedExecution.get_status.html", "autoapi/simrun/robust_dask_delayed_execution/RobustDaskDelayedExecution.reset_status.html", "autoapi/simrun/robust_dask_delayed_execution/RobustDaskDelayedExecution.run_db.html", "autoapi/simrun/robust_dask_delayed_execution/_assert_value.html", "autoapi/simrun/robust_dask_delayed_execution/_wrapper.html", "autoapi/simrun/robust_dask_delayed_execution/index.html", "autoapi/simrun/run_existing_synapse_activations/index.html", "autoapi/simrun/run_existing_synapse_activations/run_existing_synapse_activations.html", "autoapi/simrun/run_new_simulations/index.html", "autoapi/simrun/run_new_simulations/run_new_simulations.html", "autoapi/simrun/seed_manager/get_seed.html", "autoapi/simrun/seed_manager/index.html", "autoapi/simrun/sim_trial_to_cell_object/index.html", "autoapi/simrun/sim_trial_to_cell_object/simtrial_to_cell_object.html", "autoapi/simrun/sim_trial_to_cell_object/trial_to_cell_object.html", "autoapi/simrun/synaptic_strength_fitting/PSPs.html", "autoapi/simrun/synaptic_strength_fitting/PSPs._get_cell_and_nw_map.html", "autoapi/simrun/synaptic_strength_fitting/PSPs._setup_computation.html", "autoapi/simrun/synaptic_strength_fitting/PSPs.get_merged_synapse_coordinates.html", "autoapi/simrun/synaptic_strength_fitting/PSPs.get_optimal_g.html", "autoapi/simrun/synaptic_strength_fitting/PSPs.get_summary_statistics.html", "autoapi/simrun/synaptic_strength_fitting/PSPs.get_synapse_coordinates.html", "autoapi/simrun/synaptic_strength_fitting/PSPs.get_synapse_coordinates_with_psp_amplitude.html", "autoapi/simrun/synaptic_strength_fitting/PSPs.get_voltage_and_timing.html", "autoapi/simrun/synaptic_strength_fitting/PSPs.get_voltage_traces.html", "autoapi/simrun/synaptic_strength_fitting/PSPs.plot_vt.html", "autoapi/simrun/synaptic_strength_fitting/PSPs.run.html", "autoapi/simrun/synaptic_strength_fitting/PSPs.visualize_psps.html", "autoapi/simrun/synaptic_strength_fitting/analyze_voltage_trace.html", "autoapi/simrun/synaptic_strength_fitting/calculate_optimal_g.html", "autoapi/simrun/synaptic_strength_fitting/ePSP_summary_statistics.html", "autoapi/simrun/synaptic_strength_fitting/generate_ex_network_param_from_network_embedding.html", "autoapi/simrun/synaptic_strength_fitting/generate_inh_network_param_from_network_embedding.html", "autoapi/simrun/synaptic_strength_fitting/get_optimal_g.html", "autoapi/simrun/synaptic_strength_fitting/get_summary_statistics.html", "autoapi/simrun/synaptic_strength_fitting/get_tMax_vMax.html", "autoapi/simrun/synaptic_strength_fitting/get_tMax_vMax_baseline.html", "autoapi/simrun/synaptic_strength_fitting/get_voltage_and_timing.html", "autoapi/simrun/synaptic_strength_fitting/index.html", "autoapi/simrun/synaptic_strength_fitting/linear_fit.html", "autoapi/simrun/synaptic_strength_fitting/linear_fit_pdf.html", "autoapi/simrun/synaptic_strength_fitting/merge_celltypes.html", "autoapi/simrun/synaptic_strength_fitting/run_ex_synapse.html", "autoapi/simrun/synaptic_strength_fitting/run_ex_synapses.html", "autoapi/simrun/synaptic_strength_fitting/set_ex_synapse_weight.html", "autoapi/simrun/synaptic_strength_fitting/set_inh_synapse_weight.html", "autoapi/simrun/utils/chunkIt.html", "autoapi/simrun/utils/get_cellnumbers_from_confile.html", "autoapi/simrun/utils/get_default_arguments.html", "autoapi/simrun/utils/get_fraction_of_landmarkAscii.html", "autoapi/simrun/utils/get_fraction_of_landmarkAscii_dir.html", "autoapi/simrun/utils/index.html", "autoapi/simrun/utils/load_param_file_if_path_is_provided.html", "autoapi/simrun/utils/select_cells_that_spike_in_interval.html", "autoapi/simrun/utils/set_default_arguments_if_not_set.html", "autoapi/simrun/utils/silence_stdout.html", "autoapi/simrun/utils/split_network_param_in_one_elem_dicts.html", "autoapi/simrun/utils/tar_folder.html", "autoapi/single_cell_parser/Event.html", "autoapi/single_cell_parser/analyze/index.html", "autoapi/single_cell_parser/analyze/membrane_potential_analysis/PSTH_from_spike_times.html", "autoapi/single_cell_parser/analyze/membrane_potential_analysis/RecordingSite.html", "autoapi/single_cell_parser/analyze/membrane_potential_analysis/RecordingSiteManager.html", "autoapi/single_cell_parser/analyze/membrane_potential_analysis/RecordingSiteManager._read_landmark_file.html", "autoapi/single_cell_parser/analyze/membrane_potential_analysis/RecordingSiteManager.set_up_recording_site.html", "autoapi/single_cell_parser/analyze/membrane_potential_analysis/RecordingSiteManager.update_recordings.html", "autoapi/single_cell_parser/analyze/membrane_potential_analysis/SpikeInit.html", "autoapi/single_cell_parser/analyze/membrane_potential_analysis/SpikeInit.analyze_single_spike.html", "autoapi/single_cell_parser/analyze/membrane_potential_analysis/SpikeInit.vm_steady_state.html", "autoapi/single_cell_parser/analyze/membrane_potential_analysis/compute_mean_psp_amplitude.html", "autoapi/single_cell_parser/analyze/membrane_potential_analysis/compute_uPSP_amplitude.html", "autoapi/single_cell_parser/analyze/membrane_potential_analysis/compute_vm_histogram.html", "autoapi/single_cell_parser/analyze/membrane_potential_analysis/compute_vm_std_windows.html", "autoapi/single_cell_parser/analyze/membrane_potential_analysis/index.html", "autoapi/single_cell_parser/analyze/membrane_potential_analysis/simple_spike_detection.html", "autoapi/single_cell_parser/analyze/membrane_potential_analysis/vm_mean.html", "autoapi/single_cell_parser/analyze/membrane_potential_analysis/vm_std.html", "autoapi/single_cell_parser/analyze/synanalysis/compute_distance_to_soma.html", "autoapi/single_cell_parser/analyze/synanalysis/compute_syn_distance.html", "autoapi/single_cell_parser/analyze/synanalysis/compute_syn_distances.html", "autoapi/single_cell_parser/analyze/synanalysis/compute_syn_distances_2Dprojected.html", "autoapi/single_cell_parser/analyze/synanalysis/compute_synapse_distances_times.html", "autoapi/single_cell_parser/analyze/synanalysis/get_dist.html", "autoapi/single_cell_parser/analyze/synanalysis/index.html", "autoapi/single_cell_parser/analyze/synanalysis/synapse_activation_times.html", "autoapi/single_cell_parser/cell/Cell.html", "autoapi/single_cell_parser/cell/Cell.add_synapse.html", "autoapi/single_cell_parser/cell/Cell.distance_between_pts.html", "autoapi/single_cell_parser/cell/Cell.distance_to_soma.html", "autoapi/single_cell_parser/cell/Cell.get_range_var_conductances.html", "autoapi/single_cell_parser/cell/Cell.get_section_adjacancy_map.html", "autoapi/single_cell_parser/cell/Cell.get_synapse_activation_dataframe.html", "autoapi/single_cell_parser/cell/Cell.init_time_recording.html", "autoapi/single_cell_parser/cell/Cell.max_distance.html", "autoapi/single_cell_parser/cell/Cell.re_init_cell.html", "autoapi/single_cell_parser/cell/Cell.record_range_var.html", "autoapi/single_cell_parser/cell/Cell.remove_synapses.html", "autoapi/single_cell_parser/cell/PointCell.html", "autoapi/single_cell_parser/cell/PointCell._add_synapse_pointer.html", "autoapi/single_cell_parser/cell/PointCell._next_interval.html", "autoapi/single_cell_parser/cell/PointCell.append.html", "autoapi/single_cell_parser/cell/PointCell.compute_spike_train_times.html", "autoapi/single_cell_parser/cell/PointCell.is_active.html", "autoapi/single_cell_parser/cell/PointCell.play.html", "autoapi/single_cell_parser/cell/PointCell.turn_off.html", "autoapi/single_cell_parser/cell/PySection.html", "autoapi/single_cell_parser/cell/PySection._compute_bounds.html", "autoapi/single_cell_parser/cell/PySection._compute_relative_pts.html", "autoapi/single_cell_parser/cell/PySection._compute_seg_diameters.html", "autoapi/single_cell_parser/cell/PySection._compute_seg_pts.html", "autoapi/single_cell_parser/cell/PySection._compute_total_area.html", "autoapi/single_cell_parser/cell/PySection._get_seg_conductance.html", "autoapi/single_cell_parser/cell/PySection._init_range_var_recording.html", "autoapi/single_cell_parser/cell/PySection._init_vm_recording.html", "autoapi/single_cell_parser/cell/PySection._re_init_range_var_recording.html", "autoapi/single_cell_parser/cell/PySection._re_init_vm_recording.html", "autoapi/single_cell_parser/cell/PySection.get_range_conductances.html", "autoapi/single_cell_parser/cell/PySection.set_3d_geometry.html", "autoapi/single_cell_parser/cell/PySection.set_segments.html", "autoapi/single_cell_parser/cell/index.html", "autoapi/single_cell_parser/cell_modify_functions/BAC_injection/BAC_injection.html", "autoapi/single_cell_parser/cell_modify_functions/BAC_injection/index.html", "autoapi/single_cell_parser/cell_modify_functions/apical_current_injection/apical_current_injection.html", "autoapi/single_cell_parser/cell_modify_functions/apical_current_injection/index.html", "autoapi/single_cell_parser/cell_modify_functions/apical_epsp_injection/apical_epsp_injection.html", "autoapi/single_cell_parser/cell_modify_functions/apical_epsp_injection/index.html", "autoapi/single_cell_parser/cell_modify_functions/blender_recorder/blender_recorder.html", "autoapi/single_cell_parser/cell_modify_functions/blender_recorder/index.html", "autoapi/single_cell_parser/cell_modify_functions/get.html", "autoapi/single_cell_parser/cell_modify_functions/index.html", "autoapi/single_cell_parser/cell_modify_functions/scale_apical/index.html", "autoapi/single_cell_parser/cell_modify_functions/scale_apical/scale_apical.html", "autoapi/single_cell_parser/cell_modify_functions/scale_apical/scale_apical_dendrite.html", "autoapi/single_cell_parser/cell_modify_functions/scale_apical/scale_by_detailed_compartment.html", "autoapi/single_cell_parser/cell_modify_functions/soma_current_injection/index.html", "autoapi/single_cell_parser/cell_modify_functions/soma_current_injection/soma_current_injection.html", "autoapi/single_cell_parser/cell_modify_functions/synaptic_input/index.html", "autoapi/single_cell_parser/cell_modify_functions/synaptic_input/synaptic_input.html", "autoapi/single_cell_parser/cell_parser/CellParser.html", "autoapi/single_cell_parser/cell_parser/CellParser._add_spines.html", "autoapi/single_cell_parser/cell_parser/CellParser._add_spines_ar.html", "autoapi/single_cell_parser/cell_parser/CellParser._create_ais.html", "autoapi/single_cell_parser/cell_parser/CellParser._create_ais_Hay2013.html", "autoapi/single_cell_parser/cell_parser/CellParser._insert_ion_properties.html", "autoapi/single_cell_parser/cell_parser/CellParser.apply_cell_modify_functions.html", "autoapi/single_cell_parser/cell_parser/CellParser.determine_nseg.html", "autoapi/single_cell_parser/cell_parser/CellParser.get_cell.html", "autoapi/single_cell_parser/cell_parser/CellParser.insert_hh_membrane.html", "autoapi/single_cell_parser/cell_parser/CellParser.insert_membrane_properties.html", "autoapi/single_cell_parser/cell_parser/CellParser.insert_passive_membrane.html", "autoapi/single_cell_parser/cell_parser/CellParser.insert_range_mechanisms.html", "autoapi/single_cell_parser/cell_parser/CellParser.set_up_biophysics.html", "autoapi/single_cell_parser/cell_parser/CellParser.spatialgraph_to_cell.html", "autoapi/single_cell_parser/cell_parser/CellParser.update_range_mechanisms.html", "autoapi/single_cell_parser/cell_parser/index.html", "autoapi/single_cell_parser/create_cell.html", "autoapi/single_cell_parser/index.html", "autoapi/single_cell_parser/init_neuron_run.html", "autoapi/single_cell_parser/network/NetworkMapper.html", "autoapi/single_cell_parser/network/NetworkMapper._activate_presyn_cells.html", "autoapi/single_cell_parser/network/NetworkMapper._apply_network_modify_functions.html", "autoapi/single_cell_parser/network/NetworkMapper._assign_anatomical_synapses.html", "autoapi/single_cell_parser/network/NetworkMapper._assign_synapse_weights.html", "autoapi/single_cell_parser/network/NetworkMapper._connect_functional_synapses.html", "autoapi/single_cell_parser/network/NetworkMapper._connect_spike_trains.html", "autoapi/single_cell_parser/network/NetworkMapper._create_functional_connectivity_map.html", "autoapi/single_cell_parser/network/NetworkMapper._create_pointcell_activities.html", "autoapi/single_cell_parser/network/NetworkMapper._create_presyn_cells.html", "autoapi/single_cell_parser/network/NetworkMapper._create_spiketrain_activities.html", "autoapi/single_cell_parser/network/NetworkMapper._map_complete_anatomical_realization.html", "autoapi/single_cell_parser/network/NetworkMapper._map_functional_realization.html", "autoapi/single_cell_parser/network/NetworkMapper.create_functional_realization.html", "autoapi/single_cell_parser/network/NetworkMapper.create_network.html", "autoapi/single_cell_parser/network/NetworkMapper.create_saved_network.html", "autoapi/single_cell_parser/network/NetworkMapper.create_saved_network2.html", "autoapi/single_cell_parser/network/NetworkMapper.re_init_network.html", "autoapi/single_cell_parser/network/NetworkMapper.reconnect_network.html", "autoapi/single_cell_parser/network/NetworkMapper.reconnect_saved_synapses.html", "autoapi/single_cell_parser/network/activate_functional_synapse.html", "autoapi/single_cell_parser/network/index.html", "autoapi/single_cell_parser/network/sample_times_from_rates.html", "autoapi/single_cell_parser/network_modify_functions/get.html", "autoapi/single_cell_parser/network_modify_functions/index.html", "autoapi/single_cell_parser/network_modify_functions/silence_synapses_by_somadist/index.html", "autoapi/single_cell_parser/network_modify_functions/silence_synapses_by_somadist/silence_synapses_by_somadist.html", "autoapi/single_cell_parser/network_modify_functions/silence_synapses_by_somadist_and_spike_source/index.html", "autoapi/single_cell_parser/network_modify_functions/silence_synapses_by_somadist_and_spike_source/silence_synapses_by_somadist_and_spike_source.html", "autoapi/single_cell_parser/network_param_modify_functions/_celltype_matches.html", "autoapi/single_cell_parser/network_param_modify_functions/_has_evoked.html", "autoapi/single_cell_parser/network_param_modify_functions/change_evoked_INH_scaling.html", "autoapi/single_cell_parser/network_param_modify_functions/change_glutamate_syn_weights.html", "autoapi/single_cell_parser/network_param_modify_functions/change_ongoing_interval.html", "autoapi/single_cell_parser/network_param_modify_functions/inactivate_evoked_activity_by_celltype_and_column.html", "autoapi/single_cell_parser/network_param_modify_functions/inactivate_evoked_and_ongoing_activity_by_celltype_and_column.html", "autoapi/single_cell_parser/network_param_modify_functions/index.html", "autoapi/single_cell_parser/network_param_modify_functions/multi_stimulus_trial.html", "autoapi/single_cell_parser/network_param_modify_functions/set_stim_onset.html", "autoapi/single_cell_parser/network_realizations/create_functional_network.html", "autoapi/single_cell_parser/network_realizations/create_synapse_realization.html", "autoapi/single_cell_parser/network_realizations/index.html", "autoapi/single_cell_parser/parameters/ParameterSet.html", "autoapi/single_cell_parser/parameters/ParameterSet._resolve_path.html", "autoapi/single_cell_parser/parameters/ParameterSet._unwrap.html", "autoapi/single_cell_parser/parameters/ParameterSet._wrap.html", "autoapi/single_cell_parser/parameters/ParameterSet.save.html", "autoapi/single_cell_parser/parameters/ParameterSet.to_dict.html", "autoapi/single_cell_parser/parameters/ParameterSet.update.html", "autoapi/single_cell_parser/parameters/_read_params_to_dict.html", "autoapi/single_cell_parser/parameters/build_parameters.html", "autoapi/single_cell_parser/parameters/index.html", "autoapi/single_cell_parser/parameters/load_NMODL_parameters.html", "autoapi/single_cell_parser/parameters/resolve_parameter_paths.html", "autoapi/single_cell_parser/reader/_Edge.html", "autoapi/single_cell_parser/reader/_Edge.is_valid.html", "autoapi/single_cell_parser/reader/index.html", "autoapi/single_cell_parser/reader/read_complete_synapse_activation_file.html", "autoapi/single_cell_parser/reader/read_functional_realization_map.html", "autoapi/single_cell_parser/reader/read_hoc_file.html", "autoapi/single_cell_parser/reader/read_landmark_file.html", "autoapi/single_cell_parser/reader/read_pruned_synapse_realization.html", "autoapi/single_cell_parser/reader/read_scalar_field.html", "autoapi/single_cell_parser/reader/read_spike_times_file.html", "autoapi/single_cell_parser/reader/read_synapse_activation_file.html", "autoapi/single_cell_parser/reader/read_synapse_realization.html", "autoapi/single_cell_parser/reader/read_synapse_weight_file.html", "autoapi/single_cell_parser/scalar_field/ScalarField.html", "autoapi/single_cell_parser/scalar_field/ScalarField.get_mesh_coordinates.html", "autoapi/single_cell_parser/scalar_field/ScalarField.get_scalar.html", "autoapi/single_cell_parser/scalar_field/ScalarField.get_voxel_bounds.html", "autoapi/single_cell_parser/scalar_field/ScalarField.get_voxel_center.html", "autoapi/single_cell_parser/scalar_field/ScalarField.is_in_bounds.html", "autoapi/single_cell_parser/scalar_field/ScalarField.resize_mesh.html", "autoapi/single_cell_parser/scalar_field/index.html", "autoapi/single_cell_parser/sec_distance_to_soma.html", "autoapi/single_cell_parser/serialize_cell/cell_to_serializable_object.html", "autoapi/single_cell_parser/serialize_cell/convert_dict_of_hoc_arrays_to_dict_of_np_arrays.html", "autoapi/single_cell_parser/serialize_cell/convert_hoc_array_to_np_array.html", "autoapi/single_cell_parser/serialize_cell/index.html", "autoapi/single_cell_parser/serialize_cell/load_cell_from_file.html", "autoapi/single_cell_parser/serialize_cell/restore_cell_from_serializable_object.html", "autoapi/single_cell_parser/serialize_cell/save_cell_to_file.html", "autoapi/single_cell_parser/sim_control/SimControl.html", "autoapi/single_cell_parser/sim_control/SimControl.go.html", "autoapi/single_cell_parser/sim_control/SimControl.set_IClamp.html", "autoapi/single_cell_parser/sim_control/SimControl.set_recording.html", "autoapi/single_cell_parser/sim_control/SimControl.show.html", "autoapi/single_cell_parser/sim_control/index.html", "autoapi/single_cell_parser/spines_update_network_paramfile.html", "autoapi/single_cell_parser/spines_update_synapse_distribution_file.html", "autoapi/single_cell_parser/synapse/ExSyn.html", "autoapi/single_cell_parser/synapse/ExSyn.activate_hoc_syn.html", "autoapi/single_cell_parser/synapse/Synapse.html", "autoapi/single_cell_parser/synapse/Synapse.activate_hoc_syn.html", "autoapi/single_cell_parser/synapse/Synapse.disconnect_hoc_synapse.html", "autoapi/single_cell_parser/synapse/Synapse.is_active.html", "autoapi/single_cell_parser/synapse/index.html", "autoapi/single_cell_parser/synapse_mapper/SynapseMapper.html", "autoapi/single_cell_parser/synapse_mapper/SynapseMapper._compute_path_length.html", "autoapi/single_cell_parser/synapse_mapper/SynapseMapper._create_voxel_edge_map.html", "autoapi/single_cell_parser/synapse_mapper/SynapseMapper._intersect_bboxes.html", "autoapi/single_cell_parser/synapse_mapper/SynapseMapper._pt_in_box.html", "autoapi/single_cell_parser/synapse_mapper/SynapseMapper.create_synapses.html", "autoapi/single_cell_parser/synapse_mapper/SynapseMapper.map_pruned_synapse_realization.html", "autoapi/single_cell_parser/synapse_mapper/SynapseMapper.map_synapse_model_distribution.html", "autoapi/single_cell_parser/synapse_mapper/SynapseMapper.map_synapse_realization.html", "autoapi/single_cell_parser/synapse_mapper/index.html", "autoapi/single_cell_parser/writer/generate_landmark_template.html", "autoapi/single_cell_parser/writer/index.html", "autoapi/single_cell_parser/writer/value_to_color.html", "autoapi/single_cell_parser/writer/write_PSTH.html", "autoapi/single_cell_parser/writer/write_all_traces.html", "autoapi/single_cell_parser/writer/write_cell_simulation.html", "autoapi/single_cell_parser/writer/write_cell_synapse_locations.html", "autoapi/single_cell_parser/writer/write_functional_map.html", "autoapi/single_cell_parser/writer/write_functional_realization_map.html", "autoapi/single_cell_parser/writer/write_landmark_file.html", "autoapi/single_cell_parser/writer/write_landmarks_colorcoded_to_folder.html", "autoapi/single_cell_parser/writer/write_presynaptic_spike_times.html", "autoapi/single_cell_parser/writer/write_pruned_synapse_locations.html", "autoapi/single_cell_parser/writer/write_sim_results.html", "autoapi/single_cell_parser/writer/write_spike_times_file.html", "autoapi/single_cell_parser/writer/write_synapse_activation_file.html", "autoapi/single_cell_parser/writer/write_synapse_weight_file.html", "autoapi/singlecell_input_mapper/evoked_PSTH_from_spike_times/create_average_celltype_PSTH_from_clusters.html", "autoapi/singlecell_input_mapper/evoked_PSTH_from_spike_times/create_evoked_PSTH.html", "autoapi/singlecell_input_mapper/evoked_PSTH_from_spike_times/index.html", "autoapi/singlecell_input_mapper/evoked_PSTH_from_spike_times/load_cluster_trials.html", "autoapi/singlecell_input_mapper/evoked_PSTH_from_spike_times/load_spike_times.html", "autoapi/singlecell_input_mapper/evoked_PSTH_from_spike_times/scan_directory.html", "autoapi/singlecell_input_mapper/evoked_network_param_from_template/create_network_parameter.html", "autoapi/singlecell_input_mapper/evoked_network_param_from_template/index.html", "autoapi/singlecell_input_mapper/evoked_network_param_from_template/load_cell_number_file.html", "autoapi/singlecell_input_mapper/evoked_network_param_from_template/whisker_evoked_PSTH.html", "autoapi/singlecell_input_mapper/index.html", "autoapi/singlecell_input_mapper/map_singlecell_inputs/index.html", "autoapi/singlecell_input_mapper/map_singlecell_inputs/map_singlecell_inputs.html", "autoapi/singlecell_input_mapper/ongoing_network_param_from_template/create_network_parameter.html", "autoapi/singlecell_input_mapper/ongoing_network_param_from_template/index.html", "autoapi/singlecell_input_mapper/ongoing_network_param_from_template/load_cell_number_file.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/cell/Cell.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/cell/Cell.add_synapse.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/cell/Cell.distance_to_soma.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/cell/Cell.get_bounding_box.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/cell/Cell.remove_synapses.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/cell/CellParser.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/cell/CellParser.get_cell.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/cell/CellParser.spatialgraph_to_cell.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/cell/PointCell.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/cell/PointCell._add_synapse_pointer.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/cell/PySection2.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/cell/PySection2._compute_bounds.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/cell/PySection2._compute_length.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/cell/PySection2._compute_relative_pts.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/cell/PySection2.set_3d_geometry.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/cell/Synapse.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/cell/index.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/generate_nr_of_cells_spreadsheet/con_file_to_NumberOfConnectedCells_sheet.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/generate_nr_of_cells_spreadsheet/index.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/index.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/network_embedding/NetworkMapper.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/network_embedding/NetworkMapper._compute_parameter_distribution.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/network_embedding/NetworkMapper._compute_sample_distance.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/network_embedding/NetworkMapper._compute_summary_tables.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/network_embedding/NetworkMapper._create_anatomical_connectivity_map.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/network_embedding/NetworkMapper._create_anatomical_realization.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/network_embedding/NetworkMapper._create_presyn_cells.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/network_embedding/NetworkMapper._generate_output_files.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/network_embedding/NetworkMapper._get_representative_sample.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/network_embedding/NetworkMapper._precompute_anatomical_area_celltype_synapse_densities.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/network_embedding/NetworkMapper._test_population_convergence.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/network_embedding/NetworkMapper._write_landmark_files.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/network_embedding/NetworkMapper._write_population_output_files.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/network_embedding/NetworkMapper.create_network_embedding.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/network_embedding/NetworkMapper.create_network_embedding_for_simulations.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/network_embedding/NetworkMapper.create_network_embedding_from_synapse_densities.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/network_embedding/index.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/reader/_Edge.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/reader/_Edge.is_valid.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/reader/index.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/reader/read_celltype_numbers_spreadsheet.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/reader/read_connections_spreadsheet.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/reader/read_hoc_file.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/reader/read_scalar_field.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/scalar_field/ScalarField.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/scalar_field/ScalarField.get_mesh_coordinates.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/scalar_field/ScalarField.get_scalar.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/scalar_field/ScalarField.get_voxel_bounds.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/scalar_field/ScalarField.get_voxel_center.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/scalar_field/ScalarField.is_in_bounds.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/scalar_field/ScalarField.resize_mesh.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/scalar_field/index.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/synapse_mapper/SynapseDensity.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/synapse_mapper/SynapseDensity._clip_u.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/synapse_mapper/SynapseDensity._compute_cell_density_grid.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/synapse_mapper/SynapseDensity._compute_length_surface_area_density.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/synapse_mapper/SynapseDensity._get_truncated_cone_area.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/synapse_mapper/SynapseDensity._interpolate_radius.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/synapse_mapper/SynapseDensity._intersect_bboxes.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/synapse_mapper/SynapseDensity._is_zero.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/synapse_mapper/SynapseDensity.compute_cell_PST.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/synapse_mapper/SynapseDensity.compute_synapse_density.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/synapse_mapper/SynapseMapper.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/synapse_mapper/SynapseMapper._compute_path_length.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/synapse_mapper/SynapseMapper._create_voxel_edge_map.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/synapse_mapper/SynapseMapper._intersect_bboxes.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/synapse_mapper/SynapseMapper._pt_in_box.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/synapse_mapper/SynapseMapper.create_synapses.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/synapse_mapper/index.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/writer/index.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/writer/write_anatomical_realization_map.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/writer/write_cell_synapse_locations.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/writer/write_landmark_file.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/writer/write_population_and_sample_connectivity_summary.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/writer/write_population_connectivity_summary.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/writer/write_sample_connectivity_summary.html", "autoapi/singlecell_input_mapper/singlecell_input_mapper/writer/write_scalar_field.html", "autoapi/spike_analysis/core/ReaderLabView.html", "autoapi/spike_analysis/core/ReaderLabView.get_serialize_dict.html", "autoapi/spike_analysis/core/ReaderLabView.get_stim_times.html", "autoapi/spike_analysis/core/ReaderLabView.get_voltage_traces.html", "autoapi/spike_analysis/core/ReaderSmr.html", "autoapi/spike_analysis/core/ReaderSmr.get_serialize_dict.html", "autoapi/spike_analysis/core/ReaderSmr.get_stim_times.html", "autoapi/spike_analysis/core/ReaderSmr.get_voltage_traces.html", "autoapi/spike_analysis/core/STAPlugin_ISIn.html", "autoapi/spike_analysis/core/STAPlugin_ISIn.event_analysis_ISIn.html", "autoapi/spike_analysis/core/STAPlugin_ISIn.setup.html", "autoapi/spike_analysis/core/STAPlugin_TEMPLATE.html", "autoapi/spike_analysis/core/STAPlugin_TEMPLATE.get_result.html", "autoapi/spike_analysis/core/STAPlugin_TEMPLATE.setup.html", "autoapi/spike_analysis/core/STAPlugin_annotate_bursts_in_st.html", "autoapi/spike_analysis/core/STAPlugin_annotate_bursts_in_st.setup.html", "autoapi/spike_analysis/core/STAPlugin_bursts.html", "autoapi/spike_analysis/core/STAPlugin_bursts.event_analysis_bursts.html", "autoapi/spike_analysis/core/STAPlugin_bursts.setup.html", "autoapi/spike_analysis/core/STAPlugin_extract_column_in_filtered_dataframe.html", "autoapi/spike_analysis/core/STAPlugin_extract_column_in_filtered_dataframe.setup.html", "autoapi/spike_analysis/core/STAPlugin_ongoing.html", "autoapi/spike_analysis/core/STAPlugin_ongoing.setup.html", "autoapi/spike_analysis/core/STAPlugin_quantification_in_period.html", "autoapi/spike_analysis/core/STAPlugin_quantification_in_period.setup.html", "autoapi/spike_analysis/core/STAPlugin_response_latency_in_period.html", "autoapi/spike_analysis/core/STAPlugin_response_latency_in_period.setup.html", "autoapi/spike_analysis/core/STAPlugin_response_probability_in_period.html", "autoapi/spike_analysis/core/STAPlugin_response_probability_in_period.setup.html", "autoapi/spike_analysis/core/STAPlugin_spike_times_dataframe.html", "autoapi/spike_analysis/core/STAPlugin_spike_times_dataframe.setup.html", "autoapi/spike_analysis/core/SpikeDetectionCreastTrough.html", "autoapi/spike_analysis/core/SpikeDetectionCreastTrough._extract_spike_times.html", "autoapi/spike_analysis/core/SpikeDetectionCreastTrough._set_creast_trough.html", "autoapi/spike_analysis/core/SpikeDetectionCreastTrough.get_creast_and_trough_ampltidues_by_bins.html", "autoapi/spike_analysis/core/SpikeDetectionCreastTrough.get_default_events.html", "autoapi/spike_analysis/core/SpikeDetectionCreastTrough.get_serialize_dict.html", "autoapi/spike_analysis/core/SpikeDetectionCreastTrough.load.html", "autoapi/spike_analysis/core/SpikeDetectionCreastTrough.plot_creast_trough_histogram.html", "autoapi/spike_analysis/core/SpikeDetectionCreastTrough.run_analysis.html", "autoapi/spike_analysis/core/SpikeDetectionCreastTrough.save.html", "autoapi/spike_analysis/core/SpikeDetectionCreastTrough.show_events.html", "autoapi/spike_analysis/core/SpikeTimesAnalysis.html", "autoapi/spike_analysis/core/SpikeTimesAnalysis.apply_extractor.html", "autoapi/spike_analysis/core/SpikeTimesAnalysis.get.html", "autoapi/spike_analysis/core/SpikeTimesAnalysis.get_by_trial.html", "autoapi/spike_analysis/core/_sta_input_checker.html", "autoapi/spike_analysis/core/filter_short_ISIs.html", "autoapi/spike_analysis/core/filter_spike_times.html", "autoapi/spike_analysis/core/get_peaks_above.html", "autoapi/spike_analysis/core/get_period_label_by_time.html", "autoapi/spike_analysis/core/get_spike_times_from_row.html", "autoapi/spike_analysis/core/get_st_from_spike_times_and_stim_times.html", "autoapi/spike_analysis/core/get_upcross.html", "autoapi/spike_analysis/core/highpass_filter.html", "autoapi/spike_analysis/core/index.html", "autoapi/spike_analysis/core/load_reader.html", "autoapi/spike_analysis/core/read_labview_junk1_dat_files.html", "autoapi/spike_analysis/core/read_smr_file.html", "autoapi/spike_analysis/core/stimulus_interval_filter.html", "autoapi/spike_analysis/core/strip_st.html", "autoapi/spike_analysis/index.html", "autoapi/visualize/_decorators/dask_to_pandas.html", "autoapi/visualize/_decorators/index.html", "autoapi/visualize/_decorators/pr.html", "autoapi/visualize/_decorators/subsequent_calls_per_line.html", "autoapi/visualize/_figure_array_converter/PixelObject.html", "autoapi/visualize/_figure_array_converter/fig2np.html", "autoapi/visualize/_figure_array_converter/index.html", "autoapi/visualize/_figure_array_converter/show_pixel_object.html", "autoapi/visualize/cell_morphology_visualizer/CMVDataParser.html", "autoapi/visualize/cell_morphology_visualizer/CMVDataParser._align_trunk_with_z_axis.html", "autoapi/visualize/cell_morphology_visualizer/CMVDataParser._calc_ion_dynamics_timeseries.html", "autoapi/visualize/cell_morphology_visualizer/CMVDataParser._calc_morphology.html", "autoapi/visualize/cell_morphology_visualizer/CMVDataParser._calc_scalar_data_from_keyword.html", "autoapi/visualize/cell_morphology_visualizer/CMVDataParser._calc_synapses_timeseries.html", "autoapi/visualize/cell_morphology_visualizer/CMVDataParser._calc_voltage_timeseries.html", "autoapi/visualize/cell_morphology_visualizer/CMVDataParser._data_per_section_to_data_per_point.html", "autoapi/visualize/cell_morphology_visualizer/CMVDataParser._get_color_per_section.html", "autoapi/visualize/cell_morphology_visualizer/CMVDataParser._get_ion_dynamics_at_timepoint.html", "autoapi/visualize/cell_morphology_visualizer/CMVDataParser._get_synapses_at_timepoint.html", "autoapi/visualize/cell_morphology_visualizer/CMVDataParser._get_timeseries_minmax.html", "autoapi/visualize/cell_morphology_visualizer/CMVDataParser._get_voltages_at_timepoint.html", "autoapi/visualize/cell_morphology_visualizer/CMVDataParser._has_simulation_data.html", "autoapi/visualize/cell_morphology_visualizer/CMVDataParser._init_simulation_data.html", "autoapi/visualize/cell_morphology_visualizer/CMVDataParser._keyword_is_scalar_data.html", "autoapi/visualize/cell_morphology_visualizer/CMVDataParser._update_times_to_show.html", "autoapi/visualize/cell_morphology_visualizer/CMVDataParser.scale_diameter.html", "autoapi/visualize/cell_morphology_visualizer/CMVDataParser.set_cmap.html", "autoapi/visualize/cell_morphology_visualizer/CellMorphologyInteractiveVisualizer.html", "autoapi/visualize/cell_morphology_visualizer/CellMorphologyInteractiveVisualizer._get_interactive_cell.html", "autoapi/visualize/cell_morphology_visualizer/CellMorphologyInteractiveVisualizer._get_interactive_dash_app.html", "autoapi/visualize/cell_morphology_visualizer/CellMorphologyInteractiveVisualizer.interactive_app.html", "autoapi/visualize/cell_morphology_visualizer/CellMorphologyInteractiveVisualizer.interactive_plot.html", "autoapi/visualize/cell_morphology_visualizer/CellMorphologyVisualizer.html", "autoapi/visualize/cell_morphology_visualizer/CellMorphologyVisualizer._write_png_timeseries.html", "autoapi/visualize/cell_morphology_visualizer/CellMorphologyVisualizer.animation.html", "autoapi/visualize/cell_morphology_visualizer/CellMorphologyVisualizer.plot.html", "autoapi/visualize/cell_morphology_visualizer/CellMorphologyVisualizer.to_vtk.html", "autoapi/visualize/cell_morphology_visualizer/CellMorphologyVisualizer.write_gif.html", "autoapi/visualize/cell_morphology_visualizer/CellMorphologyVisualizer.write_video.html", "autoapi/visualize/cell_morphology_visualizer/CellMorphologyVisualizer.write_vtk_frames.html", "autoapi/visualize/cell_morphology_visualizer/get_3d_plot_morphology.html", "autoapi/visualize/cell_morphology_visualizer/index.html", "autoapi/visualize/cell_to_ipython_animation/_in_parallel_context.html", "autoapi/visualize/cell_to_ipython_animation/_load_base64.html", "autoapi/visualize/cell_to_ipython_animation/cell_to_animation.html", "autoapi/visualize/cell_to_ipython_animation/cell_to_ipython_animation.html", "autoapi/visualize/cell_to_ipython_animation/display_animation.html", "autoapi/visualize/cell_to_ipython_animation/find_closest_index.html", "autoapi/visualize/cell_to_ipython_animation/get_lines.html", "autoapi/visualize/cell_to_ipython_animation/index.html", "autoapi/visualize/cell_to_ipython_animation/init_fig.html", "autoapi/visualize/cell_to_ipython_animation/parallelMovieMaker.html", "autoapi/visualize/cell_to_ipython_animation/plot_lines_fun.html", "autoapi/visualize/current_visualizer/CurrentAnalysis.html", "autoapi/visualize/current_visualizer/CurrentAnalysis._compute_current_arrays.html", "autoapi/visualize/current_visualizer/CurrentAnalysis._get_current_by_rv.html", "autoapi/visualize/current_visualizer/CurrentAnalysis.plot_areas.html", "autoapi/visualize/current_visualizer/CurrentAnalysis.plot_lines.html", "autoapi/visualize/current_visualizer/index.html", "autoapi/visualize/dendrogram/Dendrogram.html", "autoapi/visualize/dendrogram/Dendrogram._plot_dendrogram.html", "autoapi/visualize/dendrogram/Dendrogram.get_parent_by_name.html", "autoapi/visualize/dendrogram/Dendrogram.plot.html", "autoapi/visualize/dendrogram/DendrogramStatistics.html", "autoapi/visualize/dendrogram/DendrogramStatistics.plot.html", "autoapi/visualize/dendrogram/_DendrogramDendriteStatistics.html", "autoapi/visualize/dendrogram/_DendrogramDendriteStatistics._compute_dendrite_hist.html", "autoapi/visualize/dendrogram/_DendrogramDendriteStatistics._get_amount_of_dendrite_in_bin.html", "autoapi/visualize/dendrogram/_DendrogramDendriteStatistics._plot_dendrite_hist.html", "autoapi/visualize/dendrogram/_DendrogramDendriteStatistics.plot.html", "autoapi/visualize/dendrogram/_DendrogramSection.html", "autoapi/visualize/dendrogram/_DendrogramSection._add_synapse.html", "autoapi/visualize/dendrogram/_DendrogramSynapseStatistics.html", "autoapi/visualize/dendrogram/_DendrogramSynapseStatistics._add_synapses.html", "autoapi/visualize/dendrogram/_DendrogramSynapseStatistics._compute_synapse_hist.html", "autoapi/visualize/dendrogram/_DendrogramSynapseStatistics._compute_synapse_statistics.html", "autoapi/visualize/dendrogram/_DendrogramSynapseStatistics._plot_synapse_density_hist.html", "autoapi/visualize/dendrogram/_DendrogramSynapseStatistics._plot_synapse_hist.html", "autoapi/visualize/dendrogram/_DendrogramSynapseStatistics._plot_synapses_dendrogram_overlay.html", "autoapi/visualize/dendrogram/_DendrogramSynapseStatistics.get_number_of_synapses_in_bin.html", "autoapi/visualize/dendrogram/_DendrogramSynapseStatistics.plot.html", "autoapi/visualize/dendrogram/_get_db_by_sec.html", "autoapi/visualize/dendrogram/_get_max_somadistance.html", "autoapi/visualize/dendrogram/index.html", "autoapi/visualize/histogram/histogram.html", "autoapi/visualize/histogram/histogram2.html", "autoapi/visualize/histogram/index.html", "autoapi/visualize/index.html", "autoapi/visualize/manylines/index.html", "autoapi/visualize/manylines/manylines.html", "autoapi/visualize/manylines/manylines_helper.html", "autoapi/visualize/plot_hoc.html", "autoapi/visualize/rasterplot/index.html", "autoapi/visualize/rasterplot/rasterplot.html", "autoapi/visualize/rasterplot/rasterplot2.html", "autoapi/visualize/rasterplot/rasterplot2_pdf_grouped.html", "autoapi/visualize/svg2emf.html", "autoapi/visualize/utils/Arrow3D.html", "autoapi/visualize/utils/Arrow3D.do_3d_projection.html", "autoapi/visualize/utils/Arrow3D.draw.html", "autoapi/visualize/utils/_arrow3D.html", "autoapi/visualize/utils/_load_base64.html", "autoapi/visualize/utils/display_animation_from_images.html", "autoapi/visualize/utils/draw_arrow.html", "autoapi/visualize/utils/find_files_and_order_them.html", "autoapi/visualize/utils/index.html", "autoapi/visualize/utils/value_to_color.html", "autoapi/visualize/utils/write_gif_from_images.html", "autoapi/visualize/utils/write_video_from_images.html", "autoapi/visualize/voltage_trace_visualizer/index.html", "autoapi/visualize/voltage_trace_visualizer/plot_vt.html", "autoapi/visualize/voltage_trace_visualizer/visualize_vt.html", "autoapi/visualize/vtk/convert_amira_lattice_to_vtk.html", "autoapi/visualize/vtk/convert_amira_surf_to_vtk.html", "autoapi/visualize/vtk/index.html", "autoapi/visualize/vtk/save_cells_landmark_files_vtk.html", "autoapi/visualize/vtk/write_vtk_pointcloud_file.html", "autoapi/visualize/vtk/write_vtk_skeleton_file.html", "bibliography.html", "index.html", "rst_assets/api_reference.html", "rst_assets/cards.html", "rst_assets/file_formats.html", "rst_assets/installation.html", "rst_assets/isf_overview.html", "rst_assets/paramfile_overview.html", "rst_assets/tutorials.html", "tutorials/1.%20neuron%20models/1.1%20Simulation.html", "tutorials/1.%20neuron%20models/1.2%20Evaluation.html", "tutorials/1.%20neuron%20models/1.3%20Generation.html", "tutorials/2.%20network%20models/2.1%20Anatomical%20embedding.html", "tutorials/2.%20network%20models/2.2%20Network%20activity.html", "tutorials/3.%20multiscale%20models/3.1%20Multiscale%20modeling.html", "tutorials/4.%20reduced%20models/4.1%20Generalized%20Linear%20Models.html", "tutorials/Introduction_to_ISF.html", "tutorials/auxiliary%20notebooks/A.0%20The%20Barrel%20Cortex.html", "tutorials/auxiliary%20notebooks/A.1%20Morphology%20Reconstruction.html", "tutorials/auxiliary%20notebooks/A.2%20Neuron%20API.html"]})