name: Windows
on:
  pull_request:
    types: [opened, synchronize]
    paths-ignore:
      - README.md
      - CHANGELOG.md
      - .gitignore
    branches:
      - develop
      - master
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  test:
    name: Test pixi windows
    runs-on: ['self-hosted', 'Windows']

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install & setup environment
        uses: prefix-dev/setup-pixi@v0.8.8
        with:
          pixi-version: v0.47.0
          cache: true
          auth-host: prefix.dev
          auth-token: ${{ secrets.PREFIX_DEV_TOKEN }}
          manifest-path: pyproject.toml
          post-cleanup: true
          pixi-bin-path: ${{ runner.temp }}\Scripts\pixi.exe

      - name: Preliminary setup
        run: |
            Write-Host "------------ Preliminary setup for tests -------------"
            Write-Host "Creating tests/logs/ directory..."
            New-Item -ItemType Directory -Force -Path ./tests/logs/

            Write-Host "------------ Configuring Dask -------------"
            $env:DASK_CONFIG = "./config/dask_config.yml"

            Remove-Item Env:DISPLAY -ErrorAction SilentlyContinue
            if (-Not (Test-Path "$HOME/tmp")) {
            New-Item -ItemType Directory -Path "$HOME/tmp"
            }
            $env:TMPDIR = "$HOME/tmp"
      - name: Start Resource Monitoring
        run: |
          Write-Host "Starting resource monitoring..."
          $monitoringProcess = Start-Process -FilePath "powershell.exe" -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File ./.github/workflows/monitor_resources.ps1 -LogFile ./tests/logs/resource_usage.log -Interval 5" `
          -NoNewWindow
          # Save the PID to a file for later use
          $monitoringProcess.Id | Out-File -FilePath "./tests/logs/monitoring_pid.txt"
      - name: Test ISF
        run: |
          Start-Process pixi -ArgumentList "r dask-scheduler --port=8786 --dashboard-address=8787 --host=localhost" `
            -RedirectStandardOutput "./tests/logs/dask_scheduler_out${{ github.run_id }}.log" `
            -RedirectStandardError "./tests/logs/dask_scheduler_err${{ github.run_id }}.log" `
            -NoNewWindow

          Start-Process pixi -ArgumentList "r dask-worker localhost:8786 --nthreads=1 --nprocs=5 --memory-limit=3GB --dashboard-address=8787" `
            -RedirectStandardOutput "./tests/logs/dask_worker_out_${{ github.run_id }}.log" `
            -RedirectStandardError "./tests/logs/dask_worker_err_${{ github.run_id }}.log" `
            -NoNewWindow

          $env:MPLBACKEND = "Agg"

          Write-Host "------------ Running tests -------------"
          pixi r pytest `
            -n 4 `
            -rsx `
            -vv `
            --color=yes `
            --durations=15 `
            --cov-report xml:tests\logs\report_py38.xml `
            --cov=. `
            --dask_server_port 8786 tests

          Stop-Process -Name "dask-worker" -ErrorAction SilentlyContinue
          Stop-Process -Name "dask-scheduler" -ErrorAction SilentlyContinue
        env: 
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEURONHOME: C:\nrn

      - name: Test ModelDataBase backwards compatibility
        run: |
          param (
              [string]$LogFile = "./tests/logs/resource_usage.log",
              [int]$Interval = 5
          )

          # Ensure the log file exists
          New-Item -ItemType File -Force -Path $LogFile | Out-Null

          # Start monitoring
          Write-Host "Starting resource monitoring..."
          while ($true) {
              $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
              $cpu = (Get-Counter '\Processor(_Total)\% Processor Time').CounterSamples.CookedValue
              $ram = (Get-Counter '\Memory\Available MBytes').CounterSamples.CookedValue
              $totalRam = (Get-CimInstance Win32_ComputerSystem).TotalPhysicalMemory / 1MB
              $usedRam = $totalRam - $ram

              # Log the data
              "$timestamp, CPU: $([math]::Round($cpu, 2))%, RAM Used: $([math]::Round($usedRam, 2)) MB, RAM Total: $([math]::Round($totalRam, 2)) MB" | Out-File -Append -FilePath $LogFile

              Start-Sleep -Seconds $Interval
          }
          Start-Process pixi -ArgumentList "r dask-scheduler --port=8786 --dashboard-address=8787 --host=localhost" `
            -RedirectStandardOutput "./tests/logs/dask_scheduler_out${{ github.run_id }}.log" `
            -RedirectStandardError "./tests/logs/dask_scheduler_err${{ github.run_id }}.log" `
            -NoNewWindow

          Start-Process pixi -ArgumentList "r dask-worker localhost:8786 --nthreads=2 --nprocs=4 --memory-limit=4GB --dashboard-address=8787" `
            -RedirectStandardOutput "./tests/logs/dask_worker_out_${{ github.run_id }}.log" `
            -RedirectStandardError "./tests/logs/dask_worker_err_${{ github.run_id }}.log" `
            -NoNewWindow

          $env:ISF_USE_MDB = "1"
          pixi r pytest -rsx -vv --color=yes --durations=15 --dask_server_port 8786 tests\test_data_base\
          Remove-Item Env:ISF_USE_MDB -ErrorAction SilentlyContinue

          Stop-Process -Name "dask-worker" -ErrorAction SilentlyContinue
          Stop-Process -Name "dask-scheduler" -ErrorAction SilentlyContinue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEURONHOME: C:\nrn

      - name: Stop Resource Monitoring
        if: ${{ always() }}
        run: |
          Write-Host "Stopping resource monitoring..."
          # Read the PID from the file and stop the process
          $monitoringPid = Get-Content -Path "./tests/logs/monitoring_pid.txt"
          Stop-Process -Id $monitoringPid -Force

      - name: Save test logs
        uses: actions/upload-artifact@v4
        if: ${{ always() }} 
        with:
          name: ${{ github.run_id }}_logs
          path: |
            ./tests/logs/