# Installation of in-silico-framework followed by CI tests.
# Builds ISF locally on the MPINB-hosted runner and runs all tests
name: ISF Py 3.9
# Controls when the workflow will run
on:
  push:
    branches: '*'
  pull_request:
    branches: '*'
  workflow_dispatch:
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    uses: ./.github/workflows/build-isf.yml
    with:
      py_version: 3.9

  test:
    name: Test Py3.9
    needs: build  # assures there is a build of ISF
    # Assure test runs on whatever runner the build ran on
    # Note that runners are requested based on label, not on name
    # So the runner should have a label equal to its name
    runs-on: ${{ needs.build.outputs.runner_name }}
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Test in-silico-framework for Python 3.9
        run: |
          echo "------------ Preliminary setup for tests -------------"
          echo "Killing all dask processes on ${{ runner.name }} for user $USER (if they exist)"
          echo "Creating tests/logs/ directory..."
          mkdir -p ./tests/logs/
          echo "Removing previous coverage files..."
          if [ -f .coverage.${{ runner.name }}.* ]; then
            echo "Removing previous coverage files..."
            rm .coverage.${{ runner.name }}.*
          fi

          echo "------------ Setting up environment -------------"
          CONDA_TARGET_DIR="$HOME/anaconda_isf3.9"
          source $CONDA_TARGET_DIR/bin/activate
          echo "Using Python: $(which python)"
          export PYTHONPATH=$(pwd):$HOME
          echo $PYTHONPATH

          echo "------------ Configuring Dask -------------"
          name=${{ runner.name }}
          runner_number=$( echo $name | grep -Eo '[0-9]+$' )
          port_number=387${runner_number: -1}6
          bokeh_port=387${runner_number: -1}7
          pkill -U $USER dask-worker
          pkill -U $USER dask-scheduler
          echo "Killing all processes on ports $port_number and $bokeh_port"
          fuser -n tcp -k $port_number 
          fuser -n tcp -k $bokeh_port 
          echo "Launching Dask server on $name"
          echo "Using port $port_number and bokeh port $bokeh_port"

          echo "------------ Running tests -------------"
          unset DISPLAY
          if [ ! -d "$HOME/tmp" ]; then
            mkdir $HOME/tmp
          fi
          export TMPDIR=$HOME/tmp
          (dask-scheduler --port=$port_number --bokeh-port=$bokeh_port > ./tests/logs/dask_scheduler_${{ github.run_id }}.log 2>&1)&
          (dask-worker localhost:$port_number --nthreads 1 --nprocs 6 --memory-limit=100e15 --local-directory="." > ./tests/logs/dask_workers_${{ github.run_id }}.log 2>&1)&
          pytest -n 6 -rsx -vv --color=yes --durations=15 --cov-report xml:tests/logs/report_py39.xml --cov=. --dask_server_port $port_number tests || exit 1;
          rm -rf $TMPDIR

      - name: Cleanup dask orphan processes
        if: ${{ always() }}
        run: |
          pkill -U $USER dask-scheduler
          pkill -U $USER dask-worker

      - name: Save test logs as artifacts
        uses: actions/upload-artifact@v3
        if: ${{ always() }} 
        with:
          name: ${{ github.run_id }}_logs
          path: ./tests/logs/

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./tests/logs/report_py39.xml
          verbose: true # optional (default = false)
      
  docs:
    name: Build documentation
    needs: test 
    runs-on: ["ibs3005", "runner1"]
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Build docs
        run: |
          echo "------------ Setting up environment -------------"
          CONDA_TARGET_DIR="$HOME/anaconda_isf3.9"
          source $CONDA_TARGET_DIR/bin/activate
          echo "Using Python: $(which python)"
          export PYTHONPATH=$(pwd):$HOME
          echo $PYTHONPATH

          echo "------------ Building docs -------------"
          cd docs
          make clean
          make html
          cd ..