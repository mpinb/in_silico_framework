# Installation of in-silico-framework followed by CI tests.
# Builds ISF locally on the MPINB-hosted runner and runs all tests
name: ISF Py2.7 (local) build/test
# Controls when the workflow will run
on:
  push:
    branches: 'master'
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: [ self-hosted, ibs3005]
    defaults:
      run:
        shell: bash -l {0}
    name: Py2.7 (local) build/test

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Install Anaconda2 and update conda package manager
      - name: Download, install & build ISF for Python 2.7
        run: |
          CONDA_TARGET_DIR="$HOME/anaconda_isf2"
          if [ -d "$CONDA_TARGET_DIR" ]; then
            echo "Found existing installation in $HOME. Removing previous Anaconda installation..."
            rm -r "$CONDA_TARGET_DIR"
          else
            echo "No previous Anaconda installation found. Continuing..."
          fi
          pushd .
          cd installer/py2.7
          ./install.sh $CONDA_TARGET_DIR || exit 1
          popd
          source $CONDA_TARGET_DIR/bin/activate
          conda list
      # Run in-silico-framework tests
      - name: Test in-silico-framework
        run: |
          CONDA_TARGET_DIR="$HOME/anaconda_isf2"
          source $CONDA_TARGET_DIR/bin/activate;
          echo "Using Python: $(which python)"
          export PYTHONPATH=$CONDA_TARGET_DIR
          name=${{ runner.name }}
          runner_number=$( echo $name | grep -Eo '[0-9]+$' )
          port_number=${runner_number: -1}8786
          bokeh_port=${runner_number: -1}8787
          echo "Launching Dask server on $name"
          echo "Using port $port_number and bokeh port $bokeh_port" 
          dask-scheduler --port=$port_number --bokeh-port=$bokeh_port &
          dask-worker localhost:$port_number --nthreads 1 --nprocs 4 --memory-limit=100e15 &
          python -n 4 -m pytest -rsx -vv --color=yes tests/
