# Builds ISF for any Python version (2.7/3.8/3.9), depending on the input
name: Build ISF
on:
  workflow_call:
    inputs:
      py_version:
        required: true
        type: string
    outputs:
      runner_name: 
        description: "Name of the runner the build ran on"
        value: ${{ jobs.build.outputs.runner_name }}
jobs:
  build:
    name: Reusable build
    runs-on: [ self-hosted, ibs3005 ]
    defaults:
      run:
        shell: bash -l {0}
    outputs:
      runner_name: ${{ runner.name }}

    steps:
    - uses: actions/checkout@v3
      id: checkout

    - name: Check changes with previous commit
      uses: dorny/paths-filter@v2
      id: changes
      with:
        # compare with most recent commit on the same branch before the push
        base: ${{ github.ref }}
        filters: |
          all:
            - "installer/**"
            - "mechanisms/**"
            - ".github/workflows/**"

    - name: Build ISF
      # (re)build only if:
      # - the commit has changes in the directories specified above compared to whatever previous commit is on the runner
      # - the build does not exist
      # - the previous build was not succesful for whatever reason
      if: |
        ( steps.changes.outputs.all == "true" ) || 
        ( test ! -d $HOME/anaconda_isf${{ inputs.py_version }} ) || 
        ( $(head -n 1 "$HOME/build_success${{ inputs.py_version }}.txt") != "success" )
      run: |
        echo "Changes since last commit: ${{ steps.changes.outputs.all }}"
        echo "Previous build state: $(head -n 1 $HOME/build_success.txt)"
        CONDA_TARGET_DIR="$HOME/anaconda_isf${{ inputs.py_version }}"
        if [ -d "$CONDA_TARGET_DIR" ]; then
          echo "Found existing installation in $HOME. Removing previous Anaconda installation..."
          rm -r "$CONDA_TARGET_DIR"
        else
          echo "No previous Anaconda installation found. Continuing..."
        fi
        pushd .
        cd installer/py${{ inputs.py_version }}
        ./install.sh $CONDA_TARGET_DIR || exit 1
        popd
        source $CONDA_TARGET_DIR/bin/activate
        conda list

    - name: Save success state
      if: ${{ always() }}
      run: |
        echo "Build success = ${{ job.status }}"
        echo ${{ job.status }} > $HOME/build_success${{ inputs.py_version }}.txt 

            
