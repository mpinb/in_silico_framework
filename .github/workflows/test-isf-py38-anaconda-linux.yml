name: Test Anaconda (linux)
on:
  pull_request:
    types: [opened, synchronize]
    paths-ignore:
      - README.md
      - CHANGELOG.md
      - .gitignore
      - .github/**
  pull_request_target:
    types:
      - closed
    paths-ignore:
      - README.md
      - CHANGELOG.md
      - .gitignore
      - .github/**
  push:
    branches:
      - testing
      - installer
  workflow_dispatch:

jobs:
  build:
      name: Build ISF (Anaconda py3.8)
      run: |
        CONDA_TARGET_DIR="${{ runner.tool_cache }}/anaconda_isf${{ inputs.py_version }}"
        if [ -d "$CONDA_TARGET_DIR" ]; then
          echo "Found existing installation in $CONDA_TARGET_DIR. Removing previous Anaconda installation..."
          rm -r "$CONDA_TARGET_DIR"
        else
          echo "No previous Anaconda installation found. Continuing..."
        fi
        pushd .
        cd installer/py${{ inputs.py_version }}
        set -o pipefail
        ./install.sh -p $CONDA_TARGET_DIR | tee $HOME/build_output_${{ inputs.py_version }}.txt
        exit_status=${PIPESTATUS[0]}
        popd
        source $CONDA_TARGET_DIR/bin/activate
        conda list 
        exit $exit_status

  test:
    name: Test Py3.8
    needs: build  # assures there is a build of ISF
    # Assure test runs on whatever runner the build ran on
    # Note that runners are requested based on label, not on name
    # So the runner should have a label equal to its name
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Restore cache for Anaconda environment
        uses: actions/cache@v3
        with:
          path: ${{ runner.tool_cache }}/anaconda_isf3.8
          key: ${{ runner.os }}-anaconda-3.8-${{ hashFiles('**/environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-anaconda-3.8-
      - name: Test in-silico-framework for Python 3.8
        run: |
          echo "------------ Setting up environment -------------"
          CONDA_TARGET_DIR="${{ runner.tool_cache }}/anaconda_isf3.8"
          source $CONDA_TARGET_DIR/bin/activate
          echo "Using Python: $(which python)"
          export PYTHONPATH=$(pwd):$HOME
          echo $PYTHONPATH

          echo "------------ Configuring Dask -------------"
          port_number=38786
          bokeh_port=38787
          echo "Launching Dask server on $name"
          echo "Using port $port_number and bokeh port $bokeh_port"

          export DASK_CONFIG=./config/dask_config.yml

          echo "------------ Running tests -------------"
          unset DISPLAY
          if [ ! -d "$HOME/tmp" ]; then
            mkdir $HOME/tmp
          fi
          export TMPDIR=$HOME/tmp
          mkdir -p ./tests/logs
          (dask-scheduler --port=$port_number --bokeh-port=$bokeh_port --host=localhost --preload="import mechanisms, compatibility"> ./tests/logs/dask_scheduler_${{ github.run_id }}.log 2>&1) & \
          (dask-worker localhost:$port_number --nthreads 1 --nprocs 10 --memory-limit=100e15 --local-directory="." > ./tests/logs/dask_workers_${{ github.run_id }}.log 2>&1) & \
          pytest -n 5 -rsx -vv --color=yes --durations=15 --cov-report xml:tests/logs/report_py38.xml --cov=. --dask_server_port $port_number tests || exit 1;

      - name: Cleanup dask orphan processes
        if: ${{ always() }}
        run: |
          pkill -U $USER dask-scheduler
          pkill -U $USER dask-worker

      - name: Save test logs as artifacts
        uses: actions/upload-artifact@v4
        if: ${{ always() }} 
        with:
          name: ${{ github.run_id }}_logs
          path: |
            ./tests/logs/

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./tests/logs/report_py38.xml
          verbose: true # optional (default = false)
      
