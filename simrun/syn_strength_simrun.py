'''
.. deprecated:: 0.1
    This module is deprecated and will be removed in a future release.
    It is kept around for reference, but all of this functionality is now
    handled by the :mod:`simrun.syn_strength_fitting` module.

:skip-doc:
'''

import sys
import time
import os.path
import numpy as np
import neuron
import single_cell_parser as scp
import single_cell_parser.analyze as sca
import matplotlib
from config.isf_logging import logger

matplotlib.use('agg')
import matplotlib.pyplot as plt
from single_cell_parser.network import activate_functional_synapse

h = neuron.h

__author__ = 'Robert Egger'
__date__ = '2012-08-06'

logger.warning('Deprecation warning: This module is deprecated and will be removed in a future release.')


def unitary_connections(modelName,
                        networkName,
                        scale_apical=lambda x: x,
                        dirPrefix='',
                        cell_generator=None):
    '''modelName, networkName: either paths to parametrfiles or sumatra.NTParameterSet objects'''
    if isinstance(modelName, str):
        neuronParameters = scp.build_parameters(modelName)
    else:
        neuronParameters = modelName
    if isinstance(networkName, str):
        nwParameters = scp.build_parameters(networkName)
    else:
        nwParameters = networkName

    ## loading mechanisms is now handeld by the mechanism module
    #scp.load_NMODL_parameters(nwParameters)
    #scp.load_NMODL_parameters(neuronParameters)
    cellParam = neuronParameters.neuron
    preParam = nwParameters.network

    if cell_generator is None:
        cell = scp.create_cell(cellParam, scaleFunc=scale_apical)
    else:
        print("cell is generated by cell_generator. cell_param is ignored!")
        cell = cell_generator()
    nwMap = scp.NetworkMapper(cell, preParam)
    ##nwMap.create_saved_network()
    nwMap.create_saved_network2()
    nwMap.re_init_network()
    #    for synType in cell.synapses.keys():
    #        for syn in cell.synapses[synType]:
    #            syn.releaseSite.turn_off()

    cellTypePrefix = list(nwMap.cells.keys())[0].split('_')[0]
    totalNrCells = 0
    for cellType in list(nwMap.cells.keys()):
        totalNrCells += len(nwMap.connected_cells[cellType])
        for syn in cell.synapses[cellType]:
            syn.disconnect_hoc_synapse()


##            syn.releaseSite.turn_off()

    uniqueID = str(os.getpid())
    dirName = os.path.join(
        dirPrefix, 'results', 'unitary_connections',
        cellTypePrefix + '_3x3/' + time.strftime('%Y%m%d-%H%M'))
    if not os.path.exists(dirName):
        os.makedirs(dirName)

    tStop = 150.0
    tOffset = 100.0
    neuronParameters.sim.tStop = tStop
    tTraces, vTraces = [], []
    for cellType in list(nwMap.cells.keys()):
        typeNrCells = len(nwMap.connected_cells[cellType])
        spikeTime = preParam[cellType].spikeT
        recepName = list(preParam[cellType].synapses.receptors.keys())[0]
        nmdaAmpaRatio = preParam[cellType].synapses.receptors[recepName].weight[
            1]
        gExRange = [0.5, 1.0, 1.5, 2.0]  # np.arange(1.6, 2.2, 0.2)
        #    gExRange = [1.0]

        for gEx in gExRange:
            gAMPA = gEx
            gNMDA = nmdaAmpaRatio * gAMPA
            print('-------------------------------')
            print('Testing synapses:')
            print('gAMPA = {:.2f} nS'.format(gAMPA))
            print('gNMDA = {:.2f} nS'.format(gNMDA))

            for syn in cell.synapses[cellType]:
                ##if syn.is_active():
                ##    syn.netcons[0].weight[0] = gAMPA
                ##    syn.netcons[0].weight[1] = gNMDA
                print('Setting synapse weight')
                syn.weight = {'glutamate_syn': [gAMPA, gNMDA]}

            synParameters = scp.NTParameterSet({
                'receptors': {
                    'glutamate_syn': {
                        'delay': 0.0,
                        'parameter': {
                            'decayampa': 0.5,
                            'decaynmda': 0.6
                        },
                        'threshold': 0.0,
                        'weight': [gAMPA, gNMDA]
                    }
                }
            })
            somaT, somaV, = [], []
            print('testing {:d} {:s} cells'.format(typeNrCells, cellType))
            cellID = 0
            for preSynCellID in nwMap.connected_cells[cellType]:
                print('testing cell %d  ({:d} of {:d})'.format(
                    preSynCellID, cellID + 1, typeNrCells))
                preSynCell = nwMap.cells[cellType][preSynCellID]
                for syn in preSynCell.synapseList:
                    activate_functional_synapse(
                        syn,
                        cell,
                        preSynCell,
                        synParameters,
                        releaseTimes=[tOffset + spikeTime])
                    syn
                    #syn.releaseSite.append(tOffset+spikeTime)
                    #syn.releaseSite.play()

                tVec = h.Vector()
                tVec.record(h._ref_t)
                scp.init_neuron_run(neuronParameters.sim)

                vmSoma = np.array(cell.soma.recVList[0])
                t = np.array(tVec)
                tTraces.append(t)
                vTraces.append(vmSoma)
                baseline = np.median(vmSoma[4360:4400])  # 1ms pre-stim
                vmSoma -= baseline
                tMax, vMax = sca.analyze_voltage_trace(vmSoma[4400:], t[4400:])
                if vMax > 0:
                    somaT.append(tMax)
                    somaV.append(vMax)

                print('v max = {:.2f}'.format(vMax))

                traceFName = dirName + '/AMPA_gmax_%.2f_NMDA_gmax_%.2f_celltype_%s_presyn_cell_%d_vm.csv' % (
                    gAMPA, gNMDA, cellType, cellID)
                write_sim_results(traceFName, t, vmSoma)

                for syn in preSynCell.synapseList:
                    syn.disconnect_hoc_synapse()
                ##   syn.releaseSite.turn_off()
                for sec in cell.sections:
                    sec._re_init_vm_recording()
                    sec._re_init_range_var_recording()
                cellID += 1

            print('-------------------------------')
            summaryFilename = dirName + '/AMPA_gmax_%.2f_NMDA_gmax_%.2f_celltype_%s_vmax.csv' % (
                gAMPA, gNMDA, cellType)
            with open(summaryFilename, 'w') as outputFile:
                header = '# %s cell ID\tV max soma\ttmax soma\n' % cellType
                outputFile.write(header)
                for i in range(len(somaT)):
                    line = '\t'.join((str(i + 1), str(somaV[i]), str(somaT[i])))
                    line += '\n'
                    outputFile.write(line)

            nwMap.re_init_network()
            for sec in cell.sections:
                sec._re_init_vm_recording()
                sec._re_init_range_var_recording()

    cell.re_init_cell()
    nwMap.re_init_network()

    plt.figure()
    for i in range(len(tTraces)):
        plt.plot(tTraces[i], vTraces[i], 'b')
    plt.show()

    neuronParameters.save(dirName + '/neuron_model.param')
    nwParameters.save(dirName + '/network_model.param')


def unitary_connections_inhibitory(modelName, networkName):
    neuronParameters = scp.build_parameters(modelName)
    nwParameters = scp.build_parameters(networkName)
    scp.load_NMODL_parameters(nwParameters)
    scp.load_NMODL_parameters(neuronParameters)
    cellParam = neuronParameters.neuron
    preParam = nwParameters.network

    cell = scp.create_cell(cellParam, scaleFunc=dendriteScalingUniform)
    nwMap = scp.NetworkMapper(cell, preParam)
    nwMap.create_saved_network()
    nwMap.re_init_network()
    for synType in list(cell.synapses.keys()):
        for syn in cell.synapses[synType]:
            syn.releaseSite.turn_off()

    cellType = list(nwMap.cells.keys())[0]
    totalNrCells = len(nwMap.connected_cells[cellType])

    uniqueID = str(os.getpid())
    dirName = 'results/unitary_connections_inhibitory/'
    dirName += cellType
    dirName += '/'
    dirName += time.strftime('%Y%m%d-%H%M')
    if not os.path.exists(dirName):
        os.makedirs(dirName)

    tStop = 100.0
    neuronParameters.sim.tStop = tStop
    #    gInhRange = [0.8+i*0.4 for i in range(3)]
    gInhRange = [30.0]
    tTraces, vTraces = [], []
    gTraces = []
    for gGABA in gInhRange:
        print('-------------------------------')
        print('Testing synapses:')
        print('gAMPA = {:.2f} nS'.format(gGABA))

        for syn in cell.synapses[cellType]:
            if syn.is_active():
                syn.netcons[0].weight[0] = gGABA

        somaT, somaV, = [], []
        print('testing {:d} {:s} cells'.format(totalNrCells, cellType))
        cellID = 0
        for preSynCellID in nwMap.connected_cells[cellType]:
            print('testing cell {:d}  ({:d} of {:d})'.format(
                preSynCellID, cellID + 1, totalNrCells))
            # depolarize so we can see the IPSP...
            currClamp = h.IClamp(cell.soma(0.5))
            currClamp.delay = 0
            currClamp.amp = 0.5
            currClamp.dur = 100.0
            preSynCell = nwMap.cells[cellType][preSynCellID]
            #            doesn't work anymore since we introduced release sites at synapses
            #            preSynCell.append(10.0)
            #            preSynCell.play()
            #            this works now:
            #            gVecs = []
            for syn in preSynCell.synapseList:
                syn.releaseSite.append(50.0)
                syn.releaseSite.play()
#                gVec = h.Vector()
#                gVec.record(syn.receptors['gaba_syn']._ref_ggaba)
#                gVecs.append(gVec)
            tVec = h.Vector()
            tVec.record(h._ref_t)
            scp.init_neuron_run(neuronParameters.sim)

            vmSoma = np.array(cell.soma.recVList[0])
            t = np.array(tVec)
            tTraces.append(t)
            vTraces.append(vmSoma)
            baseline = np.median(vmSoma[200:400])
            #            vmSoma -= baseline
            tMax, vMax = sca.analyze_voltage_trace(vmSoma[400:], t[400:])
            if vMax > 0:
                somaT.append(tMax)
                somaV.append(vMax)
#            for gVec in gVecs:
#                gTraces.append(np.array(gVec))
#                gVec.resize(0)

            print('v max = {:.2f}'.format(vMax))

            traceFName = dirName + '/GABA_gmax_%.2f_presyn_cell_%d_vm.csv' % (
                gGABA, cellID)
            write_sim_results(traceFName, t, vmSoma)

            #            doesn't work anymore since we introduced release sites at synapses
            #            preSynCell.turn_off()
            #            this works now:
            for syn in preSynCell.synapseList:
                syn.releaseSite.turn_off()
            for sec in cell.sections:
                sec._re_init_vm_recording()
                sec._re_init_range_var_recording()
            cellID += 1

        print('-------------------------------')
        #        summaryFilename = dirName + '/AMPA_gmax_%.2f_NMDA_gmax_%.2f_vmax.csv' % (gAMPA, gNMDA)
        #        with open(summaryFilename, 'w') as outputFile:
        #                header = '# %s cell ID\tV max soma\ttmax soma\n' % cellType
        #                outputFile.write(header)
        #                for i in range(len(somaT)):
        #                    line = '\t'.join((str(i+1), str(somaV[i]), str(somaT[i])))
        #                    line += '\n'
        #                    outputFile.write(line)

        nwMap.re_init_network()
        for sec in cell.sections:
            sec._re_init_vm_recording()
            sec._re_init_range_var_recording()

    cell.re_init_cell()
    nwMap.re_init_network()

    plt.figure(1)
    for i in range(len(tTraces)):
        plt.plot(tTraces[i], vTraces[i], 'b')


#    plt.figure(2)
#    for i in range(len(gTraces)):
#        plt.plot(tTraces[0], gTraces[i]+i, 'k')
#    plt.show()

    neuronParameters.save(dirName + '/neuron_model.param')
    nwParameters.save(dirName + '/network_model.param')


def write_syn_information(fname, synapses):
    for synType in list(synapses.keys()):
        activeSyns = []
        for syn in synapses[synType]:
            if syn.is_active():
                activeSyns.append(syn.coordinates)
        synTypeName = fname + '_' + synType
        scp.write_landmark_file(synTypeName, activeSyns)


def write_sim_results(fname, t, v):
    with open(fname, 'w') as outputFile:
        header = '# simulation results\n'
        header += '# t\tvsoma'
        header += '\n\n'
        outputFile.write(header)
        for i in range(len(t)):
            line = str(t[i])
            line += '\t'
            line += str(v[i])
            line += '\n'
            outputFile.write(line)

if __name__ == '__main__':
    modelName = sys.argv[1]
    nwName = sys.argv[2]
    unitary_connections(modelName, nwName)
#    unitary_connections_inhibitory(modelName, nwName)
