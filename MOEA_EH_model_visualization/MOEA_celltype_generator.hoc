/*********************************************
Template for generating celltype files given a template
and the information for a clone

Author: Shaul Druckmann Hebrew U October 2006

Modified by: Etay Hay, Hebrew University of Jerusalem, 2011
*********************************************/

begintemplate CelltypeGenerator
	objref source_file, target_file, base_bio_file
	objref full_string_list, bio_string_list, base_bio_string_list, parameter_vector

	objref variable_subset_list, variable_suffix_list, distribution_vector_list
	objref variable_parameter_list, insertion_list
	objref distribution_type_vector, channel_distribution_parameter_list, variable_to_channel_vector
	objref stro
	objref mc

	strdef str_1, str_2, source_file_name,target_file_name, base_bio_file_name
	strdef template_name,var_name,var_subset
	strdef ccellsection, csuffix, cparameter

	public create_celltype_file, set_files, set_parameters

	proc init()	{mc = $o1}

	proc set_files()	{
		source_file_name = $s1 //File to use as the general template
		base_bio_file_name = $s2 //File to use as the biohpysics template
		//template_name = ""

		full_string_list = new List()
		bio_string_list = new List()
		base_bio_string_list = new List()
		source_file = new File(source_file_name)
		base_bio_file = new File(base_bio_file_name)
		stro = new StringFunctions()

		read_source()
		read_base_bio()

		set_parameters()
	}

	proc set_parameters()	{
		distribution_type_vector = mc.get_channel_distribution_type_vector()
		channel_distribution_parameter_list = mc.get_channel_distribution_parameter_list()
		variable_to_channel_vector = mc.get_variable_to_channel_vector()
		variable_number = variable_to_channel_vector.size
		insertion_list = mc.get_insertion_list()
	}

	proc read_source()	{
		source_file.ropen()
		while(source_file.gets(str_1) >= 0)	{
			full_string_list.append(new String(str_1))
		}
		source_file.close()
	}

	proc read_base_bio()	{
			base_bio_file.ropen()
			while(base_bio_file.gets(str_1) >= 0)	{
				base_bio_string_list.append(new String(str_1))
			}
			base_bio_file.close()
	}

	proc output_model()	{local i localobj tmpfile
		sprint(str_1,"%s_%d.hoc",$s1,$2)
		tmpfile = new File(str_1)
		tmpfile.wopen()
		for (i=0;i<full_string_list.count;i=i+1)	{tmpfile.printf("%s",full_string_list.o(i).s)}
		tmpfile.close()
	}

	proc insert_new_biophys()	{local i,start_index,end_index
		end_index = -1
		start_index = -1
		for (i=0;i<full_string_list.count;i=i+1)	{
			sscanf(full_string_list.o(i).s, "%s",str_1)
			if (0 == strcmp(str_1,"proc"))	{
				sscanf(full_string_list.o(i).s, "%*s%s",str_2)
				if (0 == strcmp(str_2,"biophys()"))	{start_index =  i}
			}
		}
		if (start_index == -1)	{
			print "no biophys found"
			break
		}
		for (i=start_index;i<full_string_list.count;i=i+1)	{
			sscanf(full_string_list.o(i).s, "%s",str_1)
			if (0 == strcmp(str_1,"}"))	{
				//print "found end at ", i
				//print full_string_list.o(i).s
				end_index = i
				break
			}
		}
		if (end_index == -1)	{
			print "error reading file"
		}
		for (i=0;i<(end_index-start_index-1);i=i+1)	{full_string_list.remove(start_index+1)}

		for (i=0;i<bio_string_list.count;i=i+1)	{
			sprint(str_1,"	%s",bio_string_list.o(i).s)
			//full_string_list.insrt(start_index+1, bio_string_list.o(i))
			full_string_list.insrt(start_index+1, new String(str_1))
		}
		full_string_list.insrt(start_index+1,new String("\n"))
		for (i=base_bio_string_list.count-1;i>=0;i=i-1)	{
			sprint(str_1,"	%s",base_bio_string_list.o(i).s)
			//full_string_list.insrt(start_index+1, bio_string_list.o(i))
			full_string_list.insrt(start_index+1, new String(str_1))
		}
		//print "done inserting biophys"
	}

	proc adjust_name()	{local i, clone_index
		template_name = $s1
		clone_index = $2

		for (i=0;i<full_string_list.count;i=i+1)	{
			sscanf(full_string_list.o(i).s, "%s",str_1)
			if (0 == strcmp(str_1,"begintemplate"))	{
				sscanf(full_string_list.o(i).s, "%*s%s",str_2)
				sprint(full_string_list.o(i).s,"begintemplate %s_%d",template_name,clone_index)
				break
			}
		}
		for (i=0;i<full_string_list.count;i=i+1)	{
			sscanf(full_string_list.o(i).s, "%s",str_1)
			if (0 == strcmp(str_1,"endtemplate"))	{
				sscanf(full_string_list.o(i).s, "%*s%s",str_2)
				sprint(full_string_list.o(i).s,"endtemplate %s_%d",template_name,clone_index)
				break
			}
		}
	}

	proc create_celltype_file()	{
		generate_bio_string_list($o1)
		insert_new_biophys()
		adjust_name($s2,$3)
		output_model($s2,$3)
		print "clone created with index ", $3
	}

	proc generate_bio_string_list()	{local i
		bio_string_list.remove_all()
		parameter_vector = $o1.c
		add_channel_spreading()
		add_insertion_list()
	}

	proc add_insertion_list()	{local i
		for (i=0;i<insertion_list.count();i=i+1)	{
			//print "insertion list object is ", insertion_list.o(i).s
			sprint(str_1,"%s \n", insertion_list.o(i).s)
			bio_string_list.append(new String(str_1))
		}
	}

	proc add_channel_spreading()	{local i,base_value,distribution_type,cross localobj dvec
		csuffix =  mc.get_pol().o(i).get_string_parameter("ChannelSuffix").s
		ccellsection =  mc.get_pol().o(i).get_string_parameter("CellSection").s
		cparameter =  mc.get_pol().o(i).get_parameter_name.s

		for (i=0;i<variable_number;i=i+1)	{
			cross = variable_to_channel_vector.x[i]
			distrib_type = distribution_type_vector.x[cross]
			dvec = channel_distribution_parameter_list.o(cross).c
			value = parameter_vector.x[i]

			csuffix =  mc.get_pol().o(i).get_string_parameter("ChannelSuffix").s
			ccellsection =  mc.get_pol().o(i).get_string_parameter("CellSection").s
			cparameter =  mc.get_pol().o(i).get_parameter_name.s

			if (stro.substr(csuffix,"none") == -1)	{
				sprint(var_name,"%s_%s",cparameter, csuffix)
			}	else	{
				sprint(var_name,"%s",cparameter)
			}
				sprint(ccellsection,"\"%s\"", ccellsection)
				sprint(var_name,"\"%s\"", var_name)
				sprint(str_1,"distribute_channels(%s,%s,%d,%f,%f,%f,%f,%-5.10f) \n", ccellsection, var_name, distrib_type, dvec.x[0], dvec.x[1], dvec.x[2], dvec.x[3], value)

			bio_string_list.append(new String(str_1))
		}
		sprint(str_1,"\n")

		sprint(str_1,"hardcode_biophys() \n")

		bio_string_list.append(new String(str_1))
		//print "variables printed"
	}


	/*proc inject_set_parameters()	{local value,cross localobj assign_vec
		//print "setting parameters"
		assign_vec = $o1
		cross = 0
		//distribution_type_vector.printf()
		//print "channel distrib list length is ",channel_distribution_parameter_list.count()
		//assign_vec.printf()
		for (i=0;i<$o2.count;i=i+1)	{
			cross = variable_to_channel_vector.x[i]
			//print "cross is ", cross
			distrib_type = distribution_type_vector.x[cross]
			//print "here?"
			param_vector = channel_distribution_parameter_list.o(cross)
			//print "for ", $o3.o(i).s, "param vector is"
			//param_vector.printf()
			value = assign_vec.x[i]
			//print "in inject value is ", value
			//print "input is", $o2.o(i).s, " ", $o3.o(i).s, " ", $o4.o(i).s
			//print "in old s series ",$o2.o(i).s," ", $o3.o(i).s," ",$o4.o(i).s
			distribution_calc($o2.o(i).s,$o3.o(i).s,$o4.o(i).s,value,param_vector,distrib_type)
		}
		//print "old final condition"
		//psection()
	}*/

	//proc set_trace_save()	{save_trace = $1}

	//proc new_inject_set_parameters(/*Parameter vector,config object*/)	{local value,cross localobj assign_vec
	/*	assign_vec = $o1
		cross = 0
		//distribution_type_vector.printf()
		//print "channel distrib list length is ",channel_distribution_parameter_list.count()
		//assign_vec.printf()
		for (i=0;i<$o2.get_pol().count;i=i+1)	{
			cross = variable_to_channel_vector.x[i]
			//print "cross is ", cross
			distrib_type = distribution_type_vector.x[cross]
			param_vector = channel_distribution_parameter_list.o(cross)
			value = assign_vec.x[i]

			csuffix =  $o2.get_pol().o(i).get_string_parameter("ChannelSuffix").s
			ccellsection =  $o2.get_pol().o(i).get_string_parameter("CellSection").s
			cparameter =  $o2.get_pol().o(i).get_parameter_name.s
			//print "in new s series ", csuffix,  " ", cparameter ," ", ccellsection, value

			distribution_calc(ccellsection,cparameter,csuffix,value,param_vector,distrib_type)
		}
	}*/
endtemplate CelltypeGenerator
