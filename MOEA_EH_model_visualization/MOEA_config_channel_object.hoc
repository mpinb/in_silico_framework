/***************************************************************
* Template for multiple objective evolutionary algorithm in NEURON
* This template is part of the configuration.
* This template defines a channel object
*
*Author: Shaul Druckmann, Hebrew U, October 2007
*
*Modified by: Etay Hay, Hebrew University of Jerusalem, 2011
***************************************************************/

begintemplate ConfigChannel
	objref name, type, suffix, section, distribution
	objref np_name_list, np_value_vec
	strdef str_1
	
	public set_name, set_type, set_suffix, set_section, set_distribution,set_numerical_parameters
	public get_name, get_type, get_suffix, get_section, get_distribution,get_numerical_parameter
	
	proc init()	{
		name = new String()
		type = new String()
		suffix = new String()
		section =  new String()
		distribution = new String()
		np_name_list = new List()
		np_value_vec = new Vector()
	}
	
	proc set_name()	{name = new String($s1)}
	proc set_type()	{type = new String($s1)}
	proc set_suffix()	{suffix = new String($s1)}
	proc set_section()	{section = new String($s1)}
	proc set_distribution()	{distribution = new String($s1)}
	
	obfunc get_name()	{return name}
	obfunc get_type()	{return type}
	obfunc get_suffix()	{return suffix}
	obfunc get_section()	{return section}
	obfunc get_distribution()	{return distribution}
	
	proc set_numerical_parameters() {np_name_list = $o1	np_value_vec = $o2}
	
	func get_numerical_parameter()	{local i
		if (np_name_list.count == 0)	{print "No numerical parameters set"	return -1}
		for i=0, np_name_list.count-1	{
			if (strcmp($s1,np_name_list.o(i).s)==0)	{return np_value_vec.x[i]}
		}
		print "Parameter  ", $s1, " not found"	return -1
	}
	
endtemplate ConfigChannel
