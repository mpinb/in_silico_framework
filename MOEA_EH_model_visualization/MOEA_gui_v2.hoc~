/*****************************************************
*GUI to examine results of MOEA runs
*Author: Shaul Druckmann, Hebrew U, May 2006
*
*Modified by: Etay Hay, Hebrew University of Jerusalem, 2011
*****************************************************/

load_file("nrngui.hoc")

strdef central_file_name
central_file_name = "fit_config_86_CDK20041214_BAC_run9_StepFiring_run1.hoc"

strdef dir, fdir, sobj

dir = "."

proc l_f()	{
	sprint(fdir, "load_file(\"%s/%s\")",dir,$s1)
	execute(fdir)
}

//l_f("MOEA_reader.hoc")
l_f("MOEA_config_central_object.hoc")


// NEW COFIGURATION FILES
objref mc, mc_ramp

strdef gen_file, template_name
// gen_file = "fit_config.hoc"
gen_file = "fit_config_86_CDK20041214_BAC_run9_StepFiring_run1.hoc"
mc_ramp = new MOEAConfig(gen_file,dir)
mc_ramp.config_run()

// mc = new MOEAConfig("fit_config.hoc",dir)
mc = new MOEAConfig("fit_config_86_CDK20041214_BAC_run9_StepFiring_run1.hoc",dir)
mc.config_run()

proc set_config_parameters()	{local i localobj spnl, spvl, npnl,npvv
	mc.get_string_parameter_lists(spnl,spvl)
	for i=0, spnl.count-1	{
		sprint(sobj, "strdef %s", spnl.o(i).s)
		execute(sobj)
		sprint(sobj, "%s = \"%s\"", spnl.o(i).s, spvl.o(i).s)
		execute(sobj)
	}

	mc.get_numerical_parameter_lists(npnl,npvv)
	for i=0, npnl.count-1	{
		sprint(sobj, "%s = %f", npnl.o(i).s, npvv.x[i])
		execute(sobj)
	}

	objective_num = mc.get_objective_num()
	stim_num = mc.get_stimulus_num()
	gene_num = mc.get_pol.count()
	genome_size = gene_num //Used to be able to use binary GA need to revive that
	/*p_cross = mc.get_numerical_parameter("PCross")
	max_generation = mc.get_numerical_parameter("MaxGeneration")
	regen_frac = mc.get_numerical_parameter("RegenerationFraction")*/
}

set_config_parameters()
// NEW COFIGURATION FILES
// l_f("MOEA_creator.hoc")
l_f("MOEA_creator_v2.hoc")
l_f("MOEA_organism.hoc")
l_f("MOEA_genome.hoc")
l_f("MOEA_distance_calculator.hoc")
l_f("MOEA_evaluator.hoc")
l_f("MOEA_sorter.hoc")
l_f("MOEA_population.hoc")
l_f("MOEA_reporter.hoc")
l_f("MOEA_celltype_generator.hoc")
l_f("Trajectory_density_calculator.hoc")
l_f("viewer_config.hoc")

objref genome
objref organism[PopulationSize]
objref population
objref evaluator, ramp_evaluator
objref oe
objref reporter
objref pc
objref pass_genome_vector,take_vec
objref calculator
objref out_put
objref exp_trace_list
objref fl
objref ps
objref tdc
objref feature_name_list, feature_trace_list
objref sim_volt_list3, sim_volt_list2, sim_volt_list, sim_time_list
objref ramp_volt_list, ramp_time_list
objref ramp_graph_list, ramp_g
objref graph_list, g
objref exp_trace_list
objref temp_vec
objref error_matrix
objref biophys_list
objref target_trace_list, gen_trace_list
objref sorted_vector
objref par_vec, norm_par_vec, fit_vec
objref par_graph
objref tdc
objref feature_trace_list
objref cell_gen
objref par_target, fil, np
strdef exp_s

exp_trace_list = new List()
biophys_list = new List()
target_trace_list = new List()
gen_trace_list = new List()

temp_vec = new Vector()
sorted_vector = new Vector(PopulationSize)
par_vec = new Vector(gene_num)
norm_par_vec = new Vector(gene_num)
fit_vec = new Vector(objective_num)

par_graph = new Graph(0)

feature_trace_list = new List()

take_vec = new Vector(2)
graph_list = new List()
ramp_graph_list = new List()

pc = new ParallelContext()

tstop = 3000
dt = 0.025
exp_dt = 0.25
save_trace = 1
use_density = 0

//print "Creating cell"
// CreateNeuron(cell,"GAcell")
// CreateNeuron(cell,"GAcell_v2")
// CreateNeuron(cell,"GAcell_v3")
// CreateNeuron(cell,"GAcell_v4")
CreateNeuron(cell,"GAcell_v4_86_BAC_run9_index914_dend")
//CreateNeuron(cell,"Template")
// somaArea = 0.0
// forsec "soma" for (x) {somaArea += area(x)}
// apicalArea = 0.0
// forsec "apic" for (x) {apicalArea += area(x)}
// basalArea = 0.0
// forsec "dend" for (x) {basalArea += area(x)}
// axonArea = 0.0
// forsec "axon" for (x) {axonArea += area(x)}
// totalArea = 0.0
// forall for (x) {totalArea += area(x)}
// print "soma area = ", somaArea
// print "apical area = ", apicalArea
// print "dend area = ", basalArea
// print "axonal area = ", axonArea
// print "total area = ", totalArea
//HACK for setting up trajectory density calculation

proc density_calculation_setup()	{local i localobj so,sfnl,sftl
	so = new StringFunctions()
	tdc = new TrajectoryDensityCalculator()
	tdc.initial_setup()
	mc.get_stimulus_feature_lists(sfnl, sftl)
	for i=0, sfnl.count-1	{
		for j=0, sfnl.o(i).count-1	{
			if (so.substr(sfnl.o(i).o(j).s,"HMSE") != -1)	{
				tdc.add_target(mc.get_feature_trace(sfnl.o(i).o(j).s),500,3500,0.1)
				use_density = 2
			}
			if (so.substr(sfnl.o(i).o(j).s,"RMSE") != -1)	{
				tdc.add_target(mc.get_feature_trace(sfnl.o(i).o(j).s),0,3000,0.1)
				use_density = 1
			}

			if (so.substr(sfnl.o(i).o(j).s,"TRD") != -1)	{
				tdc.add_target(mc.get_feature_trace(sfnl.o(i).o(j).s),0,2300,0.1)
				use_density = 1
			}
		}
	}
}
/*proc density_calculation_setup()	{local i localobj so,sfnl,sftl
	so = new StringFunctions()
	tdc = new TrajectoryDensityCalculator()
	mc.get_stimulus_feature_lists(sfnl, sftl)
	for i=0, sfnl.count-1	{
		for j=0, sfnl.o(i).count-1	{
			if (so.substr(sfnl.o(i).o(j).s,"TD") != -1)	{
				print "in stim ", i ," feature ", j, " is ", sfnl.o(i).o(j).s
				feature_trace_list.append(mc.get_feature_trace(sfnl.o(i).o(j).s))
				use_density = 1
			}
		}
	}
	tdc.generate_target_list(feature_trace_list)
	tdc.setup_density_calculation(650,0.1,3000)
}

proc load_target_trace()	{}

proc density_calculation_setup_hack()	{
	tdc = new TrajectoryDensityCalculator()
}

/*proc density_calculation_setup_hack()	{
	feature_name_list
	for i=0, feature_name_list.count-1  {
		if (strcmp(feature_name_list.o(i).s,"trajectory_density") == 0)    {
			use_density = 1
			tdc = new TrajectoryDensityCalculator()
			for j=0, stimulus_repetition_vector.x[0]	{
				sprint(str_1,"%s/target_file_%d.txt",feature_path_list.o(i).s,i+1)
				feature_trace_list.append(new String(str_1))
			}
			tdc.generate_target_list(feature_trace_list)
			for j=0, 	stimulus_type_list.count-1{
				if (strcmp(stimulus_type_list.o(i).s,"Ramp") == 0)	{tdc.setup_density_calculation(0,0.1,1040)}
				if (strcmp(stimulus_type_list.o(i).s,"SquarePulse") == 0)	{tdc.setup_density_calculation(650,0.25,3000)}
			}

		}
	}
}*/

//density_calculation_setup()

calculator = new DistanceCalculator(mc,dir,TargetTracePath,tdc)

evaluator = new OrganismEvaluator(calculator,cell,mc,pc)
evaluator.autoref(evaluator)
evaluator.set_trace_save(1)
ramp_evaluator = new OrganismEvaluator(calculator,cell,mc_ramp,pc)
ramp_evaluator.autoref(ramp_evaluator)
ramp_evaluator.set_trace_save(1)

cell_gen = new CelltypeGenerator(mc)
// cell_gen.set_files("celltypes/GAcell.hoc","celltypes/base_bio.hoc")
// cell_gen.set_files("celltypes/GAcell_v2.hoc","celltypes/base_bio.hoc")
// cell_gen.set_files("celltypes/GAcell_v3.hoc","celltypes/base_bio.hoc")
// cell_gen.set_files("celltypes/GAcell_v4.hoc","celltypes/base_bio.hoc")
cell_gen.set_files("celltypes/GAcell_v4_86_BAC_run9_index914_dend.hoc","celltypes/base_bio.hoc")
ps = new ParetoSorter(pc)
ps.autoref(ps)

proc init_viewer()	{local i
	reporter = new Reporter(mc,dir)
	genome = new Genome(mc,0,dir)
	//genome.set_genome()
 	population = new Population(dir,RecordPath,genome.genome_mat,pc, evaluator, calculator,mc)

	for (i=0;i<PopulationSize;i=i+1)	{
		organism[i] = new Organism(gene_num,genome_size,BaseSeed + i,PMutate, objective_num)
		organism[i].create_random(genome.genome_mat)
		population.append_org(organism[i])
	}
	print "population file is ", PopulationFile
	if (strcmp(PopulationFile,"random") != 0) {population.load_population_from_file(PopulationFile,dir)}
	population.load_population_from_file(pop_file,dir)
	population.load_error_from_file(error_file)
	/*print "population is"
	population.print_pop()
	print "error is"
	population.print_error()*/
	//evaluator.set_pop(population)
}

init_viewer()

proc sort_organisms()	{local sort_objective
	sort_objective = $1
	sorted_vector = population.fitness_matrix.getcol(sort_objective).sortindex()
	//sorted_vector.printf()
}

proc bin_sort()	{local i,j,ind,max,min localobj std_vec, bin_vec, sort_vec, sum_vec, s_vec
	print "ran std sort"
	std_vec = new Vector()
	sum_vec = new Vector(PopulationSize)
	bin_vec = new Vector()
	sort_vec = new Vector(PopulationSize)
	s_vec = new Vector()

	for (i=0;i<PopulationSize;i=i+1)	{
		sum_vec.x[i] = population.fitness_matrix.getrow(i).sum
	}
	min = sum_vec.min
	max = sum_vec.max
	ind = 0
	for (i=min;i<max;i=i+1)	{
		//print "indeces from ", i, " to ", i+1
		bin_vec.indvwhere(sum_vec,"[)",i,i+1)
		//bin_vec.printf()
		std_vec.resize(bin_vec.size)
		for (j=0;j<bin_vec.size;j=j+1)	{
			std_vec.x[j] = population.fitness_matrix.getrow(j).stdev
		}
		//std_vec.printf()
		s_vec.resize(bin_vec.size)
		s_vec = std_vec.sortindex()
		for (j=0;j<bin_vec.size;j=j+1)	{
			sorted_vector.x[ind] = bin_vec.x[s_vec.x[j]]
			ind = ind + 1
		}
		//bin_vec.printf()
	}
	//sorted_vector.printf()
	print "Sorted by binning"
}

proc equal_sum_sort()	{local i localobj sum_vec
	print "ran equal sort"
	sum_vec = new Vector(PopulationSize)
	for (i=0;i<PopulationSize;i=i+1)	{
		sum_vec.x[i] = population.fitness_matrix.getrow(i).sum
	}
	sorted_vector = sum_vec.sortindex()
	//sorted_vector.printf()
}

proc std_sort()	{local i localobj std_vec
	print "ran std sort"
	std_vec = new Vector(PopulationSize)
	for (i=0;i<PopulationSize;i=i+1)	{
		std_vec.x[i] = population.fitness_matrix.getrow(i).stdev
	}
	sorted_vector = std_vec.sortindex()
	//sorted_vector.printf()
}

proc advance_by_sort()	{
	sorted_org_index = sorted_org_index+$1
	set_org_by_sort(sorted_org_index)
	refresh_objectives(org_index)
}

proc advance_by_index()	{
	org_index = org_index+$1
	refresh_objectives(org_index)
}

proc plot_parameters()	{local i
	par_graph.erase
	for (i=0;i<gene_num;i=i+1)	{
	//print "span is ", (genome.genome_mat.x[i][1]-genome.genome_mat.x[i][0])
	norm_par_vec.x[i] = abs($o1.x[i]-genome.genome_mat.x[i][0])/(genome.genome_mat.x[i][1]-genome.genome_mat.x[i][0])
	}
	for	(i=0; i<gene_num; i=i+1)	{par_graph.mark(i, norm_par_vec.x[i],"o",6)}
	//g.yaxis(ystart, ystop, ypos, ntic, nminor, invert, shownumbers)
	par_graph.xaxis(0, gene_num + 1, 0, gene_num + 1, 0, 0, 1)
	par_graph.flush()
	//plot_genome_distance($o1)
}
proc plot_genome_distance() {local i
	par_target = new Vector()
	fil = new File("Safe_genome.txt")
	fil.ropen
	par_target.scanf(fil)
	fil.close
	np = new Vector(par_target.size)

	par_graph.erase
	for (i=0;i<gene_num;i=i+1)	{
	//print "span is ", (genome.genome_mat.x[i][1]-genome.genome_mat.x[i][0])
	norm_par_vec.x[i] = abs($o1.x[i]-genome.genome_mat.x[i][0])/(genome.genome_mat.x[i][1]-genome.genome_mat.x[i][0])
	}
	for	(i=0; i<gene_num; i=i+1)	{par_graph.mark(i, norm_par_vec.x[i],"o",6)}
	/*for (i=0;i<gene_num;i=i+1)	{
		np.x[i] = abs(par_target.x[i]-genome.genome_mat.x[i][0])/(genome.genome_mat.x[i][1]-genome.genome_mat.x[i][0])
	}
	for	(i=0; i<gene_num; i=i+1)	{par_graph.mark(i, np.x[i],"+",6)}*/
	for (i=0;i<gene_num;i=i+1)	{
		np.x[i] = abs(par_target.x[i]-$o1.x[i])*100/par_target.x[i]
	}
	for	(i=0; i<gene_num; i=i+1)	{par_graph.mark(i, np.x[i],"+",10,2,1)}
	//g.yaxis(ystart, ystop, ypos, ntic, nminor, invert, shownumbers)
	par_graph.flush()
	//par_graph.exec_menu("View = plot")
	par_graph.xaxis(0, gene_num + 1, 0, gene_num + 1, 0, 0, 1)
	par_graph.yaxis(-10, 10, -10, 10, 0, 0, 1)
	//par_graph.yaxis(-10,10)
}

proc show_parameters()	{
	/*xpanel("Parameters")
	for (i=0;i<variable_parameter_list.count;i=i+1)	{
		xbutton(variable_parameter_list.o(i).s)
	}
	xpanel(930,325)*/
}

proc display_organism_result()	{local i,sum,i1 localobj loc_err_mat, local_list
	local_list = new List()

	org_index = $1
	local_list.append(organism[org_index])
	loc_err_mat = new Matrix(stim_num,objective_num)
	print "expected genome was"
	population.breed_matrix.getrow(org_index).printf()
	evaluator.clear_trace_lists()
	graph_list.remove_all()
	//print "error before was"
	//organism[org_index].pass_fitness_vec.printf
	evaluator.evaluate_population(local_list)
    
    
// forsec "soma" psection()
// "soma" distance()
// forsec "apic" {
//     print "distance 0.0 = ", distance(0.0)
//     print "distance 0.5 = ", distance(0.5)
//     print "distance 1.0 = ", distance(1.0)
//     psection()
//     for (x) {
//         print "x = ", x
//         print "distance(x) = ", distance(x)
//         print "Ih gbar = ", gIhbar_Ih(x)
//         print "should be = ", (0.0002*(-0.8696 + 2.0870*exp(3.6161*distance(x)/1576.5529)))
//     }
// }
// forsec "dend" {
//     print "distance 0.0 = ", distance(0.0)
//     print "distance 0.5 = ", distance(0.5)
//     print "distance 1.0 = ", distance(1.0)
//     psection()
//     for (x) {
//         print "x = ", x
//         print "Ih gbar = ", gIhbar_Ih(x)
//     }
// }
// forsec "axon" {
//     print "distance 0.0 = ", distance(0.0)
//     print "distance 0.5 = ", distance(0.5)
//     print "distance 1.0 = ", distance(1.0)
//     psection()
// }
    
	print "error after was"
	organism[org_index].pass_fitness_vec.printf
	sum = organism[org_index].pass_fitness_vec.sum()
	print "expected error was"
	population.fitness_matrix.getrow(org_index).printf()
	print "Sum of error is ", sum
	sim_volt_list =  evaluator.pass_sim_volt()
	//sim_volt_list2 =  evaluator.pass_sim_volt2()
	//sim_volt_list3 =  evaluator.pass_sim_volt3()
	sim_time_list =  evaluator.pass_sim_time()
	//print "sim volt list count is ", sim_volt_list.count
	//sim_volt_list.o(0).sub(sim_volt_list.o(1)).printf()
	pt = 0
	if (pt == 1 && target_trace_list.count == 0)	{print "Display target traces selected yet no traces loaded"	return}
	print "count of target trace list is ", target_trace_list.count
	for (i=0;i<sim_volt_list.count;i=i+1)	{
		g = new Graph(0)
		g.view(1,1,1,1,0, 325*i,400, 250)
		for (i1=0;i1<sim_volt_list.o[i].count();i1+=1){
      sim_volt_list.o(i).o[i1].plot(g,sim_time_list.o(i),i1+1,1)
  		//sim_volt_list2.o(i).plot(g,sim_time_list.o(i),2,1)
  		//sim_volt_list3.o(i).plot(g,sim_time_list.o(i),3,1)
  	}
    if (pt == 1 && i < 3)	{target_trace_list.o(i).plot(g,exp_dt,3,1)}
 
		//calculator.get_exp_trace(i).plot(g,0.25,3,1)
		g.exec_menu("View = plot")
		g.flush()
		graph_list.append(g)
	}

}

proc set_template_name()	{string_dialog("Enter name for template", template_name)}

proc generalization_check()	{local i localobj local_list
	print "Checking generalization"
	org_index = $1
	local_list = new List()
	local_list.append(organism[org_index])

	ramp_graph_list.remove_all()
	ramp_evaluator.clear_trace_lists()

	ramp_evaluator.evaluate_population(local_list)
	ramp_volt_list =  ramp_evaluator.pass_sim_volt()
	ramp_time_list =  ramp_evaluator.pass_sim_time()

	print "expected genome was"
	population.breed_matrix.getrow(org_index).printf()

	print "Generalization error is"
	organism[org_index].pass_fitness_vec.printf

	sum = organism[org_index].pass_fitness_vec.sum()
	print "Sum of generalization error is ", sum
	pt = 1
	exp_dt = 0.1
	//sim_volt_list.o(0).sub(sim_volt_list.o(1)).printf()
	for (i=0;i<ramp_volt_list.count;i=i+1)	{
		print "i is ", i
		ramp_g = new Graph(0)
		ramp_g.view(1,1,1,1,0, 325*i,400, 250)
		ramp_volt_list.o(i).plot(ramp_g,ramp_time_list.o(i),2,1)

		if (pt == 1)	{gen_trace_list.o(i).plot(ramp_g,exp_dt,3,1)}
		//target_trace_list.o(i).plot(g,0.25,3,1)
		//calculator.get_exp_trace(i).plot(g,0.25,3,1)
		ramp_g.exec_menu("View = plot")
		ramp_g.flush()
		ramp_graph_list.append(ramp_g)
	}
}

proc load_target_traces()	{local i localobj temp_vec,fileref, os
	target_trace_list.remove_all()
	print "stim num is", stim_num
	os = new String()
	//string_dialog("Enter training voltage and time base file name", os.s)
	//os.s = "BestAD_target_ramp"
	os.s = "L5PC_target_step"
	//for i=0, stim_num-1	{
	for i=0, 3	{
		sprint(exp_s,"%s/%s_%d.txt",dir,os.s,i)
		temp_vec = new Vector()
		fileref = new File(exp_s)
		fileref.ropen
		temp_vec.scanf(fileref)
		fileref.close
		target_trace_list.append(temp_vec)
		//gen_trace_list.append(temp_vec)
	}

	//gen_trace_list.remove_all()
	//string_dialog("Enter generalization voltage and time base file name", os.s)
	os.s = "L5PC_target_step"
	//os.s = "BestAD_target_step"
	gn = 4
	for i=0, gn-1	{
	//for i=3, 3	{
		sprint(exp_s,"%s/%s_%d.txt",dir,os.s,i)
		temp_vec = new Vector()
		fileref = new File(exp_s)
		fileref.ropen
		temp_vec.scanf(fileref)
		fileref.close
		gen_trace_list.append(temp_vec)
		//target_trace_list.append(temp_vec)
	}

	print i," files loaded successfuly"
}

proc output_traces()	{local i,j localobj os,ot,m,f
	i = $1
	i = 0
	os = new String()
	ot = new String()
	string_dialog("Enter voltage and time base file name", os.s)
	//os = new String("Arf")
	print "Voltage file is ", ot.s
	display_organism_result(org_index)
	generalization_check(org_index)
	m = new Matrix()
	for j=0, sim_volt_list.count-1	{
		m.resize(sim_volt_list.o(j).size,2)
		m.setcol(0,sim_volt_list.o(j))
		m.setcol(1,sim_time_list.o(j))
		sprint(ot.s,"%s_sim_train_%d.txt",os.s,j)
		f = new File(ot.s)
		f.wopen
		m.fprint(0,f,"%-6.6g ")
		f.close

		sprint(ot.s,"%s_exp_train_%d.txt",os.s,j)
		f = new File(ot.s)
		f.wopen
		target_trace_list.o(j).printf(f,"%-6.6g\n")
		f.close
	}
	for j=0, ramp_volt_list.count-1	{
		m.resize(ramp_volt_list.o(j).size,2)
		m.setcol(0,ramp_volt_list.o(j))
		m.setcol(1,ramp_time_list.o(j))
		sprint(ot.s,"%s_sim_gen_%d.txt",os.s,j)
		f = new File(ot.s)
		f.wopen
		m.fprint(0,f,"%-6.6g ")
		f.close

		sprint(ot.s,"%s_exp_gen_%d.txt",os.s,j)
		f = new File(ot.s)
		f.wopen
		gen_trace_list.o(j).printf(f,"%-6.6g\n")
		f.close
	}
}


proc output_gen_error()	{local i,onum,ps localobj of, m, local_list
	onum = mc_ramp.get_objective_num()
	ps = PopulationSize
	m = new Matrix(ps,onum)
	for i=0, ps-1	{
		local_list = new List()
		local_list.append(organism[i])
		ramp_evaluator.evaluate_population(local_list)
		m.setrow(i,organism[i].pass_fitness_vec.c)
		print "Done calculating generalization on org number ", i
	}
	print "gen mat is"
	m.printf()
	print "printing into file"
	of = new File("gen_error.txt")
	of.wopen
	m.fprint(of)
	of.close
}

proc set_org_by_sort()	{
	org_index = sorted_vector.x[$1]
	refresh_objectives(org_index)
}

proc refresh_objectives()	{
	fit_vec = population.fitness_matrix.getrow(org_index)
	par_vec = population.breed_matrix.getrow(org_index)
	plot_parameters(par_vec)
}

strdef gstr_1,gstr_2, gstr_3

proc display_gui()	{
	fit_vec = population.fitness_matrix.getrow(org_index)
	sorted_org_index = 0
	org_index = 0
	sort_objective = 0
	xpanel("Population Sorting")
	xvalue("Sort by objective", "sort_objective")
	xvalue("Sorted organism index", "sorted_org_index")
	xbutton("Sort by bining", "bin_sort()")
	xbutton("Sort by equal summing", "equal_sum_sort()")
	xbutton("Sort by std", "std_sort()")
	xbutton("Sort population by objective", "sort_organisms(sort_objective)")
	xbutton("Set current organism to sorted index", "set_org_by_sort(sorted_org_index)")
	xbutton("Advance one organism according to sort", "advance_by_sort(1)")
	xbutton("Go back one organism according to sort", "advance_by_sort(-1)")
	xpanel(500,0)

	xpanel("Organism Viewer")
	xvalue("Organism index", "org_index")
	print "take_vec is "
	take_vec.printf()
    for (i=0;i<5;i=i+1) {
// 	for (i=0;i<objective_num;i=i+1)	{
		sprint(gstr_1," Objective num %d error", i)
		sprint(gstr_2,"fit_vec.x[%d]",i)
		xvalue(gstr_1,gstr_2)
	}
	xbutton("Advance one organism according to index", "advance_by_index(1)")
	xbutton("Go back one organism according to index", "advance_by_index(-1)")
	xbutton("Apply original stimulus to Organism", "display_organism_result(org_index)")
	xbutton("Refresh Objectives","refresh_objectives(org_index)")
	xbutton("Apply generalizarion stimulus to Organism", "generalization_check(org_index)")
	xbutton("Output generalization error", "output_gen_error()")
	xpanel(1000,0)

	clone_index = 0
	xpanel("Organism output")
	xbutton("Load target traces", "load_target_traces()")
	xvalue("Organism index", "org_index")
	xvalue("Clone index", "clone_index")
	xbutton("Set clone template name","set_template_name()")
	xbutton("Save Current Organism as Clone", "cell_gen.create_celltype_file(population.breed_matrix.getrow(org_index),template_name,clone_index)")
	xbutton("Output current organism traces", "output_traces(org_index)")
	xpanel(750,0)
	par_graph.view(0,0,gene_num+1,1,500, 325,400, 250)
	show_parameters()
}

display_gui()
load_target_traces()
