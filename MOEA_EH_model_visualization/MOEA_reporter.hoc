begintemplate Reporter

	objref best_organism_mat,best_organism,var_names
	objref trace_save_file, organism_save_mat, error_save_mat, sequential_file
	objref clean_pop_file, clean_error_file 
	objref mc, pol
	strdef record_path, str_1, str_2, dir
	public record_maximal_organism,print_maximal_organism
	public record_minimal_organism,print_final_minimal_organism
	public print_best_matrix,print_current_minimal_organism
	public print_organism_files,print_single_organism
	public save_final_minimal_organism_trace,create_record_directory
	public create_best_organism_file,create_population_error_file,create_population_genome_file
	public pass_best_organism
	public create_clean_files
	//public update_sequential_population_file
	
	proc init()	{
		mc = $o1
		dir = $s2
		
		set_config_parameters()
		create_record_directory()

//		sprint(str_1,"%s/%s/sequential_population_genome_file.txt",dir,record_path)
//		sequential_file = new File(str_1)
//		sequential_file.wopen()
//		sequential_file.close()
//		sprint(str_1,"%s/%s/sequential_population_error_file.txt",dir,record_path)
//		sequential_file = new File(str_1)
//		sequential_file.wopen()
//		sequential_file.close()
		sprint(str_1,"%s/%s/clean_population_file.txt",dir,record_path)
		clean_pop_file = new File(str_1)
		sprint(str_1,"%s/%s/clean_error_file.txt",dir,record_path)
		clean_error_file = new File(str_1)
		
		best_organism_mat = new Matrix(generation_number,genome_size+1)
		best_organism = new Vector()
		organism_save_mat = new Matrix(pop_size,genome_size)
		error_save_mat = new Matrix(pop_size,objective_num)
		
	}
	/*****************************************************************
	// Procedure that updates parameters from the GA configuration	
	/****************************************************************/
	
	proc set_config_parameters()	{localobj st
		st = new String()
		pol = mc.get_pol()
		genome_size = pol.count()
		pop_size =  mc.get_numerical_parameter("PopulationSize")
		objective_num = mc.get_objective_num()
		stim_num = mc.get_stimulus_num()
		p_cross = mc.get_numerical_parameter("PCross")
		generation_number = mc.get_numerical_parameter("MaxGeneration")
		regen_frac = mc.get_numerical_parameter("RegenerationFraction")
		base_seed = mc.get_numerical_parameter("BaseSeed")
		st =  mc.get_string_parameter("RecordPath")
		sprint(record_path, "%s_seed_%d", st.s, base_seed)
		print "record path is ", record_path
		//record_path = mc.get_string_parameter("RecordPath").s
		//*****var_names
		var_names = new List()
		for i=0, pol.count-1	{
			var_names.append(new String(pol.o(i).get_name().s))
		}

	}

	
	proc record_maximal_organism()	{local max,max_index,generation localobj temp_vec
		temp_vec = new Vector()
		generation = $1
		max_index = $o2.pass_maximal_fitness_index()
//		print "max index is", max_index
		temp_vec = $o2.org_list.o(max_index).pass_genome().c
		temp_vec.append($o2.pass_maximal_fitness())
		best_organism_mat.setrow(generation,temp_vec)
//		print "vector recorded is"
//		temp_vec.printf()
	}

	proc print_maximal_organism()	{local index
		index = best_organism_mat.getcol(genome_size).indwhere("==",best_organism_mat.getcol(genome_size).max)
		print "optimal organism was"
		best_organism_mat.getrow(index).printf()
	}

	proc record_minimal_organism()	{local min_index,generation localobj temp_vec
			temp_vec = new Vector()
			generation = $1
			min_index = $o2.pass_minimal_fitness_index()
	//		print "max index is", max_index
			temp_vec = $o2.org_list.o(min_index).pass_genome().c
			temp_vec.append($o2.pass_minimal_fitness())
			best_organism_mat.setrow(generation,temp_vec)
	//		print "vector recorded is"
	//		temp_vec.printf()
		}

	proc print_current_minimal_organism()	{local index,cur_gen
		cur_gen = $1
		print "in generation ",cur_gen, "best organism was"
		best_organism_mat.getrow(cur_gen).printf()
	}
	
	proc print_final_minimal_organism()	{local index
		index = best_organism_mat.getcol(genome_size).indwhere("==",best_organism_mat.getcol(genome_size).min)
		print "optimal organism was"
		best_organism_mat.getrow(index).printf()
	}
	
	proc create_best_organism_file()	{local index,error localobj best_org_genome,fileobj
		index = best_organism_mat.getcol(genome_size).indwhere("==",best_organism_mat.getcol(genome_size).min)
		best_org_genome = best_organism_mat.getrow(index).c
		error = best_org_genome.x[best_org_genome.size()-1]
		best_org_genome.remove(best_org_genome.size()-1)
		
		sprint(str_2,"%s/%s/best_organism.txt",dir,record_path)
		fileobj = new File(str_2)
		print_single_organism(best_org_genome,fileobj,error,base_seed)
		//sprint(s2,"%d_results/%d_results_%d_vector",base_seed,base_seed,i)
		//fileobj = new File(s2)
		//print_organism_vector($o1.o(i).pass_genome(),fileobj)
		print "best organism file created"
	}
	
	proc save_final_minimal_organism_trace()	{local i,index localobj g_vec,trace_vec
		index = best_organism_mat.getcol(genome_size).indwhere("==",best_organism_mat.getcol(genome_size).min)
		g_vec = best_organism_mat.getrow(index).c
		g_vec.remove(g_vec.size()-1)
		g_vec.printf()
		for   (i=0;i<trace_num;i=i+1)	{
			sprint(string1,"%s/%d_last_trace_%d.txt",dir,base_seed,i)
			trace_save_file = new File(string1)
			trace_vec = $o1.pass_trace_evaluate_genome(g_vec,i)
			trace_save_file.wopen()
			trace_vec.printf(trace_save_file)
			trace_save_file.close()
		}
		print "seed was", base_seed
	}
	
	proc print_best_matrix()	{
		print "best matrix is"
		best_organism_mat.printf("%8.4f")
	}
	
	proc dump_population_matrix()	{local i,generation_num
		generation_num = $3
		$o2.printf("\n at generation %d population was: \n",generation_num)
		//print "got to genome"
		for (i=0;i<$o1.count;i=i+1)	{organism_save_mat.setrow(i,$o1.o(i).pass_genome)}
		organism_save_mat.fprint($o2)
	}
	
	proc dump_error_matrix()	{local i,generation_num
		generation_num = $3
		$o2.printf("\n at generation %d error matrix was: \n", generation_num)
		//print "got to fitness"
		//for (i=0;i<$o1.count;i=i+1)	{$o1.o(i).pass_fitness_vec.printf($o2)}
		for (i=0;i<$o1.count;i=i+1)	{error_save_mat.setrow(i,$o1.o(i).pass_fitness_vec)}
		error_save_mat.fprint($o2)
	}
	
	proc create_population_file()	{local i,generation_num localobj fileobj
		generation_num = $2
		
		sprint(str_1,"%s/%s/population.txt",dir,record_path)
		fileobj = new File(str_1)
		fileobj.wopen()
		fileobj.printf("base_seed=%d \n",base_seed)
		fileobj.printf("\n parameters for this run were: \n")
		for (i=0;i<var_names.count;i=i+1)	{fileobj.printf("%s \n",var_names.o(i).s)}
		fileobj.printf("\n at generation %d population was: \n",generation_num)
		//print "got to genome"
		for (i=0;i<$o1.count;i=i+1)	{organism_save_mat.setrow(i,$o1.o(i).pass_genome)}
		organism_save_mat.fprint(fileobj)
		fileobj.printf("\n Error matrix was \n")
		//print "got to fitness"
		for (i=0;i<$o1.count;i=i+1)	{error_save_mat.setrow(i,$o1.o(i).pass_fitness_vec)}
		error_save_mat.printf(fileobj)
		fileobj.close()
		
		print "done printing population file"
	}
	
	proc create_population_genome_file()	{local i,option,generation_num localobj fileobj
		generation_num = $2
		option = $3
		
		if (option == 0)	{
			sprint(str_1,"%s/%s/population_genome_file.txt",dir,record_path)
			fileobj = new File(str_1)
			fileobj.wopen()
		}
		if (option == 1)	{
			sprint(str_1,"%s/%s/sequential_population_genome_file.txt",dir,record_path)
			fileobj = new File(str_1)
			fileobj.aopen()
		}
		
		fileobj.printf("base_seed=%d \n",base_seed)
		fileobj.printf("\n parameters for this run were: \n")
		for (i=0;i<var_names.count;i=i+1)	{fileobj.printf("%s \n",var_names.o(i).s)}
		dump_population_matrix($o1,fileobj,generation_num)
		fileobj.printf("mat_end")
		fileobj.printf("\n --------------------------- \n")
		fileobj.close()
		
		print "done printing population genome file"
	}
	
	proc create_population_error_file()	{local i,option,generation_num localobj fileobj
		generation_num = $2
		option = $3
		
		if (option == 0)	{
			sprint(str_1,"%s/%s/population_error_file.txt",dir,record_path)
			fileobj = new File(str_1)
			fileobj.wopen()
		}
		if (option == 1)	{
			sprint(str_1,"%s/%s/sequential_population_error_file.txt",dir,record_path)
			fileobj = new File(str_1)
			fileobj.aopen()
			
		}
		
		fileobj.printf("base_seed=%d \n",base_seed)
		fileobj.printf("\n parameters for this run were: \n")
		for (i=0;i<var_names.count;i=i+1)	{fileobj.printf("%s \n",var_names.o(i).s)}
		dump_error_matrix($o1,fileobj,generation_num)
		fileobj.printf("mat_end")
		fileobj.printf("\n --------------------------- \n")
		fileobj.close()
		
		print "done printing population error file"
	}
	
	obfunc pass_best_organism()	{local index localobj temp_vec
		index = best_organism_mat.getcol(genome_size).indwhere("==",best_organism_mat.getcol(genome_size).min)
		temp_vec = best_organism_mat.getrow(index).c
		temp_vec.remove(temp_vec.size()-1)
		return temp_vec
	}	
	
	
	/*****************************************************************
	// It is a good idea to have NEURON create the directory. Unfortunately
	// system commands are not usable on the BG and it has to be done
	// by script
	/****************************************************************/
	
	proc create_record_directory()	{
		//sprint(str_1,"mkdir %s",record_path)
		//{system(str_1)}
		/*sprint(str_2,"fit_config.hoc")
		sprint(str_1,"cp %s %s/%s", str_2,record_path,str_2)
		{system(str_1)}
		sprint(str_2,"fit_features.hoc")
		sprint(str_1,"cp %s %s/%s", str_2,record_path,str_2)
		{system(str_1)}
		sprint(str_2,"fit_channels.hoc")
		sprint(str_1,"cp %s %s/%s", str_2,record_path,str_2)
		{system(str_1)}*/
	}
	
	proc print_organism_vector()	{
		$o2.wopen()
		$o1.vwrite($o2)
		$o2.close()
	}

	proc print_single_organism()	{local i,value,fitness,base_seed localobj genome_vector,fileobj
		genome_vector = $o1.c
		fileobj = $o2
		error = $3
		base_seed = $4
		
		fileobj.wopen()
		fileobj.printf("base_seed=%d",base_seed) 
		fileobj.printf("\n")
		fileobj.printf("error=%f",error)
		fileobj.printf("\n")
		
		for (i=0;i<genome_vector.size();i=i+1)	{
			value = genome_vector.x[i]
			sprint(str_1,"%s=%f",var_names.o(i).s,value)
			fileobj.printf("%s",str_1)
			fileobj.printf("\n")
		}
		fileobj.close()
	}
	
	proc create_clean_files()	{local i
		
		clean_pop_file.wopen()
		for (i=0;i<$o1.count;i=i+1)	{organism_save_mat.setrow(i,$o1.o(i).pass_genome)}
		organism_save_mat.fprint(clean_pop_file)
		clean_pop_file.close
		
		clean_error_file.wopen()
		for (i=0;i<$o1.count;i=i+1)	{error_save_mat.setrow(i,$o1.o(i).pass_fitness_vec)}
		error_save_mat.fprint(clean_error_file)
		clean_error_file.close()
	}
		
endtemplate Reporter
