/***************************************************************
* Template for multiple objective evolutionary algorithm in NEURON
* This template is part of the configuration.
* This template defines an objective object
*
*Author: Shaul Druckmann, Hebrew U, October 2007
*
*Modified by: Etay Hay, Hebrew University of Jerusalem, 2011
***************************************************************/

begintemplate ConfigObjective
	objref name, type, np_name_list, np_value_vec, sp_name_list, sp_value_list
	strdef str_1
	public set_name, set_type,  set_stimulus, set_numerical_parameters, set_string_parameters
	public get_numerical_parameter, get_string_parameter, get_string_parameter_value_list
	proc init()	{
		name = new String()
		type = new String()

		np_name_list = new List()
		np_value_vec = new Vector()
		sp_name_list = new List()
		sp_value_list  = new List()
	}
	
	proc set_name()	{name = new String($s1)}
	proc set_type()	{type = new String($s1)}
	proc set_numerical_parameters() {np_name_list = $o1	np_value_vec = $o2}
	proc set_string_parameters() {sp_name_list = $o1	sp_value_list = $o2}
	
	func get_numerical_parameter()	{local i
		if (np_name_list.count == 0)	{print "No numerical parameters set"	return -1}
		for i=0, np_name_list.count-1	{
			if (strcmp($s1,np_name_list.o(i).s)==0)	{return np_value_vec.x[i]}
		}
		print "Parameter ", $s1, " not found"	return -1
	}
	
	obfunc get_string_parameter()	{local i
		if (sp_name_list.count == 0)	{print "No string parameters set"	return new String("")}
		for i=0, sp_name_list.count-1	{
			//print "Parameter is ", sp_name_list.o(i)
			if (strcmp($s1,sp_name_list.o(i).s)==0)	{return sp_value_list.o(i)}
		}
		print "Parameter ", $s1, " not found"	return new String("")
	}
	
	obfunc get_string_parameter_value_list()	{return sp_value_list}
endtemplate ConfigObjective
