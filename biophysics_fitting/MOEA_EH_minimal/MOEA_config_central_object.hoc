/***************************************************************
* Template for multiple objective evolutionary algorithm in NEURON
* This template is part of the configuration.
* This template defines the central object
*
*Author: Shaul Druckmann, Hebrew U, October 2007
*
*Modified by: Etay Hay, Hebrew University of Jerusalem, 2011
***************************************************************/

load_file("MOEA_parser_functions.hoc")
load_file("MOEA_config_channel_object.hoc")
load_file("MOEA_config_stimulus_object.hoc")
load_file("MOEA_config_feature_object.hoc")
load_file("MOEA_config_objective_object.hoc")
load_file("MOEA_config_parameter_object.hoc")

begintemplate MOEAConfig
	public config_run
	public get_pol, get_string_parameter, get_string_parameter_lists, get_numerical_parameter, get_numerical_parameter_lists
	public get_stimulus_num, get_objective_num, get_stimulus_feature_lists
	public get_objective_string_parameter_list, get_parameter_bound_list
	public get_pol, get_sol
	public get_insertion_list, get_run_parameter_num
	public get_channel_distribution_type_vector, get_channel_distribution_parameter_list
	public get_variable_to_channel_vector, get_feature_statistics_list
	public get_feature_weight, get_feature_trace

	objref f,pf,nl
	objref bvec
	objref sp_name_list, sp_value_list, np_name_list, np_value_vec
	objref config_path
	objref central_file_name, channel_file_name, stimulus_file_name, feature_file_name, objective_file_name, parameter_file_name
	objref channel_object_list, stimulus_object_list, feature_object_list, objective_object_list, parameter_object_list

	strdef parser_string
  strdef masterdir,absname
  
	proc init()	{
		masterdir=$s2
    central_file_name = new String($s1)
		set_objects()
	}

	proc set_objects()	{
		pf = new ParserFunctions()
		f = new File()
		nl = new List()
		sp_name_list = new List()
		sp_value_list = new List()
		np_name_list = new List()
		channel_object_list = new List()
		stimulus_object_list = new List()
		feature_object_list = new List()
		objective_object_list = new List()
		parameter_object_list = new List()

		np_value_vec = new Vector()
		bvec = new Vector()
		config_path = new String("")
		channel_file_name = new String("")
		stimulus_file_name = new String("")
		feature_file_name = new String("")
		objective_file_name = new String("")
		parameter_file_name = new String("")
	}

	proc config_run()	{local i
		parse_central_file(central_file_name)
		set_secondary_config_files()
		parse_stimulus_file(stimulus_file_name)
		parse_channel_file(channel_file_name)
		parse_feature_file(feature_file_name)
		parse_objective_file(objective_file_name)
		parse_parameter_file(parameter_file_name)
	}

	proc parse_central_file(/*Central file name*/)	{local i
		//print "Parsing central file"
//    f.ropen(absname)
  	sprint(absname,"%s/%s",masterdir,$o1.s)
    f.ropen(absname)

		bvec = pf.locate_file_section(absname,0,"String_Parameters")
		pf.read_string_parameter_list(absname,bvec, sp_name_list,sp_value_list)
		bvec = pf.locate_file_section(absname,0,"Numerical_Parameters")
		pf.read_numerical_parameter_list(absname,bvec, np_name_list,np_value_vec)
		f.close
	}

	proc set_secondary_config_files()	{localobj st
		st = get_string_parameter("ConfigPath")
		config_path = new String(st.s)

		st = get_string_parameter("ChannelConfigFile")
		sprint(st.s,"%s/%s", config_path.s,st.s)
		channel_file_name = new String(st.s)
		st = get_string_parameter("StimulusConfigFile")
		sprint(st.s,"%s/%s", config_path.s,st.s)
		stimulus_file_name = new String(st.s)
		st = get_string_parameter("FeatureConfigFile")
		sprint(st.s,"%s/%s", config_path.s,st.s)
		feature_file_name = new String(st.s)
		st = get_string_parameter("ObjectiveConfigFile")
		sprint(st.s,"%s/%s", config_path.s,st.s)
		objective_file_name = new String(st.s)
		st = get_string_parameter("ParameterConfigFile")
		sprint(st.s,"%s/%s", config_path.s,st.s)
		parameter_file_name = new String(st.s)
	}

	proc parse_stimulus_file(/*stimulus_file_name*/)	{local i,j,a localobj cs,cs_list,cs_vec
		nl = new List()
		//print "Parsing stimulus file ", absname
		
//    f.ropen(absname)
  	sprint(absname,"%s/%s",masterdir,$o1.s)
    f.ropen(absname)

		pf.generate_header_list(absname,"Stimulus",nl)
		for i=0, nl.count-1	{
			cs = new ConfigStimulus()
			cs_list = new List()
			cs_vec = new Vector()
			cs.set_name(nl.o(i).s)
			pf.get_string_var(absname,"Stimulus",nl.o(i).s,"Type",parser_string)
			cs.set_type(parser_string)
			a = pf.locate_header(absname,"Stimulus",nl.o(i).s)
			bvec = pf.locate_file_section(absname,a,"Numerical_Parameters")
			pf.read_numerical_parameter_list(absname,bvec, cs_list,cs_vec)
			cs.set_numerical_parameters(cs_list,cs_vec)
			stimulus_object_list.append(cs)
			//print cs.get_numerical_parameter("Amplitude")
		}
		f.close
	}

	proc parse_channel_file(/*Channel file name*/)	{local i,j,a localobj cc,cc_list,cc_vec
		nl = new List()
		//print "Parsing channel file ", absname
//    f.ropen(absname)
  	sprint(absname,"%s/%s",masterdir,$o1.s)
    f.ropen(absname)
		pf.generate_header_list(absname,"Channel",nl)
		for i=0, nl.count-1	{
			cc = new ConfigChannel()
			cc_list = new List()
			cc_vec = new Vector()
			cc.set_name(nl.o(i).s)
			pf.get_string_var(absname,"Channel",nl.o(i).s,"Type",parser_string)
			cc.set_type(parser_string)
			pf.get_string_var(absname,"Channel",nl.o(i).s,"Suffix",parser_string)
			cc.set_suffix(parser_string)
			pf.get_string_var(absname,"Channel",nl.o(i).s,"Section",parser_string)
			cc.set_section(parser_string)
			pf.get_string_var(absname,"Channel",nl.o(i).s,"Distribution",parser_string)
			cc.set_distribution(parser_string)
			a = pf.locate_header(absname,"Channel",nl.o(i).s)
			bvec = pf.locate_file_section(absname,a,"Numerical_Parameters")
			pf.read_numerical_parameter_list(absname,bvec, cc_list,cc_vec)
			cc.set_numerical_parameters(cc_list,cc_vec)
			channel_object_list.append(cc)
			//print cc.get_numerical_parameter("param1")
		}
		f.close
	}

	proc parse_feature_file(/*feature_file_name*/)	{local i,j,a localobj cf,cf_list,cf_vec,cfs_list,cfsv_list
		nl = new List()
		//print "Parsing feature file ", absname
//    f.ropen(absname)
  	sprint(absname,"%s/%s",masterdir,$o1.s)
    f.ropen(absname)
		pf.generate_header_list(absname,"Feature",nl)
		//for i=0, stimulus_object_list.count-1	{print stimulus_object_list.o(i).s}
		for i=0, nl.count-1	{
			cf = new ConfigFeature()
			cf_list = new List()
			cfs_list = new List()
			cfsv_list = new List()
			cf_vec = new Vector()
			cf.set_name(nl.o(i).s)
			pf.get_string_var(absname,"Feature",nl.o(i).s,"Type",parser_string)
			cf.set_type(parser_string)
			pf.get_string_var(absname,"Feature",nl.o(i).s,"Stimulus",parser_string)
			cf.set_stimulus(parser_string)
			a = pf.locate_header(absname,"Feature",nl.o(i).s)
			bvec = pf.locate_file_section(absname,a,"Numerical_Parameters")
			pf.read_numerical_parameter_list(absname,bvec, cf_list,cf_vec)
			cf.set_numerical_parameters(cf_list,cf_vec)
			bvec = pf.locate_file_section(absname,a,"String_Parameters")
			pf.read_string_parameter_list(absname,bvec, cfs_list,cfsv_list)
			cf.set_string_parameters(cfs_list,cfsv_list)
			feature_object_list.append(cf)
			//print cf.get_numerical_parameter("Mean")
			//print cf.get_string_parameter("File").s
		}
		f.close
	}

	proc parse_objective_file(/*objective_file_name*/)	{local i,j,a localobj co,co_list,co_vec,cos_list,cosv_list
		nl = new List()
		//print "Parsing objective file ", absname
//    f.ropen(absname)
  	sprint(absname,"%s/%s",masterdir,$o1.s)
    f.ropen(absname)
		pf.generate_header_list(absname,"Objective",nl)
		for i=0, nl.count-1	{
			co = new ConfigObjective()
			co_list = new List()
			cos_list = new List()
			cosv_list = new List()
			co_vec = new Vector()
			co.set_name(nl.o(i).s)
			pf.get_string_var(absname,"Objective",nl.o(i).s,"Type",parser_string)
			co.set_type(parser_string)
			a = pf.locate_header(absname,"Objective",nl.o(i).s)
			bvec = pf.locate_file_section(absname,a,"Numerical_Parameters")
			pf.read_numerical_parameter_list(absname,bvec, co_list,co_vec)
			co.set_numerical_parameters(co_list,co_vec)
			bvec = pf.locate_file_section(absname,a,"String_Parameters")
			pf.read_string_parameter_list(absname,bvec, cos_list,cosv_list)
			co.set_string_parameters(cos_list,cosv_list)
			objective_object_list.append(co)
			//print co.get_string_parameter("F1").s
		}
		f.close
	}

	proc parse_parameter_file(/*parameter_file_name*/)	{local i,j,a localobj cp,cp_list,cp_vec,cps_list,cpsv_list
		a = 0
		nl = new List()
		//print "Parsing parameter file ", absname
//    f.ropen(absname)
  	sprint(absname,"%s/%s",masterdir,$o1.s)
    f.ropen(absname)
		pf.generate_header_list(absname,"Parameter",nl)
		//for i=0, stimulus_object_list.count-1	{print stimulus_object_list.o(i).s}
		for i=0, nl.count-1	{
			cp = new ConfigParameter()
			cp_list = new List()
			cps_list = new List()
			cpsv_list = new List()
			cp_vec = new Vector()
			cp.set_name(nl.o(i).s)
			pf.get_string_var(absname,"Parameter",nl.o(i).s,"Type",parser_string)
			cp.set_type(parser_string)
			pf.get_string_var(absname,"Parameter",nl.o(i).s,"ParameterName",parser_string)
			cp.set_parameter_name(parser_string)
			a = pf.get_floating_var(absname,"Parameter",nl.o(i).s,"Min")
			cp.set_min(a)
			a = pf.get_floating_var(absname,"Parameter",nl.o(i).s,"Max")
			cp.set_max(a)
			a = pf.locate_header(absname,"Parameter",nl.o(i).s)
			bvec = pf.locate_file_section(absname,a,"Numerical_Parameters")
			pf.read_numerical_parameter_list(absname,bvec, cp_list,cp_vec)
			cp.set_numerical_parameters(cp_list,cp_vec)
			bvec = pf.locate_file_section(absname,a,"String_Parameters")
			pf.read_string_parameter_list(absname,bvec, cps_list,cpsv_list)
			cp.set_string_parameters(cps_list,cpsv_list)
			parameter_object_list.append(cp)
		}
		f.close
		//print "parameter object list size ", parameter_object_list.count()
	}

	obfunc get_pol()	{return parameter_object_list}

	obfunc get_sol()	{return stimulus_object_list}

	proc get_string_parameter_lists()	{$o1 = sp_name_list	$o2= sp_value_list}

	proc get_numerical_parameter_lists()	{$o1 = np_name_list	$o2= np_value_vec}

	obfunc get_string_parameter()	{local i
		if (sp_name_list.count == 0)	{print "No string parameters set"	return new String("")}
		for i=0, sp_name_list.count-1	{
			if (strcmp($s1,sp_name_list.o(i).s)==0)	{return sp_value_list.o(i)}
		}
		print "Parameter ", $s1, " not found"	return new String("")
	}

	func get_numerical_parameter()	{local i
		if (np_name_list.count == 0)	{print "No numerical parameters set"	return -1}
		for i=0, np_name_list.count-1	{
			if (strcmp($s1,np_name_list.o(i).s)==0)	{return np_value_vec.x[i]}
		}
		print "Parameter ", $s1, " not found"	return -1
	}

	func get_objective_num()	{return objective_object_list.count()}
	func get_stimulus_num()	{return stimulus_object_list.count()}

	func get_feature_weight(/*feature name*/)	{local i,j,w
		w = -1
		for i=0, feature_object_list.count-1	{
			if (0 == strcmp(feature_object_list.o(i).get_name.s,$s1))	{
				w = feature_object_list.o(i).get_numerical_parameter("Weight")
			}
		}
		if (w==-1)	{print "WARNING unassigned weight in feature ", $s1}
		return w
	}

	obfunc get_feature_trace(/*feature name*/)	{local i,j,w localobj s
		w = -1
		for i=0, feature_object_list.count-1	{
			if (0 == strcmp(feature_object_list.o(i).get_name.s,$s1))	{
				w = 1
				s = new String(feature_object_list.o(i).get_string_parameter("Trace").s)
				//feature_object_list.o(i).get_string_parameter("Trace").s
			}
		}
		if (w==-1)	{print "WARNING unassigned trace in feature ", $s1	s= new String("")	return s}
		return s
	}

	proc get_stimulus_feature_lists()	{local i,j,c localobj sfnl, sfnls, sftl, sftls
		sfnl = new List()
		sftl = new List()
		for i=0, stimulus_object_list.count-1	{
			sfnls = new List()
			sftls = new List()
			c = 0
			parser_string = stimulus_object_list.o(i).get_name.s
			//print "for stim ", i, "stimulus name is ", stimulus_object_list.o(i).get_name.s
			for j=0, feature_object_list.count-1	{
				//print "in stim ", i, " feature stimulus is now ", feature_object_list.o(j).get_stimulus.s
				if (0 == strcmp(feature_object_list.o(j).get_stimulus.s,parser_string))	{
					//print "MATCH with ", feature_object_list.o(j).get_stimulus.s," and ", stimulus_object_list.o(i).get_name.s
				sfnls.append(feature_object_list.o(j).get_name)
				sftls.append(feature_object_list.o(j).get_type)
				}
			}
			//print "sub list is of length ", sfnls.count
			sfnl.append(sfnls)
			sftl.append(sftls)
		}
		print "full list is of length ", sfnl.count
		$o1 = sfnl
		$o2 = sftl
	}

	proc get_feature_statistics_list()	{local i,j,c localobj fml, fsl, fm, fs
		fml = new List()
		fsl = new List()
		for i=0, stimulus_object_list.count-1	{
			fm = new Vector()
			fs = new Vector()
			c = 0
			parser_string = stimulus_object_list.o(i).get_name.s
			//print "for stim ", i, "stimulus name is ", stimulus_object_list.o(i).get_name.s
			for j=0, feature_object_list.count-1	{
				//print "in stim ", i, " feature stimulus is now ", feature_object_list.o(j).get_stimulus.s

				if (0 == strcmp(feature_object_list.o(j).get_stimulus.s,parser_string))	{
					//print "MATCH with ", feature_object_list.o(j).get_stimulus.s," and ", stimulus_object_list.o(i).get_name.s
				fm.append(feature_object_list.o(j).get_numerical_parameter("Mean"))
				fs.append(feature_object_list.o(j).get_numerical_parameter("Std"))
				}
			}
			fml.append(fm.c)
			fsl.append(fs.c)
		}
		$o1 = fml
		$o2 = fsl
	}

	obfunc get_objective_string_parameter_list()	{return objective_object_list.o($1).get_string_parameter_value_list}
	obfunc get_parameter_object_list()	{return parameter_object_list}

	obfunc get_insertion_list()	{local i localobj il, st
		il = new List()
		st = new String()
		for i=0, channel_object_list.count-1 	{
			sprint(st.s,"forsec \"%s\" insert %s",channel_object_list.o(i).get_section.s,channel_object_list.o(i).get_type.s)
			//print "insert command is ", st.s
			il.append(new String(st.s))
		}
		return il
	}

	func get_run_parameter_num()	{return parameter_object_list.count()}

	obfunc get_parameter_bound_list()	{local i localobj pbl,pv
		pbl = new List()
		for i=0, parameter_object_list.count-1	{
			pv = new Vector(2)
			pv.x[0] = parameter_object_list.o(i).get_min()
			pv.x[1] = parameter_object_list.o(i).get_max()
			pbl.append(pv.c)
		}
		return pbl
	}

	obfunc get_channel_distribution_parameter_list()	{local i localobj dpl,dpv, dts
		dpl = new List()
		for i=0, channel_object_list.count-1	{
			dpv = new Vector(4)
			dts = channel_object_list.o(i).get_distribution()
			if (strcmp(dts.s,"linear")==0)	{
				dpv.x[0] = channel_object_list.o(i).get_numerical_parameter("param1")
				dpv.x[1] = channel_object_list.o(i).get_numerical_parameter("param2")
			}
			if (strcmp(dts.s,"sigmoid")==0)	{
				dpv.x[0] = channel_object_list.o(i).get_numerical_parameter("param1")
				dpv.x[1] = channel_object_list.o(i).get_numerical_parameter("param2")
				dpv.x[2] = channel_object_list.o(i).get_numerical_parameter("param3")
				dpv.x[3] = channel_object_list.o(i).get_numerical_parameter("param4")
			}
			if (strcmp(dts.s,"exponential")==0)	{
				dpv.x[0] = channel_object_list.o(i).get_numerical_parameter("param1")
				dpv.x[1] = channel_object_list.o(i).get_numerical_parameter("param2")
				dpv.x[2] = channel_object_list.o(i).get_numerical_parameter("param3")
				dpv.x[3] = channel_object_list.o(i).get_numerical_parameter("param4")
			}
			if (strcmp(dts.s,"abstep")==0)	{
				dpv.x[0] = channel_object_list.o(i).get_numerical_parameter("param1")
				dpv.x[1] = channel_object_list.o(i).get_numerical_parameter("param2")
				dpv.x[2] = channel_object_list.o(i).get_numerical_parameter("param3")
				dpv.x[3] = channel_object_list.o(i).get_numerical_parameter("param4")
			}
			dpl.append(dpv.c)
		}
		return dpl
	}

	obfunc get_channel_distribution_type_vector()	{local i localobj dtv, dts
		dtv = new Vector(channel_object_list.count)
		for i=0, channel_object_list.count-1	{
			dts = channel_object_list.o(i).get_distribution()
			if (strcmp(dts.s,"linear")==0)	{dtv.x[i] = 0}
			if (strcmp(dts.s,"sigmoid")==0)	{dtv.x[i] = 1}
			if (strcmp(dts.s,"exponential")==0)	{dtv.x[i] = 2}
			if (strcmp(dts.s,"abstep")==0)	{dtv.x[i] = 3}
		}
		return dtv.c
	}

	obfunc get_variable_to_channel_vector()	{local i,j localobj vtcv,suft,sect
		vtcv = new Vector(parameter_object_list.count)
		for i=0, parameter_object_list.count-1	{
			suft =  get_pol().o(i).get_string_parameter("ChannelSuffix")
			sect = get_pol().o(i).get_string_parameter("CellSection")
			for j=0, channel_object_list.count-1	{
				if (strcmp(suft.s,channel_object_list.o(j).get_suffix().s)==0 && strcmp(sect.s,channel_object_list.o(j).get_section().s)==0)	{vtcv.x[i] = j}
			}
		}
		return vtcv
	}

endtemplate MOEAConfig
