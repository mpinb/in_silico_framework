/*******************************************
*Template to output a model file given lists
*of variables and values.
*Originally intended for use with GA.
*
*Shaul Druckmann October 2006
*
*Modified by: Etay Hay, Hebrew University of Jerusalem, 2011
********************************************/

begintemplate Model_output
	
	objref file_ref,empty_file
	objref variable_name_list, variable_subset_list, distribution_vector_list, insertion_list
	objref variable_parameter_list, variable_suffix_list
	objref variable_vector, parameter_vector, distribution_vector
	objref variable_to_channel_vector, distribution_type_vector
	
	strdef output_directory,output_file,output_string
	strdef var_name, var_subset
	strdef s_1,s_2,run_string,empty_file_name
	public create_model_file
	
	proc init()	{
		output_directory = $s1
		output_file = $s2
		variable_suffix_list = $o3
		variable_subset_list = $o4
		variable_parameter_list = $o5
		distribution_vector_list = $o6
		insertion_list = $o7
		distribution_type_vector = $o8
		
		variable_number = variable_suffix_list.count()
		
		sprint(s_1,"%s/%s",output_directory,output_file)
		print s_1
		file_ref = new File(s_1)
		empty_file = new File("empty_template.hoc")
		empty_file_name = "empty_template.hoc"
	}
	
	proc create_model_file()	{
		print_file($o1,$o2)
		//file_ref = new File(empty_file_name)
		//print_to_template_file($o1,$o2)
	}
	
	proc print_file()	{
		variable_vector = $o1
		variable_to_channel_vector = $o2
		
		file_ref.wopen()
		sprint(s_1,"proc biophys() { \n")
		file_ref.printf(s_1)
		print_insertion_list()
		print_variables()
		sprint(s_1,"} \n")
		file_ref.printf(s_1)
		file_ref.close()
	}
	
	proc print_to_template_file()	{
		variable_vector = $o1
		variable_to_channel_vector = $o2
		
		file_ref.ropen()
		while(file_ref.gets(s_1) >= 0)	{
        		sscanf(s_1, "%s",s_2)
			if(0 == strcmp(s_2, "begintemplate"))	{
				sscanf(s_1, "%*s%s",s_2)
			}
		}
		file_ref.close()
		
		file_ref.aopen()
		sprint(s_1,"proc biophys() { \n")
		file_ref.printf(s_1)
		print_insertion_list()
		print_variables()
		sprint(s_1,"} \n")
		file_ref.printf(s_1)
		sprint(s_1," \n endtemplate %s \n",s_2)
		file_ref.close()
	}
	
	
	proc print_insertion_list()	{local i
		file_ref.printf("\n")
		for (i=0;i<insertion_list.count();i=i+1)	{
			sprint(s_1,"\t %s \n", insertion_list.o(i).s)
			file_ref.printf(s_1)
		}
		file_ref.printf("\n")
	}
	
	proc print_variables()	{local i,base_value,distribution_type,cross
		for (i=0;i<variable_number;i=i+1)	{
			base_value = variable_vector.x(i)
			cross = variable_to_channel_vector.x[i]
			sprint(var_name,"%s_%s",variable_parameter_list.o(i).s, variable_suffix_list.o(i).s)
			var_subset = variable_subset_list.o(i).s
			distribution_vector = distribution_vector_list.o(cross)
			distribution_type = distribution_type_vector.x[cross]
			
			sprint(run_string,"\t spread_distribution(%s,%s,%f,%d,%f,%f,%f,%f) \n", var_subset, var_name, base_value, distribution_type, distribution_vector.x[0], distribution_vector.x[1], distribution_vector.x[2], distribution_vector.x[3])
			
			file_ref.printf(run_string)
		}
		//distribution_calc("dend","Ra",1,0,1,1,0.1,0.1,0.1)
		print "variables printed"
	}
	
endtemplate Model_output