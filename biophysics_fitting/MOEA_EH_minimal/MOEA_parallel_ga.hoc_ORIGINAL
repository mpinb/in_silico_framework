/*******************************************************
*Implementation of genetic algorithm in NEURON
*Author: Shaul Druckmann, Hebrew U, May 2006
*Major Revision: Shaul Druckmann, Hebrew U, October 2007
*
*Modified by: Etay Hay, Hebrew University of Jerusalem, 2011
*******************************************************/
load_file("nrngui.hoc")

strdef central_file_name
central_file_name = "fit_config.hoc"

strdef dir, fdir, sobj

dir = "."

proc l_f()	{
	sprint(fdir, "load_file(\"%s/%s\")",dir,$s1)
	execute(fdir)
}

//l_f("MOEA_reader.hoc")
l_f("MOEA_config_central_object.hoc")


// NEW CONFIGURATION FILES
objref mc
mc = new MOEAConfig(central_file_name,dir)
mc.config_run()

proc set_config_parameters()	{local i localobj spnl, spvl, npnl,npvv
	mc.get_string_parameter_lists(spnl,spvl)
	for i=0, spnl.count-1	{
		sprint(sobj, "strdef %s", spnl.o(i).s)
		execute(sobj)
		sprint(sobj, "%s = \"%s\"", spnl.o(i).s, spvl.o(i).s)
		execute(sobj)
	}

	mc.get_numerical_parameter_lists(npnl,npvv)
	for i=0, npnl.count-1	{
		sprint(sobj, "%s = %f", npnl.o(i).s, npvv.x[i])
		execute(sobj)
	}

	objective_num = mc.get_objective_num()
	stim_num = mc.get_stimulus_num()
	gene_num = mc.get_pol.count()
	genome_size = gene_num //Used to be able to use binary GA need to revive that
	/*p_cross = mc.get_numerical_parameter("PCross")
	max_generation = mc.get_numerical_parameter("MaxGeneration")
	regen_frac = mc.get_numerical_parameter("RegenerationFraction")*/
}

set_config_parameters()
// NEW COFIGURATION FILES
l_f("MOEA_creator.hoc")
l_f("MOEA_organism.hoc")
l_f("MOEA_genome.hoc")
l_f("MOEA_distance_calculator.hoc")
l_f("MOEA_evaluator.hoc")
l_f("MOEA_sorter.hoc")
l_f("MOEA_population.hoc")
l_f("MOEA_reporter.hoc")
l_f("Trajectory_density_calculator.hoc")


objref genome
objref organism[PopulationSize]
objref population
objref evaluator
objref oe
objref reporter
objref pc
objref pass_genome_vector,take_vec
objref calculator
objref out_put
objref exp_trace_list
objref fl, fn, ff
objref ps
objref tdc
objref feature_name_list, feature_trace_list

take_vec = new Vector(2)
pc = new ParallelContext()

feature_trace_list = new List()

tstop = 3000
dt = 0.025
exp_dt = 0.25
save_trace = 0
use_density = 0
//print "Creating cell"
CreateNeuron(cell,"GAcell")

//HACK for setting up trajectory density calculation

proc density_calculation_setup()	{local i localobj so,sfnl,sftl
	so = new StringFunctions()
	tdc = new TrajectoryDensityCalculator()
	mc.get_stimulus_feature_lists(sfnl, sftl)
	for i=0, sfnl.count-1	{
		for j=0, sfnl.o(i).count-1	{
			if (so.substr(sfnl.o(i).o(j).s,"TD") != -1)	{
				//print "in stim ", i ," feature ", j, " is ", sfnl.o(i).o(j).s
				feature_trace_list.append(mc.get_feature_trace(sfnl.o(i).o(j).s))
				use_density = 1
			}
		}
	}
	tdc.generate_target_list(feature_trace_list)
	tdc.setup_density_calculation(650,0.1,3000)
}

proc load_target_trace()	{}

/*proc density_calculation_setup_hack()	{
	feature_name_list
	for i=0, feature_name_list.count-1  {
		if (strcmp(feature_name_list.o(i).s,"trajectory_density") == 0)    {
			use_density = 1
			tdc = new TrajectoryDensityCalculator()
			for j=0, stimulus_repetition_vector.x[0]	{
				sprint(str_1,"%s/target_file_%d.txt",feature_path_list.o(i).s,i+1)
				feature_trace_list.append(new String(str_1))
			}
			tdc.generate_target_list(feature_trace_list)
			for j=0, 	stimulus_type_list.count-1{
				if (strcmp(stimulus_type_list.o(i).s,"Ramp") == 0)	{tdc.setup_density_calculation(0,0.1,1040)}
				if (strcmp(stimulus_type_list.o(i).s,"SquarePulse") == 0)	{tdc.setup_density_calculation(650,0.25,3000)}
			}

		}
	}
}*/

density_calculation_setup()

calculator = new DistanceCalculator(mc,dir,TargetTracePath,tdc)

evaluator = new OrganismEvaluator(calculator,cell,mc,pc)
evaluator.autoref(evaluator)

ps = new ParetoSorter(pc)
ps.autoref(ps)

proc init_ga()	{local i
	reporter = new Reporter(mc,dir)
	genome = new Genome(mc,1,dir)
	//genome.set_genome()
 	population = new Population(dir,RecordPath,genome.genome_mat,pc, evaluator, calculator,mc)

	for (i=0;i<PopulationSize;i=i+1)	{
		organism[i] = new Organism(gene_num,genome_size,BaseSeed + i,PMutate, objective_num)
		organism[i].create_random(genome.genome_mat)
		population.append_org(organism[i])
	}
	//print "population file is ", PopulationFile
	if (strcmp(PopulationFile,"random") != 0) {population.load_population_from_file(PopulationFile)}

	//evaluator.set_pop(population)
}

g = 0

pc.runworker()
c = pc.time
run_start_time = pc.time
init_ga()

print "Commencing run"

evaluator.evaluate_population(population.get_org_list())
population.update_parent_selection()

fn = new Vector(PopulationSize)
for (generation=StartGeneration;generation<MaxGeneration;generation=generation+1)	{
	if (pc.id ==0) {generation_start_time = pc.time}

	if (generation != (MaxGeneration-1))	{
		a = pc.time
		evaluator.evaluate_population(population.get_org_list())
		print "Organism calculation in generation ", generation, "took ", pc.time-a

		a = pc.time

		population.update_matrices()
		population.set_full_elite(population.joint_fitness_matrix,population.joint_genome_matrix)

		fl = ps.nested_parallel_set_fronts(population.joint_fitness_matrix,stim_num)
		ff = population.front_combine_joint_population(fl)

		population.assign_population(ff,generation)
		population.update_parent_selection()

		if (int(generation/AppendStep) == (generation/AppendStep) && generation != 0)	{
			reporter.create_population_error_file(population.org_list,generation,0)
			reporter.create_population_genome_file(population.org_list,generation,0)
			//reporter.create_population_error_file(population.org_list,generation,1)
			//reporter.create_population_genome_file(population.org_list,generation,1)
			reporter.create_clean_files(population.org_list)
		}

		population.replicate_population(generation,fn)

		if (pc.id ==0) {
			gen_time = (pc.time() - generation_start_time)
			print "generation ran for  ", gen_time
		}
		printf("\n")
	}
}

a = pc.time - run_start_time
print "run took ", (pc.time - run_start_time) ," seconds"
//collect_work_time(a)

pc.done()
quit()
