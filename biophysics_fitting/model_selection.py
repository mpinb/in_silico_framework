# In Silico Framework
# Copyright (C) 2025  Max Planck Institute for Neurobiology of Behavior - CAESAR

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# The full license text is also available in the LICENSE file in the root of this repository.
"""Convenience methods to fetch biophysical models from a :py:class:`~data_base.data_base.DataBase`

Biophysical models generated by the optimizer or explorer follow a specific structure in the database. 
This module provides methods to fetch models from the database, and to select the best models based on the evaluation results.
"""

import pandas as pd
from collections import defaultdict
from .hay.evaluation import objectives_BAC, objectives_step
from data_base.utils import convertible_to_int


def get_model_pdf_from_db(db):
    """Get a DataFrame with all models from the database.
    
    Args:
        db (:py:class:`~data_base.data_base.DataBase`): The database containing the models.
        
    Returns:
        tuple: the biophysical models as a dictionary, mapping the model index to a DataFrame, and the models as a single DataFrame.
    """
    def augment_pdf(pdf, i, j):
        pdf['model_id'] = '_'.join([db.get_id(), str(i), str(j)])
        pdf['model_id'] = pdf['model_id'] + '_' + pd.Series(
            pdf.index).astype('str')
        return pdf.set_index('model_id')

    out = defaultdict(lambda: [])
    indices = [
        int(x) for x in list(db.keys()) if convertible_to_int(x)
    ]
    for i in indices:
        if not str(i) in list(db.keys()):
            continue
        max_j = max([
            int(x)
            for x in list(db[str(i)].keys())
            if convertible_to_int(x)
        ])
        if max_j == 0:  # all databases contain key '0', which is however empty. If that is the only key: skip
            continue
        for j in range(1, max_j + 1):
            out[i].append(augment_pdf(db[str(i)][str(j)], i, j))
        out[i] = pd.concat(out[i])
    return out, pd.concat(list(out.values()))


def get_pdf_selected(
    pdf,
    BAC_limit=3.5,
    step_limit=4.5,
    objectives_BAC=objectives_BAC,
    objectives_step=objectives_step
    ):
    """Select models based on cutoffs from a DataFrame.
    
    Filters the dataframe such that all models are within 
    desired range of the objective, and sorts it by its
    deviation from the empirical mean.
    See :py:mod:`~biophysics_fitting.evaluator.Evaluator` for more information
    on evaluation voltage traces.
    
    Args:
        pdf (pd.DataFrame): A DataFrame with model evaluations.
        BAC_limit (float): The cutoff for the BAC.
        step_limit (float): The cutoff for the step.
        objectives_BAC (list): The objectives for the BAC.
        objectives_step (list): The objectives for the step.
        
    Returns:
        A filtered DataFrame and the model_id of the best model.
    """
    objectives = objectives_BAC + objectives_step
    pdf['sort_column'] = pdf[objectives].max(axis=1)
    p = pdf[(pdf[objectives_step].max(axis=1) < step_limit) &
            (pdf[objectives_BAC].max(
                axis=1) < BAC_limit)].sort_values('sort_column').head()
    return p, str(p.index[0])
